[
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the navigation of a robot by periodically replanning its global path at a frequency of 1 Hz. It utilizes a pipeline sequence, where it first computes a path to a specified goal using a \"GridBased\" planner and then follows this computed path using a designated controller. This approach ensures that the robot continuously updates its path to adapt to dynamic environments or changing conditions, enabling it to navigate effectively towards its goal while avoiding obstacles or other potential disruptions.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </RateController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robot's navigation with continuous replanning of the global path. It uses a pipeline sequence that consists of two steps. First, it employs a distance controller to compute a new path to the goal pose using the \"GridBased\" planner whenever the robot has traveled 1 meter. Once the new path is computed, the robot follows this path using a specified controller. This approach ensures that the robot continuously updates its path to adapt to any changes in the environment or to optimize its trajectory.",
        "output": "<!--\n  This Behavior Tree replans the global path after every 1m.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <DistanceController distance=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </DistanceController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is a simple sequential task for a robot. It first instructs the robot to move to a specific point (Go_point) and then to interact with a particular object (Go_object). The robot will execute these tasks in sequence, moving to the specified destination before interacting with the designated object.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <Go_point   name=\"Go_point\" goal=\"{destination}\"/>\n           <Go_object   name=\"Go_object\" target=\"{object}\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's task. It begins by moving to a specific point (Go_point) and then proceeds to turn and move towards an object (Go_object). The SequenceStar node ensures that the sequence continues to loop, allowing the robot to repeatedly move to different points and objects as required. This behavior tree is designed to enable the robot to navigate to various destinations and interact with different objects in a continuous loop.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n      <SequenceStar name=\"root_sequence\">\n        <Go_point   name=\"Go_point\" goal=\"{destination}\"/>\n        <Sequence name=\"root_sequence\">\n          <Turn   name=\"Turn\"/>\n          <Go_object   name=\"Go_object\" target=\"{object}\"/>\n        </Sequence>\n      </SequenceStar>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's navigation system. It first computes a path using the global planner (ComputePathToPose) and then runs two sub-branches in parallel. The first sub-branch involves following the computed path using the local planner, while the second sub-branch controls the rate at which new paths are computed by the global planner.\n\nThe goal for the global planner and the resulting path are stored on the blackboard. The rate at which the ComputePathToPose operation is invoked can be controlled with the hz parameter to the RateController node.\n\nIf the FollowPath operation returns SUCCESS or FAILURE, the parallel node will return this result due to the threshold of 1 set for the Parallel node.\n\nOverall, the behavior tree orchestrates the navigation of the robot by computing paths, controlling their execution rates, and ensuring the robot follows the computed paths using the local planner.",
        "output": "<!--\n  This Behavior Tree first computes a path using the global planner (ComputePathToPose).\n  Then, it runs two sub-branches in parallel. The first sub-branch is a FollowPath\n  operation (the local planner). In parallel, there is a rate controlled execution of\n  FollowPath (the global planner). Each time a new path is computed, the path update\n  is sent to the local planner. The right branch, which is the rate controlled\n  ComputePathToPose, always returns RUNNING. Because the Parallel node uses a\n  threshold of 1, whenever the FollowPath returns SUCCESS or FAILURE, the parallel\n  node will return this result.\n\n  The goal (input to the global planner) and the resulting path (output of the global\n  planner and input to the local planner) are passed on the blackboard.\n\n  The rate at which the ComputePathToPose operation is invoked can be controlled with\n  the hz parameter to the RateController node.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"root\">\n      <RateController hz=\"1.0\">\n        <Fallback>\n          <GoalReached/>\n          <ComputePathToPose goal=\"${goal}\"/>\n        </Fallback>\n      </RateController>\n      <FollowPath path=\"${path}\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for a robot. The robot is programmed to perform a series of tasks based on certain conditions and actions. \n\nInitially, it will attempt to follow a sequence of actions. If the room is known, it will check if the robot is in the room. If so, it will go to the room; otherwise, it will follow a human. If the room is not known, it will move on to another sequence of actions. Here, it will first check if a bottle is found. If found, it will try to grasp it. If the bottle is already grasped, it will proceed to compute the inverse pose and validate it. Based on the validation, it will either keep its arms ready for grasping or locate the bottle and then grasp it. If the inverse pose cannot be computed, it will set it as invalid and continue running. If none of these conditions are met, it will ask for help.\n\nIn summary, the behavior tree outlines the",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!--------------------------------------->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Root>\n            <Fallback name=\"FB1\">\n                <Sequence name=\"S1\">\n                    <Fallback name=\"FB2\">\n                        <Sequence name=\"S7\">\n                            <Condition ID=\"Room_known\"/>\n                            <Fallback name=\"FB10\">\n                                <Condition ID=\"Robot_in_room\"/>\n                                <Action ID=\"Go_to_room\"/>\n                            </Fallback>\n                        </Sequence>\n                        <Action ID=\"FollowHuman\"/>\n                    </Fallback>\n                    <Sequence name=\"S2\">\n                        <Fallback name=\"FB3\">\n                            <Condition ID=\"Bottle_found\"/>\n                            <Action ID=\"Find_bottle\"/>\n                        </Fallback>\n                        <Fallback name=\"FB4\">\n                            <Condition ID=\"Bottle_grasped\"/>\n                            <Fallback name=\"FB5\">\n                                <Sequence name=\"S3\">\n                                    <Fallback name=\"FB7\">\n                                        <Sequence name=\"S6\">\n                                            <Condition ID=\"Inv_pose_computed\"/>\n                                            <Condition ID=\"Inv_pose_valid\"/>\n                                        </Sequence>\n                                        <Action ID=\"Compute_inv_pose\"/>\n                                    </Fallback>\n                                    <Sequence name=\"S4\">\n                                        <Fallback name=\"FB8\">\n                                            <Condition ID=\"Robot_at_inv_pose\"/>\n                                            <Sequence name=\"S8\">\n                                                <Action ID=\"Keep_arms_for_grasp\"/>\n                                                <Action ID=\"Go_to_inv_pose\"/>\n                                            </Sequence>\n                                        </Fallback>\n                                        <Sequence name=\"S5\">\n                                            <Fallback name=\"FB9\">\n                                                <Condition ID=\"Bottle_located\"/>\n                                                <Action ID=\"Locate_bottle\"/>\n                                            </Fallback>\n                                            <Action ID=\"Grasp_bottle\"/>\n                                        </Sequence>\n                                    </Sequence>\n                                </Sequence>\n                                <Fallback name=\"FB6\">\n                                    <Action ID=\"Set_inv_pose_not_valid\"/>\n                                    <Action ID=\"Keep_running\"/>\n                                </Fallback>\n                            </Fallback>\n                        </Fallback>\n                    </Sequence>\n                </Sequence>\n                <Action ID=\"Ask_for_help\"/>\n            </Fallback>\n        </Root>\n    </BehaviorTree>\n    <!--------------------------------------->\n    <TreeNodesModel>\n        <Action ID=\"Ask_for_help\"/>\n        <Condition ID=\"Bottle_found\"/>\n        <Condition ID=\"Bottle_grasped\"/>\n        <Condition ID=\"Bottle_located\"/>\n        <Action ID=\"Compute_inv_pose\"/>\n        <Action ID=\"Find_bottle\"/>\n        <Action ID=\"FollowHuman\"/>\n        <Action ID=\"Go_to_inv_pose\"/>\n        <Action ID=\"Go_to_room\"/>\n        <Action ID=\"Grasp_bottle\"/>\n        <Condition ID=\"Inv_pose_computed\"/>\n        <Condition ID=\"Inv_pose_valid\"/>\n        <Action ID=\"Keep_arms_for_grasp\"/>\n        <Action ID=\"Keep_running\"/>\n        <Action ID=\"Locate_bottle\"/>\n        <Condition ID=\"Robot_at_inv_pose\"/>\n        <Condition ID=\"Robot_in_room\"/>\n        <Condition ID=\"Room_known\"/>\n        <Action ID=\"Set_inv_pose_not_valid\"/>\n    </TreeNodesModel>\n    <!--------------------------------------->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's task to assist in serving a drink. The robot is programmed to perform a series of actions based on certain conditions. \n\nInitially, it will attempt to go to a known room. If the room is known, it will proceed to go to the room; otherwise, it will follow a human. Once in the room, it will find a bottle and fetch it. Subsequently, it will find a glass, fetch it, and then pour a drink into the glass.\n\nIf at any point the robot encounters difficulty or is unable to complete a task, it will ask for help. This behavior tree outlines the sequential steps the robot should take to accomplish its assigned task efficiently.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!--------------------------------------->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Root>\n            <Fallback name=\"FB1\">\n                <Sequence name=\"S1\">\n                    <Fallback name=\"FB2\">\n                        <Sequence name=\"S6\">\n                            <Condition ID=\"Room_known\"/>\n                            <Action ID=\"Go_to_room\"/>\n                        </Sequence>\n                        <Action ID=\"Follow_human\"/>\n                    </Fallback>\n                    <Sequence name=\"S2\">\n                        <Action ID=\"Find_bottle\"/>\n                        <Sequence name=\"S3\">\n                            <Action ID=\"Fetch_bottle\"/>\n                            <Sequence name=\"S4\">\n                                <Action ID=\"Find_glass\"/>\n                                <Sequence name=\"S5\">\n                                    <Action ID=\"Fetch_glass\"/>\n                                    <Action ID=\"Pour_drink\"/>\n                                </Sequence>\n                            </Sequence>\n                        </Sequence>\n                    </Sequence>\n                </Sequence>\n                <Action ID=\"Ask_for_help\"/>\n            </Fallback>\n        </Root>\n    </BehaviorTree>\n    <!--------------------------------------->\n    <TreeNodesModel>\n        <Action ID=\"Ask_for_help\"/>\n        <Action ID=\"Fetch_bottle\"/>\n        <Action ID=\"Fetch_glass\"/>\n        <Action ID=\"Find_bottle\"/>\n        <Action ID=\"Find_glass\"/>\n        <Action ID=\"Follow_human\"/>\n        <Action ID=\"Go_to_kitchen\"/>\n        <Action ID=\"Go_to_room\"/>\n        <Action ID=\"Pour_drink\"/>\n        <Condition ID=\"Room_known\"/>\n    </TreeNodesModel>\n    <!--------------------------------------->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a sequence of actions for an AI agent. The agent is programmed to perform the following tasks in a reactive sequence: \n1. Check if it is holding an object at a specific location and state.\n2. Move to a particular location with specified coordinates and orientation.\n3. Place an object at a designated location and state.\n\nThis sequence indicates that the AI agent is designed to carry out a series of actions based on its current state and environment. It first checks if it is holding an object, then moves to a specific location, and finally places an object at another location. This behavior tree outlines the decision-making process and actions for the AI agent based on its perception and goals.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n            <ReactiveSequence name=\"root\">\n                    <AIP_isHolding      goal=\"0; 0; 1.3; 0.3; 0; 0; 0; 0; 1; 1;\"/> <!-- State value; state index; x_obj_loc; y_obj_loc; object index -->\n                    <AIP_isAt           goal=\"0; 2; 0.3; -1.3; 0.0; 0.0; 0.0; -0.707; 0.707\"/> <!-- State value; state index; x, y, z, quaternion xyzw -->\n                    <AIP_isPlacedAt     goal=\"0; 4; 0.3; -1.3; 0; 0; 0; -0.707; 0.707; 1;\"/> <!-- State value; state index; x_obj_loc; y_obj_loc; object index -->\n            </ReactiveSequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic system that continuously repeats a sequence to pursue goals. Within this sequence, it first attempts to pick up an item if it sees one (condition: SeeItem), and if it fails to find an item, it proceeds to place the item it is holding (condition: HoldingItem). This process continues indefinitely due to the num_cycles=\"-1\" attribute in the Repeat node.\n\nAdditionally, there's an initialization behavior tree (Init) which simply prints \"Initialize\" when executed. The tree also includes various actions and conditions such as AlwaysRunning, GetItemPose, Trigger, and Print with specific functionalities.\n\nIn summary, the overall task of the behavior tree is to create a loop where the robot repeatedly attempts to pick up items it sees, and if unsuccessful, it places the item it is holding. It also includes an initialization step to print a message at the start.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"-1\">\n            <Sequence name=\"Pursue Goals\">\n                <Fallback name=\"No Item to pick\">\n                    <Inverter name=\"Not\">\n                        <Condition ID=\"SeeItem\" name=\"See an Item\"/>\n                    </Inverter>\n                    <Action ID=\"Pick\" name=\"Pick it up\"/>\n                </Fallback>\n                <Fallback name=\"No Item in gripper\">\n                    <Inverter name=\"Not\">\n                        <Condition ID=\"HoldingItem\" name=\"Holding an Item\"/>\n                    </Inverter>\n                    <Action ID=\"Place\" name=\"Place it\"/>\n                </Fallback>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Init\">\n        <Action ID=\"Print\" message=\"Initialize\"/>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AlwaysRunning\"/>\n        <Action ID=\"GetItemPose\"/>\n        <Condition ID=\"HoldingItem\"/>\n        <SubTree ID=\"Init\"/>\n        <Action ID=\"Pick\"/>\n        <Action ID=\"Place\"/>\n        <Action ID=\"Print\">\n            <input_port name=\"message\"/>\n        </Action>\n        <Condition ID=\"SeeItem\"/>\n        <Action ID=\"Trigger\">\n            <input_port name=\"service_name\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a sequence of actions: \"go1\", \"AlwaysFailure\", and \"go2\". The \"AlwaysFailure\" action always fails, which means the subsequent action \"go2\" will never be executed. Therefore, the overall task described by this behavior tree is to execute \"go1\" and then terminate without executing \"go2\". Additionally, there are three available actions in the model: \"go1\", \"go2\", and \"go3\", but only \"go1\" and \"go2\" are utilized in the behavior tree.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"go1\"/>\n            <AlwaysFailure/>\n            <Action ID=\"go2\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a sequence of actions: \"go1\", followed by an \"AlwaysSuccess\" node, and then \"go2\". The \"AlwaysSuccess\" node always returns a success status. This means that the robot will first perform \"go1\", then proceed to \"go2\" regardless of the outcome of the previous action. Additionally, there are three available actions: \"go1\", \"go2\", and \"go3\" in the TreeNodesModel, but only \"go1\" and \"go2\" are utilized in the main BehaviorTree.\n\nIn summary, the robot is programmed to execute a sequence of predefined actions (\"go1\" and \"go2\") with no consideration for the success or failure of each individual action.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"go1\"/>\n            <AlwaysSuccess/>\n            <Action ID=\"go2\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for an AI agent. The agent is initially directed to perform \"go1\" and \"go2\" in sequence. If either of these actions fails, the agent will attempt to execute \"go3\", \"go4\", and \"go5\" in a fallback manner. If successful, it will then proceed to execute \"go6\" followed by \"go7\". \n\nIn summary, the AI agent is tasked with performing a series of predefined actions in a specific order, with fallback options if any action fails. This behavior tree provides a structured approach for the agent's decision-making process and task execution.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"go1\"/>\n            <Action ID=\"go2\"/>\n            <Fallback>\n                <Action ID=\"go3\"/>\n                <Action ID=\"go4\"/>\n                <Action ID=\"go5\"/>\n                <Sequence>\n                    <Action ID=\"go6\"/>\n                    <Action ID=\"go7\"/>\n                </Sequence>\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"alwaysTrue\"/>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"go4\"/>\n        <Action ID=\"go5\"/>\n        <Action ID=\"go6\"/>\n        <Action ID=\"go7\"/>\n        <Action ID=\"goClosestR\"/>\n        <Action ID=\"guardAiMovement\"/>\n        <Action ID=\"isFull\"/>\n        <Action ID=\"mineResource\"/>\n        <Action ID=\"waitFrames\">\n            <input_port name=\"_in_0\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's navigation by periodically replanning its global path at 1 Hz. It uses a pipeline sequence to ensure the execution of two tasks in succession. First, it employs a rate controller to compute the path to a specified goal using a \"GridBased\" planner. Once the path is computed, the robot follows this path using a specified path-following controller. This approach ensures that the robot continuously updates its path based on changing environmental conditions or new obstacles, enabling it to navigate effectively in dynamic environments.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </RateController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for a robot to place an object. The robot first retrieves the pose of the object and then determines where to place it. After that, it moves towards the determined location and finally places the object at that position. The process assumes that the object is already in the robot's arm and the destination for placing the object is known.\n\nOverall, the behavior tree orchestrates the steps required for the robot to carry out the task of placing an object, including obtaining the object's pose, determining the placement location, moving to that location, and executing the placement action.",
        "output": "<!-- \n    Prerrequisitos\n    - el objeto está en el brazo\n    - sabemos donde va el objeto\n    va a clean up\n -->\n\n\n<root main_tree_to_execute = \"MainTree\" >\n   <BehaviorTree ID=\"MainTree\">\n      <Sequence name=\"place\">\n        <GetPickObject  name=\"get_pose_from_object\" object_id=\"{object_id}\"/> <!-- TODO: leer grafo y averiguar objeto con su tipo-->\n        <GetPlacingPose  name=\"get_placing_pose\" object=\"{object_id}\" ob_pose=\"{pose}\"/> <!-- TODO: lee el world model y decide donde va el objeto -->\n        <!--<ApproachObject name=\"approach_object\" object_pose=\"{pose}\"/-->\n        <Move name=\"move\" goal=\"{pose}\"/>\n        <PlaceSimple  name=\"place\" goal=\"{pose}\"/>  <!-- from gb_manipulation -->\n      </Sequence>\n   </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a decision-making process for a robot navigating through doors and windows. The \"MainTree\" first checks if the door is open; if it is, the robot passes through the door. If the door is closed, it attempts to open the door up to 4 times before passing through it and then closing the door behind. If the door remains closed after 4 attempts, the robot will pass through a window instead.\n\nIn summary, the behavior tree orchestrates the robot's actions based on the state of the door: if open, it passes through; if closed, it tries to open it, then passes through, and finally closes it. If unsuccessful in opening the door, it resorts to passing through a window.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"DoorClosed\">\n        <Sequence name=\"door_closed_sequence\">\n            <Inverter>\n                <Condition ID=\"IsDoorOpen\"/>\n            </Inverter>\n            <RetryUntilSuccesful num_attempts=\"4\">\n                <Action ID=\"OpenDoor\"/>\n            </RetryUntilSuccesful>\n            <Action ID=\"PassThroughDoor\"/>\n            <Action ID=\"CloseDoor\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback name=\"root_Fallback\">\n            <Sequence name=\"door_open_sequence\">\n                <Condition ID=\"IsDoorOpen\"/>\n                <Action ID=\"PassThroughDoor\"/>\n            </Sequence>\n            <SubTree ID=\"DoorClosed\"/>\n            <Action ID=\"PassThroughWindow\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CloseDoor\"/>\n        <SubTree ID=\"DoorClosed\"/>\n        <Condition ID=\"IsDoorOpen\"/>\n        <Action ID=\"OpenDoor\"/>\n        <Action ID=\"PassThroughDoor\"/>\n        <Action ID=\"PassThroughWindow\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's task execution. The robot is programmed to perform two main sequences, SEQ1 and SEQ2, in a retry loop for a maximum of three attempts. Each sequence involves checking the battery level before executing asynchronous actions A and B concurrently. If any action within a sequence fails, the entire sequence is retried up to three times.\n\nThis behavior tree ensures that the robot consistently performs its tasks despite potential failures in individual actions. It prioritizes battery checks and allows concurrent execution of actions within each sequence, ensuring efficient task completion while handling potential errors effectively.",
        "output": " <root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <RetryUntilSuccesful num_attempts=\"3\" name=\"\">\n            <SequenceStar name=\"\">\n                <ReactiveSequence name=\"SEQ1\">\n                    <CheckBattery   name=\"check_battery\"/>\n                    <SequenceStar name=\"\">\n                        <MyAsyncAction name=\"action_A_SEQ1\"/>\n                        <MyAsyncAction name=\"action_B_SEQ1\"/>\n                    </SequenceStar>\n                </ReactiveSequence>\n                <ReactiveSequence name=\"SEQ2\">\n                    <CheckBattery   name=\"check_battery\"/>\n                    <SequenceStar name=\"\">\n                        <MyAsyncAction name=\"action_A_SEQ2\"/>\n                        <MyAsyncAction name=\"action_B_SEQ2\"/>\n                    </SequenceStar>\n                </ReactiveSequence>\n            </SequenceStar>\n        </RetryUntilSuccesful>\n     </BehaviorTree>\n </root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an environment with periodic global path replanning at 1 Hz and includes recovery actions. The robot will attempt to navigate to a goal pose using a grid-based planner, and if it encounters any issues, it will clear the costmaps and retry the planning and following of the path. If the recovery attempts fail, the robot will perform additional recovery actions such as clearing the costmaps, spinning, and waiting before trying again. This setup ensures that the robot can adapt to changing environments and recover from navigation failures.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a character in a simulated environment. The character's behaviors are governed by various conditions and actions, such as combat, job execution, hunger, thirst, sleep, training animals, and uniform management.\n\nIn the \"Combat\" behavior, the character engages in combat if certain conditions are met, otherwise it continues its routine. The \"Jobs\" behavior handles different types of jobs, including butchering animals, dyeing animals, harvesting, hauling items, leading animals to pasture, standard jobs, and taming animals.\n\nOther behaviors include managing hunger, thirst, sleep, training animals, and finding uniforms. Each behavior is composed of a sequence of actions and conditions that guide the character's decision-making process.\n\nOverall, the behavior tree defines the character's decision-making logic for performing various tasks and responding to environmental stimuli in the simulated world.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Combat\">\n        <SequenceStar>\n            <Condition ID=\"IsInCombat\"/>\n            <Action ID=\"AbortJob\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"GetTarget\"/>\n                    <Action ID=\"Move\"/>\n                    <Sequence>\n                        <Condition ID=\"TargetAdjacent\"/>\n                        <Action ID=\"AttackTarget\"/>\n                    </Sequence>\n                </SequenceStar>\n            </ForceSuccess>\n            <Condition ID=\"IsInCombat\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"GetUniform\">\n        <SequenceStar name=\"GetUniform\">\n            <Action ID=\"CheckUniform\"/>\n            <Fallback>\n                <Action ID=\"Move\"/>\n                <Action ID=\"UniformCleanUp\"/>\n            </Fallback>\n            <Action ID=\"EquipUniform\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Hunger\">\n        <SequenceStar>\n            <Condition ID=\"IsHungry\"/>\n            <Sequence>\n                <SequenceStar name=\"Hunger\">\n                    <Action ID=\"FindFood\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"PickUpItem\"/>\n                    <ForceSuccess>\n                        <SequenceStar>\n                            <Action ID=\"FindDining\"/>\n                            <Action ID=\"Move\"/>\n                        </SequenceStar>\n                    </ForceSuccess>\n                    <Action ID=\"Eat\"/>\n                </SequenceStar>\n                <Condition ID=\"IsFull\"/>\n            </Sequence>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobButcherAnimal\">\n        <BB_Precondition expected=\"ButcherAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ButcherAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobDyeAnimal\">\n        <BB_Precondition expected=\"DyeAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitJob\"/>\n                    <Action ID=\"ClaimItems\"/>\n                    <SubTree ID=\"MoveAllItemsToJob\"/>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"DyeAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobHarvestAnimal\">\n        <BB_Precondition expected=\"HarvestAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"HarvestAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobHaulMultiple\">\n        <BB_Precondition expected=\"HauleMultipleItems\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitJob\"/>\n                    <Action ID=\"FindTool\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"EquipTool\"/>\n                    <Inverter>\n                        <Sequence>\n                            <Inverter>\n                                <Condition ID=\"AllPickedUp\"/>\n                            </Inverter>\n                            <Sequence>\n                                <Action ID=\"Move\"/>\n                                <Action ID=\"PickUpItem\"/>\n                            </Sequence>\n                            <Action ID=\"ReturnAlwaysRunning\"/>\n                        </Sequence>\n                    </Inverter>\n                    <Condition ID=\"AllPickedUp\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"DropAllItems\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobLeadAnimalToPasture\">\n        <BB_Precondition expected=\"LeadAnimalToPasture\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobStandard\">\n        <Fallback>\n            <SequenceStar name=\"StandardJobs\">\n                <Action ID=\"InitJob\"/>\n                <Action ID=\"ClaimItems\"/>\n                <Action ID=\"FindTool\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"EquipTool\"/>\n                <SubTree ID=\"MoveAllItemsToJob\"/>\n                <Action ID=\"GetWorkPosition\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"Work\"/>\n                <Action ID=\"FinishJob\"/>\n            </SequenceStar>\n            <Action ID=\"AbortJob\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobTameAnimal\">\n        <BB_Precondition expected=\"TameAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"TameAnimal\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Jobs\">\n        <SequenceStar>\n            <Action ID=\"GetJob\"/>\n            <FallbackStar>\n                <SubTree ID=\"JobButcherAnimal\"/>\n                <SubTree ID=\"JobDyeAnimal\"/>\n                <SubTree ID=\"JobLeadAnimalToPasture\"/>\n                <SubTree ID=\"JobHarvestAnimal\"/>\n                <SubTree ID=\"JobTameAnimal\"/>\n                <SubTree ID=\"JobHaulMultiple\"/>\n                <SubTree ID=\"JobStandard\"/>\n            </FallbackStar>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <SubTree ID=\"Jobs\"/>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MoveAllItemsToJob\">\n        <Sequence>\n            <Inverter>\n                <Sequence>\n                    <Inverter>\n                        <Condition ID=\"AllItemsInPlaceForJob\"/>\n                    </Inverter>\n                    <SequenceStar>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"PickUpItem\"/>\n                        <Action ID=\"GetItemDropPosition\"/>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"DropItem\"/>\n                    </SequenceStar>\n                    <Action ID=\"ReturnAlwaysRunning\"/>\n                </Sequence>\n            </Inverter>\n            <Condition ID=\"AllItemsInPlaceForJob\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"OldMoveAllItemsToJob\">\n        <FallbackStar>\n            <Condition ID=\"AllItemsInPlaceForJob\"/>\n            <RetryUntilSuccesful num_attempts=\"20\">\n                <Sequence>\n                    <SequenceStar>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"PickUpItem\"/>\n                        <Fallback>\n                            <Action ID=\"GetItemDropPosition\"/>\n                            <Action ID=\"DropItem\"/>\n                        </Fallback>\n                        <Fallback>\n                            <Action ID=\"Move\"/>\n                            <Action ID=\"DropItem\"/>\n                        </Fallback>\n                        <Action ID=\"DropItem\"/>\n                    </SequenceStar>\n                    <Condition ID=\"AllItemsInPlaceForJob\"/>\n                </Sequence>\n            </RetryUntilSuccesful>\n            <ForceFailure>\n                <Action ID=\"AbortJob\"/>\n            </ForceFailure>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Sleepy\">\n        <SequenceStar name=\"Sleep\">\n            <Condition ID=\"IsSleepy\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"FindBed\"/>\n                    <Action ID=\"Move\"/>\n                </SequenceStar>\n            </ForceSuccess>\n            <Action ID=\"Sleep\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Thirst\">\n        <SequenceStar>\n            <Condition ID=\"IsThirsty\"/>\n            <Sequence>\n                <SequenceStar name=\"Thirst\">\n                    <Action ID=\"FindDrink\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"PickUpItem\"/>\n                    <ForceSuccess>\n                        <SequenceStar>\n                            <Action ID=\"FindDining\"/>\n                            <Action ID=\"Move\"/>\n                        </SequenceStar>\n                    </ForceSuccess>\n                    <Action ID=\"Drink\"/>\n                </SequenceStar>\n                <Condition ID=\"IsDrinkFull\"/>\n            </Sequence>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Trainer\">\n        <SequenceStar name=\"Trainer\">\n            <Condition ID=\"IsTrainer\"/>\n            <Action ID=\"FindTrainerPosition\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"SuperviseTraining\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Training\">\n        <SequenceStar name=\"Training\">\n            <Condition ID=\"IsTrainingTime\"/>\n            <Action ID=\"FindTrainingGround\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"Train\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AbortJob\"/>\n        <Condition ID=\"AllItemsInPlaceForJob\"/>\n        <Condition ID=\"AllPickedUp\"/>\n        <Action ID=\"AttackTarget\"/>\n        <Action ID=\"ButcherAnimal\"/>\n        <Action ID=\"CheckUniform\"/>\n        <Action ID=\"ClaimItems\"/>\n        <SubTree ID=\"Combat\"/>\n        <Action ID=\"Drink\"/>\n        <Action ID=\"DropAllItems\"/>\n        <Action ID=\"DropItem\"/>\n        <Action ID=\"DyeAnimal\"/>\n        <Action ID=\"Eat\"/>\n        <Action ID=\"EquipTool\"/>\n        <Action ID=\"EquipUniform\"/>\n        <Action ID=\"FinalMoveAnimal\"/>\n        <Action ID=\"FindBed\"/>\n        <Action ID=\"FindDining\"/>\n        <Action ID=\"FindDrink\"/>\n        <Action ID=\"FindFood\"/>\n        <Action ID=\"FindTool\"/>\n        <Action ID=\"FindTrainerPosition\"/>\n        <Action ID=\"FindTrainingGround\"/>\n        <Action ID=\"FinishJob\"/>\n        <Action ID=\"GetItemDropPosition\"/>\n        <Action ID=\"GetJob\"/>\n        <Action ID=\"GetTarget\"/>\n        <SubTree ID=\"GetUniform\"/>\n        <Action ID=\"GetWorkPosition\"/>\n        <Action ID=\"GrabAnimal\"/>\n        <Action ID=\"HarvestAnimal\"/>\n        <SubTree ID=\"Hunger\"/>\n        <Action ID=\"InitAnimalJob\"/>\n        <Action ID=\"InitButcherJob\"/>\n        <Action ID=\"InitJob\"/>\n        <Condition ID=\"IsButcherJob\"/>\n        <Condition ID=\"IsDrinkFull\"/>\n        <Condition ID=\"IsFull\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInCombat\"/>\n        <Condition ID=\"IsSleepy\"/>\n        <Condition ID=\"IsThirsty\"/>\n        <Condition ID=\"IsTrainer\"/>\n        <Condition ID=\"IsTrainingTime\"/>\n        <Condition ID=\"IsVeryHungry\"/>\n        <Condition ID=\"IsVeryThirsty\"/>\n        <SubTree ID=\"JobButcherAnimal\"/>\n        <SubTree ID=\"JobDyeAnimal\"/>\n        <SubTree ID=\"JobHarvestAnimal\"/>\n        <SubTree ID=\"JobHaulMultiple\"/>\n        <SubTree ID=\"JobLeadAnimalToPasture\"/>\n        <SubTree ID=\"JobStandard\"/>\n        <SubTree ID=\"JobTameAnimal\"/>\n        <SubTree ID=\"Jobs\"/>\n        <Action ID=\"Move\"/>\n        <SubTree ID=\"MoveAllItemsToJob\"/>\n        <SubTree ID=\"OldMoveAllItemsToJob\"/>\n        <Action ID=\"PickUpItem\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"ReleaseAnimal\"/>\n        <Action ID=\"ReturnAlwaysRunning\"/>\n        <Action ID=\"Sleep\"/>\n        <SubTree ID=\"Sleepy\"/>\n        <Action ID=\"SuperviseTraining\"/>\n        <Action ID=\"TameAnimal\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n        <SubTree ID=\"Thirst\"/>\n        <Action ID=\"Train\"/>\n        <SubTree ID=\"Trainer\"/>\n        <SubTree ID=\"Training\"/>\n        <Action ID=\"UniformCleanUp\"/>\n        <Action ID=\"Work\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement towards two goals, Goal_a and Goal_b, in a loop for three cycles. In each cycle, the robot first sets the values of Goal_a and Goal_b in its memory. Then, it moves towards Goal_a and takes a snapshot using SnapshotClient. After that, it moves towards Goal_b and takes another snapshot.\n\nThis behavior is repeated for three cycles as specified. The MoveRobot behavior tree contains the logic for setting the goal and navigating towards it using Nav2Client.\n\nOverall, the behavior tree directs the robot to repeatedly move towards Goal_a and Goal_b, capturing snapshots at each location, for a total of three cycles.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"3\">\n            <Sequence>\n                <SetBlackboard output_key=\"Goal_a\" value=\"-0.579;-1.341;0.0;1.0\" />\n                <SetBlackboard output_key=\"Goal_b\" value=\"5.214;-1.533;0.0;1.0\" />\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                    <SnapshotClient/>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                    <SnapshotClient/>\n                </Sequence>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot navigation system that continuously plans and follows a global path. The system uses a pipeline sequence to ensure the planning and following of the path are executed in order. It incorporates a rate controller set at 1 Hz to periodically compute a new path to the goal using the \"GridBased\" planner. Once the path is computed, the robot follows the path using the specified path-following controller. This setup allows the robot to dynamically replan its path at a regular interval, enabling it to adapt to changing environments or obstacles while navigating towards its goal.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </RateController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a task for a robot to repeatedly navigate to three different goals (Goal_a, Goal_b, Goal_c) in a loop of 100 cycles. The robot is first directed to move towards the Goal_a position, followed by Goal_b and then Goal_c within each cycle.\n\nIf we break it down:\n- The robot is given specific coordinates for each goal.\n- It repeats the sequence of moving to Goal_a, Goal_b, and Goal_c 100 times.\n- For each movement, it uses a \"MoveRobot\" behavior tree that sets the goal for the robot's navigation system using Nav2Client.\n\nThis behavior tree essentially orchestrates the robot's navigation behavior, ensuring it visits the specified goals in a repetitive manner, possibly for tasks like exploration or mapping.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"100\">\n            <Sequence>\n                <!-- The goal value=\"position-x;position-y;orientaion-z;orientation-w\" -->\n                <SetBlackboard output_key=\"Goal_a\" value=\"0.4;0.4;0.0;1.0\" />\n                <SetBlackboard output_key=\"Goal_b\" value=\"0.4;-0.4;0.0;1.0\" />\n                <SetBlackboard output_key=\"Goal_c\" value=\"-0.4;-0.4;0.0;1.0\" />\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                </Sequence>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to navigate a robot with the capability of replanning its global path after every 1 meter of movement. It uses a pipeline sequence consisting of two steps. First, it employs a distance controller to compute a new path to the goal pose using a \"GridBased\" planner when the robot has moved 1 meter. Then, it follows the computed path using a specified controller. This approach ensures that the robot continuously updates its path to adapt to any changes in the environment or obstacles encountered during navigation.",
        "output": "<!--\n  This Behavior Tree replans the global path after every 1m.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <DistanceController distance=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </DistanceController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a complex series of actions for a robotic system. The robot is first directed to navigate to a location. Then, it performs a sequence of manipulator actions in order to find and handle an object. This involves searching for the object in multiple frames, attempting to pick up the object, and handling scenarios where it cannot be picked up or needs to be left at another location. \n\nIf the robot fails to pick up the object, it moves to a specific position and then opens its gripper. If it successfully picks up the object, it identifies an empty frame, places the object there, opens the gripper, and finally navigates to a designated drive position.\n\nThe behavior tree handles various potential failure scenarios, such as not finding an empty frame or being unable to close the gripper. It ensures that the robot can adapt and proceed with the task despite encountering these challenges.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"main_sequence\">\n        <NavigateVehicle/>\n        <Sequence name=\"main_manipulator_sequence\">\n            <Fallback name=\"find_object\">\n                <Sequence name=\"search_frame1\">\n                    <Sequence name=\"search1\">\n                        <PlanManipulatorPath plan_to_frame=\"search1\"/>\n                        <MoveManipulator path=\"{manipulator_path}\"/>\n                    </Sequence>\n                    <ObjectSearch/>\n                </Sequence>\n                <Sequence name=\"search_frame2\">\n                    <Sequence name=\"search2\">\n                        <PlanManipulatorPath plan_to_frame=\"search2\"/>\n                        <MoveManipulator path=\"{manipulator_path}\"/>\n                    </Sequence>\n                    <ObjectSearch/>\n                </Sequence>\n                <Sequence name=\"search_frame3\">\n                    <Sequence name=\"search3\">\n                        <PlanManipulatorPath plan_to_frame=\"search3\"/>\n                        <MoveManipulator path=\"{manipulator_path}\"/>\n                    </Sequence>\n                    <ObjectSearch/>\n                </Sequence>\n            </Fallback>\n            <Sequence name=\"handle_object\">\n                <Fallback name=\"handle_not_able_to_close\">\n                    <Sequence name=\"pick_object\">\n                        <Sequence name=\"main_move_to_object\">\n                            <PlanManipulatorPath plan_to_frame=\"object\" object_pose=\"{pose}\"/>\n                            <MoveManipulator path=\"{manipulator_path}\"/>\n                        </Sequence>\n                        <MoveGripper action=\"close\"/>\n                    </Sequence>\n                    <ForceFailure name=\"force_failure1\">\n                        <Sequence name=\"movetodrive\">\n                            <PlanManipulatorPath plan_to_frame=\"driveposition\"/>\n                            <MoveManipulator path=\"{manipulator_path}\"/>\n                        </Sequence>\n                    </ForceFailure>\n                </Fallback>\n                <Sequence name=\"leave_object\">\n                    <Fallback name=\"find_empty_frame\">\n                        <Fallback name=\"check_empty_frame\">\n                            <EmptyFrame check_frame=\"carryarea1\" empty_frame=\"{empty_frame}\"/>\n                            <EmptyFrame check_frame=\"carryarea2\"/>\n                            <EmptyFrame check_frame=\"carryarea3\"/>\n                        </Fallback>\n                        <ForceFailure name=\"force_failure2\">\n                            <MoveGripper action=\"open\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Sequence name=\"emptyframe\">\n                        <PlanManipulatorPath plan_to_frame=\"{empty_frame}\"/>\n                        <MoveManipulator path=\"{manipulator_path}\"/>\n                    </Sequence>\n                    <MoveGripper action=\"open\"/>\n                    <Sequence name=\"drive\">\n                        <PlanManipulatorPath plan_to_frame=\"driveposition\"/>\n                        <MoveManipulator path=\"{manipulator_path}\"/>\n                    </Sequence>\n                </Sequence>\n            </Sequence>\n        </Sequence>\n    </Sequence>\n  </BehaviorTree> \n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for a robot. First, it is instructed to \"MoveBack\" and then \"GoToTable\". The TreeNodesModel contains various other actions that can be utilized within the behavior tree, such as \"lookAtTheTray\", \"DetectHandles\", \"PickTray\", \"LookUp\", \"PlaceTray\", \"MoveBack\", and \"GoToTable\".\n\nIn summary, the robot's task involves moving back and then proceeding to a table. This suggests that the robot may be engaged in a pick-and-place operation or some form of navigation within an environment.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n                   \n                <Sequence>\n                    <Action ID=\"MoveBack\"/>\n                    <Action ID=\"GoToTable\"/>                                     \n                </Sequence>            \n        \n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"lookAtTheTray\"/>\n        <Action ID=\"DetectHandles\"/>\n        <Action ID=\"PickTray\"/>\n        <Action ID=\"LookUp\"/>\n        <Action ID=\"PlaceTray\"/>\n        <Action ID=\"MoveBack\"/>\n        <Action ID=\"GoToTable\"/>             \n        \n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for an entity, possibly a character or an AI agent. The entity has several actions and conditions that it can perform based on its environment and internal state.\n\nThe main task of the behavior tree is to control the entity's behavior in different situations. It follows a fallback mechanism where it first tries to execute a sequence of actions related to targeting and attacking, and if those are not applicable, it resorts to a random movement action.\n\nSpecifically, the entity will attempt to get a target, move towards it, and if the target is adjacent, it will attack. If these actions cannot be performed, it will resort to a random movement. Additionally, there are conditions such as checking if it's day or night, if it's hungry, and its gender, which likely influence its decision-making process.\n\nOverall, the behavior tree orchestrates the entity's behavior by prioritizing certain actions and conditions while providing fallback options when necessary.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback>\n            <SequenceStar name=\"Main\">\n                <Action ID=\"GetTarget\"/>\n                <Action ID=\"Move\"/>\n                <Sequence>\n                    <Condition ID=\"TargetAdjacent\"/>\n                    <Action ID=\"AttackTarget\"/>\n                </Sequence>\n            </SequenceStar>\n            <Action ID=\"RandomMove\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AttackTarget\"/>\n        <Action ID=\"GetTarget\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"Sleep\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for a robot to perform in a game setup and play scenario. The robot is programmed to repeat the sequence 10 times. Initially, it performs pose detection control actions with delays, tracks objects, and spins to get localized. Then, it finds and sets up the game objects based on certain conditions. If the game needs initialization, it interacts with a human through speech and pose detection. Otherwise, it navigates to a specific location and initiates the game. During the game, it instructs humans to perform specific poses, checks their positions, provides feedback, and concludes the game. The robot uses various sensors and actuators to interact with the environment and humans, ensuring the smooth execution of the game setup and gameplay.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Repeat num_cycles=\"10\">\n\t\t\t<Sequence>\n\t\t\t\t<Delay delay_msec=\"1000\">\n\t\t\t\t\t<PoseDetectionControlAction enable=\"true\" />\n\t\t\t\t</Delay>\n\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\n\t\t\t\t<!-- Spin a bit to get localized in the case the initial pose was just set -->\n\t\t\t\t<RobotSpin angle=\"-180\" velocity=\"0.4\" />\n\t\t\t\t<RobotSpin angle=\"180\" velocity=\"0.4\" />\n\n\t\t\t\t<RobotFindInitAction game_file=\"robot_find.json\" object_type=\"shapes\" random_order=\"0\" needs_init=\"{needs_init}\" robot_pose=\"{robot_pose}\" />\n\n\t\t\t\t<!--\n\t\t\t\t<ForceSuccess>\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{needs_init}\" value_B=\"0\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Do you want to setup the game?\" />\n\t\t\t\t\t\t\t\t<SpeechToTextActionClient text=\"{said}\" />\n\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*(yes|yeah|okay|ok|sure|yep).*\" />\n\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"needs_init\" value=\"1\" />\n\t\t\t\t\t\t\t</Sequence>\n  \t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t</Sequence>\n\t\t\t\t</ForceSuccess>\n        -->\n\n\t\t\t\t<Fallback>\n\t\t\t\t\t<BlackboardCheckInt value_A=\"{needs_init}\" value_B=\"1\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"1\" />\n\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Game setup. I will ask you to stand at each of the locations.  Put both hands on your hips when you arrive at each location to continue.\" />\n\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Please send in the middle of the game. After the robot aligns to you, put both hands on your hips.\" />\n\t\t\t\t\t\t\t\t\t<RetryUntilSuccesful num_attempts=\"20\">\n\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2000\">\n\t\t\t\t\t\t\t\t\t\t\t<HumanPoseDetect expected_pose_left=\"OnHip\" expected_pose_right=\"OnHip\" pose_lr_check=\"both\" detected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\" pose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t</RetryUntilSuccesful>\n\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</ForceSuccess>\n\n\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t<RobotFindNextStepAction item_name=\"{item_name}\" />\n\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Please stand on \" msg2=\"{item_name}\" />\n\t\t\t\t\t\t\t\t\t\t<RetryUntilSuccesful num_attempts=\"20\">\n\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2000\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<HumanPoseDetect expected_pose_left=\"OnHip\" expected_pose_right=\"OnHip\" pose_lr_check=\"both\" detected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\" pose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ObjectLocationStatusAction x=\"{x}\" y=\"{y}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<RobotFindSetPositionAction x=\"{x}\" y=\"{y}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t</RetryUntilSuccesful>\n\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t</KeepRunningUntilFailure>\n\t\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Finished setting up\" />\n\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t</BlackboardCheckInt>\n\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<Nav2Client goal=\"{robot_pose}\" />\n\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Let's play the game!\" />\n\n\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<RobotFindNextStepAction item_name=\"{item_name}\" />\n\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Please stand on \" msg2=\"{item_name}\" />\n\t\t\t\t\t\t\t\t\t<RetryUntilSuccesful num_attempts=\"200\">\n\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"1000\">\n\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t<ObjectLocationStatusAction x=\"{x}\" y=\"{y}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<RobotFindCheckStepAction x=\"{x}\" y=\"{y}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Good job\" />\n\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t</RetryUntilSuccesful>\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</KeepRunningUntilFailure>\n\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Finished playing the game\" />\n\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t</Sequence>\n\t\t\t\t</Fallback>\n\t\t\t</Sequence>\n\t\t</Repeat>\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a conversational system that repeatedly asks for the user's name. It uses speech-to-text and text-to-speech actions to interact with the user. The robot will ask \"What's your name?\" using text-to-speech, then wait for a response. If it receives a response, it will confirm what was said by speaking it back to the user. If no response is detected within a specified time, it will apologize for not hearing a response and repeat the process. This loop will continue for 99 cycles.\n\nOverall, the behavior tree describes a conversational interaction where the robot prompts the user for their name, listens for a response, and provides feedback based on the user's input. If no response is received, it apologizes and repeats the prompt.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"99\">\n            <Fallback name=\"get_answer\">\n                <Sequence>\n                    <Delay delay_msec=\"3000\">\n                        <Action ID=\"TextToSpeechActionClient\" msg=\"What's your name?\"/>\n                    </Delay>\n                    <Action ID=\"SpeechToTextActionClient\" text=\"{said}\"/>\n                    <Action ID=\"TextToSpeechActionClient\" msg=\"You said\"/>\n                    <Action ID=\"TextToSpeechActionClient\" msg=\"{said}\"/>\n                </Sequence>\n                <Action ID=\"TextToSpeechActionClient\" msg=\"I'm sorry, but I didn't hear a response\"/>\n            </Fallback>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"SpeechToTextActionClient\">\n            <output_port name=\"text\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"TextToSpeechActionClient\">\n            <input_port name=\"msg\" type=\"std::string\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a conversational interaction. It starts with the robot greeting the user, then pausing and smiling before asking for the user's name. The user's response is captured via speech-to-text conversion, followed by the robot repeating what the user said. If the user's response is not understood, the robot tilts its head apologetically and expresses its inability to comprehend. After this exchange, the robot bids farewell.\n\nIn summary, the behavior tree outlines a conversational flow where the robot engages in a scripted dialogue with the user, including greeting, interaction, and concluding the conversation.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n        <Repeat num_cycles=\"1\">\n            <Fallback name=\"get_answer\">\n              <Sequence>\n                 <TextToSpeechActionClient msg=\"Hi there\" />\n                 <Delay delay_msec=\"500\">\n                   <SmileAction level=\"3\" duration_ms=\"2000\"/>\n                 </Delay>\n                 <Delay delay_msec=\"2000\">\n                   <TextToSpeechActionClient msg=\"What's your name?\" />\n                 </Delay>\n                 <SpeechToTextActionClient text=\"{said}\" />\n                 <TextToSpeechActionClient msg=\"You said\" />\n                 <TextToSpeechActionClient msg=\"{said}\" />\n              </Sequence>\n              <ForceFailure>\n                <HeadTiltAction angle=\"45\" dwell_ms=\"1500\" />\n              </ForceFailure>\n              <TextToSpeechActionClient msg=\"I'm sorry, but I didn't you\" />\n            </Fallback>\n        </Repeat>\n        <TextToSpeechActionClient msg=\"Goodbye\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a tracking action for a system. Initially, it sets the mode to \"Scan\" and initiates tracking for 4 seconds. Following this, it switches the mode to \"Off\" and maintains this state for 10 seconds. Afterward, it transitions back to the \"Track\" mode for another 4 seconds. This sequence of actions is executed as part of the main behavior tree named \"MainTree\".",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n\t\t\t<Delay delay_msec=\"4000\">\n        <TrackAction mode=\"Scan\" rate=\"3\" />\n\t\t\t</Delay>\n      <Delay delay_msec=\"10000\">\n        <TrackAction mode=\"Off\" rate=\"3\" />\n      </Delay>\n      <Delay delay_msec=\"4000\">\n        <TrackAction mode=\"Track\" rate=\"3\" />\n      </Delay>\n\t\t</Sequence>\n\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a sequence of actions for a robot. First, it checks the battery level, then opens the gripper, approaches an object, and finally closes the gripper. This sequence likely represents a task for a robotic arm or similar system to perform a series of actions in a specific order, such as picking up an object. The behavior tree ensures that each action is executed sequentially, with the next action only occurring if the previous one is successful.",
        "output": " <root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <CheckBattery name=\"check_battery\" />\n            <OpenGripper name=\"open_gripper\" />\n            <ApproachObject name=\"actino_test\"/>\n            <CloseGripper name=\"close_gripper\" />\n        </Sequence>\n     </BehaviorTree>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the navigation and recovery process for a robot. It begins by checking if the initial pose is received, and if not, it attempts to automatically localize the robot using a series of retries. Once the initial pose is obtained, the tree proceeds to the recovery and navigation branch.\n\nIn the recovery branch, it checks if the robot is stuck and performs a sequence of actions (stop, back up, spin) to recover if it is stuck.\n\nIn the navigation branch, the robot computes a path to a designated pose and then follows that path. Additionally, it utilizes a parallel node to simultaneously compute and update the path while following it.\n\nOverall, the behavior tree orchestrates the robot's localization, recovery from being stuck, and navigation towards a specified pose.",
        "output": "<!--\n  This Behavior Tree first goes into a branch where it will check to see if the robot's initial\n  pose is given. If the initial pose is not given it trys to automatically localize the robot.\n  After finding the initial pose it will continue with the recovery and navigation branch.  The\n  AutoLocalization branch is based on 'AutoLocalization.xml' and the navigation branch is based on\n  `parallel_w_recovery.xml`.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"root\">\n      <FallbackStar name=\"AutoLocalization\">\n        <initialPoseReceived/>\n        <SequenceStar name=\"doSelfLocalization\">\n          <RetryUntilSuccesful num_attempts=\"5\" name=\"retry_client_request\">\n            <globalLocalizationServiceRequest/>\n         </RetryUntilSuccesful>\n         <RetryUntilSuccesful num_attempts=\"10\" name=\"retry_localization\">\n            <Sequence>\n              <Fallback>\n                <IsLocalized/>\n                <SequenceStar>\n                 <Spin/>\n                <BackUp/>\n                 <Spin/>\n              </SequenceStar>\n             </Fallback>\n             <IsLocalized/>\n            </Sequence> \n          </RetryUntilSuccesful>\n        </SequenceStar>\n      </FallbackStar>\n      <FallbackStar name=\"check_motion\">\n        <Inverter name=\"is_not_stuck\">\n          <IsStuck/>\n        </Inverter>\n        <SequenceStar name=\"stuck_recovery\">\n          <Stop/>\n          <BackUp/>\n          <Spin/>\n        </SequenceStar>\n      </FallbackStar>\n      <SequenceStar name=\"navigate\">\n        <ComputePathToPose endpoints=\"${endpoints}\" path=\"${path}\"/>\n        <ParallelNode threshold=\"1\">\n          <FollowPath path=\"${path}\"/>\n          <Sequence>\n            <RateController hz=\"2\">\n              <ComputePathToPose endpoints=\"${endpoints}\" path=\"${path}\"/>\n            </RateController>\n            <UpdatePath/>\n          </Sequence>\n        </ParallelNode>\n      </SequenceStar>\n    </Sequence>\n  </BehaviorTree>\n</root>\n\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single sequence that initiates a search. This suggests that the task performed by this behavior tree is to execute a search operation. The details of the search operation, such as the parameters, criteria, or specific actions involved, are not explicitly defined in the provided behavior tree. Therefore, based on the given information, it can be summarized that the behavior tree is designed to trigger and oversee a search process.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <Search  name=\"search\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through a series of waypoints using the NavigateToPose function. If the navigation fails, it will wait for a specified duration before attempting again. The robot will continue this process until all waypoints have been successfully achieved. If a waypoint cannot be reached after a specified number of retries, the system will mark it as achieved and move on to the next waypoint. This behavior ensures that the robot persistently attempts to reach each waypoint while handling failures and moving on when necessary.",
        "output": "\n<!--\n  This Behavior Tree processes each of the given waypoints with NavigateToPose and wait if NavigateToPose is failed.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <ReactiveFallback name=\"FollowWaypoints\">\n      <AllGoalsAchieved goal_achieved=\"{goal_achieved}\"/>\n      <KeepRunningUntilFailure>\n        <ReactiveSequence>\n          <GetNextGoal goals=\"{goals}\" goal=\"{goal}\" goal_achieved=\"{goal_achieved}\"/>\n          <RecoveryNode number_of_retries=\"1\">\n            <NavigateToPose goal=\"{goal}\"/>\n            <Wait wait_duration=\"5\"/>\n          </RecoveryNode>\n          <SetBlackboard output_key=\"goal_achieved\" value=\"true\"/>\n        </ReactiveSequence>\n      </KeepRunningUntilFailure>\n    </ReactiveFallback>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the decision-making process for an autonomous vehicle. It follows a hierarchical structure where different driving maneuvers are prioritized based on conditions and external events.\n\nThe main behavior tree consists of a fallback node, which contains reactive sequences for various driving actions such as pulling over, pulling out, lane change, and lane following. These sequences are executed based on specific conditions being met. For instance, the vehicle will attempt to pull over or pull out if the corresponding requests and readiness conditions are satisfied. Similarly, it will perform a lane change if the request is made and approved, or engage in lane following if no other action takes precedence.\n\nAdditionally, there are separate sub-trees (BehaviorTree ID=\"a\" and BehaviorTree ID=\"b\") that handle specific scenarios like lane change approval and obstacle avoidance. These sub-trees contain their own sets of conditions and actions, allowing the vehicle to react to more nuanced situations while navigating.\n\nOverall, the behavior tree enables the autonomous vehicle to make informed decisions",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback>\n            <ReactiveSequence>\n                <Condition ID=\"PullOver_Request\"/>\n                <Condition ID=\"PullOver_Ready\"/>\n                <Action ID=\"PullOver_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"PullOut_Request\"/>\n                <Condition ID=\"PullOut_Ready\"/>\n                <Action ID=\"PullOut_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"LaneChange_Request\"/>\n                <Fallback>\n                    <Condition ID=\"LaneChange_Ready\"/>\n                    <Condition ID=\"ForceLaneChange_ForceApproval\"/>\n                </Fallback>\n                <Action ID=\"LaneChange_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <Action ID=\"LaneFollowing_Plan\" output=\"{output}\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"a\">\n        <ReactiveFallback>\n            <Condition ID=\"LaneChange_CheckApproval\"/>\n            <KeepRunningUntilFailure>\n                <Action ID=\"LaneChange_PlanCandidate\" output=\"{output}\"/>\n            </KeepRunningUntilFailure>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"b\">\n        <ReactiveFallback>\n            <Condition ID=\"Avoidance_CheckApproval\"/>\n            <KeepRunningUntilFailure>\n                <Action ID=\"Avoidance_PlanCandidate\" output=\"{output}\"/>\n            </KeepRunningUntilFailure>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Condition ID=\"Avoidance_CheckApproval\"/>\n        <Action ID=\"Avoidance_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"Avoidance_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"Avoidance_Ready\"/>\n        <Condition ID=\"Avoidance_Request\"/>\n        <Condition ID=\"ExternalApproval\"/>\n        <Condition ID=\"ForceApproval\"/>\n        <Condition ID=\"ForceLaneChange_ForceApproval\"/>\n        <Condition ID=\"LaneChange_CheckApproval\"/>\n        <Action ID=\"LaneChange_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"LaneChange_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"LaneChange_Ready\"/>\n        <Condition ID=\"LaneChange_Request\"/>\n        <Action ID=\"LaneFollowing_Plan\">\n            <output_port name=\"output\" type=\"boost::optional&lt;autoware_planning_msgs::PathWithLaneId_&lt;std::allocator&lt;void&gt; &gt; &gt;\">desc</output_port>\n        </Action>\n        <Action ID=\"LaneFollowing_PlanCandidate\">\n            <output_port name=\"output_candidate\" type=\"boost::optional&lt;autoware_planning_msgs::PathWithLaneId_&lt;std::allocator&lt;void&gt; &gt; &gt;\">desc</output_port>\n        </Action>\n        <Condition ID=\"LaneFollowing_Ready\"/>\n        <Condition ID=\"LaneFollowing_Request\"/>\n        <Action ID=\"PullOut_Plan\">\n            <output_port name=\"output\"/>\n        </Action>\n        <Condition ID=\"PullOut_Ready\"/>\n        <Condition ID=\"PullOut_Request\"/>\n        <Action ID=\"PullOver_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"PullOver_Ready\"/>\n        <Condition ID=\"PullOver_Request\"/>\n        <Condition ID=\"SideShift_CheckApproval\"/>\n        <Action ID=\"SideShift_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"SideShift_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"SideShift_Ready\"/>\n        <Condition ID=\"SideShift_Request\"/>\n        <SubTree ID=\"SubTree\"/>\n        <SubTree ID=\"a\"/>\n        <SubTree ID=\"b\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's task. The robot is programmed to perform a sequence of movements while ensuring its battery level is sufficient. It will repeat this sequence three times, with each repetition including checking the battery status and then moving through a predefined set of locations. If the battery check fails or if the sequence is interrupted, the robot will move to a specific location as a fallback action.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n\t<Fallback>\n        <Repeat num_cycles=\"3\">\n\t\t<ReactiveSequence>\n\t\t\t<CheckBattery wait_tick=\"300\" />\n            \t\t<Sequence>\n                \t\t<MoveBase  goal=\"-3.1;-0.2;0.0\"/>\n\t\t\t\t<MoveBase  goal=\"0.7;1.1;0.0\"/>\n\t\t\t\t<MoveBase  goal=\"-3;-2;0.0\"/>\n\t\t\t\t<MoveBase  goal=\"1.0;-2;0.0\"/>\n            \t\t</Sequence>\n\t\t</ReactiveSequence>\n        </Repeat>\n \t\t\t<Sequence>\n                    \t\t<MoveBase  goal=\"1.0;-1;0.0\"/>>\n               \t\t </Sequence>\n\t</Fallback>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a robot's sequence of actions. It instructs the robot to move to two different locations in a specific order. First, it is directed to move to the coordinates (-1, 2, 0), and once that task is completed, it should then proceed to move to the coordinates (-3, 1, 0). This behavior tree essentially orchestrates the robot's movement by providing sequential navigation goals.",
        "output": " \n <root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <MoveBase goal=\"-1;2;0\" />\n            <MoveBase goal=\"-3;1;0\" />\n            \n        </Sequence>\n     </BehaviorTree>\n </root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate with periodic global path replanning and recovery actions. The main sequence \"NavigateWithReplanning\" ensures the robot follows a path at a rate of 1 Hz, recalculating the path if necessary. If the goal is reached, it proceeds to follow the path; otherwise, it computes a new path using \"ComputePathToPose\" and clears the global costmap before retrying. In case of recovery, it executes recovery actions such as clearing the local and global costmaps and spinning.\n\nThe RecoveryNode allows for a limited number of retries (6 in this case) before executing recovery actions. These actions include clearing the entire local and global costmaps and performing a spin maneuver.\n\nOverall, the behavior tree enables the robot to navigate while handling potential failures by periodically replanning its path and executing recovery actions when needed.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n\n<!-- <root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\">\n      <Sequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <Fallback>\n            <GoalReached/>\n             <ComputePathToPose goal=\"${goal}\" path=\"${path}\"/>\n          </Fallback>\n        </RateController>\n        <FollowPath path=\"${path}\"/>\n      </Sequence>\n      <SequenceStar name=\"RecoveryActions\">\n        <ClearEntireCostmap service_name=\"/local_costmap/clear_entirely_local_costmap\"/>\n        <ClearEntireCostmap service_name=\"/global_costmap/clear_entirely_global_costmap\"/>\n        <Spin/>\n      </SequenceStar>\n    </RecoveryNode>\n  </BehaviorTree>\n</root> -->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\">\n      <Sequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <Fallback>\n            <GoalReached/>\n            <ComputePathToPose goal=\"${goal}\" path=\"${path}\"/>\n            <ClearEntireCostmap service_name=\"/global_costmap/clear_entirely_global_costmap\"/>\n          </Fallback>\n        </RateController>\n        <FollowPath path=\"${path}\"/>\n      </Sequence>\n      <SequenceStar name=\"RecoveryActions\">\n        <ClearEntireCostmap service_name=\"/local_costmap/clear_entirely_local_costmap\"/>\n        <ClearEntireCostmap service_name=\"/global_costmap/clear_entirely_global_costmap\"/>\n      </SequenceStar>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n\n<!-- <root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root> -->"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions for a robot or an autonomous system. The main task is to retrieve a number from a specific topic and then perform different actions based on the value of the retrieved number. If the number is greater than or equal to 5, it will execute a debug action indicating that the number meets the condition. Otherwise, it will execute another debug action indicating that the number is less than 5. If no number is retrieved, it will prompt for a number.\n\nThe behavior tree also includes various predefined actions such as moving the robot's arm, charging, checking battery status, detecting faces, speaking, waiting for a specified time, and more. These actions can be used in different scenarios based on the requirements of the robot's tasks and interactions with the environment.\n\nOverall, the behavior tree orchestrates the decision-making process and execution of actions for the robot based on the input received and the predefined conditions and tasks.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback>\n            <Sequence>\n                <Action ID=\"GetFloat64\" number=\"number\" topic=\"/numbers\"/>\n                <Fallback>\n                    <Sequence>\n                        <Condition A=\"{number}\" B=\"5\" Condition=\"&gt;=\" ID=\"CompareDouble\"/>\n                        <Action ID=\"DebugAction\" string=\"Number is bigger or equal to 5\"/>\n                    </Sequence>\n                    <Action ID=\"DebugAction\" string=\"Less than 5\"/>\n                </Fallback>\n            </Sequence>\n            <Action ID=\"DebugAction\" string=\"Give me a number!\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\"/>\n            <input_port name=\"action_name\"/>\n        </Action>\n        <Action ID=\"CheckBattery\">\n            <output_port name=\"battery_state\" type=\"int\"/>\n            <output_port name=\"percentage\" type=\"double\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port name=\"charging_state\" type=\"int\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Action ID=\"DebugAction\">\n            <input_port name=\"string\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"Destroy\"/>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"GetFloat64\">\n            <output_port name=\"number\" type=\"double\"/>\n            <input_port name=\"topic\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"GetInt16\">\n            <output_port name=\"number\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GetPoseArray\">\n            <output_port name=\"pose_array\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GiveFeedback\">\n            <input_port default=\"850\" name=\"almost_thr\"/>\n            <input_port name=\"correct_blocks\"/>\n            <input_port name=\"incorrect_blocks\"/>\n            <input_port default=\"0\" name=\"personality\"/>\n            <input_port name=\"score\"/>\n        </Action>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"goal_pose\"/>\n        </Action>\n        <Action ID=\"MoveTorso\">\n            <input_port name=\"angle\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"ResetVars\"/>\n        <Action ID=\"SelectBlock\">\n            <input_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <output_port name=\"block_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <input_port name=\"position_in_list\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"SelectFieldFromPoseStamped\">\n            <input_port name=\"field\"/>\n            <output_port name=\"output_val\"/>\n            <input_port name=\"pose_stamped\"/>\n        </Action>\n        <Action ID=\"SelectPose\">\n            <input_port name=\"pose_array\"/>\n            <output_port name=\"pose_stamped\"/>\n            <input_port name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"SenseScore\">\n            <output_port name=\"score\"/>\n            <input_port name=\"score_topic\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"action_name\" type=\"std::string\"/>\n            <input_port name=\"language\" type=\"std::string\"/>\n            <input_port name=\"utterance\" type=\"std::string\"/>\n            <input_port name=\"voice\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port default=\"SUCCESS\" name=\"result\">Result after specified time: SUCCESS or FAILURE</input_port>\n            <input_port default=\"5\" name=\"seconds\">Time in seconds</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for a robot. First, it checks the battery (CheckBattery), then opens the gripper (OpenGripper), approaches an object (ApproachObject), and finally closes the gripper (CloseGripper). This suggests that the robot is likely programmed to perform a specific task such as picking up an object.\n\nOverall, the behavior tree represents a simple robotic task execution plan, where the robot follows a predefined sequence of actions.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <CheckBattery   name=\"check_battery\"/>\n           <OpenGripper    name=\"open_gripper\"/>\n           <ApproachObject name=\"approach_object\"/>\n           <CloseGripper   name=\"close_gripper\"/>\n       </Sequence>\n    </BehaviorTree>\n\n    <TreeNodesModel>\n        <Action ID=\"CheckBattery\"/>\n        <Action ID=\"OpenGripper\"/>\n        <Action ID=\"ApproachObject\"/>\n        <Action ID=\"CloseGripper\"/>\n    </TreeNodesModel>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robotic system's actions and decision-making processes. It involves a complex sequence of actions and conditions that are repeated for a specified number of cycles.\n\nThe main sequence within the behavior tree includes multiple fallbacks, reactive sequences, and conditional checks. The robot's behavior is influenced by various inputs such as locomotion status, current action type, and desired sequences. It also incorporates fake detection levels, recovery procedures, and replanning requests based on the current state and executed sequences.\n\nThe tree employs a combination of actions including movement, picking, dropping, guiding, and transitioning between different states. It handles failures and retries through specific action nodes and incorporates an update process for the Linear Temporal Logic (LTL) state.\n\nOverall, the behavior tree orchestrates the robot's decision-making and action execution, ensuring it responds appropriately to its environment and operational requirements while handling potential failures and dynamic changes in its task execution.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Condition ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <Sequence>\n                            <RetryUntilSuccesful num_attempts=\"3\">\n                                <Fallback>\n                                    <Condition ID=\"LocomotionStatusCheck\" locomotion_status=\"{locomotion_status}\"/>\n                                    <Sequence>\n                                        <Action ID=\"RecoveryStand\" locomotion_status=\"{locomotion_status}\"/>\n                                        <Delay delay_msec=\"2000\">\n                                            <Action ID=\"LocomotionStart\" locomotion_status=\"{locomotion_status}\"/>\n                                        </Delay>\n                                    </Sequence>\n                                </Fallback>\n                            </RetryUntilSuccesful>\n                            <Action ID=\"FakeDetectionLevel1\" replanning_fake_input=\"{replanning_fake_input}\"/>\n                        </Sequence>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel1\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Condition ID=\"ReactiveLTLStateCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Action ID=\"FakeDetectionLevel3\" replanning_fake_input=\"{replanning_fake_input}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Switch6 case_1=\"move\" case_2=\"stay\" case_3=\"pick\" case_4=\"drop\" case_5=\"start_training\" case_6=\"terminate_training\" variable=\"{bt_action_type}\">\n                            <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                            <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"PickAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"DropAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"GuideAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"BackNormalAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <AlwaysFailure/>\n                        </Switch6>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"BackNormalAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"DropAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel1\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel2\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel3\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"GuideAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Condition>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Condition ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Condition>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"PickAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"ReactiveLTLStateCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Condition>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel1\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a robotic task sequence. First, it checks the battery level, then opens the robot's gripper, approaches an object, and finally closes the gripper. This sequence ensures that the robot performs these actions in order, with each action dependent on the success of the previous one. If any action fails, the subsequent actions will not be executed.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <Condition ID=\"CheckBattery\"   name=\"check_battery\"/>\n            <Action    ID=\"OpenGripper\"    name=\"open_gripper\"/>\n            <Action    ID=\"ApproachObject\" name=\"approach_object\"/>\n            <Action    ID=\"CloseGripper\"   name=\"close_gripper\"/>\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robot's navigation by periodically replanning its global path at a frequency of 1 Hz. It consists of a PipelineSequence that includes a RateController and a FollowPath task. The RateController ensures that the ComputePathToPose task, which calculates the path to a specified goal using a GridBased planner, is executed at a rate of 1 Hz. Once the path is computed, the FollowPath task guides the robot along the calculated path using a specified controller. This setup allows the robot to continuously update its path based on changing environmental conditions or dynamic obstacles, ensuring efficient and adaptive navigation.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </RateController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a guided walking task for a robot. The robot is instructed to perform a sequence of movements and actions. It starts by moving its base to coordinates (2, 2) and then adjusts its arm to position (200, 200, 0, 0). Next, it prompts for confirmation to start walking to the destination. Upon receiving confirmation, the robot moves its base to coordinates (5, 5) and checks if the patient has arrived. Once confirmed, the robot resets its arm to the home position (0, 0, 0, 0) and returns to the waiting area at coordinates (0, 0).\n\nIn summary, the behavior tree orchestrates the robot's movements and interactions in a guided manner, ensuring it reaches specific locations and performs necessary actions along the way.",
        "output": " <root main_tree_to_execute = \"GuidedWalking\" >\n    <BehaviorTree ID=\"GuidedWalking\">\n        <Sequence>\n            <!--room1 = (2,2)-->\n            <BaseMovement x=\"2\" y=\"2\"/>\n            <!--arm_support_position = (200,200,0,0)-->\n            <ArmMovement x=\"200\" y=\"200\" z=\"0\" gripper_position=\"0\"/>\n            <StringParameterRequest title=\"Start walking to destination?\" \n                                    msg=\"type [y] or [n]\"\n                                    value=\"{confirm}\"/>\n            <CheckBlackboard input=\"{confirm}\" compare_to=\"y\" />\n            <!--room2 = (5,5)-->\n            <BaseMovement x=\"5\" y=\"5\"/>\n            <StringParameterRequest title=\"Patient arrived?\" \n                                    msg=\"type [y] or [n]\"\n                                    value=\"{confirm}\"/>\n            <CheckBlackboard input=\"{confirm}\" compare_to=\"y\" />\n            <!--arm_home_position = (0,0,0,0)-->\n            <ArmMovement x=\"0\" y=\"0\" z=\"0\" gripper_position=\"0\"/>\n            <!--waiting_area = (0,0)-->\n            <BaseMovement x=\"0\" y=\"0\"/>\n        </Sequence>\n    </BehaviorTree>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to dynamically navigate to a specific pose while continuously replanning its path. The robot's movement is controlled by a pipeline sequence that includes rate control and path following.\n\nFirst, the goal updater updates the robot's goal pose based on input and outputs an updated goal. Then, it computes a path to the updated goal using a grid-based planner. This path is then truncated to a certain distance to ensure the robot navigates in manageable segments.\n\nThe rate controller ensures that this sequence runs at a specified frequency. Once the path is computed and truncated, the robot follows the truncated path using a specified path-following controller. This process continues until the robot reaches the goal or encounters a failure.\n\nOverall, the behavior tree enables the robot to dynamically plan and navigate towards a given pose while adapting to changes in the environment.",
        "output": "<!--\n  This Behavior Tree follows a dynamic pose to a certain distance\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n         <TruncatePath distance=\"1.0\" input_path=\"{path}\" output_path=\"{truncated_path}\"/>\n        </Sequence>\n      </RateController>\n      <KeepRunningUntilFailure>\n        <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\"/>\n      </KeepRunningUntilFailure>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a drone to perform a square flight pattern at a specific altitude. The drone first takes off to an altitude of 1.5 units, then executes the \"Square\" sub-tree which guides it through four waypoints: Top Left, Top Right, Bottom Right, and Bottom Left, forming a square shape in a 3D space. Finally, the drone lands after completing the square flight pattern. This behavior is designed for automated control of the drone's flight path, allowing it to autonomously execute the specified sequence of actions.",
        "output": "<root main_tree_to_execute = \"MainSquare\" >\n    <BehaviorTree ID=\"MainSquare\">\n        <SequenceStar>\n            <ArmTakeoff altitude=\"1.5\"/>\n            <SubTree ID=\"Square\"/>\n            <Land/>\n        </SequenceStar>\n    </BehaviorTree>\n    <BehaviorTree ID=\"Square\">\n        <SequenceStar>\n            <GoWaypoint name=\"Top Left\" frame=\"1\" x=\"4.0\" y=\"0.0\" z=\"-1.5\" heading=\"0.0\"/>\n            <GoWaypoint name=\"Top Right\" frame=\"1\" x=\"4.0\" y=\"4.0\" z=\"-3.0\" heading=\"0.0\"/>\n            <GoWaypoint name=\"Bottom Right\" frame=\"1\" x=\"0.0\" y=\"4.0\" z=\"-3.0\" heading=\"0.0\"/>\n            <GoWaypoint name=\"Bottom Left\" frame=\"1\" x=\"0.0\" y=\"0.0\" z=\"-1.5\" heading=\"0.0\"/>\n        </SequenceStar>\n    </BehaviorTree>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree describes a complex sequence of actions for a robot in a depalletizing scenario. Initially, the robot is set to a specific speed and various collision objects are added to the scene. The robots are then initialized to their initial states. Following this, the main depalletizing process is repeated 100 times.\n\nDuring each iteration of the depalletizing process, the robot performs a series of actions including sensing object poses, executing planning for picking and placing, connecting waypoints, moving between different poses, delaying for specified durations, and adding or removing objects from the scene. These actions are orchestrated to facilitate the robot's interaction with the environment, specifically in handling boxes on a surface.\n\nThe behavior tree provides a structured approach for the robot to execute these tasks efficiently and effectively within the depalletizing context. It ensures that the robot follows a predefined sequence of steps to successfully perform the depalletizing operation multiple times.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Robot-Aubo Depalletizing Demo\">\n            <Sequence name=\"set speed for robots\">\n                <Action ID=\"ExecuteGroupSpeed\" group_name=\"arm\" name=\"set robot speed\" service_name=\"robot/execute_group_speed\" value=\"0.7\"/>\n            </Sequence>\n            <Sequence name=\"add collisions for Robot\">\n                <Action ID=\"ExecuteAddPlane\" group_name=\"arm\" name=\"Add groud to scene\" plane_name=\"ground\" plane_normal=\"0 0 1\" plane_pose=\"0 0 0 0 0 0 1\" service_name=\"robot/execute_add_plane\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"left_wall\" box_pose=\"2.76 1.2 1.35 0 0 0 1\" box_size=\"5.5 0.001 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"Add left wall\" service_name=\"robot/execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"right_wall\" box_pose=\"2.76 -1.2 1.35 0 0 0 1\" box_size=\"5.5 0.001 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"Add right wall\" service_name=\"robot/execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"top_wall\" box_pose=\"2.5 0 2.7 0 0 0 1\" box_size=\"5 2.4 0.001\" group_name=\"arm\" is_absolute=\"1\" name=\"Add top wall\" service_name=\"robot/execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"conveyor\" box_pose=\"-1.341 0 0.4 0 0 0 1\" box_size=\"2.56 1.26 0.8\" group_name=\"arm\" is_absolute=\"1\" name=\"Add conveyor\" service_name=\"robot/execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"0\" box_name=\"boxsur\" box_pose=\"0.881 0 1.35 0 0 0 1\" box_size=\"0.001 2.4 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"box_surface\" service_name=\"robot/execute_add_box\"/>\n            </Sequence>\n            <Sequence name=\"initialize robots\">\n                <Action ID=\"ExecuteGroupNamedStates\" group_name=\"arm\" name=\"robot initial state\" service_name=\"robot/execute_group_named_states\" state_name=\"left_pre\"/>\n            </Sequence>\n            <Repeat num_cycles=\"100\">\n                <Sequence name=\"Depalletizing Proccess\">\n                    <Action ID=\"SenseObjectPose\" category=\"\" pose=\"{box_surface_pose}\" service_name=\"sense_object_pose\"/>\n                    <Action ID=\"ExecutePlanning\" category=\"\" pick_pose=\"{pick_pose}\" place_pose=\"{place_pose}\" pose=\"{box_surface_pose}\" post_middle_pose=\"{post_middle_pose}\" post_pick_pose=\"{post_pick_pose}\" post_pick_pose_edge=\"{post_pick_pose_edge}\" pre_middle_pose=\"{pre_middle_pose}\" pre_pick_pose=\"{pre_pick_pose}\" service_name=\"execute_planning\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"{pre_middle_pose}\" group_name=\"arm\" name=\"pre middle\" service_name=\"robot/execute_group_joint_states\" tolerance=\"0.2\"/>\n                    <Action ID=\"ExecuteRemoveObject\" is_exact=\"1\" name=\"remove boxes_surface\" obj_name=\"boxsur\" service_name=\"robot/execute_remove_object\"/>\n                    <Action ID=\"ConnectWaypoints\" connected_waypoints=\"{pick_motion}\" name=\"pick motion\" service_name=\"connect_waypoints\" waypoint1=\"{pre_pick_pose}\" waypoint2=\"{pick_pose}\" waypoint3=\"\" waypoint4=\"\" waypoint5=\"\"/>\n                    <Action ID=\"ExecuteGroupManyPoses\" constraint=\"\" eef_step=\"0.1\" goal_type=\"0\" goals=\"{pick_motion}\" group_name=\"arm\" name=\"pre pick and pick\" service_name=\"robot/execute_group_many_poses\" tolerance=\"0.1\"/>\n                    <Delay delay_msec=\"1000\" name=\"Grasping\">\n                        <AlwaysSuccess/>\n                    </Delay>\n                    <Action ID=\"ConnectWaypoints\" connected_waypoints=\"{pull_out}\" name=\"pull out\" service_name=\"connect_waypoints\" waypoint1=\"{post_pick_pose}\" waypoint2=\"{post_pick_pose_edge}\" waypoint3=\"\" waypoint4=\"\" waypoint5=\"\"/>\n                    <Action ID=\"ExecuteGroupManyPoses\" constraint=\"\" eef_step=\"0.1\" goal_type=\"0\" goals=\"{pull_out}\" group_name=\"arm\" name=\"post pick\" service_name=\"robot/execute_group_many_poses\" tolerance=\"0.1\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"{post_middle_pose}\" group_name=\"arm\" name=\"post middle\" service_name=\"robot/execute_group_joint_states\" tolerance=\"0.1\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"{place_pose}\" group_name=\"arm\" name=\"place\" service_name=\"robot/execute_group_joint_states\" tolerance=\"0.1\"/>\n                    <Delay delay_msec=\"1000\" name=\"Droping\">\n                        <AlwaysSuccess/>\n                    </Delay>\n                    <Action ID=\"ExecuteAddBox\" auto_subfix=\"0\" box_name=\"boxsur\" box_pose=\"0.881 0 1.35 0 0 0 1\" box_size=\"0.001 2.4 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"box_surface\" service_name=\"robot/execute_add_box\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"{pre_middle_pose}\" group_name=\"arm\" name=\"back to pre middle\" service_name=\"robot/execute_group_joint_states\" tolerance=\"0.1\"/>\n                </Sequence>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ConnectWaypoints\">\n            <output_port name=\"connected_waypoints\">PoseArray</output_port>\n            <input_port default=\"connect_waypoints\" name=\"service_name\"/>\n            <input_port name=\"waypoint1\">Pose</input_port>\n            <input_port name=\"waypoint2\">Pose</input_port>\n            <input_port name=\"waypoint3\">Pose</input_port>\n            <input_port name=\"waypoint4\">Pose</input_port>\n            <input_port name=\"waypoint5\">Pose</input_port>\n        </Action>\n        <Action ID=\"ExecuteAddBox\">\n            <input_port default=\"1\" name=\"auto_subfix\"/>\n            <input_port default=\"box\" name=\"box_name\"/>\n            <input_port default=\"{place_pose}\" name=\"box_pose\"/>\n            <input_port default=\"0.2 0.2 0.2\" name=\"box_size\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"1\" name=\"is_absolute\"/>\n            <input_port default=\"robot/execute_add_box\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteAddPlane\">\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"ground\" name=\"plane_name\"/>\n            <input_port default=\"0 0 1\" name=\"plane_normal\"/>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"plane_pose\">Pose</input_port>\n            <input_port default=\"robot/execute_add_plane\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteAttachBox\">\n            <input_port name=\"box_name\"/>\n            <input_port name=\"box_pose\"/>\n            <input_port name=\"box_size\"/>\n            <input_port default=\"gripper\" name=\"eef_group_name\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"robot/execute_attach_box\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteDetachObject\">\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port name=\"obj_name\"/>\n            <input_port default=\"robot/execute_detach_object\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupAngularJointStates\">\n            <input_port default=\"0 0 0 0 0 0 0\" name=\"goal\"/>\n            <input_port default=\"panda_arm\" name=\"group_name\"/>\n            <input_port default=\"robot/execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupLinearJointStates\">\n            <input_port default=\"0.04 0.04\" name=\"goal\"/>\n            <input_port default=\"hand\" name=\"group_name\"/>\n            <input_port default=\"robot/execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupManyPoses\">\n            <input_port name=\"constraint\">If 'r', 'p', or 'y' is given, the eef_frame should not rotate about itself along x-, y-, or z-axis. You can combine them like 'rp', 'ry', 'py', and 'rpy'. Default ''</input_port>\n            <input_port default=\"0.1\" name=\"eef_step\"/>\n            <input_port default=\"0\" name=\"goal_type\">0: Pose wrt the global base frame (robot base); 1: Pose wrt the base frame transferred to current eef base position; 2: pose wrt the eef frame</input_port>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goals\">Goals for each waypoint to reach, seperate with ; </input_port>\n            <input_port default=\"arm\" name=\"group_name\">The group providing the reference frame</input_port>\n            <input_port default=\"robot/execute_group_many_poses\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupNamedStates\">\n            <input_port default=\"aubo\" name=\"group_name\">The group providing the reference frame</input_port>\n            <input_port default=\"aubo/execute_group_named_states\" name=\"service_name\"/>\n            <input_port default=\"A\" name=\"state_name\">A: Camera to up left; B: Camera to up right; C: Camera to bottom left; D: Camera to bottom right</input_port>\n        </Action>\n        <Action ID=\"ExecuteGroupPose\">\n            <input_port name=\"constraint\">If 'r', 'p', or 'y' is given, the eef_frame should not rotate about itself along x-, y-, or z-axis. You can combine them like 'rp', 'ry', 'py', and 'rpy'. Default ''</input_port>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goal\"/>\n            <input_port default=\"0\" name=\"goal_type\">0: Pose wrt the global base frame (robot base); 1: Pose wrt the base frame transferred to current eef base position; 2: pose wrt the eef frame</input_port>\n            <input_port default=\"arm\" name=\"group_name\">The group providing the reference frame</input_port>\n            <input_port default=\"robot/execute_group_pose\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupShift\">\n            <input_port default=\"z\" name=\"axis\">Could be x y z roll pitch yaw</input_port>\n            <input_port default=\"0\" name=\"goal\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"robot/execute_group_shift\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupSpeed\">\n            <input_port default=\"arm\" name=\"group_name\">The group providing the reference frame</input_port>\n            <input_port default=\"robot/execute_group_speed\" name=\"service_name\"/>\n            <input_port default=\"0.5\" name=\"value\">The velocity scaling factor, Allowed values are in (0,1]</input_port>\n        </Action>\n        <Action ID=\"ExecutePlanning\">\n            <input_port name=\"category\">0 for large box, 1 for small box</input_port>\n            <output_port default=\"{pick_pose}\" name=\"pick_pose\">Pose</output_port>\n            <output_port default=\"{place_pose}\" name=\"place_pose\">Double Array</output_port>\n            <input_port default=\"{box_surface_pose}\" name=\"pose\">Pose</input_port>\n            <output_port default=\"{post_middle_pose}\" name=\"post_middle_pose\">Double Array</output_port>\n            <output_port default=\"{post_pick_pose}\" name=\"post_pick_pose\">Pose</output_port>\n            <output_port default=\"{post_pick_pose_edge}\" name=\"post_pick_pose_edge\">Pose</output_port>\n            <output_port default=\"{pre_middle_pose}\" name=\"pre_middle_pose\">Double Array</output_port>\n            <output_port default=\"{pre_pick_pose}\" name=\"pre_pick_pose\">Pose</output_port>\n            <input_port default=\"execute_planning\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteRemoveObject\">\n            <input_port default=\"1\" name=\"is_exact\"/>\n            <input_port name=\"obj_name\"/>\n            <input_port default=\"robot/execute_remove_object\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteSuction\">\n            <input_port default=\"0\" name=\"enable\"/>\n            <input_port default=\"execute_suction\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"FetchDetectedInfo\">\n            <output_port name=\"category\">String, 0 for large box, 1 for small box</output_port>\n            <output_port name=\"pose\">Pose</output_port>\n            <input_port default=\"fetch_detected_info\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"SenseObjectPose\">\n            <output_port name=\"category\">String, 0 for large box, 1 for small box</output_port>\n            <output_port name=\"pose\">Pose</output_port>\n            <input_port default=\"sense_object_pose\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"StoreDetectedInfo\">\n            <input_port name=\"category\">String, 0 for large box, 1 for small box</input_port>\n            <input_port name=\"pose\">Pose</input_port>\n            <input_port default=\"store_detected_info\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"TypeInPose\">\n            <output_port name=\"pose_on_blackboard\">Pose on blackboard</output_port>\n            <input_port default=\"type_in_pose\" name=\"service_name\"/>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"type_in_pose\">Pose to be typed in</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the task for a robot to perform in a home environment. The robot is programmed to execute a series of actions in a fallback sequence. Initially, it attempts to go to the kitchen. If successful, it proceeds to search for and fetch a bottle. However, if it encounters any issues during these tasks, it will resort to asking for help.\n\nThis behavior tree essentially represents a scenario where a robot is autonomously navigating through a household setting, with the primary objective being to locate and retrieve a specific item (the bottle) from the kitchen area. If the robot encounters obstacles or challenges along the way, it will seek assistance as a fallback option.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Root>\n            <Fallback name=\"FB\">\n                <Sequence name=\"S1\">\n                    <Action ID=\"Go_to_kitchen\"/>\n                    <Sequence name=\"S2\">\n                        <Action ID=\"Find_bottle\"/>\n                        <Action ID=\"Fetch_bottle\"/>\n                    </Sequence>\n                </Sequence>\n                <Action ID=\"Ask_for_help\"/>\n            </Fallback>\n        </Root>\n    </BehaviorTree>\n\n    <TreeNodesModel>\n        <Action ID=\"Ask_for_help\"/>\n        <Action ID=\"Fetch_bottle\"/>\n        <Action ID=\"Find_bottle\"/>\n        <Action ID=\"Go_to_kitchen\"/>\n    </TreeNodesModel>\n\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a task for a robot to perform in a home environment. The robot is programmed to execute a series of actions in a fallback sequence. Initially, it will attempt to go to the kitchen. If successful, it will then try to fetch and find a bottle in a specific order. However, if any of these subtasks fail, the robot will resort to asking for help as a last resort.\n\nIn summary, the behavior tree orchestrates a hierarchical set of actions for the robot, prioritizing fetching and finding a bottle after reaching the kitchen, with a contingency plan to ask for help if necessary.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!--------------------------------------->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Root>\n            <Fallback name=\"FB\">\n                <Sequence name=\"S1\">\n                    <Action ID=\"Go_to_kitchen\"/>\n                    <Sequence name=\"S2\">\n                        <Action ID=\"Fetch_bottle\"/>\n                        <Action ID=\"Find_bottle\"/>\n                    </Sequence>\n                </Sequence>\n                <Action ID=\"Ask_for_help\"/>\n            </Fallback>\n        </Root>\n    </BehaviorTree>\n    <!--------------------------------------->\n    <TreeNodesModel>\n        <Action ID=\"Ask_for_help\"/>\n        <Action ID=\"Fetch_bottle\"/>\n        <Action ID=\"Find_bottle\"/>\n        <Action ID=\"Go_to_kitchen\"/>\n    </TreeNodesModel>\n    <!--------------------------------------->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot's navigation system. It begins by checking if the robot is stuck, and if so, it attempts to recover by stopping, backing up, and spinning. If the robot is not stuck, it proceeds with the navigation branch, which involves computing a path to a specified pose and then following that path.\n\nOverall, the behavior tree ensures that the robot can navigate effectively by handling potential instances of being stuck and recovering from such situations, as well as executing the navigation process when unstuck.",
        "output": "<!--\n  This Behavior Tree first goes into a branch where it will check if the robot is stuck.\n  If that is the case, it will attempt to recover. Otherwise it will continue with\n  the navigation branch. In this case the navigation branch is based on `simple_sequential.xml`.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"root\">\n      <FallbackStar name=\"check_motion\">\n        <Inverter name=\"is_not_stuck\">\n          <IsStuck/>\n        </Inverter>\n        <SequenceStar name=\"stuck_recovery\">\n          <Stop/>\n          <BackUp/>\n          <Spin/>\n        </SequenceStar>\n      </FallbackStar>\n      <SequenceStar name=\"navigate\">\n        <ComputePathToPose endpoints=\"${endpoints}\" path=\"${path}\"/>\n        <FollowPath path=\"${path}\"/>\n      </SequenceStar>\n    </Sequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a sequence of actions for controlling a vehicle. First, it instructs the vehicle to fix its rudder at a specific depth, angle, and speed. Then, it introduces a delay before proceeding. The \"FixRudder\" action likely adjusts the direction and speed of the vehicle, while the \"DelayFor\" action pauses the execution for a specified duration. This behavior tree seems to be part of a larger system that orchestrates the movement and operation of the vehicle.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"main\">\n    <BehaviorTree ID=\"main\">\n        <Sequence>\n          <FixRudder depth=\"1.0\" rudder=\"2.0\" speed_knots=\"3.0\"/>\n          <DelayFor delay_msec=\"1000\">\n            <AlwaysSuccess/>\n          </DelayFor>\n        </Sequence>\n    </BehaviorTree>\n  </root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a decision-making process for an autonomous vehicle. The vehicle is programmed to continuously assess its surroundings and make driving decisions based on the information it gathers.\n\nIn the given tree:\n- If the front of the ego lane is clear within 35.2 meters, the vehicle will continue in its current lane. Otherwise, it will attempt to bypass obstacles by checking the left lane's front and back, as well as the availability of driveable space in the left lane before executing a left bypass maneuver.\n- If none of the conditions for bypassing are met, the vehicle defaults to staying in its current lane using the \"ActionKeepLane\" behavior.\n\nOverall, the behavior tree enables the vehicle to navigate through traffic by prioritizing lane clearance and making necessary lane changes to ensure smooth and safe driving.",
        "output": "<root main_tree_to_execute = \"LatTree\">\n    <BehaviorTree ID=\"LatTree\">\n        <Fallback>\n            <Sequence>\n                <!-- lane : left, ego, right  -->\n                <!-- distance : m -->\n                <CheckLaneFrontClear which_lane=\"ego\" distance=\"35.2\" />\n                <ActionKeepLane />\n            </Sequence>\n\n            <Sequence>\n                <CheckLaneFrontClear which_lane=\"left\" distance=\"35.2\" />\n                <CheckLaneBackClear which_lane=\"left\" distance=\"20.2\" />\n                <CheckAvailDriveAreaClear which_lane=\"left\" />\n                <ActionLeftBypass />\n            </Sequence>\n\n            <ActionKeepLane />\n        </Fallback>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot's navigation and path planning. It includes recovery actions to handle unexpected situations. The main sequence involves two recovery nodes: \"ClearCostmapRecorvery\" and \"NavigateRecovery\". \n\nThe \"ClearCostmapRecorvery\" node ensures the robot can find a path through a door by clearing the global and local costmaps, computing a new path, checking its validity, and triggering front vibration.\n\nThe \"NavigateRecovery\" node handles continuous path updating and following. It uses a pipeline sequence with nested recovery nodes to update the path without rate control, follow the updated path, and perform recovery actions if needed.\n\nOverall, this behavior tree allows the robot to replan its global path periodically at 1 Hz, while also incorporating recovery actions to handle any navigation issues it may encounter.",
        "output": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n Copyright (c) 2020  Carnegie Mellon University\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n-->\n<!--\n    This Behavior Tree replans the global path periodically at 1 Hz and it also has\n    recovery actions.\n-->\n\n<root main_tree_to_execute=\"ElevatorTree\">\n  <BehaviorTree ID=\"ElevatorTree\">\n    <Sequence>\n      <RecoveryNode name=\"ClearCostmapRecorvery\">\n\t<Sequence name=\"ClearCostmapSequence\">\n\t  <!-- clear costmap intentionally to get a path go through the door -->\n\t  <ClearEntireCostmap name=\"ClearGlobalCostmap-context\" server_timeout=\"5000\"\n\t\t\t      service_name=\"/local/global_costmap/clear_entirely_global_costmap\"/>\n\t  <ClearEntireCostmap name=\"ClearLocalCostmap-context\" server_timeout=\"5000\"\n\t\t\t      service_name=\"/local/local_costmap/clear_entirely_local_costmap\"/>\n\t  <ComputePathToPose goal=\"{goal}\" path=\"{path_temp}\" planner_id=\"GridBased\"/>\n\t  <CheckPath  path=\"{path_temp}\" path_topic=\"/path\" plan_topic=\"/plan\" path_out=\"{path}\"\n\t\t      average_threshold=\"0.3\"/>\n\t  <!-- front vibration -->\n\t  <PublishTopic topic=\"/cabot/event\" value=\"navigation;event;navigation_start\" />\n\t</Sequence>\n\t<AlwaysSuccess/>\n      </RecoveryNode>\n      \n      <RecoveryNode number_of_retries=\"99999999\" name=\"NavigateRecovery\">\n\t<PipelineSequence name=\"NavigateWithReplanning\">\n\t  <!-- Not using RateController, so that the robot can keep trying to find an updated path -->\n\t  <RecoveryNode number_of_retries=\"99999999\" name=\"UpdatePathRecovery\">\n\t    <Sequence>\n\t      <WaitFloat wait_duration_float=\"0.5\"/>\n\t      <ComputePathToPose goal=\"{goal}\" path=\"{path_temp}\" planner_id=\"GridBased\"/>\n\t      <CheckPath  path=\"{path_temp}\" path_topic=\"/path\" plan_topic=\"/plan\" path_out=\"{path}\"\n\t\t\t  average_threshold=\"0.3\"/>\n\t    </Sequence>\n\t    <AlwaysSuccess/>\n\t  </RecoveryNode>\n\t  <RecoveryNode number_of_retries=\"5\" name=\"FollowPathRecovery\">\n\t    <FollowPath path=\"{path}\" controller_id=\"FollowPath\" />\n\t    <AlwaysSuccess/>\n\t  </RecoveryNode>\n\t</PipelineSequence>\n\t<RecoveryNode>\n\t  <Sequence name=\"RecoveryActions\">\n\t    <ClearEntireCostmap name=\"ClearGlobalCostmap-context\" server_timeout=\"5000\"\n\t\t\t\tservice_name=\"/local/global_costmap/clear_entirely_global_costmap\"/>\n\t    <ClearEntireCostmap name=\"ClearLocalCostmap-context\" server_timeout=\"5000\"\n\t\t\t\tservice_name=\"/local/local_costmap/clear_entirely_local_costmap\"/>\n\t  </Sequence>\n\t  <AlwaysSuccess/>\n\t</RecoveryNode>\n      </RecoveryNode>\n    </Sequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a sequence of actions for performing arithmetic operations. It starts by printing a message indicating the start of an \"AddTwoInts\" demonstration, followed by printing the values of variables 'a' and 'b'. Then it adds 'a' and 'b', prints the result, adds 100 to the previous sum, prints the new sum, doubles the sum, and finally prints the doubled value.\n\nIn summary, the behavior tree demonstrates the process of adding two integers, then adding 100 to the result, and finally doubling the sum. This sequence showcases a step-by-step arithmetic operation using the provided variables 'a' and 'b'.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"Sequence\">\n    \t<Print message=\"=== AddTwoInts demo ===\"/>\n    \t<Print message=\"a\"/>\n    \t<Print message=\"{a}\"/>\n    \t<Print message=\"b\"/>\n    \t<Print message=\"{b}\"/>\n    \t<AddTwoInts a=\"{a}\" b=\"{b}\" sum=\"{sum}\"/>\n    \t<Print message=\"a+b =\"/>\n    \t<Print message=\"{sum}\"/>\n    \t<AddTwoInts a=\"{sum}\" b=\"100\" sum=\"{sum}\"/>\n    \t<Print message=\"+100 =\"/>\n    \t<Print message=\"{sum}\"/>\n    \t<AddTwoInts a=\"{sum}\" b=\"{sum}\" sum=\"{sum}\"/>\n    \t<Print message=\"*2 =\"/>\n    \t<Print message=\"{sum}\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robotic system to perform a sequence of actions. The \"MainTree\" initiates the process by moving from bin A to bin B, which involves two sub-tasks: \"MoveToPredefinedPoint\" and \"PickingItem\". \nThe \"MoveToPredefinedPoint\" task is responsible for executing a linear move action, while the \"PickingItem\" task involves adjusting the TCP (Tool Center Point) orientation. These tasks are part of a larger model that includes various actions and sub-trees.\n\nIn summary, the behavior tree coordinates the movement of a robot from one predefined point to another and the subsequent action of picking an item at the destination.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"move from bin A to bin B\">\n            <SubTree ID=\"MoveToPredefinedPoint\"/>\n            <SubTree ID=\"PickingItem\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MoveToPredefinedPoint\">\n        <Action ID=\"LinearMove\"/>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"PickingItem\">\n        <Action ID=\"AdjustTCPOrientation\"/>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AdjustTCPOrientation\"/>\n        <Action ID=\"LinearMove\"/>\n        <SubTree ID=\"MoveToPredefinedPoint\"/>\n        <SubTree ID=\"PickingItem\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for an agent to follow. Initially, the agent will execute \"go1\", then it will proceed to execute \"go2\" regardless of its success or failure due to the ForceSuccess decorator. Finally, the agent will perform \"go3\". If any action fails, the sequence will be interrupted, and the subsequent actions will not be executed. The \"TreeNodesModel\" section defines the individual actions \"go1\", \"go2\", and \"go3\" that are referenced in the behavior tree.\n\n",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"go1\"/>\n            <ForceSuccess>\n                <Action ID=\"go2\"/>\n            </ForceSuccess>\n            <Action ID=\"go3\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a sequence of actions for a robot or an autonomous agent. The sequence involves the robot performing a series of tasks in a specific order. Initially, it executes \"go1\", then proceeds to \"stay1\", and finally performs \"go2\". Each action is executed one after the other, ensuring that the robot follows the specified sequence.\n\nAdditionally, there are other available actions such as \"dumpRun\", \"go3\", \"goClosestR\", \"isFull\", \"mineResources\", \"moveBaseToGoal\", \"stay2\", and \"waitFrames\" which can be utilized within the broader context of the robot's behavior.\n\nOverall, the behavior tree outlines a set of predefined actions and their sequential execution, providing a structured approach for the robot to follow while carrying out its tasks.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Action ID=\"go1\"/>\n            <Sequence name=\"Sequence2\">\n                <Action ID=\"stay1\"/>\n            </Sequence>\n            <Action ID=\"go2\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"goClosestR\"/>\n        <Condition ID=\"isFull\"/>\n        <Action ID=\"mineResources\"/>\n        <Action ID=\"moveBaseToGoal\">\n            <input_port name=\"key_name\">goal</input_port>\n        </Action>\n        <Action ID=\"stay1\"/>\n        <Action ID=\"stay2\"/>\n        <Action ID=\"waitFrames\">\n            <output_port name=\"barout\"/>\n            <input_port name=\"baz\"/>\n            <input_port name=\"fooin\"/>\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to perform mathematical operations. It consists of a sequence of two actions: \"addObjOut\" and \"add\". The \"addObjOut\" action takes two input values, adds them together, and stores the result in the variable \"${foo}\". The \"add\" action also performs addition but with default input values of 99, and it stores the result in the variable \"${zaz}\".\n\nIn summary, this behavior tree executes a sequence of mathematical operations, where the first action calculates the sum of two input values and stores the result, while the second action also computes a sum but with default input values and stores the result in another variable.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"addObjOut\" _in_0=\"1\" _in_1=\"2\" out=\"${foo}\"/>\n            <Action ID=\"add\" _in_0=\"\" _in_1=\"\" _out_0=\"${zaz}\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"add\">\n            <input_port default=\"99\" name=\"_in_0\"/>\n            <input_port default=\"99\" name=\"_in_1\"/>\n            <output_port name=\"_out_0\"/>\n        </Action>\n        <Action ID=\"addObjOut\">\n            <input_port name=\"_in_0\"/>\n            <input_port name=\"_in_1\"/>\n            <output_port name=\"out\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a sequence of actions to be performed by an agent. It starts with the \"go1\" action nested within multiple sequences, followed by the \"go2\" action. The tree also includes other potential actions such as \"alwaysTrue\", \"dumpRun\", \"go3\", \"goClosestR\", \"guardAiMovement\", \"isFull\", \"mineResource\", and \"waitFrames\".\n\nIn summary, the behavior tree directs the agent to execute a series of predefined actions in a specific order. If we consider the context of a game or simulation, this behavior tree could represent the decision-making process for an AI-controlled character, outlining the steps it should take in a given scenario.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Sequence>\n                <Sequence>\n                    <Action ID=\"go1\"/>\n                </Sequence>\n            </Sequence>\n            <Action ID=\"go2\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"alwaysTrue\"/>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"goClosestR\"/>\n        <Action ID=\"guardAiMovement\"/>\n        <Action ID=\"isFull\"/>\n        <Action ID=\"mineResource\"/>\n        <Action ID=\"waitFrames\">\n            <input_port name=\"_in_0\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to dynamically navigate towards a certain pose while continuously updating its path. The robot follows a pipeline sequence that includes rate control and path planning. It updates the goal pose, computes a path to the updated pose using a grid-based planner, and then truncates the path to a certain distance. The robot then follows the truncated path using a specified controller until it reaches the goal or encounters a failure.\n\nOverall, this behavior tree orchestrates the process of dynamic navigation with continuous path updating and execution, ensuring that the robot can adapt to changing environments or goals while navigating towards its target pose.",
        "output": "<!--\n  This Behavior Tree follows a dynamic pose to a certain distance\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n         <TruncatePath distance=\"1.0\" input_path=\"{path}\" output_path=\"{truncated_path}\"/>\n        </Sequence>\n      </RateController>\n      <KeepRunningUntilFailure>\n        <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\"/>\n      </KeepRunningUntilFailure>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a system to dynamically navigate to a specific pose while continuously updating the path. It operates at a rate of 1 Hz and follows a sequence that involves updating the goal, computing a path to the updated goal using a GridBased planner, truncating the path to a certain distance, and then following the truncated path until failure.\n\nThe system first updates the goal based on input and computes a path to this updated goal using a specified planner. It then truncates the computed path to a certain distance. Following this, it continuously follows the truncated path using a specific controller until the task fails.\n\nOverall, the behavior tree orchestrates the dynamic navigation process by updating goals, computing paths, and controlling the robot's movement along the generated paths, ensuring continuous replanning and navigation towards the desired pose.",
        "output": "<!--\n  This Behavior Tree follows a dynamic pose to a certain distance\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n         <TruncatePath distance=\"1.0\" input_path=\"{path}\" output_path=\"{truncated_path}\"/>\n        </Sequence>\n      </RateController>\n      <KeepRunningUntilFailure>\n        <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\"/>\n      </KeepRunningUntilFailure>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate while periodically replanning its global path at a frequency of 1 Hz. The navigation involves a pipeline sequence consisting of two main components: speed control and path following. The speed controller adjusts the robot's speed based on the planned path, with specified minimum and maximum rates and speeds. It also computes the path to a designated goal using a GridBased planner. The computed path is then followed by the robot using a path-following controller. This behavior tree ensures that the robot can dynamically adjust its speed and replan its path as it navigates towards its goal, allowing for efficient and adaptive navigation in changing environments.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <SpeedController min_rate=\"0.1\" max_rate=\"1.0\" min_speed=\"0.0\" max_speed=\"0.26\" filter_duration=\"0.3\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </SpeedController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to perform a battery test for a system. It first checks if the battery is okay, and then verifies if it's safe to go home. If both conditions are met, the system proceeds with the next action. This behavior tree seems to be part of a larger system that likely includes further actions or behaviors based on the outcome of this battery test.",
        "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root main_tree_to_execute = \"MainTreeBatteryTest\">\n    <BehaviorTree ID=\"MainTreeBatteryTest\">\n        <ReactiveSequence name=\"root_sequence\">\n            <IsBatteryOk name=\"IS battery Ok ConditionNode\"/>\n            <IsGoHomeOkConditionNode name=\"Is GoHome OK ConditionNode\"/>\n        </ReactiveSequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree instructs an entity to perform two actions in sequence. First, it is directed to say \"Hello World\", and then to execute the action \"SayHello\". The SequenceStar node indicates that the second action will be repeated indefinitely after the first action is completed.",
        "output": "<root main_tree_to_execute=\"SayStuff\">\n\n    <BehaviorTree ID=\"SayStuff\">\n        <SequenceStar>\n            <Action ID=\"SaySomething\" message=\"Hello World\"/>\n            <Action ID=\"SayHello\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    \n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to execute a sequence of actions. First, it performs \"Action_A\" with an input value of 42. Then, it checks \"Condition_B\", which yields a result of 69. Finally, it executes a sub-tree called \"LotOfStuff\" with a parameter value of 100, and this sub-tree returns a result of 200.\n\nIn summary, the behavior tree carries out a predefined sequence of actions and conditions, utilizing input values and parameters to produce specific results at each step.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action input=\"42\" ID=\"Action_A\"/>\n            <Condition result=\"69\" ID=\"Condition_B\"/>\n            <SubTree ID=\"LotOfStuff\" res=\"200\" param=\"100\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"Action_A\">\n            <input_port default=\"42\" name=\"input\">interesting</input_port>\n        </Action>\n        <Condition ID=\"Condition_B\">\n            <output_port default=\"69\" name=\"result\">Cool</output_port>\n        </Condition>\n        <SubTree ID=\"LotOfStuff\">\n            <input_port name=\"param\"/>\n            <output_port name=\"res\"/>\n        </SubTree>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's navigation by breaking the task into a sequence of actions. The robot is programmed to compute a path to a specific goal using a grid-based planner and then follow this path using a designated controller. Notably, the distance controller triggers the computation of a new path after every 1 meter traveled. This approach ensures that the robot continuously updates its global path to adapt to changing environmental conditions or obstacles.",
        "output": "<!--\n  This Behavior Tree replans the global path after every 1m.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <DistanceController distance=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </DistanceController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a robotic task sequence. It starts with opening the gripper, then approaching an object, closing the gripper to grasp the object, moving to a specified goal location, and finally reopening the gripper. This sequence suggests a typical pick-and-place operation where the robot is instructed to perform a series of actions in a specific order to manipulate objects.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <OpenGripper    name=\"open_gripper\"/>\n           <ApproachObject name=\"approach_object\"/>\n           <CloseGripper   name=\"close_gripper\"/>\n           <Move    name=\"move\" goal=\"${arg3}\"/>\n           <OpenGripper    name=\"open_gripper\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the decision-making process for a character, likely in a game or simulation. The character will first attempt to execute a sequence of actions: obtaining a target, moving towards it, and then attacking if the target is adjacent. If any of these steps fail, the character will resort to a random move. Additionally, there are conditions such as time of day, gender, and hunger level that likely influence the character's decisions.\n\nOverall, the behavior tree represents a dynamic decision-making process for the character, where it evaluates various conditions and executes different actions based on the outcomes. This allows for adaptive and responsive behavior within the environment.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback>\n            <SequenceStar name=\"Main\">\n                <Action ID=\"GetTarget\"/>\n                <Action ID=\"Move\"/>\n                <Sequence>\n                    <Condition ID=\"TargetAdjacent\"/>\n                    <Action ID=\"AttackTarget\"/>\n                </Sequence>\n            </SequenceStar>\n            <Action ID=\"RandomMove\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AttackTarget\"/>\n        <Action ID=\"GetTarget\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"Sleep\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a robotic system that is tasked with navigating to three different goals (Goal_a, Goal_b, and Goal_c) based on visual input. The robot continuously repeats the process of identifying objects using OpenVINOEvent, and then moving towards the corresponding goal. If it detects a \"cat\", it will move to Goal_c; if it detects a \"dog\", it will navigate to Goal_a; and if it detects a \"cow\", it will proceed to Goal_b. This cycle continues indefinitely as indicated by the num_cycles=\"-1\" attribute in the Repeat node.\n\nIn summary, the behavior tree orchestrates a continuous loop where the robot responds to visual input by navigating to specific locations based on the detected object, ensuring seamless and autonomous navigation in response to its environment.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SetBlackboard output_key=\"Goal_a\" value=\"-0.579;-1.341;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_b\" value=\"5.214;-1.533;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_c\" value=\"-1.588;1.253;0.0;1.0\" />\n            <Repeat num_cycles=\"-1\">\n                <ForceSuccess>\n                    <Fallback>\n                        <Sequence>\n                            <OpenVINOEvent object=\"cat\"/>\n                            <Sequence>\n                                <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                            </Sequence>\n                        </Sequence>\n                        <Sequence>\n                            <OpenVINOEvent object=\"dog\"/>\n                            <Sequence>\n                                <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                            </Sequence>\n                        </Sequence>\n                        <Sequence>\n                            <OpenVINOEvent object=\"cow\"/>\n                            <Sequence>\n                                <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                            </Sequence>\n                        </Sequence>\n                    </Fallback>\n                </ForceSuccess>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's path planning and execution. It first computes a path using the global planner (ComputePathToPose) and then runs two sub-branches in parallel. The first sub-branch involves executing the local planner to follow the computed path, while the second sub-branch controls the rate at which the global planner computes new paths.\n\nThe goal for the global planner and the resulting path are passed through the blackboard. The rate at which the global planner is invoked can be controlled with the hz parameter.\n\nThe behavior tree ensures that the robot continuously follows the path while also updating the path based on the global planner's computations. If the FollowPath operation returns SUCCESS or FAILURE, the behavior tree will return this result. Additionally, it includes mechanisms to handle goal reaching and path computation failures.",
        "output": "<!--\n  This Behavior Tree first computes a path using the global planner (ComputePathToPose).\n  Then, it runs two sub-branches in parallel. The first sub-branch is a FollowPath\n  operation (the local planner). In parallel, there is a rate controlled execution of\n  FollowPath (the global planner). Each time a new path is computed, the path update\n  is sent to the local planner. The right branch, which is the rate controlled\n  ComputePathToPose, always returns RUNNING. Because the Parallel node uses a\n  threshold of 1, whenever the FollowPath returns SUCCESS or FAILURE, the parallel\n  node will return this result.\n\n  The goal (input to the global planner) and the resulting path (output of the global\n  planner and input to the local planner) are passed on the blackboard.\n\n  The rate at which the ComputePathToPose operation is invoked can be controlled with\n  the hz parameter to the RateController node.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"root\">\n      <RateController hz=\"1.0\">\n        <Fallback>\n          <GoalReached/>\n          <ComputePathToPose goal=\"${goal}\"/>\n        </Fallback>\n      </RateController>\n      <FollowPath path=\"${path}\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the decision-making process for an autonomous vehicle. The vehicle is programmed to follow a sequence of actions based on various conditions and events encountered during its mission.\n\nThe main behavior tree \"BehaviorTree\" consists of a fallback node \"Core_seq\" that contains sequences of actions and conditions. These include initializing, generating global and local paths, checking for obstacles, making lane changes, and following specific driving rules like keeping lanes and stopping at stop lines.\n\nAdditionally, there is a sub-tree \"treeGenGlobalFollowPath\" which handles the generation of a global path for the vehicle to follow.\n\nThe entire behavior tree is driven by a set of conditions and actions defined in the \"TreeNodesModel\".\n\nIn summary, the behavior tree orchestrates the decision-making process for the autonomous vehicle, guiding it through different stages of its mission such as path planning, obstacle avoidance, and adherence to traffic rules.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback name=\"Core_seq\">\n            <Sequence>\n                <Condition ID=\"checkMissionWait\"/>\n                <Action ID=\"stop\"/>\n            </Sequence>\n            <Sequence>\n                <Action ID=\"init\"/>\n                <Action ID=\"genGlobalFollowPath\"/>\n                <Fallback name=\"mission_start\">\n                    <Sequence>\n                        <Condition ID=\"checkFrontObject\"/>\n                        <Fallback>\n                            <Sequence>\n                                <Condition ID=\"checkIsGlobalFollow\"/>\n                                <Fallback name=\"loc_check\">\n                                    <Sequence>\n                                        <Condition ID=\"checkNearCorner\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                    <Sequence>\n                                        <Condition ID=\"checkNearStopline\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                    <Sequence>\n                                        <Condition ID=\"checkProfitKeeplane\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                </Fallback>\n                            </Sequence>\n                            <Fallback name=\"lane_check\">\n                                <Sequence>\n                                    <Condition ID=\"checkLaneChange\"/>\n                                    <Fallback name=\"lane_check\">\n                                        <Sequence>\n                                            <Condition ID=\"checkLeftchageAble\"/>\n                                            <Fallback>\n                                                <Sequence>\n                                                    <Condition ID=\"checkCollision\"/>\n                                                    <Action ID=\"keepLane\"/>\n                                                </Sequence>\n                                                <Action ID=\"laneChangeLeft\"/>\n                                            </Fallback>\n                                        </Sequence>\n                                        <Fallback>\n                                            <Sequence>\n                                                <Condition ID=\"checkCollision\"/>\n                                                <Action ID=\"keepLane\"/>\n                                            </Sequence>\n                                            <Action ID=\"laneChangeRight\"/>\n                                        </Fallback>\n                                    </Fallback>\n                                </Sequence>\n                                <Sequence name=\"Local_path\">\n                                    <Sequence>\n                                        <Condition ID=\"checkEmptyLocal\"/>\n                                        <Sequence name=\"Gen_Local\">\n                                            <Action ID=\"stop\"/>\n                                            <Action ID=\"genLocalPath\"/>\n                                            <Action ID=\"setStartLocal\"/>\n                                        </Sequence>\n                                    </Sequence>\n                                    <Fallback name=\"local_check\">\n                                        <Sequence>\n                                            <Condition ID=\"checkFinishLocal\"/>\n                                            <Action ID=\"setFinishLocal\"/>\n                                        </Sequence>\n                                        <Sequence>\n                                            <Condition ID=\"checkCollision\"/>\n                                            <Action ID=\"stop\"/>\n                                        </Sequence>\n                                        <Action ID=\"localPathfollow\"/>\n                                    </Fallback>\n                                </Sequence>\n                            </Fallback>\n                        </Fallback>\n                    </Sequence>\n                    <Sequence>\n                        <Condition ID=\"checkNearStopline\"/>\n                        <Fallback>\n                            <Sequence>\n                                <Condition ID=\"checkPassAble\"/>\n                                <Sequence>\n                                    <Sequence>\n                                        <Condition ID=\"checkCollision\"/>\n                                        <Action ID=\"stop\"/>\n                                    </Sequence>\n                                    <Action ID=\"drive\"/>\n                                </Sequence>\n                            </Sequence>\n                            <Action ID=\"stop\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Action ID=\"drive\"/>\n                </Fallback>\n                <Action ID=\"setPath\"/>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"treeGenGlobalFollowPath\">\n        <Fallback>\n            <Sequence>\n                <Condition ID=\"checkGlobalLaneChange\"/>\n                <Fallback>\n                    <Sequence>\n                        <Condition ID=\"checkLetfChange\"/>\n                        <Fallback>\n                            <Sequence>\n                                <Condition ID=\"checkCollision\"/>\n                                <Action ID=\"keepLane\"/>\n                            </Sequence>\n                            <Action ID=\"laneChangeLeft\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Fallback>\n                        <Sequence>\n                            <Condition ID=\"checkCollision\"/>\n                            <Action ID=\"keepLane\"/>\n                        </Sequence>\n                        <Action ID=\"laneChangeRight\"/>\n                    </Fallback>\n                </Fallback>\n            </Sequence>\n            <Action ID=\"genGlobalFollowPath\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"acc\"/>\n        <Condition ID=\"checkCollision\"/>\n        <Condition ID=\"checkEmptyLocal\"/>\n        <Condition ID=\"checkFinishLocal\"/>\n        <Condition ID=\"checkFrontObject\"/>\n        <Condition ID=\"checkGlobalLaneChange\"/>\n        <Condition ID=\"checkIsGlobalFollow\"/>\n        <Condition ID=\"checkLaneChange\"/>\n        <Condition ID=\"checkLeftchageAble\"/>\n        <Condition ID=\"checkLetfChange\"/>\n        <Condition ID=\"checkMissionWait\"/>\n        <Condition ID=\"checkNearCorner\"/>\n        <Condition ID=\"checkNearStopline\"/>\n        <Condition ID=\"checkPassAble\"/>\n        <Condition ID=\"checkProfitKeeplane\"/>\n        <Action ID=\"drive\"/>\n        <Action ID=\"genGlobalFollowPath\"/>\n        <Action ID=\"genLocalPath\"/>\n        <Action ID=\"init\"/>\n        <Action ID=\"keepLane\"/>\n        <Action ID=\"laneChangeLeft\"/>\n        <Action ID=\"laneChangeRight\"/>\n        <Action ID=\"localPathFollow\"/>\n        <Action ID=\"localPathfollow\"/>\n        <Action ID=\"setFinishLocal\"/>\n        <Action ID=\"setPath\"/>\n        <Action ID=\"setStartLocal\"/>\n        <Action ID=\"stop\"/>\n        <SubTree ID=\"treeGenGlobalFollowPath\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree controls a robot's movement towards three different goals, Goal_a, Goal_b, and Goal_c. The robot is programmed to move sequentially towards each goal, with a waiting period between movements. If the \"gohome\" event is triggered, the robot will interrupt its current sequence and proceed directly to Goal_c. The waiting time between movements is set by the value of \"Waiting_time\". This sequence of moving towards Goal_a, waiting, moving towards Goal_b, and waiting is repeated indefinitely (-1 cycles). Once the robot completes or interrupts this repeating sequence, it proceeds to Goal_c.\n\nIn summary, the behavior tree orchestrates the robot's navigation behavior, ensuring it moves towards specific goals in a predefined sequence, with interruptions possible based on external events, and incorporates waiting periods between movements.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SetBlackboard output_key=\"Goal_a\" value=\"1.17;-1.65;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_b\" value=\"1.1;1.51;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_c\" value=\"-1.25;0.324;0.0;1.0\" />\n            <SetBlackboard output_key=\"Waiting_time\" value=\"2\"/>\n            <Fallback>\n                <ReactiveSequence>\n                    <InterruptEvent event=\"gohome\"/>\n                    <Repeat num_cycles=\"-1\">\n                        <Sequence>\n                            <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                            <WaitingEvent name=\"waiting_event\" waiting_time=\"{Waiting_time}\"/>\n                            <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                            <WaitingEvent name=\"waiting_event\" waiting_time=\"{Waiting_time}\"/>\n                        </Sequence>\n                    </Repeat>\n                </ReactiveSequence>\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                </Sequence>\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <MoveBase goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a recovery mechanism for a robot's navigation system. If the robot encounters difficulties in navigating to a goal, it will attempt recovery actions up to 6 times. The recovery sequence involves recalculating the path to the goal and following the path, with each step having its own recovery fallback plan.\n\nIf the path calculation or following fails, the robot will clear the costmaps and then execute additional recovery actions such as spinning, waiting, and backing up. These actions are designed to help the robot overcome obstacles or issues that may have caused the initial navigation problem.\n\nOverall, the behavior tree ensures that the robot can recover from navigation failures by attempting alternative paths, clearing costmaps, and executing specific recovery actions, ultimately enabling it to reach its intended destination.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n            <PipelineSequence name=\"NavigateWithReplanning\">\n                <RateController hz=\"1.0\">\n                    <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n                        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\" />\n                        <ReactiveFallback name=\"ComputePathToPoseRecoveryFallback\">\n                            <GoalUpdated />\n                            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\" />\n                        </ReactiveFallback>\n                    </RecoveryNode>\n                </RateController>\n                <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n                    <FollowPath path=\"{path}\" controller_id=\"FollowPath\" />\n                    <ReactiveFallback name=\"FollowPathRecoveryFallback\">\n                        <GoalUpdated />\n                        <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\" />\n                    </ReactiveFallback>\n                </RecoveryNode>\n            </PipelineSequence>\n            <ReactiveFallback name=\"RecoveryFallback\">\n                <GoalUpdated />\n                <RoundRobin name=\"RecoveryActions\">\n                    <Sequence name=\"ClearingActions\">\n                        <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\" />\n                        <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\" />\n                    </Sequence>\n                    <Spin spin_dist=\"1.57\" />\n                    <Wait wait_duration=\"5\" />\n                    <BackUp backup_dist=\"0.15\" backup_speed=\"0.025\" />\n                </RoundRobin>\n            </ReactiveFallback>\n        </RecoveryNode>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic task of handling a tray. The robot is programmed to perform a series of actions in a sequence, which includes looking at the tray, detecting handles (with retries), picking up the tray, looking up, moving back, going to a table, and placing the tray. This entire sequence is repeated once.\n\nThe \"LookAtTheTray\" action is followed by the \"DetectHandles\" action, which has a retry mechanism with a timeout of 300 milliseconds. After this, the robot picks up the tray, looks up, moves back, goes to the table, and finally places the tray. All these actions are part of a single cycle, which is repeated once.\n\nOverall, the behavior tree outlines the steps for the robot to handle a tray, ensuring that each action is performed in a specific order and allowing for retries in case of failure during handle detection.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"1\">            \n                <Sequence>\n                    <Action ID=\"LookAtTheTray\"/>\n                    <RetryUntilSuccesful num_attempts=\"3\">\n                        <Timeout msec=\"300\">\n                            <Action ID=\"DetectHandles\"/>\n                        </Timeout>\n                    </RetryUntilSuccesful>\n                    <Action ID=\"PickTray\"/>\n                    <Action ID=\"LookUp\"/>\n                    <Action ID=\"MoveBack\"/>\n                    <Action ID=\"GoToTable\"/>\n                    <Action ID=\"PlaceTray\"/>                     \n                </Sequence>            \n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"lookAtTheTray\"/>\n        <Action ID=\"DetectHandles\"/>\n        <Action ID=\"PickTray\"/>\n        <Action ID=\"LookUp\"/>\n        <Action ID=\"MoveBack\"/>\n        <Action ID=\"GoToTable\"/> \n        <Action ID=\"PlaceTray\"/>                \n        \n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robot's actions in a complex environment. The main task involves a sequence of actions, including waiting for a specific duration, making a plan to reach a goal, and repeating these steps multiple times. Additionally, the tree includes various utility actions such as logging messages, performing mathematical operations, subscribing to topics, and controlling the robot's movement and interactions with its surroundings.\n\nThe tree also supports decision-making through conditions and loops, enabling the robot to react based on certain criteria or iterate through sequences of actions. It can monitor and respond to external events, such as detecting fire or windows, and take appropriate actions like extinguishing fires or navigating to specific locations.\n\nOverall, the behavior tree orchestrates the robot's behavior by coordinating its movements, decision-making processes, and interactions with the environment, allowing it to perform tasks effectively and autonomously.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action name=\"WaitSeconds1\" duration=\"2\" ID=\"WaitSeconds\"/>\n            <ForceSuccess name=\"ForceSuccess1\">\n                <Repeat num_cycles=\"10\">\n                    <Action action=\"/Make_Plan\" state=\"gpf1\" name=\"GoToGoal1\" ID=\"UPOGoToGoalByName\" goal_name=\"stage_4_pos_final_5\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action name=\"WaitSeconds2\" duration=\"2\" ID=\"WaitSeconds\"/>\n            <ForceSuccess name=\"ForceSuccess2\">\n                <Repeat num_cycles=\"10\">\n                    <Action action=\"/Make_Plan\" state=\"gpf2\" name=\"UPOGoToGoalByName2\" ID=\"UPOGoToGoalByName\" goal_name=\"stage_4_pos_final_6\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action name=\"WaitSeconds3\" duration=\"2\" ID=\"WaitSeconds\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CallEmptyService\">\n            <input_port name=\"service\" type=\"std::string\">ROS service name</input_port>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"input\" type=\"bool\">Input boolean value</input_port>\n        </Condition>\n        <SubTree ID=\"CheckDoorandEnter\">\n            <input_port name=\"action\"/>\n            <input_port name=\"detection_action\"/>\n            <input_port name=\"door\"/>\n            <output_port name=\"out_door\"/>\n        </SubTree>\n        <SubTree ID=\"CheckFireAndExtinguish\">\n            <input_port name=\"actextinguish\">Extinguish Action Name</input_port>\n            <input_port name=\"actgoto\">GoTo Action Name</input_port>\n            <input_port name=\"fire\">Fire waypoint</input_port>\n            <output_port name=\"found_fire\">Name of the Fire WP if found</output_port>\n        </SubTree>\n        <Action ID=\"CheckKey\">\n            <input_port name=\"no_key\" type=\"std::string\">Key to determine if key to say 'no' has benn pressed</input_port>\n            <input_port name=\"yes_key\" type=\"std::string\">Key to determine if key to say 'yes' has been pressed</input_port>\n        </Action>\n        <SubTree ID=\"CheckResetRequest\">\n            <output_port name=\"reset_requested\"/>\n        </SubTree>\n        <Condition ID=\"CompareNumbers\">\n            <input_port name=\"comparison_op\" type=\"std::string\">Comparison operator. Valid operators are &lt;, >, &lt;=, >=, == and !=</input_port>\n            <input_port name=\"first\" type=\"double\">First operand</input_port>\n            <input_port name=\"second\" type=\"double\">Second operand</input_port>\n        </Condition>\n        <Condition ID=\"CompareStrings\">\n            <input_port name=\"comparison_op\" type=\"std::string\">Comparison operator. Valid operators are &lt;, >, &lt;=, >=, == and !=</input_port>\n            <input_port name=\"first\" type=\"std::string\">First operand</input_port>\n            <input_port name=\"second\" type=\"std::string\">Second operand</input_port>\n        </Condition>\n        <Action ID=\"ConcatenateStrings\">\n            <input_port name=\"first\" type=\"std::string\">First string</input_port>\n            <output_port name=\"output\" type=\"std::string\">Concatenated result string</output_port>\n            <input_port name=\"second\" type=\"std::string\">Second string</input_port>\n        </Action>\n        <Action ID=\"ConvertJsonToDouble\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"double\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToInt64\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"long\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToString\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"std::string\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToUint64\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"unsigned long\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertMessageField\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"void\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertRandomMessageField\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"void\">Output variable</output_port>\n        </Action>\n        <Decorator ID=\"CooldownMilliseconds\">\n            <input_port default=\"0\" name=\"cooldown\" type=\"unsigned int\">Cooldown time</input_port>\n        </Decorator>\n        <Decorator ID=\"CooldownSeconds\">\n            <input_port default=\"0\" name=\"cooldown\" type=\"unsigned int\">Cooldown time</input_port>\n        </Decorator>\n        <Action ID=\"CopyJson\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Input variable</input_port>\n            <output_port name=\"output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Output variable to copy to</output_port>\n        </Action>\n        <Action ID=\"DebugLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Action ID=\"ErrorLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <SubTree ID=\"ExitBuilding\">\n            <input_port name=\"robot_action\">Action Service Interface</input_port>\n            <input_port name=\"window\">Window to Exit</input_port>\n        </SubTree>\n        <SubTree ID=\"ExtinguishFacadeFire\">\n            <output_port name=\"fire_found\">WP where fire is found, none otherwise</output_port>\n        </SubTree>\n        <Action ID=\"FatalLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Action ID=\"FindByFieldValue\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"void\">Output variable</output_port>\n            <input_port name=\"value\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Value to search for</input_port>\n        </Action>\n        <Action ID=\"FindSubstrings\">\n            <input_port name=\"input\" type=\"std::string\">String to look into</input_port>\n            <input_port name=\"substrings\" type=\"std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> > > >\">Substrings to look for</input_port>\n        </Action>\n        <SubTree ID=\"Floor0SurveyAndExtinguish\"/>\n        <Decorator ID=\"ForEachLoop\">\n            <input_port name=\"break_on_child_failure\" type=\"bool\">Break loop on child failure?</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Input sequence</input_port>\n            <output_port name=\"output_element\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Output element variable</output_port>\n            <output_port name=\"output_index\" type=\"unsigned long\">Output index variable</output_port>\n        </Decorator>\n        <Action ID=\"GetJsonSize\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Input sequence</input_port>\n            <output_port name=\"output\" type=\"unsigned long\">Sequence size output</output_port>\n        </Action>\n        <Action ID=\"GetKeyboard\">\n            <output_port name=\"output\" type=\"std::string\">String received from keyboard</output_port>\n        </Action>\n        <Action ID=\"GetMessageField\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Output variable</output_port>\n        </Action>\n        <Action ID=\"GetRandomMessageField\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Output variable</output_port>\n        </Action>\n        <Action ID=\"GetTransformDistance\">\n            <input_port name=\"input\" type=\"tf::StampedTransform\">TF transform</input_port>\n            <output_port name=\"output\" type=\"double\">Distance form transform origin</output_port>\n        </Action>\n        <Action ID=\"GetTransformHorizontalDistance\">\n            <input_port name=\"input\" type=\"tf::StampedTransform\">TF transform</input_port>\n            <output_port name=\"output\" type=\"double\">2D distance from TF transform origin</output_port>\n        </Action>\n        <Action ID=\"GetTransformOrigin\">\n            <input_port name=\"input\" type=\"tf::StampedTransform\">TF transform</input_port>\n            <output_port name=\"x\" type=\"double\">Origin x coordinate</output_port>\n            <output_port name=\"y\" type=\"double\">Origin y coordinate</output_port>\n            <output_port name=\"z\" type=\"double\">Origin z coordinate</output_port>\n        </Action>\n        <Action ID=\"InfoLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Action ID=\"InitializeJson\">\n            <output_port name=\"output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Output variable to initialize</output_port>\n        </Action>\n        <Action ID=\"InterpolateFloat\">\n            <input_port name=\"input_range\" type=\"std::vector&lt;double, std::allocator&lt;double> >\">Input value range.</input_port>\n            <input_port name=\"input_value\" type=\"double\">Value to interpolate.</input_port>\n            <input_port name=\"output_range\" type=\"std::vector&lt;double, std::allocator&lt;double> >\">Output value range.</input_port>\n            <output_port name=\"output_value\" type=\"double\">Interpolated value.</output_port>\n        </Action>\n        <Control ID=\"Interruptible\"/>\n        <Action ID=\"LookupTransform\">\n            <output_port name=\"output\" type=\"tf::StampedTransform\">Result transform</output_port>\n            <input_port name=\"source_frame\" type=\"std::string\">Origin TF frame</input_port>\n            <input_port name=\"target_frame\" type=\"std::string\">Target TF frame</input_port>\n            <input_port default=\"0\" name=\"use_last_available\" type=\"bool\">Use last available transform?</input_port>\n        </Action>\n        <Decorator ID=\"Loop\"/>\n        <Action ID=\"MathOperationFloat\">\n            <input_port name=\"first\" type=\"double\">First operand</input_port>\n            <input_port name=\"operator\" type=\"std::string\">Math operation. Valid operatores are: +, -, / and *</input_port>\n            <output_port name=\"output\" type=\"double\">Operation result</output_port>\n            <input_port name=\"second\" type=\"double\">Second operand</input_port>\n        </Action>\n        <Action ID=\"MathOperationInt\">\n            <input_port name=\"first\" type=\"int\">First operand</input_port>\n            <input_port name=\"operator\" type=\"std::string\">Math operation. Valid operatores are: +, -, / and *</input_port>\n            <output_port name=\"output\" type=\"int\">Operation result</output_port>\n            <input_port name=\"second\" type=\"int\">Second operand</input_port>\n        </Action>\n        <Action ID=\"MonitorStdBool\">\n            <input_port default=\"0\" name=\"consume_msgs\" type=\"bool\">Should messages be consumed?</input_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Subscriber callback queue size</input_port>\n            <output_port name=\"serialized_output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message [std_msgs::Bool_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"MonitorStdFloat64\">\n            <input_port default=\"0\" name=\"consume_msgs\" type=\"bool\">Should messages be consumed?</input_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Subscriber callback queue size</input_port>\n            <output_port name=\"serialized_output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message [std_msgs::Float64_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"MonitorStdInt32\">\n            <input_port default=\"0\" name=\"consume_msgs\" type=\"bool\">Should messages be consumed?</input_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Subscriber callback queue size</input_port>\n            <output_port name=\"serialized_output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message [std_msgs::Int32_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"OStreamNode\">\n            <input_port name=\"message\" type=\"std::string\">String to print</input_port>\n        </Action>\n        <Decorator ID=\"OnlyOnce\"/>\n        <Action ID=\"PublishBool\">\n            <input_port name=\"data\" type=\"bool\">Auto-generated field from std_msgs::Bool_&lt;std::allocator&lt;void> ></input_port>\n            <input_port default=\"0\" name=\"latch\" type=\"bool\">Latch messages?</input_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Internal publisher queue size</input_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to publish to</input_port>\n        </Action>\n        <Action ID=\"PublishStdString\">\n            <input_port name=\"data\" type=\"std::string\">Auto-generated field from std_msgs::String_&lt;std::allocator&lt;void> ></input_port>\n            <input_port default=\"0\" name=\"latch\" type=\"bool\">Latch messages?</input_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Internal publisher queue size</input_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to publish to</input_port>\n        </Action>\n        <Action ID=\"RandomFloat\">\n            <input_port name=\"max\" type=\"double\">Max range value</input_port>\n            <input_port name=\"min\" type=\"double\">Minimum range value</input_port>\n            <output_port name=\"result\" type=\"double\">Random result value</output_port>\n        </Action>\n        <Action ID=\"RandomInteger\">\n            <input_port name=\"max\" type=\"int\">Max range value</input_port>\n            <input_port name=\"min\" type=\"int\">Minimum range value</input_port>\n            <output_port name=\"result\" type=\"int\">Random result value</output_port>\n        </Action>\n        <Action ID=\"RandomSequenceValue\">\n            <input_port default=\";\" name=\"delimiter\" type=\"std::string\">Sequence entries delimiter</input_port>\n            <output_port name=\"output\" type=\"std::string\">Result random sequence entry</output_port>\n            <input_port name=\"sequence\" type=\"std::string\">Sequence to randomize</input_port>\n        </Action>\n        <Action ID=\"SubscribeUPOGoal\">\n            <input_port default=\"0\" name=\"consume_msgs\" type=\"bool\">Should messages be consumed?</input_port>\n            <output_port name=\"output\" type=\"upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >\">Received ROS message [upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Subscriber callback queue size</input_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"UPOFireDetection3D\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"duration\" type=\"int\">Duration</input_port>\n            <output_port name=\"fire_found\" type=\"bool\">Fire Found</output_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n            <output_port name=\"x\" type=\"double\">Fire x</output_port>\n            <output_port name=\"y\" type=\"double\">Fire x</output_port>\n            <output_port name=\"z\" type=\"double\">Fire x</output_port>\n        </Action>\n        <Action ID=\"UPOFireExtinguish\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"detect_fire\" type=\"bool\">Detect Fire</input_port>\n            <output_port name=\"serialized_feedback\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message [upo_actions::FireExtinguishFeedback_&lt;std::allocator&lt;void> >]</output_port>\n            <output_port name=\"serialized_result\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message [upo_actions::FireExtinguishResult_&lt;std::allocator&lt;void> >]</output_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOGoToGoal\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"global_goal.header.frame_id\" type=\"std::string\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.header.seq\" type=\"unsigned int\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.orientation.w\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.orientation.x\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.orientation.y\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.orientation.z\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.position.x\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.position.y\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.position.z\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOGoToGoalByName\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"goal_name\" type=\"std::string\">Name of goal</input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOLanding\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"land\" type=\"bool\">Auto-generated field from upo_actions::LandingGoal_&lt;std::allocator&lt;void> ></input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOTakeOff\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n            <input_port name=\"takeoff_height.data\" type=\"float\">Auto-generated field from upo_actions::TakeOffGoal_&lt;std::allocator&lt;void> ></input_port>\n        </Action>\n        <Action ID=\"UPOWindowDetection\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"duration\" type=\"int\">Duration</input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n            <output_port name=\"window_present\" type=\"bool\">Window Present</output_port>\n            <output_port name=\"x\" type=\"double\">Window x</output_port>\n            <output_port name=\"y\" type=\"double\">Window y</output_port>\n            <output_port name=\"z\" type=\"double\">Window z</output_port>\n        </Action>\n        <Action ID=\"WaitMilliseconds\">\n            <input_port default=\"0\" name=\"duration\" type=\"unsigned int\">Time to wait</input_port>\n        </Action>\n        <Action ID=\"WaitSeconds\">\n            <input_port default=\"0\" name=\"duration\" type=\"unsigned int\">Time to wait</input_port>\n        </Action>\n        <Action ID=\"WarnLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Decorator ID=\"WhileSuccess\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of an entity, possibly a creature or character. The entity follows a sequence of behaviors: first, it attempts to acquire a target by guarding and then getting the target. If unsuccessful, it moves. Following this, it checks if the target is adjacent and attacks if so.\n\nThe available actions for the entity include attacking a target, eating prey, entering a shed, finding prey, finding a random pasture field, finding a retreat, finding a shed, giving birth, getting a target, and guarding while getting a target. Additionally, there are conditions such as being an adult, carnivorous, day/night time, gender-specific conditions, hunger status, location-based conditions, pregnancy, readiness to give birth, wood vermin status, and age-related conditions. \n\nOverall, the behavior tree models the decision-making process and actions of the entity in a dynamic environment, encompassing hunting, reproduction, shelter-seeking, and movement.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SequenceStar>\n                <Fallback>\n                    <Action ID=\"GuardDogGetTarget\"/>\n\t\t\t\t\t<Action ID=\"GetTarget\"/>\n                </Fallback>\n                <Action ID=\"Move\"/>\n                <Sequence>\n                    <Condition ID=\"TargetAdjacent\"/>\n                    <Action ID=\"AttackTarget\"/>\n                </Sequence>\n            </SequenceStar>\n        </Sequence>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AttackTarget\"/>\n        <Condition ID=\"CanHaveSex\"/>\n        <Action ID=\"EatPrey\"/>\n        <Action ID=\"EnterShed\"/>\n        <Action ID=\"FindPrey\"/>\n        <Action ID=\"FindRandomPastureField\"/>\n        <Action ID=\"FindRetreat\"/>\n        <Action ID=\"FindShed\"/>\n        <Action ID=\"GiveBirth\"/>\n\t\t<Action ID=\"GetTarget\"/>\n        <Action ID=\"GuardDogGetTarget\"/>\n        <Condition ID=\"IsAdult\"/>\n        <Condition ID=\"IsCarnivore\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsEgg\"/>\n        <Condition ID=\"IsEggLayer\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHerbivore\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInShed\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Condition ID=\"IsOnPasture\"/>\n        <Condition ID=\"IsPregnant\"/>\n        <Condition ID=\"IsProducer\"/>\n        <Condition ID=\"IsReadyToGiveBirth\"/>\n        <Condition ID=\"IsWoodVermin\"/>\n        <Condition ID=\"IsYoung\"/>\n        <Action ID=\"KillPrey\"/>\n        <Action ID=\"LayEgg\"/>\n        <Action ID=\"LeaveShed\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"Produce\"/>\n        <Action ID=\"RandomMove\"/>\n        <SubTree ID=\"ShedTree\"/>\n        <Action ID=\"Sleep\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n        <Action ID=\"TryHaveSex\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for an animal, likely a predator or prey. The tree encompasses various scenarios and actions based on conditions. \n\nIt begins with a priority selector that includes multiple sequences. The first sequence involves acquiring a target, moving towards it, and attacking if adjacent. The second sequence, named \"Hunt,\" occurs during specific conditions (nighttime and hunger) and involves finding prey, moving, killing, and eating. The third sequence, \"Retreat,\" happens during daylight and includes finding a retreat, moving, and sleeping. If none of these sequences are viable, the animal will resort to a random movement.\n\nThe tree also contains numerous conditions and actions related to the animal's characteristics and behaviors, such as age, gender, hunger, reproduction, and sleep.\n\nOverall, the behavior tree simulates the decision-making process of an animal, considering its needs, environment, and available actions.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <FallbackStar>\n            <SequenceStar>\n                <Action ID=\"GetTarget\"/>\n                <Action ID=\"Move\"/>\n                <Sequence>\n                    <Condition ID=\"TargetAdjacent\"/>\n                    <Action ID=\"AttackTarget\"/>\n                </Sequence>\n            </SequenceStar>\n            <SequenceStar name=\"Hunt\">\n                <Condition ID=\"IsNight\"/>\n                <Condition ID=\"IsHungry\"/>\n                <Action ID=\"FindPrey\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"KillPrey\"/>\n                <Action ID=\"EatPrey\"/>\n            </SequenceStar>\n            <SequenceStar name=\"Retreat\">\n                <Condition ID=\"IsDay\"/>\n                <Action ID=\"FindRetreat\"/>\n                <Action ID=\"Move\"/>\n                <Sequence>\n                    <Condition ID=\"IsDay\"/>\n                    <Action ID=\"Sleep\"/>\n                </Sequence>\n            </SequenceStar>\n            <Action ID=\"RandomMove\"/>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AttackTarget\"/>\n        <Condition ID=\"CanHaveSex\"/>\n        <Action ID=\"EatPrey\"/>\n        <Action ID=\"FindPrey\"/>\n        <Action ID=\"FindRetreat\"/>\n        <Action ID=\"GetTarget\"/>\n        <Action ID=\"GiveBirth\"/>\n        <Condition ID=\"IsAdult\"/>\n        <Condition ID=\"IsCarnivore\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsEgg\"/>\n        <Condition ID=\"IsEggLayer\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHerbivore\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Condition ID=\"IsPregnant\"/>\n        <Condition ID=\"IsProducer\"/>\n        <Condition ID=\"IsReadyToGiveBirth\"/>\n        <Condition ID=\"IsWoodVermin\"/>\n        <Condition ID=\"IsYoung\"/>\n        <Action ID=\"KillPrey\"/>\n        <Action ID=\"LayEgg\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"Produce\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"Sleep\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n        <Action ID=\"TryHaveSex\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a repetitive interaction between a speech-to-text system and a text-to-speech system. The process involves the following steps: \n1. The speech-to-text system converts spoken words into text.\n2. The text is then passed to the text-to-speech system, which vocalizes the message.\n3. The vocalized message is again converted back to text using the speech-to-text system.\n4. Finally, the reconverted text is once more vocalized by the text-to-speech system.\n\nThis entire sequence is repeated three times. This behavior tree essentially simulates a conversation loop where a message is spoken, converted to text, vocalized, re-converted to text, and vocalized again, all of which is repeated for a total of three cycles.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"3\">\n              <Sequence>\n                 <SpeechToTextActionClient text=\"{said}\" />\n                 <TextToSpeechActionClient msg=\"{said}\"/>\n                 <SpeechToTextActionClient text=\"{said}\" />\n                 <TextToSpeechActionClient msg=\"{said}\"/>\n              </Sequence>\n        </Repeat>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement to three different goals (Goal_a, Goal_b, Goal_c) in a repeated sequence for 3 cycles. The robot is directed to move to each goal sequentially and upon reaching each goal, it vocalizes its achievement through a text-to-speech action. This process is then repeated for the specified number of cycles.\n\nIn summary, the behavior tree controls the robot's navigation by setting goals, moving the robot to these goals using a navigation client, and providing verbal feedback at each location. This enables the robot to autonomously navigate to multiple destinations and communicate its progress.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"3\">\n            <Sequence>\n                <SetBlackboard output_key=\"Goal_a\" value=\"-5.40;-5.37;0.707;-0.707\" />\n                <SetBlackboard output_key=\"Goal_b\" value=\"-3.94;-4.47;0.707;-0.707\" />\n                <SetBlackboard output_key=\"Goal_c\" value=\"-4.79;-6.87;0.707;-0.707\" />\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                    <TextToSpeechActionClient msg=\"I'm at goal A\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                    <TextToSpeechActionClient msg=\"I'm at goal B\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                    <TextToSpeechActionClient msg=\"I'm at goal C\" />\n                </Sequence>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree specifies a continuous loop where a robot is programmed to detect a person using object detection. If a person is detected with a confidence level of at least 85%, the robot will perform a \"Detected\" speech action. If no person is detected or the confidence level is below 85%, the robot will perform a \"Not Detected\" speech action. This loop will repeat for 9999 cycles, indicating that the robot will continuously attempt to detect a person and provide corresponding feedback through speech actions.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Repeat num_cycles=\"9999\">\n\t\t\t<Sequence>\n\t\t\t\t<Fallback>\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<ObjectDetectionAction class=\"person\" pose=\"detected_Pose\" min_confidence=\"0.85\" />\n\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Detected\" />\n\t\t\t\t\t</Sequence>\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Not Detected\" />\n\t\t\t\t\t</Sequence>\n\n\t\t\t\t</Fallback>\n\t\t\t</Sequence>\n\t\t</Repeat>\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree initiates a robot's navigation system by first clearing the global cost map and then instructing the robot to seek specific positions. The robot is programmed to move to each of the specified search poses in sequence, with each pose being defined by its coordinates and orientation. This task likely involves the robot navigating through an environment to reach these designated locations for further actions or tasks.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n\t\t  <Nav2ClearGlobalCostMap/>\n\t\t\t<RobotSeekInitAction search_poses=\"-4.3,-4,180.0;-4.7,-6.6,270.0;-6.0,-4.2,206.0;-6.4,-1.9,0.0;-8.0,1.5,90.0;-4.4,0.95,218.0\" />\n\t\t</Sequence>\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a conversational system. It continuously listens to the user, repeating a sequence of actions if the user speaks and responding with \"I'm sorry, but I didn't hear you\" if no speech is detected. The robot will keep listening and responding in a loop for 999 cycles. After completing the cycles, it will say \"Goodbye\" as a closing message.\n\nThis behavior tree essentially creates a conversational loop where the robot listens for the user's input, responds accordingly, and then repeats the process or ends the conversation after a set number of cycles.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n\t\t\t<Repeat num_cycles=\"999\">\n\t\t\t<Fallback>\n\t\t\t\t<Sequence>\n\t\t\t\t\t<Delay delay_msec=\"3000\">\n\t          <TextToSpeechActionClient msg=\"Say something\" />\n\t\t\t\t\t</Delay>\n\t\t\t\t\t<SpeechToTextActionClient text=\"{said}\" />\n\t\t\t\t\t<TextToSpeechActionClient msg=\"You said\" />\n\t\t\t\t\t<TextToSpeechActionClient msg=\"{said}\" />\n\t\t\t\t</Sequence>\n\n\t\t\t\t<TextToSpeechActionClient msg=\"I'm sorry, but I didn't here you\" />\n\t\t\t</Fallback>\n\t\t\t</Repeat>\n\t\t\t<TextToSpeechActionClient msg=\"Goodbye\" />\n\t\t</Sequence>\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a sequence of actions for a robot. It begins by disabling pose detection control, then initiates tracking in scan mode at a rate of 3. Following this, it triggers a text-to-speech action to say \"Start\", waits for the scanning process to complete with the ScanWaitAction, and then speaks \"End\" using text-to-speech. Finally, it switches the tracking mode to \"Track\" at a rate of 3. This sequence of actions likely corresponds to a specific task or behavior that the robot is expected to perform, such as scanning an environment, providing audio cues, and adjusting its tracking behavior.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n\t\t  <PoseDetectionControlAction enable=\"false\" />\n\n      <TrackAction mode=\"Scan\" rate=\"3\" />\n      <TextToSpeechActionClient msg=\"Start\" />\n      <ScanWaitAction />\n      <TextToSpeechActionClient msg=\"End\" />\n      <TrackAction mode=\"Track\" rate=\"3\" />\n\n\t\t</Sequence>\n\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is a simple navigation system for a robot. It starts by computing a path to a specified goal using the global planner and then follows this path using the local planner. The goal location and the computed path are stored in the blackboard for reference. This behavior tree essentially orchestrates the process of navigating the robot from its current position to a specified goal, ensuring that it follows a valid path generated by the global planner and executes the necessary actions to reach the goal using the local planner.",
        "output": "<!--\n  This Behavior Tree does the bare minimum - it invokes ComputePathToPose to\n  compute a path using the global planner. It then invokes the local planner\n  (FollowPath) with this path. The path endpoints (input to the global planner)\n  and the resulting path (output of the global planner and input to the local\n  planner) are passed on the blackboard.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <SequenceStar name=\"root\">\n      <ComputePathToPose goal=\"${goal}\" path=\"${path}\"/>\n      <FollowPath path=\"${path}\"/>\n    </SequenceStar>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for a robot. The robot is programmed to perform various tasks based on the status of its components and its current state.\n\nInitially, it checks the status of its components (battery, laser, camera) and takes appropriate actions such as reconfiguring modes or navigating to a recharge station if necessary. If the battery needs recharging, it navigates to a designated recharge station and initiates the recharging process.\n\nIf the components are functioning normally, the robot enters a patrolling mode where it navigates through a series of waypoints (wp_1 to wp_7), effectively patrolling the area.\n\nThe behavior tree includes actions such as checking components, navigation to specific waypoints, recharging, and reconfiguring operational modes based on component statuses. This behavior tree allows the robot to autonomously manage its energy levels and component functionality while performing its designated tasks.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <Fallback>\n                <Action ID=\"CheckComponent\" component=\"battery\"/>\n                <Sequence name=\"recharging\">\n                    <Fallback>\n                        <Sequence>\n                            <Action ID=\"CheckComponent\" component=\"laser\"/>\n                            <Action ID=\"Reconfigure\" mode=\"f_energy_saving_mode\"/>\n                        </Sequence>\n                        <Sequence>\n                            <Action ID=\"CheckComponent\" component=\"camera\"/>\n                            <Action ID=\"Reconfigure\" mode=\"f_degraded_mode\"/>\n                        </Sequence>\n                    </Fallback>\n                    <Action ID=\"NavigateToWp\" goal=\"recharge_station\" name=\"navigate_to_wp\"/>\n                    <Action ID=\"Recharge\"/>\n                </Sequence>\n            </Fallback>\n            <Sequence>\n                <Fallback>\n                    <Sequence>\n                        <Action ID=\"CheckComponent\" component=\"laser\"/>\n                        <Action ID=\"Reconfigure\" mode=\"f_normal_mode\"/>\n                    </Sequence>\n                    <Sequence>\n                        <Action ID=\"CheckComponent\" component=\"camera\"/>\n                        <Action ID=\"Reconfigure\" mode=\"f_degraded_mode\"/>\n                    </Sequence>\n                </Fallback>\n                <SequenceStar name=\"patrolling\">\n                    <Action ID=\"NavigateToWp\" goal=\"wp_1\" name=\"navigate_to_wp\"/>\n                    <Action ID=\"NavigateToWp\" goal=\"wp_2\" name=\"navigate_to_wp\"/>\n                    <Action ID=\"NavigateToWp\" goal=\"wp_3\" name=\"navigate_to_wp\"/>\n                    <Action ID=\"NavigateToWp\" goal=\"wp_4\" name=\"navigate_to_wp\"/>\n                    <Action ID=\"NavigateToWp\" goal=\"wp_5\" name=\"navigate_to_wp\"/>\n                    <Action ID=\"NavigateToWp\" goal=\"wp_6\" name=\"navigate_to_wp\"/>\n                    <Action ID=\"NavigateToWp\" goal=\"wp_7\" name=\"navigate_to_wp\"/>\n                </SequenceStar>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CheckComponent\">\n            <input_port name=\"component\"/>\n        </Action>\n        <Action ID=\"NavigateToWp\">\n            <input_port name=\"goal\"/>\n        </Action>\n        <Action ID=\"Recharge\"/>\n        <Action ID=\"Reconfigure\">\n            <input_port name=\"mode\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a sequence of two actions: \"DebugAction\" and \"DebugAction\". These actions are set to perform specific tasks, such as \"Doing nothing\" and \"With style\" respectively.\n\nAdditionally, the XML includes a list of available actions that can be used within the behavior tree. These actions include various functionalities such as moving robotic arms, checking battery levels, detecting faces, controlling gaze, obtaining sensor data, giving feedback, navigation, speaking, and waiting for specified durations.\n\nOverall, the behavior tree seems to be designed for orchestrating a wide range of robot behaviors and interactions, including perception, decision-making, and action execution. The provided actions cover a diverse set of capabilities, indicating that the behavior tree is intended for a versatile and complex robotic system capable of performing various tasks in different scenarios.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"DebugAction\" string=\"Doing nothing\"/>\n            <Action ID=\"DebugAction\" string=\"With style\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\"/>\n            <input_port name=\"action_name\"/>\n        </Action>\n        <Action ID=\"CheckBattery\">\n            <output_port name=\"battery_state\" type=\"int\"/>\n            <output_port name=\"percentage\" type=\"double\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port name=\"charging_state\" type=\"int\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Action ID=\"DebugAction\">\n            <input_port name=\"string\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"Destroy\"/>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"GetFloat64\">\n            <output_port name=\"number\" type=\"double\"/>\n            <input_port name=\"topic\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"GetInt16\">\n            <output_port name=\"number\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GetPoseArray\">\n            <output_port name=\"pose_array\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GiveFeedback\">\n            <input_port default=\"850\" name=\"almost_thr\"/>\n            <input_port name=\"correct_blocks\"/>\n            <input_port name=\"incorrect_blocks\"/>\n            <input_port default=\"0\" name=\"personality\"/>\n            <input_port name=\"score\"/>\n        </Action>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"goal_pose\"/>\n        </Action>\n        <Action ID=\"MoveTorso\">\n            <input_port name=\"angle\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"ResetVars\"/>\n        <Action ID=\"SelectBlock\">\n            <input_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <output_port name=\"block_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <input_port name=\"position_in_list\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"SelectFieldFromPoseStamped\">\n            <input_port name=\"field\"/>\n            <output_port name=\"output_val\"/>\n            <input_port name=\"pose_stamped\"/>\n        </Action>\n        <Action ID=\"SelectPose\">\n            <input_port name=\"pose_array\"/>\n            <output_port name=\"pose_stamped\"/>\n            <input_port name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"SenseScore\">\n            <output_port name=\"score\"/>\n            <input_port name=\"score_topic\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"action_name\" type=\"std::string\"/>\n            <input_port name=\"language\" type=\"std::string\"/>\n            <input_port name=\"utterance\" type=\"std::string\"/>\n            <input_port name=\"voice\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port default=\"SUCCESS\" name=\"result\">Result after specified time: SUCCESS or FAILURE</input_port>\n            <input_port default=\"5\" name=\"seconds\">Time in seconds</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robot. Initially, it processes data from a camera feed to identify faces and selects the closest one for interaction. Subsequently, the robot gazes at the identified face, performs an arm gesture, speaks a phrase, waits for a few seconds, and then lowers its arms. If interrupted during this sequence, it transitions to patrolling behavior, where it moves through a series of predefined locations.\n\nThe \"Patrol\" subtree contains logic for moving the robot to different waypoints based on its current state. The robot cycles through four waypoints, updating its state after each movement. This behavior allows the robot to navigate a predetermined path while maintaining awareness of its location.\n\nAdditionally, the behavior tree includes various reusable actions and conditions that can be utilized in different parts of the robot's decision-making process, such as checking battery levels, comparing values, or performing specific arm movements.\n\nOverall, the behavior tree enables the robot to engage with humans by reacting to their presence, speaking,",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <ReactiveFallback>\n            <Sequence>\n                <Action ID=\"GetPoseArray\" name=\"Faces\" pose_array=\"faceList\" topic=\"/faces\"/>\n                <Action ID=\"SelectPose\" name=\"Closest face\" pose_array=\"{faceList}\" pose_stamped=\"closest_face\" position_in_list=\"0\"/>\n                <Action ID=\"TimerAction\" s_between_success=\"10\"/>\n                <Action ID=\"GazeAtTarget\" action_name=\"gaze\" fixation_pose=\"{closest_face}\" frame_id=\"base_footprint\"/>\n                <Action ID=\"ArmRoutines\" gesture=\"HAPPY_EMOTIVE\" topic=\"/vizzyArmRoutines/right/command\"/>\n                <Action ID=\"Speak\" action_name=\"/gcloud_tts\" language=\"pt_PT\" utterance=\"Ora viva\" voice=\"pt-PT-Wavenet-D\"/>\n                <Action ID=\"WaitForXSeconds\" result=\"SUCCESS\" seconds=\"3\"/>\n                <Action ID=\"ArmRoutines\" gesture=\"ARMS_DOWN\" topic=\"/vizzyArmRoutines/right/command\"/>\n            </Sequence>\n            <SubTree ID=\"Patrol\"/>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Patrol\">\n        <Switch3 case_1=\"0\" case_2=\"1\" case_3=\"2\" variable=\"{state}\">\n            <Sequence>\n                <Action ID=\"MoveBase\" action_name=\"move_base\" frame_id=\"map\" goal_pose=\"0.568;0.5395;0;0;0;0.0347;0.99939\"/>\n                <SetBlackboard output_key=\"state\" value=\"1\"/>\n            </Sequence>\n            <Sequence>\n                <Action ID=\"MoveBase\" action_name=\"move_base\" frame_id=\"map\" goal_pose=\"-16.48;-0.2331;0;0;0;0.6178;0.78627\"/>\n                <SetBlackboard output_key=\"state\" value=\"2\"/>\n            </Sequence>\n            <Sequence>\n                <Action ID=\"MoveBase\" action_name=\"move_base\" frame_id=\"map\" goal_pose=\"-16.129;16.7376;0;0;0;0.05602;0.9984\"/>\n                <SetBlackboard output_key=\"state\" value=\"3\"/>\n            </Sequence>\n            <Sequence>\n                <Action ID=\"MoveBase\" action_name=\"move_base\" frame_id=\"map\" goal_pose=\"1.13;5.56;0;0;0;-0.1487;0.9888\"/>\n                <SetBlackboard output_key=\"state\" value=\"0\"/>\n            </Sequence>\n        </Switch3>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\"/>\n            <input_port name=\"action_name\"/>\n        </Action>\n        <Action ID=\"CheckBattery\">\n            <output_port name=\"battery_state\" type=\"int\"/>\n            <output_port name=\"percentage\" type=\"double\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port name=\"charging_state\" type=\"int\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Action ID=\"DebugAction\">\n            <input_port name=\"string\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"Destroy\"/>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"GetFloat64\">\n            <output_port name=\"number\" type=\"double\"/>\n            <input_port name=\"topic\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"GetInt16\">\n            <output_port name=\"number\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GetPoseArray\">\n            <input_port name=\"pose_array\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GiveFeedback\">\n            <input_port default=\"850\" name=\"almost_thr\"/>\n            <input_port name=\"correct_blocks\"/>\n            <input_port name=\"incorrect_blocks\"/>\n            <input_port default=\"0\" name=\"personality\"/>\n            <input_port name=\"score\"/>\n        </Action>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"goal_pose\"/>\n        </Action>\n        <Action ID=\"MoveTorso\">\n            <input_port name=\"angle\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <SubTree ID=\"Patrol\"/>\n        <Action ID=\"ResetVars\"/>\n        <Action ID=\"SelectBlock\">\n            <input_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <output_port name=\"block_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <input_port name=\"position_in_list\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"SelectFieldFromPoseStamped\">\n            <input_port name=\"field\"/>\n            <output_port name=\"output_val\"/>\n            <input_port name=\"pose_stamped\"/>\n        </Action>\n        <Action ID=\"SelectPose\">\n            <input_port name=\"pose_array\"/>\n            <input_port name=\"pose_stamped\"/>\n            <input_port name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"SenseScore\">\n            <output_port name=\"score\"/>\n            <input_port name=\"score_topic\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"language\"/>\n            <input_port name=\"utterance\"/>\n            <input_port name=\"voice\"/>\n        </Action>\n        <Action ID=\"TimerAction\">\n            <input_port name=\"s_between_success\">Time (s) before this node returns SUCCESS. It will return FAILURE in the meanwhile</input_port>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port default=\"SUCCESS\" name=\"result\">Result after specified time: SUCCESS or FAILURE</input_port>\n            <input_port default=\"5\" name=\"seconds\">Time in seconds</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions for a robotic system. It involves repeating a series of actions for a specified number of cycles. The robot first checks its state against a desired sequence, and if it fails, it triggers a replanning action. Following this, it enters a reactive sequence where it checks the locomotion status and performs recovery actions if necessary. Then, it attempts to execute a move action based on a given navigation goal, triggering replanning if unsuccessful. After each cycle, it updates its state and the desired sequence based on the performed action.\n\nOverall, the behavior tree orchestrates the robot's decision-making process, ensuring it follows a predefined sequence of actions while handling failures and updating its internal state. This allows the robot to adapt to changing conditions and continue executing its tasks effectively.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Action ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"Replanning2\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <Action ID=\"LocomotionStatusCheck\"/>\n                        <Timeout msec=\"\">\n                            <Sequence>\n                                <Action ID=\"RecoveryStand\"/>\n                                <Action ID=\"LocomotionStart\"/>\n                            </Sequence>\n                        </Timeout>\n                        <ForceFailure>\n                            <Action ID=\"Replanning3\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Action ID=\"MoveAction\" action=\"{action}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\" nav_goal=\"{nav_goal}\"/>\n                        <ForceFailure>\n                            <Action ID=\"Replanning3\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" nav_goal=\"{nav_goal}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n        <Action ID=\"LocomotionStart\"/>\n        <Action ID=\"LocomotionStatusCheck\"/>\n        <Action ID=\"MoveAction\">\n            <output_port name=\"action\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n            <input_port name=\"nav_goal\"/>\n        </Action>\n        <Action ID=\"RecoveryStand\"/>\n        <Action ID=\"Replanning2\"/>\n        <Action ID=\"Replanning3\"/>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n            <output_port name=\"nav_goal\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robotic system's actions. It consists of a sequence that repeats a specified number of times. Within each repetition, it attempts a series of actions and handles potential failures.\n\nThe first step involves performing a pre-check on the system's state and executed sequence against the desired sequence. If this check fails, a replanning request at level 2 is issued. Next, based on a switch condition, the system either moves, stays in place, or performs a synchronized transition. Each action has associated checks and failure handling.\n\nAfter these steps, the system updates its desired sequence and executed sequence based on the performed action. This process repeats for the specified number of cycles.\n\nOverall, the behavior tree orchestrates the robot's actions, including movement, status checks, recovery, and replanning, while ensuring robustness through error handling and sequence updates.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Action ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <Fallback>\n                    <Switch3 case_1=\"move\" case_2=\"stay\" case_3=\"synchronized_transition\" variable=\"{bt_action_type}\">\n                        <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                        <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                        <Action ID=\"SynchronizedTransitionAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                        <AlwaysFailure/>\n                    </Switch3>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Action>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a simple task for a robot to follow a path to a specified goal. It first computes a path to the given goal using a planner with the ID \"GridBased\", and then follows the computed path using a controller with the ID \"FollowPath\". This behavior tree is designed to enable the robot to autonomously navigate to a specific location by generating a path plan and executing it through path following.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence>\n      <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the decision-making process for a robot. The robot is programmed to perform various tasks based on certain conditions and actions. \n\nInitially, it will attempt to follow a sequence of actions, such as going to a known room or following a human. If these actions are not feasible, it will move to alternative sequences, like finding a bottle, grasping it, and locating its position. These sequences involve checking conditions (e.g., whether the bottle is found or located) and executing corresponding actions (e.g., computing inverse pose, grasping the bottle).\n\nIf none of the primary or alternative sequences can be executed, the robot will resort to asking for help. Throughout this decision-making process, the robot also performs checks on its environment, such as determining if it is in a known room or if the inverse pose is valid.\n\nOverall, the behavior tree guides the robot through a series of tasks, prioritizing different actions based on the prevailing conditions.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!--------------------------------------->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Root>\n            <Fallback name=\"FB1\">\n                <Sequence name=\"S1\">\n                    <Fallback name=\"FB2\">\n                        <Sequence name=\"S7\">\n                            <Condition ID=\"Room_known\"/>\n                            <Fallback name=\"FB10\">\n                                <Condition ID=\"Robot_in_room\"/>\n                                <Action ID=\"Go_to_room\"/>\n                            </Fallback>\n                        </Sequence>\n                        <Action ID=\"FollowHuman\"/>\n                    </Fallback>\n                    <Sequence name=\"S2\">\n                        <Fallback name=\"FB3\">\n                            <Condition ID=\"Bottle_found\"/>\n                            <Action ID=\"Find_bottle\"/>\n                        </Fallback>\n                        <Fallback name=\"FB4\">\n                            <Condition ID=\"Bottle_grasped\"/>\n                            <Fallback name=\"FB5\">\n                                <Sequence name=\"S3\">\n                                    <Fallback name=\"FB7\">\n                                        <Sequence name=\"S6\">\n                                            <Condition ID=\"Inv_pose_computed\"/>\n                                            <Condition ID=\"Inv_pose_valid\"/>\n                                        </Sequence>\n                                        <Action ID=\"Compute_inv_pose\"/>\n                                    </Fallback>\n                                    <Sequence name=\"S4\">\n                                        <Fallback name=\"FB8\">\n                                            <Condition ID=\"Robot_at_inv_pose\"/>\n                                            <Sequence name=\"S8\">\n                                                <Action ID=\"Keep_arms_for_grasp\"/>\n                                                <Action ID=\"Go_to_inv_pose\"/>\n                                            </Sequence>\n                                        </Fallback>\n                                        <Sequence name=\"S5\">\n                                            <Fallback name=\"FB9\">\n                                                <Condition ID=\"Bottle_located\"/>\n                                                <Action ID=\"Locate_bottle\"/>\n                                            </Fallback>\n                                            <Action ID=\"Grasp_bottle\"/>\n                                        </Sequence>\n                                    </Sequence>\n                                </Sequence>\n                                <Action ID=\"Set_inv_pose_not_valid\"/>\n                            </Fallback>\n                        </Fallback>\n                    </Sequence>\n                </Sequence>\n                <Action ID=\"Ask_for_help\"/>\n            </Fallback>\n        </Root>\n    </BehaviorTree>\n    <!--------------------------------------->\n    <TreeNodesModel>\n        <Action ID=\"Ask_for_help\"/>\n        <Condition ID=\"Bottle_found\"/>\n        <Condition ID=\"Bottle_grasped\"/>\n        <Condition ID=\"Bottle_located\"/>\n        <Action ID=\"Compute_inv_pose\"/>\n        <Action ID=\"Find_bottle\"/>\n        <Action ID=\"FollowHuman\"/>\n        <Action ID=\"Go_to_inv_pose\"/>\n        <Action ID=\"Go_to_room\"/>\n        <Action ID=\"Grasp_bottle\"/>\n        <Condition ID=\"Inv_pose_computed\"/>\n        <Condition ID=\"Inv_pose_valid\"/>\n        <Action ID=\"Keep_arms_for_grasp\"/>\n        <Action ID=\"Keep_running\"/>\n        <Action ID=\"Locate_bottle\"/>\n        <Condition ID=\"Robot_at_inv_pose\"/>\n        <Condition ID=\"Robot_in_room\"/>\n        <Condition ID=\"Room_known\"/>\n        <Action ID=\"Set_inv_pose_not_valid\"/>\n    </TreeNodesModel>\n    <!--------------------------------------->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of tasks for a drone. Initially, the drone is instructed to take off, then follow a specific path, and finally land. Each task is represented as an \"Action\" with a unique task description. The first action instructs the drone to take off, followed by following a predefined path, and lastly landing.\n\nThe \"BehaviorTask\" action node takes in a task description as input, which specifies the action to be performed along with any additional parameters required for that action. In this case, the task descriptions include \"TAKE_OFF\", \"FOLLOW_PATH\", and \"LAND\", each accompanied by relevant parameters such as the path coordinates for the \"FOLLOW_PATH\" task.\n\nOverall, the behavior tree orchestrates the drone's sequential execution of these tasks, ensuring it follows a specific set of actions in order to achieve its objectives.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <Action ID=\"BehaviorTask\" task_description=\"TAKE_OFF;;1\"/>\n            <Action ID=\"BehaviorTask\" task_description=\"FOLLOW_PATH;path: [ [1, 1, 3] ];1\"/>\n            <Action ID=\"BehaviorTask\" task_description=\"LAND;;1\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"BehaviorTask\">\n            <input_port name=\"task_description\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a decision-making process for an autonomous vehicle. The vehicle is programmed to perform various driving maneuvers based on the surrounding conditions and external inputs.\n\nThe main behavior tree consists of a fallback sequence, where the vehicle will attempt different reactive sequences based on specific conditions. These include pulling over, pulling out, side shifting, lane change, and avoidance maneuvers. If none of these reactive sequences are applicable, the vehicle defaults to lane following.\n\nAdditionally, there are two separate behavior trees labeled \"a\" and \"b\", each containing a reactive fallback sequence for specific maneuvers - lane change and avoidance respectively. These sequences involve checking for approval and executing the corresponding action.\n\nThe TreeNodesModel section provides details about the various conditions, actions, and sub-trees involved in the decision-making process, including readiness checks, requests, and output descriptions for each action.\n\nOverall, the behavior tree orchestrates the vehicle's decision-making process for safe and efficient navigation on the road.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback>\n            <ReactiveSequence>\n                <Condition ID=\"PullOver_Request\"/>\n                <Condition ID=\"PullOver_Ready\"/>\n                <Action ID=\"PullOver_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"PullOut_Request\"/>\n                <Condition ID=\"PullOut_Ready\"/>\n                <Action ID=\"PullOut_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"SideShift_Request\"/>\n                <Condition ID=\"SideShift_Ready\"/>\n                <Action ID=\"SideShift_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"LaneChange_Request\"/>\n                <Fallback>\n                    <Condition ID=\"LaneChange_Ready\"/>\n                    <Condition ID=\"ForceLaneChange_ForceApproval\"/>\n                </Fallback>\n                <Action ID=\"LaneChange_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"Avoidance_Request\"/>\n                <Condition ID=\"Avoidance_Ready\"/>\n                <Action ID=\"Avoidance_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <Action ID=\"LaneFollowing_Plan\" output=\"{output}\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"a\">\n        <ReactiveFallback>\n            <Condition ID=\"LaneChange_CheckApproval\"/>\n            <KeepRunningUntilFailure>\n                <Action ID=\"LaneChange_PlanCandidate\" output=\"{output}\"/>\n            </KeepRunningUntilFailure>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"b\">\n        <ReactiveFallback>\n            <Condition ID=\"Avoidance_CheckApproval\"/>\n            <KeepRunningUntilFailure>\n                <Action ID=\"Avoidance_PlanCandidate\" output=\"{output}\"/>\n            </KeepRunningUntilFailure>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Condition ID=\"Avoidance_CheckApproval\"/>\n        <Action ID=\"Avoidance_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"Avoidance_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"Avoidance_Ready\"/>\n        <Condition ID=\"Avoidance_Request\"/>\n        <Condition ID=\"ExternalApproval\"/>\n        <Condition ID=\"ForceApproval\"/>\n        <Condition ID=\"ForceLaneChange_ForceApproval\"/>\n        <Condition ID=\"LaneChange_CheckApproval\"/>\n        <Action ID=\"LaneChange_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"LaneChange_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"LaneChange_Ready\"/>\n        <Condition ID=\"LaneChange_Request\"/>\n        <Action ID=\"LaneFollowing_Plan\">\n            <output_port name=\"output\" type=\"boost::optional&lt;tier4_planning_msgs::PathWithLaneId_&lt;std::allocator&lt;void&gt; &gt; &gt;\">desc</output_port>\n        </Action>\n        <Action ID=\"LaneFollowing_PlanCandidate\">\n            <output_port name=\"output_candidate\" type=\"boost::optional&lt;tier4_planning_msgs::PathWithLaneId_&lt;std::allocator&lt;void&gt; &gt; &gt;\">desc</output_port>\n        </Action>\n        <Condition ID=\"LaneFollowing_Ready\"/>\n        <Condition ID=\"LaneFollowing_Request\"/>\n        <Action ID=\"PullOut_Plan\">\n            <output_port name=\"output\"/>\n        </Action>\n        <Condition ID=\"PullOut_Ready\"/>\n        <Condition ID=\"PullOut_Request\"/>\n        <Action ID=\"PullOver_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"PullOver_Ready\"/>\n        <Condition ID=\"PullOver_Request\"/>\n        <Condition ID=\"SideShift_CheckApproval\"/>\n        <Action ID=\"SideShift_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"SideShift_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"SideShift_Ready\"/>\n        <Condition ID=\"SideShift_Request\"/>\n        <SubTree ID=\"SubTree\"/>\n        <SubTree ID=\"a\"/>\n        <SubTree ID=\"b\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree instructs a robot to start the autodocking process and then cancel it immediately after. This suggests that the robot is being directed to initiate the autodocking procedure but then abruptly halt it without completing the task.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <AutodockClient action=\"start\" />\n            <AutodockClient action=\"cancel\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single action, \"Turn\", which suggests that the task is to execute a turn behavior. This could involve instructing a robot or entity to rotate in a specific direction or angle. The behavior tree does not provide detailed conditions or parameters for the turn action, so it is likely that the specifics of the turn behavior are defined elsewhere or through external inputs.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n      <Turn   name=\"Turn\"/>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement and communication. Initially, the robot is instructed to move to a specific location defined by \"move_goal\" coordinates (1;2;3) and then communicate the result. The \"MoveRobot\" subtree handles the actual movement, attempting to reach the specified goal. If successful, it updates the output with \"mission accomplished\". In case of failure, it updates the output with \"mission failed\".\n\nIn summary, the main sequence sets the move goal, triggers the robot's movement using the \"MoveRobot\" subtree, and then communicates the outcome. The \"MoveRobot\" subtree employs a fallback mechanism, attempting to move to the specified location and updating the output accordingly based on success or failure.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"main_sequence\">\n            <SetBlackboard output_key=\"move_goal\" value=\"1;2;3\" />\n            <SubTree ID=\"MoveRobot\" target=\"move_goal\" output=\"move_result\" />\n            <SaySomething message=\"{move_result}\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Fallback name=\"move_robot_main\">\n            <SequenceStar>\n                <MoveBase       goal=\"{target}\"/>\n                <SetBlackboard output_key=\"output\" value=\"mission accomplished\" />\n            </SequenceStar>\n            <ForceFailure>\n                <SetBlackboard output_key=\"output\" value=\"mission failed\" />\n            </ForceFailure>\n        </Fallback>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the automatic cleaning and preparation of a coffee machine. It ensures that the machine is clean, has enough water, and handles various tasks such as filling the water tank, emptying the waste container, selecting the desired type of coffee, adding milk or sugar if desired, and placing the cup for dispensing coffee.\n\nThe \"AutoClean\" behavior includes sub-behaviors to manage the water tank and waste container. The \"CoffeType\" behavior handles the selection and preparation of the desired type of coffee, including adding milk or sugar if needed. The \"OpenCoffeMachine\" behavior deals with ensuring the machine is open and ready for use, while \"PutCoffeCup\" manages placing the cup in position for dispensing.\n\nOverall, the behavior tree coordinates a series of actions and checks to automate the process of preparing and cleaning the coffee machine, ensuring it is ready for use and can dispense the desired type of coffee.",
        "output": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"AutoClean\">\n        <Fallback>\n            <Condition ID=\"IsCleanProcessFinished\"/>\n            <Fallback>\n                <Condition ID=\"IsThereEnoughWater\"/>\n                <Sequence>\n                    <Timeout msec=\"5000\">\n                        <Condition ID=\"IsWaterTankRemoved\"/>\n                    </Timeout>\n                    <Fallback>\n                        <Timeout msec=\"5000\">\n                            <Condition ID=\"IsWaterTankFull\"/>\n                        </Timeout>\n                        <Action ID=\"FillWaterTank\"/>\n                    </Fallback>\n                    <RetryUntilSuccesful num_attempts=\"100\">\n                        <Condition ID=\"IsWaterTankPlacedInCoffeMachine\"/>\n                    </RetryUntilSuccesful>\n                </Sequence>\n            </Fallback>\n            <Fallback>\n                <Inverter>\n                    <Condition ID=\"IsMarroTankFull\"/>\n                </Inverter>\n                <Sequence>\n                    <Timeout msec=\"5000\">\n                        <Condition ID=\"IsMarroTankRemoved\"/>\n                    </Timeout>\n                    <Fallback>\n                        <Timeout msec=\"5000\">\n                            <Condition ID=\"IsMarroTankEmpty\"/>\n                        </Timeout>\n                        <Action ID=\"EmptyMarroTank\"/>\n                    </Fallback>\n                    <RetryUntilSuccesful num_attempts=\"100\">\n                        <Condition ID=\"IsMarroTankPlacedInCoffeMachine\"/>\n                    </RetryUntilSuccesful>\n                </Sequence>\n            </Fallback>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <SubTree ID=\"OpenCoffeMachine\" __shared_blackboard=\"false\"/>\n            <SubTree ID=\"AutoClean\" __shared_blackboard=\"false\"/>\n            <SubTree ID=\"PutCoffeCup\" __shared_blackboard=\"false\"/>\n            <SubTree ID=\"CoffeType\" __shared_blackboard=\"false\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"CoffeType\">\n        <Sequence>\n            <Fallback>\n                <Timeout msec=\"5000\">\n                    <Condition ID=\"IsDesiredCoffeSelected\"/>\n                </Timeout>\n                <Action ID=\"PressDesiredCoffe\"/>\n            </Fallback>\n            <Timeout msec=\"5000\">\n                <Condition ID=\"IsCoffeFinished\"/>\n            </Timeout>\n            <Timeout msec=\"5000\">\n                <Condition ID=\"HasCupOffCoffeBeenRemoved\"/>\n            </Timeout>\n            <Timeout msec=\"5000\">\n                <Fallback>\n                    <Condition ID=\"HasHumanAddedCleaningCup\"/>\n                    <Sequence>\n                        <Action ID=\"PlaceCleanCup\"/>\n                        <Action ID=\"SwitchOffCoffeMachine\"/>\n                    </Sequence>\n                </Fallback>\n            </Timeout>\n            <Timeout msec=\"5000\">\n                <Fallback name=\"arallel\">\n                    <Condition ID=\"HasHumanAddedMilk\"/>\n                    <Sequence>\n                        <Fallback>\n                            <Inverter>\n                                <Condition ID=\"IsMilkDesired\"/>\n                            </Inverter>\n                            <Action ID=\"AddMilktoCoffe\"/>\n                        </Fallback>\n                        <Fallback>\n                            <Inverter>\n                                <Condition ID=\"IsSugarDesired\"/>\n                            </Inverter>\n                            <Action ID=\"AddSugarToCoffe\"/>\n                        </Fallback>\n                    </Sequence>\n                </Fallback>\n            </Timeout>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"OpenCoffeMachine\">\n        <Fallback>\n            <Condition ID=\"IsMachineOpen\"/>\n            <Sequence>\n                <RetryUntilSuccesful num_attempts=\"10\">\n                    <Condition ID=\"IsCleanCupReady\"/>\n                </RetryUntilSuccesful>\n                <Fallback>\n                    <Timeout msec=\"5000\">\n                        <Condition ID=\"IsMachineOpen\"/>\n                    </Timeout>\n                    <Action ID=\"SwitchOnCoffeMachine\"/>\n                </Fallback>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"PutCoffeCup\">\n        <Fallback>\n            <Timeout msec=\"5000\">\n                <Condition ID=\"IsCoffeCupReady\"/>\n            </Timeout>\n            <Action ID=\"PlaceCoffeCup\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AddMilktoCoffe\"/>\n        <Action ID=\"AddSugarToCoffe\"/>\n        <SubTree ID=\"AutoClean\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n        </SubTree>\n        <SubTree ID=\"CoffeType\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n        </SubTree>\n        <Action ID=\"EmptyMarroTank\"/>\n        <Action ID=\"FillWaterTank\"/>\n        <Condition ID=\"HasCupOffCoffeBeenRemoved\"/>\n        <Condition ID=\"HasHumanAddedCleaningCup\"/>\n        <Condition ID=\"HasHumanAddedMilk\"/>\n        <Condition ID=\"IsCleanCupReady\"/>\n        <Condition ID=\"IsCleanProcessFinished\"/>\n        <Condition ID=\"IsCoffeCupReady\"/>\n        <Condition ID=\"IsCoffeFinished\"/>\n        <Condition ID=\"IsDesiredCoffeSelected\"/>\n        <Condition ID=\"IsMachineOpen\"/>\n        <Condition ID=\"IsMarroTankEmpty\"/>\n        <Condition ID=\"IsMarroTankFull\"/>\n        <Condition ID=\"IsMarroTankPlacedInCoffeMachine\"/>\n        <Condition ID=\"IsMarroTankRemoved\"/>\n        <Condition ID=\"IsMilkDesired\"/>\n        <Condition ID=\"IsSugarDesired\"/>\n        <Condition ID=\"IsThereEnoughWater\"/>\n        <Condition ID=\"IsWaterTankFull\"/>\n        <Condition ID=\"IsWaterTankPlacedInCoffeMachine\"/>\n        <Condition ID=\"IsWaterTankRemoved\"/>\n        <SubTree ID=\"OpenCoffeMachine\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n        </SubTree>\n        <Action ID=\"PlaceCleanCup\"/>\n        <Action ID=\"PlaceCoffeCup\"/>\n        <Action ID=\"PressDesiredCoffe\"/>\n        <SubTree ID=\"PutCoffeCup\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n        </SubTree>\n        <Action ID=\"SwitchOffCoffeMachine\"/>\n        <Action ID=\"SwitchOnCoffeMachine\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a sequence of actions, where the robot will perform \"go1\" action within nested sequences. The specific details of what \"go1\" entails are not provided in the given XML.\n\nThis behavior tree seems to be a simplified representation, lacking explicit conditions or branching logic. It suggests a linear execution flow where \"go1\" is the primary action to be performed.\n\nWithout further context on the actions and their implications, it's challenging to provide a more detailed summary of the task being performed by this behavior tree.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Sequence>\n                <Sequence>\n                    <Action ID=\"go1\"/>\n                </Sequence>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"alwaysTrue\"/>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"goClosestR\"/>\n        <Action ID=\"guardAiMovement\"/>\n        <Action ID=\"isFull\"/>\n        <Action ID=\"mineResource\"/>\n        <Action ID=\"waitFrames\">\n            <input_port name=\"_in_0\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot's navigation system. It periodically plans the global path at 1 Hz and includes recovery actions in case of failures. The main sequence involves navigating with replanning, where it retries the process a certain number of times if needed.\n\nWithin this sequence, there are two key components: \n1. Computing the path to a specific pose using a grid-based planner. If this fails, it attempts recovery actions such as clearing the global costmap and waiting before retrying.\n2. Following the planned path using a designated controller. In case of failure, it initiates recovery actions like clearing the local costmap and spinning before reattempting.\n\nIf these processes encounter issues, the overall recovery node triggers, which includes a fallback action of waiting for a duration before attempting the entire sequence again. This behavior tree ensures that the robot can navigate effectively while handling potential failures in the planning and execution of its path.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"2\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"4\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ReactiveFallback name=\"PathToPoseFallback\">\n              <GoalUpdated/>\n              <RoundRobin name=\"GlobalPlannerRecoveryActions\">\n                <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n                <Wait wait_duration=\"2\"/>\n              </RoundRobin>\n            </ReactiveFallback>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"4\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ReactiveFallback name=\"FollowPathFallback\">\n            <GoalUpdated/>\n            <RoundRobin name=\"PlannerRecoveryActions\">\n              <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n              <Spin spin_dist=\"1.57\"/>\n            </RoundRobin>\n          </ReactiveFallback>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <Wait wait_duration=\"5\"/>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents an active battery policy for a system. It begins with a check on whether the battery is okay, and if it's not, the system will perform a \"land\" action. This suggests that the system is likely part of a drone or UAV (Unmanned Aerial Vehicle) control system, where the battery level is crucial for safe operation. If the battery is not okay, the system will initiate a landing procedure to prevent any potential risks due to low power.",
        "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<root main_tree_to_execute = \"ActiveBatteryPolicy\">\n    <BehaviorTree ID=\"ActiveBatteryPolicy\">\n        <ReactiveSequence name=\"ActiveBatteryPolicy_ReactiveSequence\">\n            <Inverter>\n                <IsBatteryOk name=\"IS battery Ok ConditionNode\"/>\n            </Inverter>\n            <LandActionNode name=\"This is the Land action Node\"/>\n        </ReactiveSequence>\n    </BehaviorTree>\n\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robotic system to perform a series of tasks. Initially, the robot is directed to move to a specific location using the MoveBase action. Subsequently, it retrieves joint information for a predefined pose and sets the arm joints accordingly. The robot then engages in parallel operations involving the manipulation of objects by its left and right arms.\n\nFor the left arm, it repetitively creates obstacles, picks up and places objects at different locations. Similarly, the right arm performs a similar set of actions concurrently. These operations are designed to run indefinitely unless terminated externally.\n\nIn summary, the behavior tree controls the robot to navigate to a position, configure its arm joints, and execute continuous object manipulation tasks with both arms simultaneously.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <MoveBase goal=\"-1;-1;0\"/>\n            <GetArmJointsForPose pose=\"REST\" joints_pose=\"{joints_pose}\" />\n            <SetArmJointsLeft joints_pose=\"{joints_pose}\" />\n            <SetArmJointsRight joints_pose=\"{joints_pose}\" />\n            <Parallel success_threshold=\"2\" failure_threshold=\"2\">\n                <Repeat num_cycles=\"-1\">\n                    <Sequence>\n                        <CreateObstacle ns=\"left\" object_id=\"test_object_l1\" pose=\"base_link; 0.7; 0.0; 1.0; 0.0; 0.0; 0.0\" />\n                        <PickAndPlaceLeft object_id=\"test_object_l1\" target_pose=\"base_link;-0.1; 0.0; 1.1; 0.0; 0.0; 0.0\" />\n                        <CreateObstacle ns=\"left\" object_id=\"test_object_l2\" pose=\"base_link; 0.7; 0.2; 1.0; 0.0; 0.0; 0.0\" />\n                        <PickAndPlaceLeft object_id=\"test_object_l2\" target_pose=\"base_link;-0.2; 0.0; 1.1; 0.0; 0.0; 0.0\" />\n                    </Sequence>\n                </Repeat>\n                <Repeat num_cycles=\"-1\">\n                    <Sequence>\n                        <CreateObstacle ns=\"right\" object_id=\"test_object_r1\" pose=\"base_link; 0.7;-0.1; 0.8; 0.0; 0.0; 0.0\" />\n                        <PickAndPlaceRight object_id=\"test_object_r1\" target_pose=\"base_link; 0.7;-0.4; 0.8; 0.0; 0.0; 0.0\" />\n                        <CreateObstacle ns=\"right\" object_id=\"test_object_r2\" pose=\"base_link; 0.7;-0.2; 0.8; 0.0; 0.0; 0.0\" />\n                        <PickAndPlaceRight object_id=\"test_object_r2\" target_pose=\"base_link; 0.7;-0.5; 0.8; 0.0; 0.0; 0.0\" />\n                    </Sequence>\n                </Repeat>\n            </Parallel >\n        </Sequence>\n    </BehaviorTree>\n\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robotic system's path planning and execution based on environmental conditions. Initially, it receives a target pose and loads constraints from a configuration file. Then, it runs a planner subtree to generate a path based on the received target pose and constraints. Finally, it executes the generated path using different actions depending on the environmental condition: flying if in the air, rolling if on the ground, or swimming if in water.\n\nThe \"RunPlannerSubtree\" behavior tree selects between two planners to generate the optimal path based on the given constraints and target pose. The \"ExecutePath\" behavior tree handles the execution of the generated path by choosing the appropriate action based on the environmental condition.\n\nOverall, the behavior tree manages the entire process of receiving a target pose, generating a path considering constraints, and executing the path based on the environmental context.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"ReceiveTargetPose\" target_pose=\"{target_pose}\"/>\n            <Action ID=\"LoadConstraints\" constrain_a=\"{constraint_a}\" constraint_b=\"{constraint_b}\" constraint_c=\"{constraint_c}\" file=\"&quot;configuration.yaml&quot;\"/>\n            <SubTree ID=\"RunPlannerSubtree\" constraint_a=\"constraint_a\" constraint_b=\"constraint_b\" constraint_c=\"constraint_c\" path=\"path\" target_pose=\"target_pose\"/>\n            <SubTree ID=\"ExecutePath\" path=\"path\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"ExecutePath\">\n        <Fallback>\n            <Sequence>\n                <Condition ID=\"OnAir\"/>\n                <Action ID=\"Fly\" path=\"{path}\"/>\n            </Sequence>\n            <Sequence>\n                <Condition ID=\"OnGround\"/>\n                <Action ID=\"Roll\" path=\"{path}\"/>\n            </Sequence>\n            <Sequence>\n                <Condition ID=\"OnWater\"/>\n                <Action ID=\"Swim\" path=\"{path}\"/>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"RunPlannerSubtree\">\n        <Fallback>\n            <Action ID=\"RunPlannerA\" constraint_a=\"{constraint_a}\" constraint_b=\"{constraint_b}\" contratint_c=\"{constraint_c}\" path=\"{path}\" target_pose=\"{target_pose}\"/>\n            <Action ID=\"RunPlannerB\" constraint_a=\"{constraint_a}\" constraint_b=\"{constraint_b}\" constraint_c=\"{constraint_c}\" path=\"{path}\" target_pose=\"{target_pose}\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <SubTree ID=\"ExecutePath\">\n            <input_port name=\"path\"/>\n        </SubTree>\n        <Action ID=\"Fly\">\n            <input_port name=\"path\"/>\n        </Action>\n        <Action ID=\"LoadConstraints\">\n            <output_port name=\"constrain_a\"/>\n            <output_port name=\"constraint_b\"/>\n            <output_port name=\"constraint_c\"/>\n            <input_port name=\"file\"/>\n        </Action>\n        <Condition ID=\"OnAir\"/>\n        <Condition ID=\"OnGround\"/>\n        <Condition ID=\"OnWater\"/>\n        <Action ID=\"ReceiveTargetPose\">\n            <output_port name=\"target_pose\"/>\n        </Action>\n        <Action ID=\"Roll\">\n            <input_port name=\"path\"/>\n        </Action>\n        <Action ID=\"RunPlannerA\">\n            <input_port name=\"constraint_a\"/>\n            <input_port name=\"constraint_b\"/>\n            <input_port name=\"contratint_c\"/>\n            <output_port name=\"path\"/>\n            <input_port name=\"target_pose\"/>\n        </Action>\n        <Action ID=\"RunPlannerB\">\n            <input_port name=\"constraint_a\"/>\n            <input_port name=\"constraint_b\"/>\n            <input_port name=\"constraint_c\"/>\n            <output_port name=\"path\"/>\n            <input_port name=\"target_pose\"/>\n        </Action>\n        <SubTree ID=\"RunPlannerSubtree\">\n            <input_port name=\"constraint_a\"/>\n            <input_port name=\"constraint_b\"/>\n            <input_port name=\"constraint_c\"/>\n            <output_port name=\"path\"/>\n            <input_port name=\"target_pose\"/>\n        </SubTree>\n        <Action ID=\"Swim\">\n            <input_port name=\"path\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an array of poses, continuously replanning the global path at a rate of 1 Hz. It includes recovery actions specific to planning, control, and general system issues.\n\nThe main sequence involves navigating with replanning, where the robot computes the path through poses using a grid-based planner and follows the path using a specified controller. If there are failures during these processes, it retries a certain number of times before moving to recovery fallback actions.\n\nThe recovery fallback includes clearing the local and global costmaps, spinning, waiting, and backing up as potential recovery actions when issues occur. These actions aim to address various types of failures or unexpected situations that may arise during navigation.\n\nOverall, the behavior tree ensures that the robot can continuously navigate through poses while handling recovery from specific issues related to planning, control, and system stability.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz through an array of poses continuously\n   and it also has recovery actions specific to planning / control as well as general system issues.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"0.333\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathThroughPoses\">\n            <ReactiveSequence>\n              <RemovePassedGoals input_goals=\"{goals}\" output_goals=\"{goals}\" radius=\"0.7\"/>\n              <ComputePathThroughPoses goals=\"{goals}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            </ReactiveSequence>\n            <ReactiveFallback name=\"ComputePathThroughPosesRecoveryFallback\">\n              <GoalUpdated/>\n              <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n            </ReactiveFallback>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ReactiveFallback name=\"FollowPathRecoveryFallback\">\n            <GoalUpdated/>\n            <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          </ReactiveFallback>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <RoundRobin name=\"RecoveryActions\">\n          <Sequence name=\"ClearingActions\">\n            <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </Sequence>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n          <BackUp backup_dist=\"0.15\" backup_speed=\"0.025\"/>\n        </RoundRobin>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the tasks for an autonomous agent, such as a robot or AI, in a mission-based scenario. The agent is programmed to perform various tasks based on reactive fallback and sequences.\n\nThe main tree \"MainTree\" consists of multiple sub-trees for different tasks. It starts with a reactive fallback that handles the overall mission, including returning to the station if the mission is over. If the agent's battery is enough, it will either drop a tool or perform a task. If the battery is not enough, it will wait or recharge.\n\nThe \"DropToolTree\" sub-tree manages the process of dropping a tool, ensuring that the agent is near the station before doing so.\n\nThe \"PerformTaskTree\" sub-tree selects and performs different tasks based on conditions, such as monitoring, inspecting, delivering tools, or recharging.\n\nEach specific task has its own sub-tree, like \"MonitorTree\" for monitoring human targets, \"InspectTree\" for inspecting waypoints, \"Del",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n\n    <BehaviorTree ID=\"MainTree\">\n        <ReactiveFallback name=\"root_R_Fallback\">\n            <ReactiveSequence name=\"mission_over_R_Sequence\">\n                <MissionOver/>\n                <BackToStation/>\n            </ReactiveSequence>\n            <ForceRunning>\n                <ReactiveFallback name=\"mission_R_Fallback\">\n                    <ReactiveSequence name=\"idle_R_Sequence\">\n                        <IsBatteryEnough/>\n                        <ReactiveFallback>\n                            <ForceFailure>\n                                <SubTree ID=\"DropToolTree\"/>\n                            </ForceFailure>\n                            <ReactiveSequence>\n                                <Inverter>\n                                    <Idle/>\n                                </Inverter>\n                                <SubTree ID=\"PerformTaskTree\"/>\n                            </ReactiveSequence>\n                        </ReactiveFallback>\n                    </ReactiveSequence>\n                    <ReactiveFallback name=\"wait_R_Fallback\">\n                        <IsBatteryFull/>\n                        <SubTree ID=\"RechargeTree\"/>\n                    </ReactiveFallback>\n                </ReactiveFallback>\n            </ForceRunning>\n        </ReactiveFallback>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"DropToolTree\">\n        <ReactiveSequence>\n            <NeedToDropTheTool/>\n            <ReactiveSequence>\n                <Fallback>\n                    <IsAgentNearStation/>\n                    <GoNearStation/>\n                </Fallback>\n                <DropTool/>\n            </ReactiveSequence>\n        </ReactiveSequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"PerformTaskTree\">\n        <ReactiveFallback name=\"select_task_R_Fallback\">\n            <ReactiveSequence name=\"is_monitor_R_Sequence\">\n                <IsTaskMonitor/>\n                <SubTree ID=\"MonitorTree\"/>\n            </ReactiveSequence>\n            <ReactiveSequence name=\"is_inspect_R_Sequence\">\n                <IsTaskInspect/>\n                <SubTree ID=\"InspectTree\"/>\n            </ReactiveSequence>\n            <ReactiveSequence name=\"is_deliver_tool_R_Sequence\">\n                <IsTaskDeliverTool/>\n                <SubTree ID=\"DeliverToolTree\"/>\n            </ReactiveSequence>\n            <ReactiveSequence name=\"is_Recharge_task_R_Sequence\">\n                <IsTaskRecharge/>\n                <SubTree ID=\"RechargeTree\"/>\n            </ReactiveSequence>\n        </ReactiveFallback>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MonitorTree\">\n        <ReactiveSequence name=\"is_monitor_R_Sequence\">\n            <Fallback>\n                <IsAgentNearHumanTarget/>\n                <GoNearHumanTarget/>\n            </Fallback>\n            <MonitorHumanTarget/>\n        </ReactiveSequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"InspectTree\">\n        <ReactiveSequence name=\"is_inspect_R_Sequence\">\n            <Fallback name=\"AgentNearWP_R_Fallback\">\n                <IsAgentNearWP/>\n                <GoNearWP/>\n            </Fallback>\n            <TakeImage/>\n        </ReactiveSequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"DeliverToolTree\">\n        <ReactiveSequence name=\"is_deliver_tool_R_Sequence\">\n            <ReactiveFallback name=\"Tool_R_Fallback\">\n                <HasAgentTheTool/>\n                <ReactiveSequence name=\"PickTool_R_sequence\">\n                    <Fallback name=\"station_fallback\">\n                        <IsAgentNearStation/>\n                        <GoNearStation/>\n                    </Fallback>\n                    <PickTool/>\n                </ReactiveSequence>\n            </ReactiveFallback>\n            <Fallback>\n                <IsAgentNearHumanTarget/>\n                <GoNearHumanTarget/>\n            </Fallback>\n            <DeliverTool/>\n        </ReactiveSequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"RechargeTree\">\n        <ReactiveSequence name=\"recharge_task_R_Sequence\">\n            <Fallback>\n                <IsAgentNearChargingStation/>\n                <GoNearChargingStation/>\n            </Fallback>\n            <Recharge/>\n        </ReactiveSequence>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot's navigation system. It periodically replans the global path at 1 Hz and includes recovery actions to handle potential failures during navigation. The RecoveryNode specifies the number of retries as 6, indicating that it will attempt recovery actions up to 6 times.\n\nWithin the main sequence, there is a PipelineSequence named \"NavigateWithReplanning\" which contains a RateController to control the frequency of path computation. This is followed by a series of recovery nodes such as ComputePathToPose and FollowPath, each with their own recovery strategies and clear costmap operations.\n\nIn case of failure, the ReactiveFallback \"RecoveryFallback\" triggers recovery actions including clearing both local and global costmaps, spinning the robot, and waiting for a specified duration.\n\nOverall, this behavior tree ensures that the robot's navigation system can recover from errors, replan paths at a regular interval, and execute recovery actions when necessary to maintain smooth and reliable navigation.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robot's navigation with continuous replanning of the global path after every 1 meter of movement. It uses a PipelineSequence that consists of two steps: \n1. DistanceController: This step computes a new path to the goal pose using a planner called \"GridBased\" whenever the robot has moved 1 meter.\n2. FollowPath: The robot then follows the computed path using a controller specified by \"FollowPath\".\n\nThis behavior tree ensures that the robot dynamically adjusts its path to reach the goal, taking into account any changes in the environment or obstacles encountered during its movement.",
        "output": "<!--\n  This Behavior Tree replans the global path after every 1m.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <DistanceController distance=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </DistanceController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a robotic system that aims to explore and navigate through an environment. The robot is programmed to execute a sequence of actions, which includes exploring the surroundings, selecting a potential field (PF) waypoint, and then moving towards the selected waypoint. This sequence is set to be retried until successful for a maximum of 10 attempts.\n\nThe \"Explored\" action likely involves the robot's exploration behavior, while \"SelectPF\" action involves choosing a potential field waypoint based on some criteria. Finally, the \"Move\" action directs the robot to move towards the selected waypoint.\n\nOverall, this behavior tree orchestrates the robot's exploration and navigation process, ensuring that it continues attempting to reach its goal even if initial attempts are unsuccessful.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <RetryUntilSuccesful num_attempts=\"10\">\n                <Sequence>\n                    <Action ID=\"Explored\"/>\n                    <Action ID=\"SelectPF\" waypoint=\"{pose_pf}\"/>\n                    <Action ID=\"Move\" goal=\"{wp}\"/>\n                </Sequence>\n            </RetryUntilSuccesful>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"Explored\"/>\n        <Action ID=\"SelectPF\">\n            <output_port name=\"waypoint\"/>\n        </Action>\n        <Action ID=\"Move\">\n            <input_port name=\"goal\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate while periodically replanning its global path at a frequency of 1 Hz. The robot's navigation involves a pipeline sequence that includes speed control and path following. The speed controller adjusts the robot's speed within specified limits and filters the speed changes over a duration. Additionally, it computes the path to a designated goal using a planner identified as \"GridBased\". Subsequently, the robot follows the computed path using a specific controller. This behavior tree ensures that the robot can navigate dynamically by continuously updating its path based on changing environmental conditions or goals.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <SpeedController min_rate=\"0.1\" max_rate=\"1.0\" min_speed=\"0.0\" max_speed=\"0.26\" filter_duration=\"0.3\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </SpeedController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's reactive response to obstacles. It consists of a sequence of actions triggered by specific conditions. Initially, it checks the y-coordinate threshold and sets a goal accordingly. If the condition is not met, it then checks the z-coordinate threshold and sets another goal. If neither condition is met, it sets a default goal. This tree allows the robot to dynamically respond to its environment based on the detected obstacles' positions in the y and z coordinates, ensuring safe navigation.",
        "output": " <root main_tree_to_execute = \"ObstacleTree\" >\n     <BehaviorTree ID=\"ObstacleTree\">\n        <ReactiveFallback name=\"root_sequence\">\n            <ReactiveSequence name=\"3-goal\">\n                <EEYThreshold   name=\"ee_y_threshold\" threshold=\"{y_threshold}\" ee_y=\"{ee_y}\"/> \n                <SetMGGoal   name=\"mg_goal3\"\n                    mp_param_x=\"{mp_3_x}\"\n                    mg_trans_x=\"{mg_trans_x}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence name=\"2-traverse\">\n                <EEZThreshold   name=\"ee_z_threshold\" threshold=\"{z_threshold}\" ee_z=\"{ee_z}\"/> \n                <SetMGGoal   name=\"mg_goal2\"\n                    mp_param_x=\"{mp_2_x}\"\n                    mg_trans_x=\"{mg_trans_x}\"/>\n            </ReactiveSequence>\n            <SetMGGoal   name=\"mg_goal1\"\n                    mp_param_x=\"{mp_1_x}\"\n                    mg_trans_x=\"{mg_trans_x}\"/>\n        </ReactiveFallback>\n     </BehaviorTree>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree specifies a robot's task to navigate to two different locations, repeating this sequence 10 times. The robot is programmed to first move to the position (0.5, 0.5) and then to (-0.5, -0.5). Each movement is considered as an action within the sequence. The target pose for each movement is provided in the format \"x;y;theta\". If the robot successfully completes or interrupts the sequence, it will repeat the process up to 10 times. This behavior tree essentially orchestrates the robot's navigation behavior by defining the specific movements and repetitions required to fulfill its task.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"10\">\n            <Sequence>\n                <Action ID=\"NavigateToAction\" goal=\"0.5;0.5;0\"/>\n                <Action ID=\"NavigateToAction\" goal=\"-0.5;-0.5;0\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"NavigateToAction\">\n            <input_port default=\"0;0;0\" name=\"goal\">A target pose in format &quot;x;y;theta&quot;.</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a simple task for a robot to search for a person. It consists of a sequence with one action, \"SearchAction,\" which instructs the robot to search for a person. Additionally, there are two defined actions in the TreeNodesModel: \"FollowAction\" and \"SearchAction.\" The \"FollowAction\" allows the robot to follow an objective, while the \"SearchAction\" enables the robot to turn itself while searching for an objective.\n\nIn summary, the behavior tree directs the robot to perform a search action to locate a person. If needed, it can also be expanded to include following the person once found.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"SearchAction\" objective=\"person\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"FollowAction\">\n            <input_port default=\"person\" name=\"key_name\">It follows a objective</input_port>\n        </Action>\n        <Action ID=\"SearchAction\">\n            <input_port default=\"person\" name=\"objective\">It turns itself searching an objective</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the decision-making process for various animal behaviors. The tree consists of a main fallback sequence with multiple sub-sequences and a separate sub-tree for shedding behavior.\n\nIn the main sequence, the animal will attempt to perform actions based on its characteristics. If it's male and adult, it will try to have sex. If it's female and ready to give birth, it will give birth. If it's an egg layer, it will lay eggs. If it's a producer, it will produce. If none of these conditions are met, it will execute the shedding sub-tree.\n\nThe shedding sub-tree contains sequences for different shed-related scenarios. It includes actions such as leaving the shed, finding random pasture fields, moving, grazing, finding the shed at night, entering the shed, and random movement during the day.\n\nOverall, the behavior tree models the decision-making process for animal behaviors including reproduction, shedding, movement, and feeding based on various conditions and actions.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <FallbackStar name=\"AnimalStandard\">\n            <SequenceStar name=\"Sex\">\n                <Condition ID=\"IsMale\"/>\n                <Condition ID=\"IsAdult\"/>\n                <Action ID=\"TryHaveSex\"/>\n            </SequenceStar>\n            <SequenceStar name=\"Birth\">\n                <Condition ID=\"IsFemale\"/>\n                <Condition ID=\"IsReadyToGiveBirth\"/>\n                <Action ID=\"GiveBirth\"/>\n            </SequenceStar>\n            <SequenceStar name=\"EggLayer\">\n                <Condition ID=\"IsEggLayer\"/>\n                <Action ID=\"LayEgg\"/>\n            </SequenceStar>\n            <SequenceStar name=\"Producer\">\n                <Condition ID=\"IsProducer\"/>\n                <Action ID=\"Produce\"/>\n            </SequenceStar>\n            <SubTree ID=\"ShedTree\"/>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"ShedTree\">\n        <FallbackStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsDay\"/>\n                <Condition ID=\"IsInShed\"/>\n                <Action ID=\"LeaveShed\"/>\n                <Action ID=\"FindRandomPastureField\"/>\n                <Action ID=\"Move\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsNight\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"FindShed\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"EnterShed\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsDay\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"RandomMove\"/>\n                <Action ID=\"Graze\"/>\n            </SequenceStar>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Condition ID=\"CanHaveSex\"/>\n        <Action ID=\"EatPrey\"/>\n        <Action ID=\"EnterShed\"/>\n        <Action ID=\"FindPrey\"/>\n        <Action ID=\"FindRandomPastureField\"/>\n        <Action ID=\"FindRetreat\"/>\n        <Action ID=\"FindShed\"/>\n        <Action ID=\"GiveBirth\"/>\n        <Action ID=\"Graze\"/>\n        <Condition ID=\"IsAdult\"/>\n        <Condition ID=\"IsCarnivore\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsEgg\"/>\n        <Condition ID=\"IsEggLayer\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHerbivore\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInShed\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Condition ID=\"IsOnPasture\"/>\n        <Condition ID=\"IsPregnant\"/>\n        <Condition ID=\"IsProducer\"/>\n        <Condition ID=\"IsReadyToGiveBirth\"/>\n        <Condition ID=\"IsWoodVermin\"/>\n        <Condition ID=\"IsYoung\"/>\n        <Action ID=\"KillPrey\"/>\n        <Action ID=\"LayEgg\"/>\n        <Action ID=\"LeaveShed\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"Produce\"/>\n        <Action ID=\"RandomMove\"/>\n        <SubTree ID=\"ShedTree\"/>\n        <Action ID=\"Sleep\"/>\n        <Action ID=\"TryHaveSex\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement to three different goals (Goal_a, Goal_b, Goal_c) in a repeated sequence for 3 cycles. The robot is directed to move to each goal sequentially and then verbalize its arrival at each location using a text-to-speech action. This process is repeated for the specified number of cycles. The \"MoveRobot\" behavior tree handles the navigation to the given target locations.\n\nOverall, the behavior tree outlines a task for the robot to autonomously navigate to multiple predefined goals, perform actions at each location, and repeat this process for a set number of cycles.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"3\">\n            <Sequence>\n                <SetBlackboard output_key=\"Goal_a\" value=\"-3.94,-4.47,180.0\" />\n                <SetBlackboard output_key=\"Goal_b\" value=\"-5.40,-5.37,270.0\" />\n                <SetBlackboard output_key=\"Goal_c\" value=\"-4.79,-6.87,0.0\" />\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                    <TextToSpeechActionClient msg=\"I'm at goal A\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                    <TextToSpeechActionClient msg=\"I'm at goal B\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                    <TextToSpeechActionClient msg=\"I'm at goal C\" />\n                </Sequence>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single action where a text-to-speech message is sent, saying \"Are we done? Can I go watch Westworld now?\" This suggests that the robot or system using this behavior tree is programmed to communicate verbally, possibly to inquire about task completion and express a desire to engage in another activity.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <TextToSpeechActionClient msg=\"Are we done?  Can I go watch West world now?\"/>\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to make a robot speak to a player. It will first say \"Hello (player)\" and then ask \"How are you?\" The sequence will keep running until it fails, ensuring that both messages are communicated to the player.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <KeepRunningUntilFailure>\n              <Sequence>\n                 <TextToSpeechActionClient msg=\"Hello (player)\" />\n                 <TextToSpeechActionClient msg=\"How are you?\" />\n              </Sequence>\n        </KeepRunningUntilFailure>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single node, \"Drop\", within a sequence called \"root_sequence\". The purpose of this behavior tree is to execute the \"Drop\" action as part of the \"root_sequence\". However, without further context or details about the \"Drop\" action, it's challenging to provide a more specific summary.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <Drop   name=\"drop\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a complex robotic system. It consists of multiple actions and conditions that are executed in a specific sequence, with the ability to repeat the entire sequence for a defined number of cycles.\n\nThe tree starts by checking certain conditions (LTLPreCheck) and executing actions based on the current state and desired sequences. It then enters a reactive sequence where it performs various actions such as locomotion status checks, recovery stands, and different types of movements like picking, dropping, guiding, etc. The sequence also includes handling replanning requests at different levels based on the current state and executed sequences.\n\nThe tree continuously updates the action sequences and the current state based on the performed actions. It allows for synchronization of transitions between different actions and handles failures using fallback mechanisms.\n\nOverall, the behavior tree orchestrates the complex decision-making and control logic required for the robotic system to perform tasks, handle contingencies, and update its state effectively.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Condition ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <RetryUntilSuccesful num_attempts=\"3\">\n                            <Fallback>\n                                <Condition ID=\"LocomotionStatusCheck\" locomotion_status=\"{locomotion_status}\"/>\n                                <Sequence>\n                                    <Action ID=\"RecoveryStand\" locomotion_status=\"{locomotion_status}\"/>\n                                    <Delay delay_msec=\"2000\">\n                                        <Action ID=\"LocomotionStart\" locomotion_status=\"{locomotion_status}\"/>\n                                    </Delay>\n                                </Sequence>\n                            </Fallback>\n                        </RetryUntilSuccesful>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel1\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Condition ID=\"ReactiveLTLStateCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Switch6 case_1=\"move\" case_2=\"stay\" case_3=\"pick\" case_4=\"drop\" case_5=\"start_training\" case_6=\"terminate_training\" variable=\"{bt_action_type}\">\n                            <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                            <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"PickAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"DropAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"GuideAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"BackNormalAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <AlwaysFailure/>\n                        </Switch6>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"BackNormalAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"DropAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"GuideAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Condition>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Condition ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Condition>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"PickAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"ReactiveLTLStateCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Condition>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel1\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robot's navigation by continuously replanning its global path after every 1 meter of movement. It utilizes a pipeline sequence consisting of two main components: the DistanceController and FollowPath. The DistanceController triggers the computation of a new path to the goal pose using the GridBased planner whenever the robot has moved 1 meter. Once the new path is computed, the FollowPath component guides the robot along the newly calculated path. This approach ensures that the robot dynamically adjusts its path as it progresses towards its goal, allowing for efficient and adaptive navigation in changing environments.",
        "output": "<!--\n  This Behavior Tree replans the global path after every 1m.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <DistanceController distance=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </DistanceController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate its global path, with periodic replanning at 1 Hz and recovery actions in case of failures. The RecoveryNode specifies the number of retries as 6, indicating the maximum attempts for recovery. Within the main sequence, the robot uses a PipelineSequence named \"NavigateWithReplanning\" that includes rate control for replanning and follows a series of recovery nodes.\n\nThe first recovery node, \"ComputePathToPose\", computes a new path to the goal using a GridBased planner and clears the global costmap contextually. The second recovery node, \"FollowPath\", directs the robot to follow the computed path and clears the local costmap contextually.\n\nIn case of failure, the ReactiveFallback \"RecoveryFallback\" triggers recovery actions including clearing both the local and global costmaps, spinning the robot, and waiting for a duration before retrying. This approach ensures the robot's navigation resilience by handling failures and dynamically replanning its path when necessary.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of tasks for a robotic system. The robot is programmed to perform the following tasks in sequence: \n1. Push a puck\n2. Retrieve an object labeled \"G\"\n3. Weigh the retrieved object\n4. Perform a snowplow maneuver\n\nEach task involves a series of sub-tasks such as moving ahead, turning, manipulating clamps, and waiting at specific points. For example, pushing the puck involves moving forward, turning, and manipulating the clamp. Retrieving the object labeled \"G\" includes opening/closing the clamp, moving forward, and manipulating the clamp again. Weighing the object involves moving backward, turning, reaching a specific point, moving towards a scale, and manipulating the clamp.\n\nThe overall goal appears to be a complex series of actions that involve precise movement and manipulation to accomplish various objectives, likely within a larger robotic system or competition scenario.",
        "output": "<!-- Evitement\n<ReactiveSequence>\n<Fallback>\n    <Condition ID=\"NoObstacle\"/>\n    <Avoid/>\n</Fallback>\n<Move pos= positions['P2'] />\n</ReactiveSequence>\n-->\n\n<!-- AX1 : Open/Close clamp\n    AX2 : Move clamp forward/backwards\n    AX3 : Moe clamp left/right\n    AX4 :  Turn clamp\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n\n    <BehaviorTree ID=\"PushPuck\">\n        <Sequence>\n            <MoveAhead moveForward=\"true\"\n                       distance = \"\"\n            />\n            <Turn name = \"turn_90_left\"\n                  angle = \"\"\n            />\n            <MoveAhead moveForward=\"true\"\n                       distance = \"\"\n            />\n            <MoveAX_4 name=\"turn_clamp_90_right\"\n                      pos=\"\"\n                      mode=\"joint\"\n            />\n            <MoveAX_3 name=\"move_clamp_forward\"\n                      pos=\"\"\n                      mode=\"joint\"\n            />\n            <MoveAhead name = \"psuh_pcuk\"\n                        moveForward=\"true\"\n                       distance = \"\"\n            />\n            <MoveAX_3 name=\"move_clamp_backward\"\n                      pos=\"\"\n                      mode=\"joint\"\n            />\n        </Sequence>\n    </BehaviorTree>\n\n\n    <BehaviorTree ID=\"GetG\">\n        <Sequence>\n        <MoveAX_1 name=\"open_clamp\"\n                  pos=\"\"\n                  mode=\"joint\"\n        />\n        <MoveAhead name = \"reach_goldonium\"\n                   moveForward=\"true\"\n                   distance = \"\"\n        />\n        <MoveAX_1 name=\"close_clamp\"\n                  pos=\"\"\n                  mode=\"joint\"\n        />\n        <MoveAX_3 name=\"move_clamp_backward\"\n                  pos=\"\"\n                  mode=\"joint\"\n        />\n        <MoveAX_4 name=\"turn_clamp_90_right\"\n                  pos=\"\"\n                  mode=\"joint\"\n        />\n        <Sequence/>\n    </BehaviorTree>\n\n\n    <BehaviorTree ID=\"WeightG\">\n        <Sequence>\n            <MoveAhead name = \"move_backwards\"\n                       moveForward=\"false\"\n                       distance = \"\"\n            />\n            <Turn name = \"turn_90_left\"\n                  angle = \"\"\n            />\n            <MoveAhead name = \"reach_waiting_point\"\n                       moveForward=\"true\"\n                       distance = \"\"\n            />\n            <!-- The small robot stops there and waits until the big robot turns left to face the place\n            where he will drop the 6th puck. Then the way is clear and the small robot can move towards the scale.\n            -->\n            <MoveAhead name = \"reach_scale\"\n                       moveForward=\"true\"\n                       distance = \"\"\n            />\n            <MoveAX_2 name=\"move_clamp_forward\"\n                      pos=\"\"\n                      mode=\"joint\"\n            />\n            <OpenClamp/>\n            <MoveAX_2 name=\"move_clamp_backward\"\n                      pos=\"\"\n                      mode=\"joint\"\n            />\n        </Sequence>\n    </BehaviorTree>\n\n\n    <BehaviorTree ID=\"ChasseNeige\">\n        <MoveAhead name = \"move_backward\"\n                   moveForward=\"false\"\n                   distance = \"\"\n        />\n        <!-- Turn left to face the red area ? -->\n        <Turn name = \"turn_left\"\n              angle = \"\"\n        />\n        <MoveAhead name = \"move_forward\"\n                   moveForward=\"false\"\n                   distance = \"\"\n        />\n    </BehaviorTree>\n\n\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SubTree ID=\"PushPuck\"/>\n            <SubTree ID=\"GetG\"/>\n            <SubTree ID=\"WeightG\"/>\n            <SubTree ID=\"ChasseNeige\"/>\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to handle an emergency situation. It prompts for user input to confirm if the emergency has been resolved by asking \"Emergency finished?\". If the user responds with 'y' (yes), indicating that the emergency is resolved, the behavior tree will proceed accordingly. If the response is anything other than 'y', it implies that the emergency is ongoing and further actions may be required. This behavior tree seems to serve as a simple decision-making process to determine whether the emergency situation has been resolved based on user input.",
        "output": " <root main_tree_to_execute = \"Emergency\" >\n    <BehaviorTree ID=\"Emergency\">\n        <Sequence>\n            <StringParameterRequest title=\"Emergency finished?\" \n                                    msg=\"type [y] or [n]\"\n                                    value=\"{confirm}\"/>\n            <CheckBlackboard input=\"{confirm}\" compare_to=\"y\" />\n        </Sequence>\n    </BehaviorTree>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a decision-making process for a robot navigating through obstacles. The robot first attempts to pass through a door, but if the door is closed, it will try to open it and then pass through. If the door remains closed after multiple attempts, the robot will resort to passing through a window instead.\n\nIn summary, the behavior tree outlines the robot's navigation strategy by prioritizing passing through a door if it's open, attempting to open the door if it's closed, and ultimately resorting to passing through a window if the door cannot be opened after several attempts.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback>\n            <Sequence>\n                <IsDoorOpen/>\n                <PassThroughDoor/>\n            </Sequence>\n            <SubTree ID=\"DoorClosed\"/>\n            <PassThroughWindow/>\n        </Fallback>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"DoorClosed\">\n        <Sequence>\n            <Inverter>\n                <IsDoorOpen/>\n            </Inverter>\n            <RetryUntilSuccesful num_attempts=\"4\">\n                <OpenDoor/>\n            </RetryUntilSuccesful>\n            <PassThroughDoor/>\n        </Sequence>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement based on the detection of specific objects. The robot is initially given three goals: Goal_a, Goal_b, and Goal_c. It then continuously repeats a sequence where it checks for the presence of different objects (cat, dog, cow) using OpenVINOEvent. If an object is detected, the robot will move towards the corresponding goal associated with that object. This process continues indefinitely as indicated by the num_cycles=\"-1\" attribute in the Repeat node.\n\nIn summary, the behavior tree enables the robot to navigate towards predefined goals based on the detection of specific objects, allowing for adaptive and reactive behavior in its environment.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SetBlackboard output_key=\"Goal_a\" value=\"-0.579;-1.341;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_b\" value=\"5.214;-1.533;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_c\" value=\"-1.588;1.253;0.0;1.0\" />\n            <Repeat num_cycles=\"-1\">\n                <ForceSuccess>\n                    <Fallback>\n                        <Sequence>\n                            <OpenVINOEvent object=\"cat\"/>\n                            <Sequence>\n                                <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                            </Sequence>\n                        </Sequence>\n                        <Sequence>\n                            <OpenVINOEvent object=\"dog\"/>\n                            <Sequence>\n                                <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                            </Sequence>\n                        </Sequence>\n                        <Sequence>\n                            <OpenVINOEvent object=\"cow\"/>\n                            <Sequence>\n                                <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                            </Sequence>\n                        </Sequence>\n                    </Fallback>\n                </ForceSuccess>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of movements for a robot. It instructs the robot to move forward by 50 units, then turn 90 degrees, move ahead by 120 units, turn -90 degrees, move ahead by 800 units, turn -90 degrees, move ahead by 460 units, turn -90 degrees, move forward by 600 units, move back by 600 units, and finally move forward by 600 units.\n\nIn summary, the behavior tree directs the robot through a specific path involving a series of movements and turns to navigate a predefined route.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root\">\n\n            <MoveAhead name=\"move\"\n                       distance=\"50\"/>\n\n            <Turn name=\"turn\"\n                  angle=\"90\"/>\n\n            <MoveAhead name=\"move\"\n                       distance=\"120\"/>\n\n            <Turn name=\"turn\"\n                  angle=\"-90\"/>\n\n            <MoveAhead name=\"move\"\n                       distance=\"800\"/>\n\n            <Turn name=\"turn\"\n                  angle=\"-90\"/>\n\n            <MoveAhead name=\"move\"\n                       distance=\"460\"/>\n\n            <Turn name=\"turn\"\n                  angle=\"-90\"/>\n\n            <MoveAhead name=\"move forward\"\n                       distance=\"600\"/>\n            <MoveAhead name=\"move back\"\n                       distance=\"-600\"/>\n            <MoveAhead name=\"move forward\"\n                       distance=\"600\"/>\n\n        </Sequence>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for a robotic arm. Initially, it adds collision objects to the scene, including a ground plane, walls, and a conveyor. Then, it adds a box surface and executes a series of movements to pick, manipulate, and place boxes in two different sequences - \"left\" and \"right\". Each sequence involves precise joint state adjustments, object removals, picking, lifting, shifting, placing, and adding box surfaces. The tree also includes various utility actions such as connecting waypoints, planning, executing suction, fetching detected information, sensing object pose, storing detected information, and typing in a pose on the blackboard.\n\nIn summary, the behavior tree orchestrates the robotic arm's actions to set up the environment, perform specific manipulations with boxes, and execute various utility tasks related to object detection and manipulation.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Robot Minimal Demo\">\n            <Sequence name=\"add collisions\">\n                <Action ID=\"ExecuteAddPlane\" group_name=\"arm\" name=\"Add groud to scene\" plane_name=\"ground\" plane_normal=\"0 0 1\" plane_pose=\"0 0 0 0 0 0 1\" service_name=\"execute_add_plane\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"left_wall\" box_pose=\"2.76 1.2 1.35 0 0 0 1\" box_size=\"5.0 0.001 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"Add left wall\" service_name=\"execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"right_wall\" box_pose=\"2.76 -1.2 1.35 0 0 0 1\" box_size=\"5.0 0.001 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"Add right wall\" service_name=\"execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"top_wall\" box_pose=\"4 0 2.7 0 0 0 1\" box_size=\"2 2.4 0.001\" group_name=\"arm\" is_absolute=\"1\" name=\"Add top wall\" service_name=\"execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"conveyor\" box_pose=\"-1.341 0 0.25 0 0 0 1\" box_size=\"2.56 0.56 0.5\" group_name=\"arm\" is_absolute=\"1\" name=\"Add conveyor\" service_name=\"execute_add_box\"/>\n            </Sequence>\n            <Action ID=\"ExecuteAddBox\" auto_subfix=\"0\" box_name=\"boxsur\" box_pose=\"0.901 0 1.35 0 0 0 1\" box_size=\"0.001 2.4 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"box_surface\" service_name=\"execute_add_box\"/>\n            <Repeat num_cycles=\"1\">\n                <Sequence name=\"left\">\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"0.0829 -1.7568 2.5506 0.7786 -1.5734 -0.0038\" group_name=\"arm\" name=\"pre middle left\" service_name=\"execute_group_joint_states\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteRemoveObject\" is_exact=\"1\" name=\"remove boxes_surface\" obj_name=\"boxsur\" service_name=\"execute_remove_object\"/>\n                    <Action ID=\"ExecuteGroupManyPoses\" constraint=\"\" eef_step=\"0.1\" goal_type=\"0\" goals=\"0.88 0.4994 0.5723 0.4979 0.5006 0.5000 0.5012\" group_name=\"arm\" name=\"pick\" service_name=\"execute_group_many_poses\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteGroupShift\" axis=\"z\" goal=\"0.1\" group_name=\"arm\" is_absolute=\"0\" name=\"lift up\" service_name=\"execute_group_shift\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteGroupShift\" axis=\"x\" goal=\"-0.4\" group_name=\"arm\" is_absolute=\"0\" name=\"pull out\" service_name=\"execute_group_shift\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"0.7015 0.4237 1.7017 -0.0747 -0.0040 -0.0806\" group_name=\"arm\" name=\"post middle left\" service_name=\"execute_group_joint_states\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"0.7005 1.8997 2.0341 0.8173 0.0009 -0.0041\" group_name=\"arm\" name=\"place\" service_name=\"execute_group_joint_states\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"0.7015 0.4237 1.7017 -0.0747 -0.0040 -0.0806\" group_name=\"arm\" name=\"post middle left\" service_name=\"execute_group_joint_states\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteAddBox\" auto_subfix=\"0\" box_name=\"boxsur\" box_pose=\"0.901 0 1.35 0 0 0 1\" box_size=\"0.001 2.4 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"box_surface\" service_name=\"execute_add_box\"/>\n                </Sequence>\n            </Repeat>\n            <Repeat num_cycles=\"1\">\n                <Sequence name=\"right\">\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"0.0777 1.8904 -2.4741 -0.9875 1.5718 -0.0037\" group_name=\"arm\" name=\"pre middle right\" service_name=\"execute_group_joint_states\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteRemoveObject\" is_exact=\"1\" obj_name=\"boxsur\" service_name=\"execute_remove_object\"/>\n                    <Action ID=\"ExecuteGroupManyPoses\" constraint=\"\" eef_step=\"0.1\" goal_type=\"0\" goals=\"0.88 -0.4455 0.5713 -0.5115 0.4876 -0.4901 0.5101\" group_name=\"arm\" name=\"pick\" service_name=\"execute_group_many_poses\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteGroupShift\" axis=\"z\" goal=\"0.1\" group_name=\"arm\" is_absolute=\"0\" name=\"lift up\" service_name=\"execute_group_shift\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteGroupShift\" axis=\"x\" goal=\"-0.4\" group_name=\"arm\" is_absolute=\"0\" name=\"pull out\" service_name=\"execute_group_shift\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"0.7015 -0.4631 -1.6642 -1.0472 0.0081 -0.0615\" group_name=\"arm\" name=\"post middle left\" service_name=\"execute_group_joint_states\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"0.7015 -1.8999 -2.0660 -0.7844 0.0080 -0.0615\" group_name=\"arm\" name=\"place left\" service_name=\"execute_group_joint_states\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"0.7015 -0.4631 -1.6642 -1.0472 0.0081 -0.0615\" group_name=\"arm\" name=\"post middle left\" service_name=\"execute_group_joint_states\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteAddBox\" auto_subfix=\"0\" box_name=\"boxsur\" box_pose=\"0.901 0 1.35 0 0 0 1\" box_size=\"0.001 2.4 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"boxes_surface\" service_name=\"execute_add_box\"/>\n                </Sequence>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ConnectWaypoints\">\n            <output_port name=\"connected_waypoints\">PoseArray</output_port>\n            <input_port default=\"connect_waypoints\" name=\"service_name\"/>\n            <input_port name=\"waypoint1\">Pose</input_port>\n            <input_port name=\"waypoint2\">Pose</input_port>\n            <input_port name=\"waypoint3\">Pose</input_port>\n            <input_port name=\"waypoint4\">Pose</input_port>\n            <input_port name=\"waypoint5\">Pose</input_port>\n        </Action>\n        <Action ID=\"ExecuteAddBox\">\n            <input_port default=\"1\" name=\"auto_subfix\"/>\n            <input_port default=\"box\" name=\"box_name\"/>\n            <input_port default=\"{place_pose}\" name=\"box_pose\"/>\n            <input_port default=\"0.2 0.2 0.2\" name=\"box_size\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"1\" name=\"is_absolute\"/>\n            <input_port default=\"execute_add_box\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteAddPlane\">\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"ground\" name=\"plane_name\"/>\n            <input_port default=\"0 0 1\" name=\"plane_normal\"/>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"plane_pose\">Pose</input_port>\n            <input_port default=\"execute_add_plane\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteAttachBox\">\n            <input_port name=\"box_name\"/>\n            <input_port name=\"box_pose\"/>\n            <input_port name=\"box_size\"/>\n            <input_port default=\"gripper\" name=\"eef_group_name\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"execute_attach_box\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteDetachObject\">\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port name=\"obj_name\"/>\n            <input_port default=\"execute_detach_object\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupAngularJointStates\">\n            <input_port default=\"0 0 0 0 0 0 0\" name=\"goal\"/>\n            <input_port default=\"panda_arm\" name=\"group_name\"/>\n            <input_port default=\"execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupLinearJointStates\">\n            <input_port default=\"0.04 0.04\" name=\"goal\"/>\n            <input_port default=\"hand\" name=\"group_name\"/>\n            <input_port default=\"execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupManyPoses\">\n            <input_port name=\"constraint\">If 'r', 'p', or 'y' is given, the eef_frame should not rotate about itself along x-, y-, or z-axis. You can combine them like 'rp', 'ry', 'py', and 'rpy'. Default ''</input_port>\n            <input_port default=\"0.1\" name=\"eef_step\"/>\n            <input_port default=\"0\" name=\"goal_type\">0: Pose wrt the global base frame (robot base); 1: Pose wrt the base frame transferred to current eef base position; 2: pose wrt the eef frame</input_port>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goals\">Goals for each waypoint to reach, seperate with ; </input_port>\n            <input_port default=\"arm\" name=\"group_name\">The group providing the reference frame</input_port>\n            <input_port default=\"execute_group_many_poses\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupPose\">\n            <input_port name=\"constraint\">If 'r', 'p', or 'y' is given, the eef_frame should not rotate about itself along x-, y-, or z-axis. You can combine them like 'rp', 'ry', 'py', and 'rpy'. Default ''</input_port>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goal\"/>\n            <input_port default=\"0\" name=\"goal_type\">0: Pose wrt the global base frame (robot base); 1: Pose wrt the base frame transferred to current eef base position; 2: pose wrt the eef frame</input_port>\n            <input_port default=\"arm\" name=\"group_name\">The group providing the reference frame</input_port>\n            <input_port default=\"execute_group_pose\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupShift\">\n            <input_port default=\"z\" name=\"axis\">Could be x y z roll pitch yaw</input_port>\n            <input_port default=\"0\" name=\"goal\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"execute_group_shift\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecutePlanning\">\n            <input_port default=\"0\" name=\"category\">0 for large box, 1 for small box</input_port>\n            <output_port name=\"pick_pose\">Pose</output_port>\n            <output_port name=\"place_obj_pose\">Pose</output_port>\n            <output_port name=\"place_pose\">Pose</output_port>\n            <input_port name=\"pose\">Pose</input_port>\n            <output_port name=\"pre_pick_pose\">Pose</output_port>\n            <output_port name=\"pre_place_pose\">Pose</output_port>\n            <input_port default=\"execute_planning\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteRemoveObject\">\n            <input_port default=\"1\" name=\"is_exact\"/>\n            <input_port name=\"obj_name\"/>\n            <input_port default=\"execute_remove_object\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteSuction\">\n            <input_port default=\"0\" name=\"enable\"/>\n            <input_port default=\"execute_suction\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"FetchDetectedInfo\">\n            <output_port name=\"category\">String, 0 for large box, 1 for small box</output_port>\n            <output_port name=\"pose\">Pose</output_port>\n            <input_port default=\"fetch_detected_info\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"SenseObjectPose\">\n            <output_port name=\"category\">String, 0 for large box, 1 for small box</output_port>\n            <output_port name=\"pose\">Pose</output_port>\n            <input_port default=\"sense_object_pose\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"StoreDetectedInfo\">\n            <input_port name=\"category\">String, 0 for large box, 1 for small box</input_port>\n            <input_port name=\"pose\">Pose</input_port>\n            <input_port default=\"store_detected_info\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"TypeInPose\">\n            <output_port name=\"pose_on_blackboard\">Pose on blackboard</output_port>\n            <input_port default=\"type_in_pose\" name=\"service_name\"/>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"type_in_pose\">Pose to be typed in</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single task, \"Go_point\", which directs the robot to move towards a specific destination. The tree is straightforward, with no complex branching or conditional logic. Its primary function is to guide the robot to the designated point.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n      <Go_point   name=\"Go_point\" goal=\"{destination}\"/>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to demonstrate the generation of a Fibonacci sequence. It starts by printing a message indicating the start of the Fibonacci demo. Then, it attempts to set the value of the Fibonacci order but this part is commented out. After that, it prints a message indicating the order of the Fibonacci sequence and then proceeds to calculate the Fibonacci sequence using the specified order. Finally, it prints the generated Fibonacci sequence.\n\nOverall, the behavior tree's main task is to showcase the process of generating a Fibonacci sequence and display the order and the resulting sequence.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"Sequence\">\n    \t<Print message=\"=== Fibonacci demo ===\"/>\n    \t<!--<SetBlackboard output_key=\"fibonacci_order\" value=\"5\" />-->\n    \t<Print message=\"Order\"/>\n    \t<Print message=\"{fibonacci_order}\"/>\n    \t<Fibonacci order=\"{fibonacci_order}\" sequence=\"{fibonacci_sequence}\"/>\n    \t<Print message=\"Sequence\"/>\n    \t<Print message=\"{fibonacci_sequence}\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions for controlling a robotic arm. The robot is programmed to perform a series of movements and poses, including going to a prepare pose, lowering its position, and executing a plan to draw a square trajectory. Additionally, there are provisions for executing all plans and poses for multiple groups, allowing collision detection, specifying time stamps, and setting goals for each group.\n\nThe behavior tree utilizes various actions such as executing joint states, executing poses, and executing plans, with parameters for goals, group names, service names, tolerance, and timestamps. These actions enable the robot to perform complex tasks involving precise movements and coordinated actions.\n\nOverall, the behavior tree orchestrates a sequence of actions to control the robotic arm, facilitating specific movements and poses while providing flexibility for executing plans and poses across multiple groups.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"RoPort Demo\">\n            <Action ID=\"ExecuteGroupAngularJointStates\" goal=\"0 -10 10 0 0 0\" group_name=\"arm\" name=\"Go to prepare pose\" service_name=\"execute_group_joint_states\" tolerance=\"0.01\"/>\n            <Action ID=\"ExecuteGroupPose\" goal=\"0 0 -0.3 0 0 0 1\" group_name=\"arm\" is_absolute=\"0\" name=\"Lower\" service_name=\"execute_group_pose\" tolerance=\"0.01\"/>\n            <Action ID=\"ExecuteGroupPlan\" allow_collision=\"0\" group_name=\"arm\" is_absolute=\"0\" name=\"Draw square\" poses=\"0 0.3 0 0 0 0 1;0 0 0.6 0 0 0 1;0 -0.6 0 0 0 0 1;0 0 -0.6 0 0 0 1;0 0.3 0 0 0 0 1;0 0 0.3 0 0 0 1\" service_name=\"execute_group_plan\" stamp=\"30\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ExecuteAllPlans\">\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"all_poses\">Poses for each group to visit, seperate with | for different groups</input_port>\n            <input_port default=\"0\" name=\"allow_collision\"/>\n            <input_port default=\"panda_arm\" name=\"group_names\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"execute_all_plans\" name=\"service_name\"/>\n            <input_port default=\"1\" name=\"stamps\"/>\n        </Action>\n        <Action ID=\"ExecuteAllPoses\">\n            <input_port default=\"0\" name=\"allow_collision\"/>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goals\">Goals for each group to reach, seperate with ;</input_port>\n            <input_port default=\"panda_arm\" name=\"group_names\">Names of groups to control, seperate with space</input_port>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"execute_all_poses\" name=\"service_name\"/>\n            <input_port default=\"1\" name=\"stamps\">Time stamps for each group reaching the goal, seperate with space</input_port>\n        </Action>\n        <Action ID=\"ExecuteGroupAngularJointStates\">\n            <input_port default=\"0 0 0 0 0 0 0\" name=\"goal\"/>\n            <input_port default=\"panda_arm\" name=\"group_name\"/>\n            <input_port default=\"execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupLinearJointStates\">\n            <input_port default=\"0.04 0.04\" name=\"goal\"/>\n            <input_port default=\"hand\" name=\"group_name\"/>\n            <input_port default=\"execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.001\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupPlan\">\n            <input_port default=\"0\" name=\"allow_collision\"/>\n            <input_port default=\"panda_arm\" name=\"group_name\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"0 0 0.1 0 0 0 1;0 0 -0.1 0 0 0 1\" name=\"poses\">Trajectory poses in plan. Each pose is relevant to the last pose.</input_port>\n            <input_port default=\"execute_group_plan\" name=\"service_name\"/>\n            <input_port default=\"2\" name=\"stamp\">Time stamp of the last pose in plan</input_port>\n        </Action>\n        <Action ID=\"ExecuteGroupPose\">\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goal\"/>\n            <input_port default=\"panda_arm\" name=\"group_name\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"execute_group_pose\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a sequence of actions for a robot to navigate through a building. The robot is initially programmed to attempt passing through windows in different sequences, with the option to fallback if unsuccessful. If the fallback occurs, it will then proceed to close a door. The specific sequences involve multiple passes through windows and ultimately a door. The tree includes various actions such as \"PassThroughWindow\" and \"CloseDoor\", along with conditions like \"IsDoorOpen\". Overall, the robot's task involves navigating through the building by passing through windows and closing a door, with the ability to handle fallbacks during the process.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"SeqA\">\n            <Fallback name=\"root_Fallback\">\n                <Sequence name=\"SeqB\">\n                    <Action ID=\"PassThroughWindow\"/>\n                    <Sequence name=\"SeqC\">\n                        <Action ID=\"PassThroughWindow\"/>\n                        <Action ID=\"PassThroughWindow\"/>\n                        <Sequence name=\"SeqD\">\n                            <Action ID=\"PassThroughWindow\"/>\n                            <Action ID=\"PassThroughWindow\"/>\n                            <Action ID=\"PassThroughWindow\"/>\n                            <Action ID=\"PassThroughDoor\"/>\n                        </Sequence>\n                    </Sequence>\n                </Sequence>\n                <Sequence name=\"SeqE\">\n                    <Action ID=\"PassThroughWindow\"/>\n                    <Sequence name=\"SeqF\">\n                        <Action ID=\"PassThroughWindow\"/>\n                        <Sequence name=\"SeqG\">\n                            <Action ID=\"PassThroughWindow\"/>\n                        </Sequence>\n                        <Action ID=\"PassThroughWindow\"/>\n                    </Sequence>\n                    <Action ID=\"PassThroughWindow\"/>\n                </Sequence>\n            </Fallback>\n            <Action ID=\"CloseDoor\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CloseDoor\"/>\n        <SubTree ID=\"DoorClosed\"/>\n        <Condition ID=\"IsDoorOpen\"/>\n        <Action ID=\"OpenDoor\"/>\n        <Action ID=\"PassThroughDoor\"/>\n        <Action ID=\"PassThroughWindow\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a scenario where a robot needs to navigate through a door or window. The robot first attempts to pass through the door, and if it's open, it does so directly. If the door is closed, the robot tries to open it up to 4 times before passing through. If both door options fail, the robot will resort to passing through the window. After completing any of these actions, the robot then proceeds to close the door.\n\nIn summary, the behavior tree outlines a decision-making process for the robot to navigate through an obstacle (door or window) while ensuring that the door is eventually closed after passing through it.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <Fallback name=\"root_Fallback\">\n                <Sequence name=\"door_open_sequence\">\n                    <Condition ID=\"IsDoorOpen\"/>\n                    <Action ID=\"PassThroughDoor\"/>\n                </Sequence>\n                <Sequence name=\"door_closed_sequence\">\n                    <Inverter>\n                        <Condition ID=\"IsDoorOpen\"/>\n                    </Inverter>\n                    <RetryUntilSuccesful num_attempts=\"4\">\n                        <Action ID=\"OpenDoor\"/>\n                    </RetryUntilSuccesful>\n                    <Action ID=\"PassThroughDoor\"/>\n                </Sequence>\n                <Action ID=\"PassThroughWindow\"/>\n            </Fallback>\n            <Action ID=\"CloseDoor\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CloseDoor\"/>\n        <SubTree ID=\"DoorClosed\"/>\n        <Condition ID=\"IsDoorOpen\"/>\n        <Action ID=\"OpenDoor\"/>\n        <Action ID=\"PassThroughDoor\"/>\n        <Action ID=\"PassThroughWindow\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a sequence of actions. When executed, it will perform the following tasks in order: \n1. Execute \"go1\" action\n2. Set the value of \"${valueA}\" to 8\n3. Execute \"go2\" action\n\nThe behavior tree contains additional actions (\"go3\" to \"go9\") which are not utilized in the main sequence. These actions may be part of the overall system but are not directly involved in the main task described by the behavior tree.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"go1\"/>\n            <SetBlackboard output_key=\"${valueA}\" value=\"8\"/>\n            <Action ID=\"go2\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"go4\"/>\n        <Action ID=\"go5\"/>\n        <Action ID=\"go6\"/>\n        <Action ID=\"go7\"/>\n        <Action ID=\"go8\"/>\n        <Action ID=\"go9\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions to be executed. The actions involve input and output ports, where some actions have default values for their ports. These actions are named \"inOnlyA,\" \"inOnlyB,\" \"outOnlyA,\" \"outOnlyB,\" \"outOnlyC,\" \"outOnlyD,\" \"outOnlyE,\" and \"outOnlyF.\" \n\nIn the sequence, \"inOnlyA\" and \"inOnlyB\" actions are performed with specific input values or defaults. Then, \"outOnlyA,\" \"outOnlyB,\" \"outOnlyC,\" \"outOnlyD,\" \"outOnlyE,\" and \"outOnlyF\" actions are executed, each producing an output value.\n\nThe XML also includes a TreeNodesModel that further details the input and output ports for each action.\n\nOverall, this behavior tree seems to represent a series of interconnected actions with input and output data flow, possibly as part of a larger system or process.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Action ID=\"inOnlyA\" in0=\"\"/>\n            <Action ID=\"inOnlyB\" in0=\"ice\"/>\n            <Action ID=\"inOnlyB\" in0=\"\"/>\n            <Action ID=\"inOnlyA\" in0=\"  ${foo.baz}\"/>\n            <Action ID=\"outOnlyA\" out0=\"\"/>\n            <Action ID=\"outOnlyB\" out0=\"baz\"/>\n            <Action ID=\"outOnlyC\" out0=\"${baz}\"/>\n            <Action ID=\"outOnlyD\" out0=\"${foo.goo}\"/>\n            <Action ID=\"outOnlyE\" out0=\"${fan}\"/>\n            <Action ID=\"outOnlyF\" out0=\"${long.untraveled.path}\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"inOnlyA\">\n            <input_port name=\"in0\"/>\n        </Action>\n        <Action ID=\"inOnlyB\">\n            <input_port default=\"foo\" name=\"in0\"/>\n        </Action>\n        <Action ID=\"outOnlyA\">\n            <output_port name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyB\">\n            <output_port default=\"${baz}\" name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyC\">\n            <output_port name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyD\">\n            <output_port name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyE\">\n            <output_port name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyF\">\n            <output_port name=\"out0\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate while continuously replanning its global path after every 1 meter of movement. It uses a PipelineSequence consisting of two steps: \n1. DistanceController: This step computes a new path to the goal pose using the \"GridBased\" planner whenever the robot has moved 1 meter.\n2. FollowPath: The robot then follows the computed path using the specified controller.\n\nThis approach ensures that the robot dynamically adjusts its path to reach the goal, taking into account any changes in the environment or obstacles encountered during navigation.",
        "output": "<!--\n  This Behavior Tree replans the global path after every 1m.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <DistanceController distance=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </DistanceController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate with periodic global path replanning at 1 Hz and includes recovery actions. It uses a recovery node with a set number of retries, and within it, a pipeline sequence for navigation with replanning. The rate controller ensures the frequency of path computation. If there are failures in computing or following the path, recovery nodes handle retries and recovery actions such as clearing costmaps, spinning, and waiting. The reactive fallback handles goal updates and triggers recovery actions when necessary. This behavior tree aims to ensure robust navigation by periodically replanning the path, handling failures, and recovering from unexpected situations.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single sequence that instructs the robot to move towards a specified goal. The goal is provided as an argument, allowing for flexibility in defining the target location for the robot to move to. This behavior tree is simple and direct, with the main task being to execute the \"move\" action within the defined sequence.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <Move    name=\"move\" goal=\"${arg2}\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a sequence of actions for a robotic system. It begins by updating the planning scene, possibly to incorporate any changes in the environment. Following this, it pauses execution for 3 seconds, allowing time for the updated information to be processed or for other concurrent tasks to occur. This behavior tree seems to be part of a larger system that manages the robotic system's activities and responses within its environment.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <TrayUpdatePlanningScene />\n            <Pause time_limit_sec=\"3\"/>\n        </Sequence>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a sequence of actions for a robot. Initially, it adjusts the head and torso positions before moving to specific locations using the base. Subsequently, it manipulates the arm joints to assume different poses at each location. The head and torso adjustments are made in between movements. Finally, the robot returns to a resting pose.\n\nIn summary, the behavior tree commands the robot to perform a series of coordinated movements and pose adjustments, demonstrating a predefined set of actions that the robot should execute sequentially.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <HeadControl pitch=\"0.0\" yaw=\"90.0\" />\n            <TorsoControl relative_height=\"0.4\" />\n            <MoveBase goal=\"0;-3;0\"/>\n            <GetArmJointsForPose pose=\"UPTRAY\" joints_pose=\"{joints_pose}\" />\n            <SetArmJointsLeft joints_pose=\"{joints_pose}\" />\n            <SetArmJointsRight joints_pose=\"{joints_pose}\" />\n            <HeadControl pitch=\"-45.0\" yaw=\"90.0\" />\n            <MoveBase goal=\"1;-3;0\"/>\n            <GetArmJointsForPose pose=\"EXTENDED\" joints_pose=\"{joints_pose}\" />\n            <SetArmJointsLeft joints_pose=\"{joints_pose}\" />\n            <SetArmJointsRight joints_pose=\"{joints_pose}\" />\n            <HeadControl pitch=\"45.0\" yaw=\"90.0\" />\n            <MoveBase goal=\"2;-3;0\"/>\n            <GetArmJointsForPose pose=\"GRIPPING\" joints_pose=\"{joints_pose}\" />\n            <SetArmJointsLeft joints_pose=\"{joints_pose}\" />\n            <SetArmJointsRight joints_pose=\"{joints_pose}\" />\n            <HeadControl pitch=\"0.0\" yaw=\"90.0\" />\n            <MoveBase goal=\"3;-3;0\"/>\n            <HeadControl pitch=\"0.0\" yaw=\"120.0\" />\n            <TorsoControl relative_height=\"1\" />\n            <TorsoControl relative_height=\"0\" />\n            <TorsoControl relative_height=\"0.4\" />\n            <GetArmJointsForPose pose=\"REST\" joints_pose=\"{joints_pose}\" />\n            <SetArmJointsLeft joints_pose=\"{joints_pose}\" />\n            <SetArmJointsRight joints_pose=\"{joints_pose}\" />\n        </Sequence>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a system to dynamically navigate towards a certain pose while continuously replanning its path. The system operates at a frequency of 1 Hz and follows a sequence that involves updating the goal, computing a path to the updated goal using a GridBased planner, truncating the computed path to a certain distance, and then continuously following the truncated path until failure. This approach allows the system to adapt to changes in the environment or the goal pose by updating the path and ensuring it can navigate to the desired location effectively.",
        "output": "<!--\n  This Behavior Tree follows a dynamic pose to a certain distance\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n         <TruncatePath distance=\"1.0\" input_path=\"{path}\" output_path=\"{truncated_path}\"/>\n        </Sequence>\n      </RateController>\n      <KeepRunningUntilFailure>\n        <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\"/>\n      </KeepRunningUntilFailure>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a Reactive Sequence that includes a custom condition and a custom action. When executed, the behavior tree will evaluate the custom condition and then perform the custom action based on the result of the evaluation. This structure allows for reactive decision-making, where the robot can respond to changing conditions by executing the specified action.",
        "output": "<?xml version=\"1.0\"?>\n<!--\n Copyright (C) 2020 Fondazione Istituto Italiano di Tecnologia (IIT)\n All Rights Reserved.\n-->\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <ReactiveSequence>\n           <Condition ID=\"ConditionExample\" name=\"CustomConditionExample\"/>\n           <Action ID=\"ActionExample\" name=\"CustomActionExample\"/>\n        </ReactiveSequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a navigation system for a robot that involves periodic global path replanning at a frequency of 1 Hz. The robot's movement is controlled by a pipeline sequence consisting of a speed controller and a path following component. The speed controller regulates the robot's speed based on the planned path, with the ability to adjust the speed between a minimum and maximum rate. Additionally, it computes the path to a specified goal using the \"GridBased\" planner and filters the computed path over a duration of 0.3 seconds. Subsequently, the FollowPath component directs the robot to follow the computed path. This behavior tree ensures that the robot navigates while continuously updating its global path to adapt to changing environmental conditions.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <SpeedController min_rate=\"0.1\" max_rate=\"1.0\" min_speed=\"0.0\" max_speed=\"0.26\" filter_duration=\"0.3\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </SpeedController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a task for an agent to perform over 100 cycles. During each cycle, the agent is expected to execute three actions in parallel: engage in a dialog, perform a social navigation action (specifically escorting), and potentially respond to a stop condition. The success of the overall task is determined by the successful completion of at least one of these actions within each cycle. If all actions fail, the cycle is considered a failure.\n\nThis behavior tree seems to represent a scenario where an agent is repeatedly engaging in social interactions and navigation tasks, with the expectation that at least one of these actions will be successfully completed within each cycle. The use of repetition and parallel execution suggests a continuous and adaptive engagement with the environment, possibly in a social or interactive context.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <Repeat num_cycles=\"100\">\n                <Parallel success_threshold=\"1\" failure_threshold=\"1\">\n                    <Dialog name=\"dialog\"/>\n                    <SocialNav2Action \n                            name=\"social_nav2_action\" \n                            goal=\"escort\" \n                            agent_id=\"agent_1\"/>\n                    <!--<StopCondition stop_topic=\"/social_nav2_bt_action/stop\"/>-->\n                </Parallel>\n            </Repeat>\n        </Sequence>\n     </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for an animal, likely a predator or prey. The tree includes various sequences and fallbacks to determine the animal's actions based on its current state and environmental conditions.\n\nThe main sequence consists of:\n1. Attempting to get a target\n2. Moving towards the target\n3. If the target is adjacent, attacking it\n\nIf the above sequence fails, the tree falls back to other options such as hunting, retreating, or making a random move. These fallbacks are determined by conditions like time of day, hunger, and reproductive status.\n\nAdditionally, the tree contains a range of actions and conditions that govern the animal's behavior, including finding prey, eating, sleeping, and reproducing.\n\nOverall, the behavior tree simulates the decision-making process of an animal in a dynamic environment, considering factors such as survival, reproduction, and sustenance.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <FallbackStar>\n            <SequenceStar>\n                <Action ID=\"GetTarget\"/>\n                <Action ID=\"Move\"/>\n                <Sequence>\n                    <Condition ID=\"TargetAdjacent\"/>\n                    <Action ID=\"AttackTarget\"/>\n                </Sequence>\n            </SequenceStar>\n            <SequenceStar name=\"Hunt\">\n                <Condition ID=\"IsNight\"/>\n                <Condition ID=\"IsHungry\"/>\n                <Action ID=\"FindPrey\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"KillPrey\"/>\n                <Action ID=\"EatPrey\"/>\n            </SequenceStar>\n            <SequenceStar name=\"Retreat\">\n                <Condition ID=\"IsDay\"/>\n                <Action ID=\"FindRetreat\"/>\n                <Action ID=\"Move\"/>\n                <Sequence>\n                    <Condition ID=\"IsDay\"/>\n                    <Action ID=\"Sleep\"/>\n                </Sequence>\n            </SequenceStar>\n            <Action ID=\"RandomMove\"/>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AttackTarget\"/>\n        <Condition ID=\"CanHaveSex\"/>\n        <Action ID=\"EatPrey\"/>\n        <Action ID=\"FindPrey\"/>\n        <Action ID=\"FindRetreat\"/>\n        <Action ID=\"GetTarget\"/>\n        <Action ID=\"GiveBirth\"/>\n        <Condition ID=\"IsAdult\"/>\n        <Condition ID=\"IsCarnivore\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsEgg\"/>\n        <Condition ID=\"IsEggLayer\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHerbivore\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Condition ID=\"IsPregnant\"/>\n        <Condition ID=\"IsProducer\"/>\n        <Condition ID=\"IsReadyToGiveBirth\"/>\n        <Condition ID=\"IsWoodVermin\"/>\n        <Condition ID=\"IsYoung\"/>\n        <Action ID=\"KillPrey\"/>\n        <Action ID=\"LayEgg\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"Produce\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"Sleep\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n        <Action ID=\"TryHaveSex\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a complex set of tasks for a robot. It includes various sub-trees and actions such as moving towards specific goals, interacting with objects using a robotic arm, reacting to events like \"gohome\" or \"IsArretUrgence\", and making decisions based on conditions like the presence of certain objects or the robot's movement status.\n\nThe main behavior tree (\"BehaviorTree\") orchestrates the robot's high-level behavior, including handling emergency stops, checking for the presence of a key, initializing the robot, and performing specific tasks at yellow and violet camps.\n\nAdditionally, there are sub-trees for specific tasks such as taking and placing pallets, testing different suction cups, and dealing with goldenium. These sub-trees involve intricate sequences of movements and interactions with the environment.\n\nOverall, the behavior tree outlines a comprehensive set of behaviors for the robot, encompassing navigation, manipulation of objects, decision-making based on environmental conditions, and reacting to external events.",
        "output": "<root main_tree_to_execute=\"rosbag_r1\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <ReactiveFallback>\n            <Inverter>\n                <Condition ID=\"IsArretUrgence\"/>\n            </Inverter>\n            <Condition ID=\"IsTirettePresente\"/>\n            <SequenceStar>\n                <SubTree ID=\"initRobot\"/>\n                <ReactiveSequence>\n                    <Action ID=\"AfficherLeScore\"/>\n                    <ReactiveFallback>\n                        <SubTree ID=\"campJaune\"/>\n                        <SubTree ID=\"campViolet\"/>\n                    </ReactiveFallback>\n                </ReactiveSequence>\n            </SequenceStar>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"TesterToutesLesVentouses\">\n        <Fallback>\n            <SubTree ID=\"VentouseD\"/>\n            <SubTree ID=\"VentouseCD\"/>\n            <SubTree ID=\"VentouseDG\"/>\n            <SubTree ID=\"VentouseC\"/>\n            <SubTree ID=\"VentouseCDG\"/>\n            <SubTree ID=\"VentouseG\"/>\n            <SubTree ID=\"VentouseCG\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"VentouseC\">\n        <Sequence>\n            <Condition ID=\"IsVentouseCentre\"/>\n            <Inverter>\n                <Condition ID=\"IsVentouseDroite\"/>\n            </Inverter>\n            <Inverter>\n                <Condition ID=\"IsVentouseGauche\"/>\n            </Inverter>\n            <Action ID=\"Pince\" right_valve=\"false\" left_valve=\"false\" middle_valve=\"true\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"VentouseCD\">\n        <Sequence>\n            <Condition ID=\"IsVentouseCentre\"/>\n            <Condition ID=\"IsVentouseDroite\"/>\n            <Inverter>\n                <Condition ID=\"IsVentouseGauche\"/>\n            </Inverter>\n            <Action ID=\"Pince\" right_valve=\"true\" left_valve=\"false\" middle_valve=\"true\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"VentouseCDG\">\n        <Sequence>\n            <Condition ID=\"IsVentouseCentre\"/>\n            <Condition ID=\"IsVentouseDroite\"/>\n            <Condition ID=\"IsVentouseGauche\"/>\n            <Action ID=\"Pince\" right_valve=\"true\" left_valve=\"true\" middle_valve=\"true\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"VentouseCG\">\n        <Sequence>\n            <Condition ID=\"IsVentouseCentre\"/>\n            <Inverter>\n                <Condition ID=\"IsVentouseDroite\"/>\n            </Inverter>\n            <Condition ID=\"IsVentouseGauche\"/>\n            <Action ID=\"Pince\" right_valve=\"false\" left_valve=\"true\" middle_valve=\"true\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"VentouseD\">\n        <Sequence>\n            <Inverter>\n                <Condition ID=\"IsVentouseCentre\"/>\n            </Inverter>\n            <Condition ID=\"IsVentouseDroite\"/>\n            <Inverter>\n                <Condition ID=\"IsVentouseGauche\"/>\n            </Inverter>\n            <Action ID=\"Pince\" right_valve=\"true\" left_valve=\"false\" middle_valve=\"false\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"VentouseDG\">\n        <Sequence>\n            <Inverter>\n                <Condition ID=\"IsVentouseCentre\"/>\n            </Inverter>\n            <Condition ID=\"IsVentouseDroite\"/>\n            <Condition ID=\"IsVentouseGauche\"/>\n            <Action ID=\"Pince\" right_valve=\"true\" left_valve=\"true\" middle_valve=\"false\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"VentouseG\">\n        <Sequence>\n            <Inverter>\n                <Condition ID=\"IsVentouseCentre\"/>\n            </Inverter>\n            <Inverter>\n                <Condition ID=\"IsVentouseDroite\"/>\n            </Inverter>\n            <Condition ID=\"IsVentouseGauche\"/>\n            <Action ID=\"Pince\" right_valve=\"false\" left_valve=\"true\" middle_valve=\"false\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"campJaune\">\n        <ReactiveSequence>\n            <Inverter>\n                <Condition ID=\"IsCampViolet\"/>\n            </Inverter>\n            <Condition ID=\"MinuterieNonEcoulee\"/>\n            <SequenceStar>\n                <SequenceStar>\n                    <Action theta_mul=\"\" y=\"0\" ID=\"Aller\" comment=\"\" theta=\"0\" y_mul=\"\" x=\"-0.5\" x_mul=\"\"/>\n                    <Action theta_mul=\"\" y=\"0\" ID=\"Aller\" comment=\"\" theta=\"-1.57\" y_mul=\"\" x=\"0.05\" x_mul=\"\"/>\n                    <Action theta_mul=\"\" y=\"-1.275\" ID=\"Aller\" comment=\"\" theta=\"-1.57\" y_mul=\"\" x=\"0.05\" x_mul=\"\"/>\n                    <Action theta_mul=\"\" y=\"-1.18\" ID=\"Aller\" comment=\"\" theta=\"-1.57\" y_mul=\"\" x=\"0.05\" x_mul=\"\"/>\n                    <Action theta_mul=\"\" y=\"-1.18\" ID=\"Aller\" comment=\"\" theta=\"-1.57\" y_mul=\"\" x=\"-0.5\" x_mul=\"\"/>\n                </SequenceStar>\n                <SequenceStar>\n                    <Action theta_mul=\"\" y=\"0.0\" ID=\"Aller\" comment=\"\" theta=\"1.047\" y_mul=\"\" x=\"-0.75\" x_mul=\"\"/>\n                    <SubTree ID=\"debloquerGoldenium\"/>\n                    <Action theta_mul=\"\" y=\"0.75\" ID=\"Aller\" comment=\"\" theta=\"3.1416\" y_mul=\"\" x=\"-0.70\" x_mul=\"\"/>\n                    <SubTree ID=\"ramasserGoldenium\"/>\n                    <Action theta_mul=\"\" y=\"-0.15\" ID=\"Aller\" comment=\"\" theta=\"0\" y_mul=\"\" x=\"0.50\" x_mul=\"\"/>\n                    <SubTree ID=\"deposerGoldenium\"/>\n                </SequenceStar>\n            </SequenceStar>\n        </ReactiveSequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"campViolet\">\n        <ReactiveSequence>\n            <Condition ID=\"IsCampViolet\"/>\n            <Condition ID=\"MinuterieNonEcoulee\"/>\n            <SequenceStar>\n                <SequenceStar>\n                    <Action theta_mul=\"\" y=\"0\" ID=\"Aller\" comment=\"\" theta=\"0\" y_mul=\"\" x=\"-0.5\" x_mul=\"\"/>\n                    <Action theta_mul=\"\" y=\"0\" ID=\"Aller\" comment=\"\" theta=\"1.57\" y_mul=\"\" x=\"0.05\" x_mul=\"\"/>\n                    <Action theta_mul=\"\" y=\"1.275\" ID=\"Aller\" comment=\"\" theta=\"1.57\" y_mul=\"\" x=\"0.05\" x_mul=\"\"/>\n                    <Action theta_mul=\"\" y=\"1.18\" ID=\"Aller\" comment=\"\" theta=\"1.57\" y_mul=\"\" x=\"0.05\" x_mul=\"\"/>\n                    <Action theta_mul=\"\" y=\"1.18\" ID=\"Aller\" comment=\"\" theta=\"1.57\" y_mul=\"\" x=\"-0.5\" x_mul=\"\"/>\n                </SequenceStar>\n                <SequenceStar>\n                    <Action theta_mul=\"\" y=\"0.0\" ID=\"Aller\" comment=\"\" theta=\"-1.047\" y_mul=\"\" x=\"-0.75\" x_mul=\"\"/>\n                    <SubTree ID=\"debloquerGoldenium\"/>\n                    <Action theta_mul=\"\" y=\"-0.75\" ID=\"Aller\" comment=\"\" theta=\"-3.1416\" y_mul=\"\" x=\"-0.70\" x_mul=\"\"/>\n                    <SubTree ID=\"ramasserGoldenium\"/>\n                    <Action theta_mul=\"\" y=\"0.15\" ID=\"Aller\" comment=\"\" theta=\"0\" y_mul=\"\" x=\"0.50\" x_mul=\"\"/>\n                    <SubTree ID=\"deposerGoldenium\"/>\n                </SequenceStar>\n            </SequenceStar>\n        </ReactiveSequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"debloquerGoldenium\">\n        <Action ms=\"10\" ID=\"Attendre\"/>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"deposerGoldenium\">\n        <Sequence>\n            <Action angle_pince=\"140\" ID=\"Bras\" angle_base=\"53\"/>\n            <Action ID=\"Pince\" right_valve=\"false\" left_valve=\"false\" middle_valve=\"false\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"initRobot\">\n        <Sequence>\n            <Action score=\"50\" ID=\"DefinirLeScore\"/>\n            <Action seconds=\"98\" ID=\"LancerLaMinuterie\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"mettrePaletReserveArriere\">\n        <ReactiveSequence>\n            <Inverter>\n                <Condition ID=\"IsRobotEnMouvement\"/>\n            </Inverter>\n            <ReactiveSequence>\n                <Action angle_pince=\"54\" angle_base=\"57\" ID=\"Bras\"/>\n                <Action angle_pince=\"141\" angle_base=\"66\" ID=\"Bras\"/>\n                <Action right_valve=\"false\" left_valve=\"false\" middle_valve=\"false\" ID=\"Pince\"/>\n            </ReactiveSequence>\n        </ReactiveSequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"mettrePaletReserveAvant\">\n        <ReactiveSequence>\n            <Inverter>\n                <Condition ID=\"IsRobotEnMouvement\"/>\n            </Inverter>\n            <ReactiveSequence>\n                <Action angle_pince=\"54\" angle_base=\"57\" ID=\"Bras\"/>\n                <Action angle_pince=\"129\" angle_base=\"63\" ID=\"Bras\"/>\n                <Action right_valve=\"false\" left_valve=\"false\" middle_valve=\"false\" ID=\"Pince\"/>\n            </ReactiveSequence>\n        </ReactiveSequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"poserPaletAuSol\">\n        <ReactiveSequence>\n            <Inverter>\n                <Condition ID=\"IsRobotEnMouvement\"/>\n            </Inverter>\n            <Action angle_pince=\"110\" ID=\"Bras\" angle_base=\"70\"/>\n            <Action angle_pince=\"110\" ID=\"Bras\" angle_base=\"170\"/>\n            <Action angle_pince=\"53\" ID=\"Bras\" angle_base=\"175\"/>\n            <Action angle_pince=\"23\" ID=\"Bras\" angle_base=\"170\"/>\n            <Action ID=\"Pince\" right_valve=\"false\" left_valve=\"false\" middle_valve=\"false\"/>\n            <Action angle_pince=\"80\" ID=\"Bras\" angle_base=\"170\"/>\n            <Action angle_pince=\"53\" ID=\"Bras\" angle_base=\"175\"/>\n            <Action angle_pince=\"110\" ID=\"Bras\" angle_base=\"71\"/>\n        </ReactiveSequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"prendreEtPoserPaletAuSol\">\n        <Sequence>\n            <SubTree ID=\"prendrePaletAuSol\"/>\n            <SubTree ID=\"poserPaletAuSol\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"prendrePaletAuSol\">\n        <ReactiveSequence>\n            <Inverter>\n                <Condition ID=\"IsRobotEnMouvement\"/>\n            </Inverter>\n            <Fallback>\n                <SequenceStar>\n                    <Condition ID=\"IsPaletDroit\"/>\n                    <Condition ID=\"IsPaletGauche\"/>\n                    <Action angle_pince=\"80\" ID=\"Bras\" angle_base=\"170\"/>\n                    <Action angle_pince=\"51\" ID=\"Bras\" angle_base=\"180\"/>\n                    <Action angle_pince=\"27\" ID=\"Bras\" angle_base=\"156\"/>\n                    <SubTree ID=\"TesterToutesLesVentouses\"/>\n                    <Action angle_pince=\"110\" ID=\"Bras\" angle_base=\"170\"/>\n                    <Action angle_pince=\"110\" ID=\"Bras\" angle_base=\"90\"/>\n                </SequenceStar>\n                <Action angle_pince=\"110\" ID=\"Bras\" angle_base=\"170\"/>\n                <Action angle_pince=\"110\" ID=\"Bras\" angle_base=\"90\"/>\n            </Fallback>\n        </ReactiveSequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"prendrePaletReserve\">\n        <ReactiveSequence>\n            <Inverter>\n                <Condition ID=\"IsRobotEnMouvement\"/>\n            </Inverter>\n            <ReactiveSequence>\n                <Action angle_pince=\"0\" ID=\"Bras\" angle_base=\"0\"/>\n                <Action angle_pince=\"0\" ID=\"Bras\" angle_base=\"0\"/>\n                <SubTree ID=\"TesterToutesLesVentouses\"/>\n                <Action angle_pince=\"0\" ID=\"Bras\" angle_base=\"0\"/>\n            </ReactiveSequence>\n        </ReactiveSequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"prendrePaletStockArriere\">\n        <ReactiveSequence>\n            <Inverter>\n                <Condition ID=\"IsRobotEnMouvement\"/>\n            </Inverter>\n            <ReactiveFallback>\n                <Action angle_pince=\"100\" angle_base=\"36\" ID=\"Bras\"/>\n                <Action angle_pince=\"110\" angle_base=\"35\" ID=\"Bras\"/>\n                <Action angle_pince=\"140\" angle_base=\"35\" ID=\"Bras\"/>\n                <Action angle_pince=\"150\" angle_base=\"38\" ID=\"Bras\"/>\n                <Action angle_pince=\"153\" angle_base=\"36\" ID=\"Bras\"/>\n                <SubTree ID=\"TesterToutesLesVentouses\"/>\n                <Action angle_pince=\"140\" angle_base=\"40\" ID=\"Bras\"/>\n                <Action angle_pince=\"90\" angle_base=\"40\" ID=\"Bras\"/>\n                <Action angle_pince=\"110\" angle_base=\"70\" ID=\"Bras\"/>\n            </ReactiveFallback>\n        </ReactiveSequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"prendrePaletStockAvant\">\n        <ReactiveSequence>\n            <Inverter>\n                <Condition ID=\"IsRobotEnMouvement\"/>\n            </Inverter>\n            <ReactiveFallback>\n                <Action angle_pince=\"130\" ID=\"Bras\" angle_base=\"36\"/>\n                <Action angle_pince=\"140\" ID=\"Bras\" angle_base=\"35\"/>\n                <Action angle_pince=\"170\" ID=\"Bras\" angle_base=\"35\"/>\n                <Action angle_pince=\"180\" ID=\"Bras\" angle_base=\"38\"/>\n                <Action angle_pince=\"180\" ID=\"Bras\" angle_base=\"32\"/>\n                <SubTree ID=\"TesterToutesLesVentouses\"/>\n                <Action angle_pince=\"140\" ID=\"Bras\" angle_base=\"40\"/>\n                <Action angle_pince=\"90\" ID=\"Bras\" angle_base=\"40\"/>\n                <Action angle_pince=\"110\" ID=\"Bras\" angle_base=\"70\"/>\n            </ReactiveFallback>\n        </ReactiveSequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"ramasserGoldenium\">\n        <ReactiveFallback>\n            <Condition ID=\"IsRobotEnMouvement\"/>\n            <ReactiveSequence>\n                <Inverter>\n                    <Condition ID=\"IsCampViolet\"/>\n                </Inverter>\n                <Action angle_pince=\"0\" ID=\"Bras\" angle_base=\"0\"/>\n                <SubTree ID=\"VentouseG\"/>\n                <Action angle_pince=\"110\" ID=\"Bras\" angle_base=\"70\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"IsCampViolet\"/>\n                <Action angle_pince=\"0\" ID=\"Bras\" angle_base=\"0\"/>\n                <SubTree ID=\"VentouseD\"/>\n                <Action angle_pince=\"110\" ID=\"Bras\" angle_base=\"70\"/>\n            </ReactiveSequence>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"rosbag_r1\">\n        <ReactiveFallback>\n            <Sequence>\n                <Inverter>\n                    <Condition ID=\"IsCampViolet\"/>\n                </Inverter>\n                <ReactiveFallback>\n                    <Sequence>\n                        <Condition ID=\"IsTirettePresente\"/>\n                        <Action ID=\"DefinirLeScore\" score=\"1\"/>\n                        <Action ID=\"AfficherLeScore\"/>\n                    </Sequence>\n                    <ReactiveFallback>\n                        <Condition ID=\"ScoreInferieurA\" score=\"51\"/>\n                        <Sequence>\n                            <ReactiveSequence>\n                                <Condition ID=\"AreEncodersOk\"/>\n                                <Condition ID=\"LaVoieEstLibre-Devant\"/>\n                                <Action nom=\"r1_homol.bag\" ID=\"JouerUnRosbag\" topics=\"/r1/mobile_base_controller/cmd_vel\"/>\n                            </ReactiveSequence>\n                            <Action ID=\"DefinirLeScore\" score=\"51\"/>\n                            <Action ID=\"AfficherLeScore\"/>\n                        </Sequence>\n                    </ReactiveFallback>\n                </ReactiveFallback>\n            </Sequence>\n            <Sequence>\n                <Condition ID=\"IsCampViolet\"/>\n                <ReactiveFallback>\n                    <Sequence>\n                        <Condition ID=\"IsTirettePresente\"/>\n                        <Action ID=\"DefinirLeScore\" score=\"1\"/>\n                        <Action ID=\"AfficherLeScore\"/>\n                    </Sequence>\n                    <ReactiveFallback>\n                        <Condition ID=\"ScoreInferieurA\" score=\"51\"/>\n                        <Sequence>\n                            <ReactiveSequence>\n                                <Condition ID=\"AreEncodersOk\"/>\n                                <Condition ID=\"LaVoieEstLibre-Devant\"/>\n                                <Action nom=\"r1_homol.bag\" ID=\"JouerUnRosbag\" topics=\"/r1/mobile_base_controller/cmd_vel\"/>\n                            </ReactiveSequence>\n                            <Action ID=\"DefinirLeScore\" score=\"51\"/>\n                            <Action ID=\"AfficherLeScore\"/>\n                        </Sequence>\n                    </ReactiveFallback>\n                </ReactiveFallback>\n            </Sequence>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AfficheYeux\">\n            <input_port name=\"defaut\" default=\"0\">1 = message par défaut</input_port>\n            <input_port name=\"fps\" default=\"4\">Frame per second (image animée)</input_port>\n            <input_port name=\"message\">Message ou nom de l'image</input_port>\n            <input_port name=\"repetition\" default=\"1\">Nombre d'itération</input_port>\n        </Action>\n        <Action ID=\"AfficherLeScore\"/>\n        <Action ID=\"AjouterAuScore\">\n            <input_port name=\"score\"/>\n        </Action>\n        <Action ID=\"Aller\">\n            <input_port name=\"comment\"/>\n            <input_port name=\"theta\"/>\n            <input_port name=\"theta_mul\"/>\n            <input_port name=\"x\"/>\n            <input_port name=\"x_mul\"/>\n            <input_port name=\"y\"/>\n            <input_port name=\"y_mul\"/>\n        </Action>\n        <Condition ID=\"AreEncodersOk\"/>\n        <Action ID=\"Arreter le robot\"/>\n        <Action ID=\"ArreterLaMinuterie\"/>\n        <Action ID=\"Attendre\">\n            <input_port name=\"ms\" default=\"1000\">Temps en millisecondes</input_port>\n        </Action>\n        <Action ID=\"Bras\">\n            <input_port name=\"angle_base\" default=\"0\">Angle moteur au plus pres de la base</input_port>\n            <input_port name=\"angle_pince\" default=\"0\">Angle moteur au plus pres de la pince</input_port>\n        </Action>\n        <Action ID=\"DefinirLeScore\">\n            <input_port name=\"score\"/>\n        </Action>\n        <Action ID=\"DefinirPosition\">\n            <input_port name=\"theta\"/>\n            <input_port name=\"x\"/>\n            <input_port name=\"y\"/>\n        </Action>\n        <Action ID=\"DefinirTempsMinuterie\">\n            <input_port name=\"seconds\" default=\"1398\">Temps de la minuterie en secondes</input_port>\n        </Action>\n        <SubTree ID=\"Initialisation\"/>\n        <Action ID=\"InitialiserPosition\"/>\n        <Condition ID=\"IsArretUrgence\"/>\n        <Condition ID=\"IsCampViolet\"/>\n        <Condition ID=\"IsPaletCentre\"/>\n        <Condition ID=\"IsPaletDroit\"/>\n        <Condition ID=\"IsPaletGauche\"/>\n        <Condition ID=\"IsRobotEnMouvement\"/>\n        <Condition ID=\"IsTirettePresente\"/>\n        <Condition ID=\"IsVentouseCentre\"/>\n        <Condition ID=\"IsVentouseDroite\"/>\n        <Condition ID=\"IsVentouseGauche\"/>\n        <Action ID=\"JouerUnRosbag\">\n            <input_port name=\"nom\"/>\n            <input_port name=\"topics\"/>\n        </Action>\n        <Condition ID=\"LaVoieEstLibre-Derriere\"/>\n        <Condition ID=\"LaVoieEstLibre-Devant\"/>\n        <Condition ID=\"LaVoieEstLibre-Droite\"/>\n        <Condition ID=\"LaVoieEstLibre-Gauche\"/>\n        <Action ID=\"LancerLaMinuterie\">\n            <input_port name=\"seconds\"/>\n        </Action>\n        <SubTree ID=\"Minuterie\"/>\n        <Condition ID=\"MinuterieDemarree\"/>\n        <Condition ID=\"MinuterieNonEcoulee\"/>\n        <Action ID=\"Pince\">\n            <input_port name=\"left_valve\" default=\"false\"/>\n            <input_port name=\"middle_valve\" default=\"false\"/>\n            <input_port name=\"right_valve\" default=\"false\"/>\n        </Action>\n        <Control ID=\"RealParallel\"/>\n        <Action ID=\"RecupererLeScore\">\n            <output_port name=\"score\"/>\n        </Action>\n        <Condition ID=\"RobotEnBonneSante\"/>\n        <Condition ID=\"RobotPret\"/>\n        <Condition ID=\"ScoreInferieurA\">\n            <input_port name=\"score\" default=\"1\">Score</input_port>\n        </Condition>\n        <Condition ID=\"ScoreSuperieurA\">\n            <input_port name=\"score\" default=\"0\">Score</input_port>\n        </Condition>\n        <SubTree ID=\"TestSensors\"/>\n        <SubTree ID=\"TesterToutesLesVentouses\"/>\n        <SubTree ID=\"Tirette\">\n            <input_port name=\"camp\"/>\n            <input_port name=\"theta_mul\"/>\n            <input_port name=\"tirette_presente_last_tick\"/>\n            <input_port name=\"y_mul\"/>\n        </SubTree>\n        <Condition ID=\"TiretteLaserPresente\"/>\n        <SubTree ID=\"Trier les palets\"/>\n        <SubTree ID=\"VentouseC\"/>\n        <SubTree ID=\"VentouseCD\"/>\n        <SubTree ID=\"VentouseCDG\"/>\n        <SubTree ID=\"VentouseCG\"/>\n        <SubTree ID=\"VentouseD\"/>\n        <SubTree ID=\"VentouseDG\"/>\n        <SubTree ID=\"VentouseG\"/>\n        <Action ID=\"VitesseConstante\">\n            <input_port name=\"angular_z\" default=\"0\">Vitesse de rotation en rad/s</input_port>\n            <input_port name=\"linear_x\" default=\"0\">Vitesse dans le sens avant/arriere en m/s</input_port>\n            <input_port name=\"linear_y\" default=\"0\">Vitesse dans le sens droite/gauche en m/s</input_port>\n        </Action>\n        <SubTree ID=\"Yeux\"/>\n        <SubTree ID=\"campJaune\"/>\n        <SubTree ID=\"campViolet\"/>\n        <Condition ID=\"checkPosition\">\n            <input_port name=\"x\"/>\n            <input_port name=\"y\"/>\n        </Condition>\n        <SubTree ID=\"debloquerGoldenium\"/>\n        <SubTree ID=\"deposerGoldenium\"/>\n        <SubTree ID=\"initRobot\"/>\n        <SubTree ID=\"mettrePaletReserveArriere\"/>\n        <SubTree ID=\"mettrePaletReserveAvant\"/>\n        <SubTree ID=\"poserPaletAuSol\"/>\n        <SubTree ID=\"prendreEtPoserPaletAuSol\"/>\n        <SubTree ID=\"prendrePaletAuSol\"/>\n        <SubTree ID=\"prendrePaletReserve\"/>\n        <SubTree ID=\"prendrePaletStockArriere\"/>\n        <SubTree ID=\"prendrePaletStockAvant\"/>\n        <SubTree ID=\"ramasserGoldenium\"/>\n        <SubTree ID=\"rosbag_r1\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a decision-making process for an autonomous vehicle. The vehicle's actions are determined by various conditions and sequences within the tree. \n\nThe tree starts with a fallback node, which contains multiple sequences and conditions. It checks for mission wait, existence of a global path, and potential lane changes based on certain conditions. If these conditions are met, it initializes actions such as generating paths, changing lanes, or following a global path.\n\nFurther, the tree evaluates if there are obstacles in front, and based on that, decides whether to change lanes, follow local paths, or stop. Additionally, it considers factors like proximity to stop lines and corners, collision risks, and profitability of keeping the current lane.\n\nOverall, the behavior tree orchestrates the vehicle's decision-making process, encompassing actions related to navigation, obstacle avoidance, lane changes, and path following based on a set of predefined conditions and sequences.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback name=\"Core_seq\">\n            <Sequence name=\"\">\n                <Condition ID=\"checkMissionWait\"/>\n                <Action ID=\"stop\"/>\n            </Sequence>\n            <Sequence name=\"\">\n                <Sequence name=\"\">\n                    <Condition ID=\"checkExistPathGlobal\"/>\n                    <Action ID=\"init\"/>\n                    <Fallback name=\"\">\n                        <Sequence name=\"\">\n                            <Condition ID=\"checkGlobalLaneChange\"/>\n                            <Fallback name=\"\">\n                                <Sequence name=\"\">\n                                    <Condition ID=\"checkLeftChange\"/>\n                                    <Fallback name=\"\">\n                                        <Condition ID=\"checkGenPathLaneChange\"/>\n                                        <Action ID=\"genPathLaneChangeLeft\"/>\n                                    </Fallback>\n                                    <Fallback name=\"\">\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkCollision\"/>\n                                            <Action ID=\"keepLane\"/>\n                                        </Sequence>\n                                        <Action ID=\"laneChangeLeft\"/>\n                                    </Fallback>\n                                </Sequence>\n                                <Sequence name=\"\">\n                                    <Fallback name=\"\">\n                                        <Condition ID=\"checkGenPathLaneChange\"/>\n                                        <Action ID=\"genPathLaneChangeRight\"/>\n                                    </Fallback>\n                                    <Fallback name=\"\">\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkCollision\"/>\n                                            <Action ID=\"keepLane\"/>\n                                        </Sequence>\n                                        <Action ID=\"laneChangeRight\"/>\n                                    </Fallback>\n                                </Sequence>\n                            </Fallback>\n                        </Sequence>\n                        <Action ID=\"genGlobalFollowPath\"/>\n                    </Fallback>\n                </Sequence>\n                <Fallback name=\"\">\n                    <Sequence name=\"\">\n                        <Condition ID=\"checkFrontObject\"/>\n                        <Fallback name=\"\">\n                            <Sequence name=\"\">\n                                <Condition ID=\"checkIsGlobalFollow\"/>\n                                <Fallback name=\"loc_check\">\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkNearCorner\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkNearStopline\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkProfitKeeplane\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                </Fallback>\n                            </Sequence>\n                            <Fallback name=\"lane_check\">\n                                <Sequence name=\"\">\n                                    <Condition ID=\"checkLaneChange\"/>\n                                    <Fallback name=\"lane_check\">\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkLeftchageAble\"/>\n                                            <Fallback name=\"\">\n                                                <Condition ID=\"checkGenPathLaneChange\"/>\n                                                <Action ID=\"genPathLaneChangeLeft\"/>\n                                            </Fallback>\n                                            <Fallback name=\"\">\n                                                <Sequence name=\"\">\n                                                    <Condition ID=\"checkCollision\"/>\n                                                    <Action ID=\"keepLane\"/>\n                                                </Sequence>\n                                                <Action ID=\"laneChangeLeft\"/>\n                                            </Fallback>\n                                        </Sequence>\n                                        <Sequence name=\"\">\n                                            <Fallback name=\"\">\n                                                <Condition ID=\"checkGenPathLaneChange\"/>\n                                                <Action ID=\"genPathLaneChangeRight\"/>\n                                            </Fallback>\n                                            <Fallback name=\"\">\n                                                <Sequence name=\"\">\n                                                    <Condition ID=\"checkCollision\"/>\n                                                    <Action ID=\"keepLane\"/>\n                                                </Sequence>\n                                                <Action ID=\"laneChangeRight\"/>\n                                            </Fallback>\n                                        </Sequence>\n                                    </Fallback>\n                                </Sequence>\n                                <Sequence name=\"Local_path\">\n                                    <Fallback name=\"\">\n                                        <Condition ID=\"checkEmptyLocal\"/>\n                                        <Sequence name=\"Gen_Local\">\n                                            <Action ID=\"stop\"/>\n                                            <Action ID=\"genLocalPath\"/>\n                                            <Action ID=\"setStartLocal\"/>\n                                        </Sequence>\n                                    </Fallback>\n                                    <Fallback name=\"local_check\">\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkFinishLocal\"/>\n                                            <Action ID=\"setFinishLocal\"/>\n                                        </Sequence>\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkCollision\"/>\n                                            <Action ID=\"stop\"/>\n                                            <Action ID=\"genLocalPath\"/>\n                                        </Sequence>\n                                        <Action ID=\"localPathfollow\"/>\n                                    </Fallback>\n                                </Sequence>\n                            </Fallback>\n                        </Fallback>\n                    </Sequence>\n                    <Sequence name=\"\">\n                        <Condition ID=\"checkNearStopline\"/>\n                        <Fallback name=\"\">\n                            <Sequence name=\"\">\n                                <Condition ID=\"checkPassAble\"/>\n                                <Sequence name=\"\">\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkCollision\"/>\n                                        <Action ID=\"stop\"/>\n                                    </Sequence>\n                                    <Action ID=\"drive\"/>\n                                </Sequence>\n                            </Sequence>\n                            <Action ID=\"stop\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Action ID=\"drive\"/>\n                </Fallback>\n                <Action ID=\"setPath\"/>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"acc\"/>\n        <Condition ID=\"checkCollision\"/>\n        <Condition ID=\"checkEmptyLocal\"/>\n        <Condition ID=\"checkExistPathGlobal\"/>\n        <Condition ID=\"checkFinishLocal\"/>\n        <Condition ID=\"checkFrontObject\"/>\n        <Condition ID=\"checkGenPathLaneChange\"/>\n        <Condition ID=\"checkGlobalLaneChange\"/>\n        <Condition ID=\"checkInitPose\"/>\n        <Condition ID=\"checkIsGlobalFollow\"/>\n        <Condition ID=\"checkLaneChange\"/>\n        <Condition ID=\"checkLeftChange\"/>\n        <Condition ID=\"checkLeftchageAble\"/>\n        <Condition ID=\"checkMissionWait\"/>\n        <Condition ID=\"checkNearCorner\"/>\n        <Condition ID=\"checkNearStopline\"/>\n        <Condition ID=\"checkPassAble\"/>\n        <Condition ID=\"checkProfitKeeplane\"/>\n        <Action ID=\"drive\"/>\n        <Action ID=\"genGlobalFollowPath\"/>\n        <Action ID=\"genLocalPath\"/>\n        <Action ID=\"genPathLaneChangeLeft\"/>\n        <Action ID=\"genPathLaneChangeRight\"/>\n        <Action ID=\"init\"/>\n        <Action ID=\"keepLane\"/>\n        <Action ID=\"laneChangeLeft\"/>\n        <Action ID=\"laneChangeRight\"/>\n        <Action ID=\"localPathFollow\"/>\n        <Action ID=\"localPathfollow\"/>\n        <Action ID=\"setFinishLocal\"/>\n        <Action ID=\"setPath\"/>\n        <Action ID=\"setStartLocal\"/>\n        <Action ID=\"stop\"/>\n        <SubTree ID=\"treeGenGlobalFollowPath\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is a simple one that instructs the system to execute a single task, which is to speak the text \"Das ist ein Testtext\". There are no conditional behaviors or complex sequences involved. The system will directly execute the Speak task without any interruption or branching.",
        "output": "<root main_tree_to_execute = \"TestTree\" >\n<BehaviorTree ID=\"TestTree\">\n                <SequenceStar>\n                        <Speak\ttext=\"Das ist ein Testtext\"/>\n                </SequenceStar>\n</BehaviorTree>\n</root>\n\n\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic system that reacts to different conditions while attempting to achieve a specific goal. The robot first checks the distance between its end effector and a target position, then proceeds with a sequence of actions based on the outcome of this check. If the end effector's y-coordinate is below a certain threshold, it performs a set of movements to reach a third goal. If the end effector's z-coordinate is above a specified threshold, it executes a series of movements to reach a second goal. Finally, regardless of the previous conditions, the robot sets a first goal for its motion planning. This behavior tree allows the robot to dynamically respond to its environment and adjust its actions based on real-time feedback.",
        "output": "<root main_tree_to_execute = \"ObstacleTree\">\n    <BehaviorTree ID=\"ObstacleTree\">\n        <ReactiveFallback name=\"root_sequence\">\n            <EEPositionDistance name=\"goal_check\"\n                    threshold=\"0.05\"\n                    target_x=\"-0.5\"\n                    target_y=\"0.0\"\n                    target_z=\"0.8\"\n                    ee_x=\"{ee_x}\"\n                    ee_y=\"{ee_y}\"\n                    ee_z=\"{ee_z}\"/>\n            <ReactiveSequence name=\"3-goal\">\n                <EEYThreshold   name=\"ee_y_threshold\" threshold=\"{y_threshold}\" ee_y=\"{ee_y}\" above=\"false\"/> \n                <SetMGGoal   name=\"mg_goal3\"\n                    mp_param_x=\"{mp_3_x}\"\n                    mp_param_y=\"{mp_3_y}\"\n                    mp_param_z=\"{mp_3_z}\"\n                    mg_trans_x=\"{mg_trans_x}\"\n                    mg_trans_y=\"{mg_trans_y}\"\n                    mg_trans_z=\"{mg_trans_z}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence name=\"2-traverse\">\n                <EEZThreshold   name=\"ee_z_threshold\" threshold=\"{z_threshold}\" ee_z=\"{ee_z}\" above=\"true\"/> \n                <SetMGGoal   name=\"mg_goal2\"\n                    mp_param_x=\"{mp_2_x}\"\n                    mp_param_y=\"{mp_2_y}\"\n                    mp_param_z=\"{mp_2_z}\"\n                    mg_trans_x=\"{mg_trans_x}\"\n                    mg_trans_y=\"{mg_trans_y}\"\n                    mg_trans_z=\"{mg_trans_z}\"/>\n            </ReactiveSequence>\n            <SetMGGoal   name=\"mg_goal1\"\n                    mp_param_x=\"{mp_1_x}\"\n                    mp_param_y=\"{mp_1_y}\"\n                    mp_param_z=\"{mp_1_z}\"\n                    mg_trans_x=\"{mg_trans_x}\"\n                    mg_trans_y=\"{mg_trans_y}\"\n                    mg_trans_z=\"{mg_trans_z}\"/>\n        </ReactiveFallback>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic system with various actions and behaviors. The robot is programmed to perform multiple tasks simultaneously using the \"Parallel\" node, such as executing a variant action repeatedly and moving to different positions based on a switch case. It also includes sequences of actions for specific cases within the switch case.\n\nAdditionally, it contains a set of defined actions that the robot can perform, including activating localization, approaching a location or wall, getting base charging status, obtaining person pose, initializing navigation, loading maps, moving robot position and orientation, recognizing people, setting robot pose, and starting/stopping joystick and reactive navigation.\n\nOverall, the behavior tree orchestrates the robot's activities by coordinating parallel and sequential execution of tasks, allowing it to perform complex behaviors involving movement, perception, and decision-making.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Parallel threshold=\"1\">\n            <Repeat num_cycles=\"-1\">\n                <Action ID=\"VariantAction\" value=\"{variant}\"/>\n            </Repeat>\n            <Sequence>\n                <Action ID=\"moveRoboterPosition\" approachRadius=\"50\" x=\"1000\" y=\"0\"/>\n                <Switch2 case_1=\"one\" case_2=\"two\" variable=\"{variant}\">\n                    <Action ID=\"moveRoboterPosition\" approachRadius=\"50\" x=\"3000\" y=\"-1000\"/>\n                    <Sequence>\n                        <Action ID=\"moveRoboterPosition\" approachRadius=\"50\" x=\"-2000\" y=\"-1000\"/>\n                        <Action ID=\"moveRoboterPosition\" approachRadius=\"50\" x=\"0\" y=\"0\"/>\n                    </Sequence>\n                    <Sequence>\n                        <Action ID=\"moveRoboterPosition\" approachRadius=\"50\" x=\"2000\" y=\"-3000\"/>\n                        <Action ID=\"moveRoboterPosition\" approachRadius=\"50\" x=\"2000\" y=\"-2000\"/>\n                        <Action ID=\"moveRoboterPosition\" approachRadius=\"50\" x=\"0\" y=\"0\"/>\n                    </Sequence>\n                </Switch2>\n            </Sequence>\n        </Parallel>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"VariantAction\">\n            <output_port default=\"{variant}\" name=\"value\"/>\n        </Action>\n        <Action ID=\"activateLocalization\"/>\n        <Action ID=\"approachLocation\">\n            <input_port default=\"1\" name=\"locationId\"/>\n        </Action>\n        <Action ID=\"approachWall\"/>\n        <Action ID=\"deactivateLocalization\"/>\n        <Action ID=\"getBaseCharging\">\n            <output_port default=\"{charging}\" name=\"charging\"/>\n        </Action>\n        <Action ID=\"getPersonPose\">\n            <output_port default=\"{x_}\" name=\"x\"/>\n            <output_port default=\"{y_}\" name=\"y\"/>\n            <output_port default=\"{yaw_}\" name=\"yaw\"/>\n        </Action>\n        <Action ID=\"initNavigation\"/>\n        <Action ID=\"loadMap\"/>\n        <Action ID=\"loadNavigationMap\">\n            <input_port default=\"navigation-map\" name=\"mapname\"/>\n        </Action>\n        <Action ID=\"moveRoboterBackwardsLocation\"/>\n        <Action ID=\"moveRoboterBackwardsRelative\"/>\n        <Action ID=\"moveRoboterOrientateRobotAbs\"/>\n        <Action ID=\"moveRoboterOrientateRobotRel\"/>\n        <Action ID=\"moveRoboterPosition\">\n            <input_port default=\"50\" name=\"approachRadius\"/>\n            <input_port default=\"0\" name=\"x\"/>\n            <input_port default=\"0\" name=\"y\"/>\n        </Action>\n        <Action ID=\"peoplerecognition\"/>\n        <Action ID=\"setRobotPose\">\n            <input_port default=\"0\" name=\"x\"/>\n            <input_port default=\"0\" name=\"y\"/>\n            <input_port default=\"0\" name=\"yaw\"/>\n        </Action>\n        <Action ID=\"startJoystickNavigation\"/>\n        <Action ID=\"startReactiveNavigation\"/>\n        <Action ID=\"stopJoystickNavigation\"/>\n        <Action ID=\"stopReactiveNavigation\"/>\n        <Action ID=\"triggerGlobalLocalization\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a sequence of actions for a robotic system. The robot is programmed to perform a series of tasks in a specific order, with each task having a defined duration. The tasks include waiting for a specified duration, moving towards predefined goals, and performing various operations such as logging information, subscribing to topics, and publishing messages.\n\nAdditionally, the behavior tree includes various utility nodes for handling conditions, looping, and data manipulation. These utility nodes enable the robot to interact with its environment, make decisions based on received data, and control its movements.\n\nOverall, the behavior tree orchestrates the robot's behavior by defining a structured set of actions and decision-making processes, allowing it to navigate, interact with its surroundings, and execute tasks autonomously.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"WaitSeconds\" duration=\"2\" name=\"WaitSeconds1\"/>\n            <ForceSuccess>\n                <Repeat num_cycles=\"1\">\n                    <Action state=\"gpf1\" ID=\"UPOGoToGoalByName\" action=\"/Make_Plan\" goal_name=\"stage_2_pos_final_1\" name=\"GoToGoal1\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" duration=\"2\" name=\"WaitSeconds2\"/>\n            <ForceSuccess>\n                <Repeat num_cycles=\"1\">\n                    <Action state=\"gpf2\" ID=\"UPOGoToGoalByName\" action=\"/Make_Plan\" goal_name=\"stage_2_pos_final_2\" name=\"GoToGoal2\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" duration=\"2\" name=\"WaitSeconds3\"/>\n            <ForceSuccess>\n                <Repeat num_cycles=\"1\">\n                    <Action state=\"gpf3\" ID=\"UPOGoToGoalByName\" action=\"/Make_Plan\" goal_name=\"stage_2_pos_final_3\" name=\"GoToGoal3\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" duration=\"2\" name=\"WaitSeconds4\"/>\n            <ForceSuccess>\n                <Repeat num_cycles=\"1\">\n                    <Action state=\"gpf4\" ID=\"UPOGoToGoalByName\" action=\"/Make_Plan\" goal_name=\"stage_2_pos_final_4\" name=\"GoToGoa4\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" duration=\"2\" name=\"WaitSeconds5\"/>\n            <ForceSuccess>\n                <Repeat num_cycles=\"1\">\n                    <Action state=\"gpf5\" ID=\"UPOGoToGoalByName\" action=\"/Make_Plan\" goal_name=\"stage_2_pos_final_5\" name=\"GoToGoal5\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" duration=\"2\" name=\"WaitSeconds6\"/>\n            <ForceSuccess>\n                <Repeat num_cycles=\"1\">\n                    <Action state=\"gpf6\" ID=\"UPOGoToGoalByName\" action=\"/Make_Plan\" goal_name=\"stage_2_pos_final_6\" name=\"GoToGoal6\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" duration=\"1\" name=\"WaitSecondsEnd\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CallEmptyService\">\n            <input_port type=\"std::string\" name=\"service\">ROS service name</input_port>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port type=\"bool\" name=\"input\">Input boolean value</input_port>\n        </Condition>\n        <Action ID=\"CheckKey\">\n            <input_port type=\"std::string\" name=\"no_key\">Key to determine if key to say 'no' has benn pressed</input_port>\n            <input_port type=\"std::string\" name=\"yes_key\">Key to determine if key to say 'yes' has been pressed</input_port>\n        </Action>\n        <Condition ID=\"CompareNumbers\">\n            <input_port type=\"std::string\" name=\"comparison_op\">Comparison operator. Valid operators are &lt;, >, &lt;=, >=, == and !=</input_port>\n            <input_port type=\"double\" name=\"first\">First operand</input_port>\n            <input_port type=\"double\" name=\"second\">Second operand</input_port>\n        </Condition>\n        <Condition ID=\"CompareStrings\">\n            <input_port type=\"std::string\" name=\"comparison_op\">Comparison operator. Valid operators are &lt;, >, &lt;=, >=, == and !=</input_port>\n            <input_port type=\"std::string\" name=\"first\">First operand</input_port>\n            <input_port type=\"std::string\" name=\"second\">Second operand</input_port>\n        </Condition>\n        <Action ID=\"ConcatenateStrings\">\n            <input_port type=\"std::string\" name=\"first\">First string</input_port>\n            <output_port type=\"std::string\" name=\"output\">Concatenated result string</output_port>\n            <input_port type=\"std::string\" name=\"second\">Second string</input_port>\n        </Action>\n        <Action ID=\"ConvertJsonToDouble\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"double\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToInt64\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"long\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToString\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"std::string\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToUint64\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"unsigned long\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertMessageField\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"void\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertRandomMessageField\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"void\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Decorator ID=\"CooldownMilliseconds\">\n            <input_port type=\"unsigned int\" name=\"cooldown\" default=\"0\">Cooldown time</input_port>\n        </Decorator>\n        <Decorator ID=\"CooldownSeconds\">\n            <input_port type=\"unsigned int\" name=\"cooldown\" default=\"0\">Cooldown time</input_port>\n        </Decorator>\n        <Action ID=\"CopyJson\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Input variable</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output\">Output variable to copy to</output_port>\n        </Action>\n        <Action ID=\"DebugLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Action ID=\"ErrorLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Action ID=\"FatalLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Action ID=\"FindByFieldValue\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"void\" name=\"output\">Output variable</output_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"value\">Value to search for</input_port>\n        </Action>\n        <Action ID=\"FindSubstrings\">\n            <input_port type=\"std::string\" name=\"input\">String to look into</input_port>\n            <input_port type=\"std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> > > >\" name=\"substrings\">Substrings to look for</input_port>\n        </Action>\n        <Decorator ID=\"ForEachLoop\">\n            <input_port type=\"bool\" name=\"break_on_child_failure\">Break loop on child failure?</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Input sequence</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output_element\">Output element variable</output_port>\n            <output_port type=\"unsigned long\" name=\"output_index\">Output index variable</output_port>\n        </Decorator>\n        <Action ID=\"GetJsonSize\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Input sequence</input_port>\n            <output_port type=\"unsigned long\" name=\"output\">Sequence size output</output_port>\n        </Action>\n        <Action ID=\"GetKeyboard\">\n            <output_port type=\"std::string\" name=\"output\">String received from keyboard</output_port>\n        </Action>\n        <Action ID=\"GetMessageField\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"GetRandomMessageField\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"GetTransformDistance\">\n            <input_port type=\"tf::StampedTransform\" name=\"input\">TF transform</input_port>\n            <output_port type=\"double\" name=\"output\">Distance form transform origin</output_port>\n        </Action>\n        <Action ID=\"GetTransformHorizontalDistance\">\n            <input_port type=\"tf::StampedTransform\" name=\"input\">TF transform</input_port>\n            <output_port type=\"double\" name=\"output\">2D distance from TF transform origin</output_port>\n        </Action>\n        <Action ID=\"GetTransformOrigin\">\n            <input_port type=\"tf::StampedTransform\" name=\"input\">TF transform</input_port>\n            <output_port type=\"double\" name=\"x\">Origin x coordinate</output_port>\n            <output_port type=\"double\" name=\"y\">Origin y coordinate</output_port>\n            <output_port type=\"double\" name=\"z\">Origin z coordinate</output_port>\n        </Action>\n        <Action ID=\"InfoLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Action ID=\"InitializeJson\">\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output\">Output variable to initialize</output_port>\n        </Action>\n        <Action ID=\"InterpolateFloat\">\n            <input_port type=\"std::vector&lt;double, std::allocator&lt;double> >\" name=\"input_range\">Input value range.</input_port>\n            <input_port type=\"double\" name=\"input_value\">Value to interpolate.</input_port>\n            <input_port type=\"std::vector&lt;double, std::allocator&lt;double> >\" name=\"output_range\">Output value range.</input_port>\n            <output_port type=\"double\" name=\"output_value\">Interpolated value.</output_port>\n        </Action>\n        <Control ID=\"Interruptible\"/>\n        <Action ID=\"LookupTransform\">\n            <output_port type=\"tf::StampedTransform\" name=\"output\">Result transform</output_port>\n            <input_port type=\"std::string\" name=\"source_frame\">Origin TF frame</input_port>\n            <input_port type=\"std::string\" name=\"target_frame\">Target TF frame</input_port>\n            <input_port type=\"bool\" name=\"use_last_available\" default=\"0\">Use last available transform?</input_port>\n        </Action>\n        <Decorator ID=\"Loop\"/>\n        <Action ID=\"MathOperationFloat\">\n            <input_port type=\"double\" name=\"first\">First operand</input_port>\n            <input_port type=\"std::string\" name=\"operator\">Math operation. Valid operatores are: +, -, / and *</input_port>\n            <output_port type=\"double\" name=\"output\">Operation result</output_port>\n            <input_port type=\"double\" name=\"second\">Second operand</input_port>\n        </Action>\n        <Action ID=\"MathOperationInt\">\n            <input_port type=\"int\" name=\"first\">First operand</input_port>\n            <input_port type=\"std::string\" name=\"operator\">Math operation. Valid operatores are: +, -, / and *</input_port>\n            <output_port type=\"int\" name=\"output\">Operation result</output_port>\n            <input_port type=\"int\" name=\"second\">Second operand</input_port>\n        </Action>\n        <Action ID=\"MonitorStdBool\">\n            <input_port type=\"bool\" name=\"consume_msgs\" default=\"0\">Should messages be consumed?</input_port>\n            <input_port type=\"unsigned int\" name=\"queue_size\" default=\"1\">Subscriber callback queue size</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_output\">Serialized ROS message [std_msgs::Bool_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"MonitorStdFloat64\">\n            <input_port type=\"bool\" name=\"consume_msgs\" default=\"0\">Should messages be consumed?</input_port>\n            <input_port type=\"unsigned int\" name=\"queue_size\" default=\"1\">Subscriber callback queue size</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_output\">Serialized ROS message [std_msgs::Float64_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"MonitorStdInt32\">\n            <input_port type=\"bool\" name=\"consume_msgs\" default=\"0\">Should messages be consumed?</input_port>\n            <input_port type=\"unsigned int\" name=\"queue_size\" default=\"1\">Subscriber callback queue size</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_output\">Serialized ROS message [std_msgs::Int32_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"OStreamNode\">\n            <input_port type=\"std::string\" name=\"message\">String to print</input_port>\n        </Action>\n        <Decorator ID=\"OnlyOnce\"/>\n        <Action ID=\"PublishBool\">\n            <input_port type=\"bool\" name=\"data\">Auto-generated field from std_msgs::Bool_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"bool\" name=\"latch\" default=\"0\">Latch messages?</input_port>\n            <input_port type=\"unsigned int\" name=\"queue_size\" default=\"1\">Internal publisher queue size</input_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to publish to</input_port>\n        </Action>\n        <Action ID=\"PublishStdString\">\n            <input_port type=\"std::string\" name=\"data\">Auto-generated field from std_msgs::String_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"bool\" name=\"latch\" default=\"0\">Latch messages?</input_port>\n            <input_port type=\"unsigned int\" name=\"queue_size\" default=\"1\">Internal publisher queue size</input_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to publish to</input_port>\n        </Action>\n        <Action ID=\"RandomFloat\">\n            <input_port type=\"double\" name=\"max\">Max range value</input_port>\n            <input_port type=\"double\" name=\"min\">Minimum range value</input_port>\n            <output_port type=\"double\" name=\"result\">Random result value</output_port>\n        </Action>\n        <Action ID=\"RandomInteger\">\n            <input_port type=\"int\" name=\"max\">Max range value</input_port>\n            <input_port type=\"int\" name=\"min\">Minimum range value</input_port>\n            <output_port type=\"int\" name=\"result\">Random result value</output_port>\n        </Action>\n        <Action ID=\"RandomSequenceValue\">\n            <input_port type=\"std::string\" name=\"delimiter\" default=\";\">Sequence entries delimiter</input_port>\n            <output_port type=\"std::string\" name=\"output\">Result random sequence entry</output_port>\n            <input_port type=\"std::string\" name=\"sequence\">Sequence to randomize</input_port>\n        </Action>\n        <Action ID=\"SubscribeUPOGoal\">\n            <input_port type=\"bool\" name=\"consume_msgs\" default=\"0\">Should messages be consumed?</input_port>\n            <output_port type=\"upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >\" name=\"output\">Received ROS message [upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port type=\"unsigned int\" name=\"queue_size\" default=\"1\">Subscriber callback queue size</input_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"UPOFireDetection3D\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"int\" name=\"duration\">Duration</input_port>\n            <output_port type=\"bool\" name=\"fire_found\">Fire Found</output_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n            <output_port type=\"double\" name=\"x\">Fire x</output_port>\n            <output_port type=\"double\" name=\"y\">Fire x</output_port>\n            <output_port type=\"double\" name=\"z\">Fire x</output_port>\n        </Action>\n        <Action ID=\"UPOFireExtinguish\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"bool\" name=\"detect_fire\">Detect Fire</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_feedback\">Serialized ROS message [upo_actions::FireExtinguishFeedback_&lt;std::allocator&lt;void> >]</output_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_result\">Serialized ROS message [upo_actions::FireExtinguishResult_&lt;std::allocator&lt;void> >]</output_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOGoToGoal\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"std::string\" name=\"global_goal.header.frame_id\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"unsigned int\" name=\"global_goal.header.seq\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.orientation.w\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.orientation.x\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.orientation.y\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.orientation.z\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.position.x\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.position.y\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.position.z\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOGoToGoalByName\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"std::string\" name=\"goal_name\">Name of goal</input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOLanding\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"bool\" name=\"land\">Auto-generated field from upo_actions::LandingGoal_&lt;std::allocator&lt;void> ></input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOTakeOff\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n            <input_port type=\"float\" name=\"takeoff_height.data\">Auto-generated field from upo_actions::TakeOffGoal_&lt;std::allocator&lt;void> ></input_port>\n        </Action>\n        <Action ID=\"UPOWindowDetection\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"int\" name=\"duration\">Duration</input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n            <output_port type=\"bool\" name=\"window_present\">Window Present</output_port>\n            <output_port type=\"double\" name=\"x\">Window x</output_port>\n            <output_port type=\"double\" name=\"y\">Window y</output_port>\n            <output_port type=\"double\" name=\"z\">Window z</output_port>\n        </Action>\n        <Action ID=\"WaitMilliseconds\">\n            <input_port type=\"unsigned int\" name=\"duration\" default=\"0\">Time to wait</input_port>\n        </Action>\n        <Action ID=\"WaitSeconds\">\n            <input_port type=\"unsigned int\" name=\"duration\" default=\"0\">Time to wait</input_port>\n        </Action>\n        <Action ID=\"WarnLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Decorator ID=\"WhileSuccess\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions for a robot or autonomous system. The main sequence involves waiting for a specified duration, then repeating a series of navigation actions to different goal locations multiple times. Each set of navigation actions is enclosed within a \"ForceSuccess\" decorator, ensuring successful completion before moving on to the next set. Additionally, there are wait actions interspersed between the navigation sequences.\n\nThe tree also includes various nodes for handling ROS messages, performing mathematical operations, logging information, subscribing and publishing to topics, and interacting with actionlib servers for tasks such as fire detection, extinguishing, window detection, takeoff, landing, and more. These nodes enable the robot to communicate with its environment, make decisions based on received data, and execute complex tasks autonomously.\n\nOverall, the behavior tree orchestrates the robot's behavior by coordinating navigation to specific locations, handling sensor data, and executing high-level tasks through ROS communication and actionlib interactions.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"WaitSeconds\" name=\"WaitSeconds1\" duration=\"2\"/>\n            <ForceSuccess name=\"ForceSuccess1\">\n                <Repeat num_cycles=\"10\">\n                    <Action ID=\"UPOGoToGoalByName\" name=\"GoToGoal1\" state=\"gpf1\" goal_name=\"stage_5_pos_final_1\" action=\"/Make_Plan\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" name=\"WaitSeconds2\" duration=\"2\"/>\n            <ForceSuccess name=\"ForceSuccess2\">\n                <Repeat num_cycles=\"10\">\n                    <Action ID=\"UPOGoToGoalByName\" name=\"GoToGoal2\" state=\"gpf2\" goal_name=\"stage_5_pos_final_2\" action=\"/Make_Plan\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" name=\"WaitSeconds3\" duration=\"2\"/>\n            <ForceSuccess name=\"ForceSuccess3\">\n                <Repeat num_cycles=\"10\">\n                    <Action ID=\"UPOGoToGoalByName\" name=\"GoToGoal3\" state=\"gpf3\" goal_name=\"stage_5_pos_final_3\" action=\"/Make_Plan\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" name=\"WaitSeconds4\" duration=\"2\"/>\n            <ForceSuccess name=\"ForceSuccess4\">\n                <Repeat num_cycles=\"10\">\n                    <Action ID=\"UPOGoToGoalByName\" name=\"GoToGoal4\" state=\"gpf4\" goal_name=\"stage_5_pos_final_4\" action=\"/Make_Plan\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" name=\"WaitSecondsEnd\" duration=\"1\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CallEmptyService\">\n            <input_port name=\"service\" type=\"std::string\">ROS service name</input_port>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"input\" type=\"bool\">Input boolean value</input_port>\n        </Condition>\n        <Action ID=\"CheckKey\">\n            <input_port name=\"no_key\" type=\"std::string\">Key to determine if key to say 'no' has benn pressed</input_port>\n            <input_port name=\"yes_key\" type=\"std::string\">Key to determine if key to say 'yes' has been pressed</input_port>\n        </Action>\n        <Condition ID=\"CompareNumbers\">\n            <input_port name=\"comparison_op\" type=\"std::string\">Comparison operator. Valid operators are &lt;, >, &lt;=, >=, == and !=</input_port>\n            <input_port name=\"first\" type=\"double\">First operand</input_port>\n            <input_port name=\"second\" type=\"double\">Second operand</input_port>\n        </Condition>\n        <Condition ID=\"CompareStrings\">\n            <input_port name=\"comparison_op\" type=\"std::string\">Comparison operator. Valid operators are &lt;, >, &lt;=, >=, == and !=</input_port>\n            <input_port name=\"first\" type=\"std::string\">First operand</input_port>\n            <input_port name=\"second\" type=\"std::string\">Second operand</input_port>\n        </Condition>\n        <Action ID=\"ConcatenateStrings\">\n            <input_port name=\"first\" type=\"std::string\">First string</input_port>\n            <output_port name=\"output\" type=\"std::string\">Concatenated result string</output_port>\n            <input_port name=\"second\" type=\"std::string\">Second string</input_port>\n        </Action>\n        <Action ID=\"ConvertJsonToDouble\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"double\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToInt64\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"long\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToString\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"std::string\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToUint64\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"unsigned long\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertMessageField\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"void\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertRandomMessageField\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"void\">Output variable</output_port>\n        </Action>\n        <Decorator ID=\"CooldownMilliseconds\">\n            <input_port default=\"0\" name=\"cooldown\" type=\"unsigned int\">Cooldown time</input_port>\n        </Decorator>\n        <Decorator ID=\"CooldownSeconds\">\n            <input_port default=\"0\" name=\"cooldown\" type=\"unsigned int\">Cooldown time</input_port>\n        </Decorator>\n        <Action ID=\"CopyJson\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Input variable</input_port>\n            <output_port name=\"output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Output variable to copy to</output_port>\n        </Action>\n        <Action ID=\"DebugLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Action ID=\"ErrorLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Action ID=\"FatalLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Action ID=\"FindByFieldValue\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"void\">Output variable</output_port>\n            <input_port name=\"value\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Value to search for</input_port>\n        </Action>\n        <Action ID=\"FindSubstrings\">\n            <input_port name=\"input\" type=\"std::string\">String to look into</input_port>\n            <input_port name=\"substrings\" type=\"std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> > > >\">Substrings to look for</input_port>\n        </Action>\n        <Decorator ID=\"ForEachLoop\">\n            <input_port name=\"break_on_child_failure\" type=\"bool\">Break loop on child failure?</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Input sequence</input_port>\n            <output_port name=\"output_element\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Output element variable</output_port>\n            <output_port name=\"output_index\" type=\"unsigned long\">Output index variable</output_port>\n        </Decorator>\n        <Action ID=\"GetJsonSize\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Input sequence</input_port>\n            <output_port name=\"output\" type=\"unsigned long\">Sequence size output</output_port>\n        </Action>\n        <Action ID=\"GetKeyboard\">\n            <output_port name=\"output\" type=\"std::string\">String received from keyboard</output_port>\n        </Action>\n        <Action ID=\"GetMessageField\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Output variable</output_port>\n        </Action>\n        <Action ID=\"GetRandomMessageField\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Output variable</output_port>\n        </Action>\n        <Action ID=\"GetTransformDistance\">\n            <input_port name=\"input\" type=\"tf::StampedTransform\">TF transform</input_port>\n            <output_port name=\"output\" type=\"double\">Distance form transform origin</output_port>\n        </Action>\n        <Action ID=\"GetTransformHorizontalDistance\">\n            <input_port name=\"input\" type=\"tf::StampedTransform\">TF transform</input_port>\n            <output_port name=\"output\" type=\"double\">2D distance from TF transform origin</output_port>\n        </Action>\n        <Action ID=\"GetTransformOrigin\">\n            <input_port name=\"input\" type=\"tf::StampedTransform\">TF transform</input_port>\n            <output_port name=\"x\" type=\"double\">Origin x coordinate</output_port>\n            <output_port name=\"y\" type=\"double\">Origin y coordinate</output_port>\n            <output_port name=\"z\" type=\"double\">Origin z coordinate</output_port>\n        </Action>\n        <Action ID=\"InfoLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Action ID=\"InitializeJson\">\n            <output_port name=\"output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Output variable to initialize</output_port>\n        </Action>\n        <Action ID=\"InterpolateFloat\">\n            <input_port name=\"input_range\" type=\"std::vector&lt;double, std::allocator&lt;double> >\">Input value range.</input_port>\n            <input_port name=\"input_value\" type=\"double\">Value to interpolate.</input_port>\n            <input_port name=\"output_range\" type=\"std::vector&lt;double, std::allocator&lt;double> >\">Output value range.</input_port>\n            <output_port name=\"output_value\" type=\"double\">Interpolated value.</output_port>\n        </Action>\n        <Control ID=\"Interruptible\"/>\n        <Action ID=\"LookupTransform\">\n            <output_port name=\"output\" type=\"tf::StampedTransform\">Result transform</output_port>\n            <input_port name=\"source_frame\" type=\"std::string\">Origin TF frame</input_port>\n            <input_port name=\"target_frame\" type=\"std::string\">Target TF frame</input_port>\n            <input_port default=\"0\" name=\"use_last_available\" type=\"bool\">Use last available transform?</input_port>\n        </Action>\n        <Decorator ID=\"Loop\"/>\n        <Action ID=\"MathOperationFloat\">\n            <input_port name=\"first\" type=\"double\">First operand</input_port>\n            <input_port name=\"operator\" type=\"std::string\">Math operation. Valid operatores are: +, -, / and *</input_port>\n            <output_port name=\"output\" type=\"double\">Operation result</output_port>\n            <input_port name=\"second\" type=\"double\">Second operand</input_port>\n        </Action>\n        <Action ID=\"MathOperationInt\">\n            <input_port name=\"first\" type=\"int\">First operand</input_port>\n            <input_port name=\"operator\" type=\"std::string\">Math operation. Valid operatores are: +, -, / and *</input_port>\n            <output_port name=\"output\" type=\"int\">Operation result</output_port>\n            <input_port name=\"second\" type=\"int\">Second operand</input_port>\n        </Action>\n        <Action ID=\"MonitorStdBool\">\n            <input_port default=\"0\" name=\"consume_msgs\" type=\"bool\">Should messages be consumed?</input_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Subscriber callback queue size</input_port>\n            <output_port name=\"serialized_output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message [std_msgs::Bool_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"MonitorStdFloat64\">\n            <input_port default=\"0\" name=\"consume_msgs\" type=\"bool\">Should messages be consumed?</input_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Subscriber callback queue size</input_port>\n            <output_port name=\"serialized_output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message [std_msgs::Float64_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"MonitorStdInt32\">\n            <input_port default=\"0\" name=\"consume_msgs\" type=\"bool\">Should messages be consumed?</input_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Subscriber callback queue size</input_port>\n            <output_port name=\"serialized_output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message [std_msgs::Int32_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"OStreamNode\">\n            <input_port name=\"message\" type=\"std::string\">String to print</input_port>\n        </Action>\n        <Decorator ID=\"OnlyOnce\"/>\n        <Action ID=\"PublishBool\">\n            <input_port name=\"data\" type=\"bool\">Auto-generated field from std_msgs::Bool_&lt;std::allocator&lt;void> ></input_port>\n            <input_port default=\"0\" name=\"latch\" type=\"bool\">Latch messages?</input_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Internal publisher queue size</input_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to publish to</input_port>\n        </Action>\n        <Action ID=\"PublishStdString\">\n            <input_port name=\"data\" type=\"std::string\">Auto-generated field from std_msgs::String_&lt;std::allocator&lt;void> ></input_port>\n            <input_port default=\"0\" name=\"latch\" type=\"bool\">Latch messages?</input_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Internal publisher queue size</input_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to publish to</input_port>\n        </Action>\n        <Action ID=\"RandomFloat\">\n            <input_port name=\"max\" type=\"double\">Max range value</input_port>\n            <input_port name=\"min\" type=\"double\">Minimum range value</input_port>\n            <output_port name=\"result\" type=\"double\">Random result value</output_port>\n        </Action>\n        <Action ID=\"RandomInteger\">\n            <input_port name=\"max\" type=\"int\">Max range value</input_port>\n            <input_port name=\"min\" type=\"int\">Minimum range value</input_port>\n            <output_port name=\"result\" type=\"int\">Random result value</output_port>\n        </Action>\n        <Action ID=\"RandomSequenceValue\">\n            <input_port default=\";\" name=\"delimiter\" type=\"std::string\">Sequence entries delimiter</input_port>\n            <output_port name=\"output\" type=\"std::string\">Result random sequence entry</output_port>\n            <input_port name=\"sequence\" type=\"std::string\">Sequence to randomize</input_port>\n        </Action>\n        <Action ID=\"SubscribeUPOGoal\">\n            <input_port default=\"0\" name=\"consume_msgs\" type=\"bool\">Should messages be consumed?</input_port>\n            <output_port name=\"output\" type=\"upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >\">Received ROS message [upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Subscriber callback queue size</input_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"UPOFireDetection3D\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"duration\" type=\"int\">Duration</input_port>\n            <output_port name=\"fire_found\" type=\"bool\">Fire Found</output_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n            <output_port name=\"x\" type=\"double\">Fire x</output_port>\n            <output_port name=\"y\" type=\"double\">Fire x</output_port>\n            <output_port name=\"z\" type=\"double\">Fire x</output_port>\n        </Action>\n        <Action ID=\"UPOFireExtinguish\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"detect_fire\" type=\"bool\">Detect Fire</input_port>\n            <output_port name=\"serialized_feedback\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message [upo_actions::FireExtinguishFeedback_&lt;std::allocator&lt;void> >]</output_port>\n            <output_port name=\"serialized_result\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message [upo_actions::FireExtinguishResult_&lt;std::allocator&lt;void> >]</output_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOGoToGoal\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"global_goal.header.frame_id\" type=\"std::string\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.header.seq\" type=\"unsigned int\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.orientation.w\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.orientation.x\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.orientation.y\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.orientation.z\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.position.x\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.position.y\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.position.z\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOGoToGoalByName\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"goal_name\" type=\"std::string\">Name of goal</input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOLanding\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"land\" type=\"bool\">Auto-generated field from upo_actions::LandingGoal_&lt;std::allocator&lt;void> ></input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOTakeOff\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n            <input_port name=\"takeoff_height.data\" type=\"float\">Auto-generated field from upo_actions::TakeOffGoal_&lt;std::allocator&lt;void> ></input_port>\n        </Action>\n        <Action ID=\"UPOWindowDetection\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"duration\" type=\"int\">Duration</input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n            <output_port name=\"window_present\" type=\"bool\">Window Present</output_port>\n            <output_port name=\"x\" type=\"double\">Window x</output_port>\n            <output_port name=\"y\" type=\"double\">Window y</output_port>\n            <output_port name=\"z\" type=\"double\">Window z</output_port>\n        </Action>\n        <Action ID=\"WaitMilliseconds\">\n            <input_port default=\"0\" name=\"duration\" type=\"unsigned int\">Time to wait</input_port>\n        </Action>\n        <Action ID=\"WaitSeconds\">\n            <input_port default=\"0\" name=\"duration\" type=\"unsigned int\">Time to wait</input_port>\n        </Action>\n        <Action ID=\"WarnLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Decorator ID=\"WhileSuccess\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree depicts the actions of an animal, likely a predator, in a simulated environment. The animal is programmed to perform a series of tasks based on its needs and circumstances. \n\nThe main sequence begins with the animal attempting to acquire a target, then moving towards it. If the target is adjacent, it will attack the target. If these actions fail, the tree switches to an alternative set of behaviors under \"AnimalHunter\". Here, the animal checks if it's hungry and if so, it hunts for prey, moves towards it, kills it, and then eats it. If not hungry, it simply performs a random movement.\n\nThe conditions and actions within the tree define various states and activities the animal can engage in, such as determining hunger, gender, age, reproductive readiness, and specific actions like attacking, hunting, eating, moving randomly, or giving birth.\n\nOverall, the behavior tree models the decision-making process of an animal, balancing survival needs like hunting and eating with other activities like reproduction",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback>\n            <SequenceStar>\n                <Action ID=\"GetTarget\"/>\n                <Action ID=\"Move\"/>\n                <Sequence>\n                    <Condition ID=\"TargetAdjacent\"/>\n                    <Action ID=\"AttackTarget\"/>\n                </Sequence>\n            </SequenceStar>\n            <FallbackStar name=\"AnimalHunter\">\n                <SequenceStar name=\"Hunt\">\n                    <Condition ID=\"IsHungry\"/>\n                    <Action ID=\"FindPrey\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"KillPrey\"/>\n                    <Action ID=\"EatPrey\"/>\n                </SequenceStar>\n                <Action ID=\"RandomMove\"/>\n            </FallbackStar>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Condition ID=\"\"/>\n        <Action ID=\"AttackTarget\"/>\n        <Condition ID=\"CanHaveSex\"/>\n        <Action ID=\"EatPrey\"/>\n        <Action ID=\"FindPrey\"/>\n        <Action ID=\"GetTarget\"/>\n        <Action ID=\"GiveBirth\"/>\n        <Condition ID=\"IsAdult\"/>\n        <Condition ID=\"IsCarnivore\"/>\n        <Condition ID=\"IsEgg\"/>\n        <Condition ID=\"IsEggLayer\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHerbivore\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsPregnant\"/>\n        <Condition ID=\"IsProducer\"/>\n        <Condition ID=\"IsReadyToGiveBirth\"/>\n        <Condition ID=\"IsWoodVermin\"/>\n        <Condition ID=\"IsYoung\"/>\n        <Action ID=\"KillPrey\"/>\n        <Action ID=\"LayEgg\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"Produce\"/>\n        <Action ID=\"RandomMove\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n        <Action ID=\"TryHaveSex\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the decision-making process for a character, likely in a game or simulation. The character has several actions and conditions that guide its behavior. \n\nAt the top level, it employs a fallback mechanism, meaning if one branch fails, it moves to the next. The first branch involves a sequence of getting a target, moving towards it, and then checking if the target is adjacent. If so, it initiates an attack. If any of these steps fail, it falls back to a random move action.\n\nThe available actions and conditions include attacking a target, getting a target, checking if it's day, female, hungry, male, or night, moving, making a random move, sleeping, and checking if the target is adjacent.\n\nIn summary, the behavior tree governs the character's decision-making process by prioritizing specific actions based on the current situation, with a fallback option for when primary actions cannot be executed.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback>\n            <SequenceStar name=\"Main\">\n                <Action ID=\"GetTarget\"/>\n                <Action ID=\"Move\"/>\n                <Sequence>\n                    <Condition ID=\"TargetAdjacent\"/>\n                    <Action ID=\"AttackTarget\"/>\n                </Sequence>\n            </SequenceStar>\n            <Action ID=\"RandomMove\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AttackTarget\"/>\n        <Action ID=\"GetTarget\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"Sleep\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the actions of a robot designed for interactive communication and games. The robot is programmed to detect and interact with people, using speech recognition and synthesis to engage in conversations. It can respond to specific phrases, express emotions through gestures and speech, and provide information about its hardware and capabilities.\n\nAdditionally, the robot showcases its skills by demonstrating a game called Robot Seek, where it moves through an environment, uses object and human pose detection, and interacts with the user to locate targets. Throughout these interactions, the robot utilizes various components such as cameras, displays, and antennae to express itself and engage with users effectively.\n\nOverall, the behavior tree orchestrates the robot's behavior to create an engaging and interactive experience for users, showcasing its abilities and facilitating meaningful interactions.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n\t\t\t<SetBlackboard output_key=\"person_detected\" value=\"0\" />\n\t\t\t<PoseDetectionControlAction enable=\"1\" />\n\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"1\" turn_base=\"1\" />\n\t\t\t<AntennaAction rate=\"0\" intensity=\"0\" left_blink_pattern=\"0\" right_blink_pattern=\"0\" />\n\n\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t<ForceSuccess>\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<!-- Update person detection status and enable greeting and menu if person now detected. Apply some hystersis... -->\n\t\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{person_detected}\" value_B=\"0\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t<ObjectTrackerStatusAction ck_state=\"1\" min_duration=\"2\" />\n\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"person_detected\" value=\"1\" />\n\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"0\" intensity=\"10\" left_blink_pattern=\"01\" right_blink_pattern=\"10\" />\n\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Hi there, how are you?\" />\n\t\t\t\t\t\t\t\t\t\t\t<SpeechToTextActionClient text=\"{said}\" />\n\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*(good|ok|well).*\" />\n\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"That's great to hear!\" />\n\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"5\" intensity=\"10\" left_blink_pattern=\"1000\" right_blink_pattern=\"1000\" />\n\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t\t</BlackboardCheckInt>\n\n\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<WakeWordDetected since_sec=\"1.0\" />\n\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t<SpeechToTextActionClient text=\"{said}\" />\n\t\t\t\t\t\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*(about yourself).*\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"Sure.  I was created by Team Grandplay for the open cv aye, eye 2021 competition.  My purpose is to provide interactive and simple games for small children for education and entertainment. I hope to create a fascination with technology that fuels a future path into science and technology. My current games include Robot Seek and Robot Says.  I will be demonstrating those games in a future video when I play the games with my 3 year old friend Caroline.\" />\n\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*(key components).*\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"Ok, I’ll start with my hardware. My key component is the open cv camera, called the oak d, that I use for object detection and human pose detection.  Using this camera I can recognize objects and determine their distance from me.  The human pose detection allows me to recognize body gestures so I can interact with humans.  I use those skills when playing the games I have been taught.\" />\n                        \t\t\t\t\t\t<TextToSpeechActionClient msg=\"I have an iRobot Create2 base that I use for moving around. I can easily turn and move about. \" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"4\" detect_voice=\"1\" turn_base=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<RobotSpin angle=\"30\" velocity=\"0.4\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"1000\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t\t\t<RobotSpin angle=\"-30\" velocity=\"0.4\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"My head contains the oak, d camera and a custom smile display.  I use the display to express emotions and use it to indicate when I am talking.  I can make a small smile or a very wide smile.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"4\" detect_voice=\"1\" turn_base=\"1\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<SmileAction level=\"0\" duration_ms=\"1500\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"1500\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t\t\t<SmileAction level=\"3\" duration_ms=\"2000\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2000\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"I mostly smile since I'm a happy robot.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<SmileAction level=\"2\" duration_ms=\"1000\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"1000\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"1\" intensity=\"10\" left_blink_pattern=\"10100000\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tright_blink_pattern=\"00001010\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"I also have two antennae with an LED at the top of each.  I use those to express emotion or provide clues when playing games. I can blink them at a programmable rate and sequence.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"3\" intensity=\"10\" left_blink_pattern=\"1011\" right_blink_pattern=\"1101\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2000\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"5\" intensity=\"10\" left_blink_pattern=\"10\" right_blink_pattern=\"10\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<!--\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"My head is mounted on a pan and tilt base that allows me to track a person with my camera.   Hey Scott, please stand up and move around.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"6000\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n                        \t\t\t\t\t\t-->\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"I also have a servo that allows me to rotate my head a little bit\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<HeadTiltAction angle=\"10\" dwell_ms=\"2000\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"I use that to express emotion.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"1500\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"I do my thinking with two Raspberry Pi 4 computers.  Both run Ubuntu 20.04 with Rahs 2 Foxy for the robot framework. My actions are programmed using behavior trees.\" />\n\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*(your skills).*\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"I would love to.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<SmileAction level=\"3\" duration_ms=\"1000\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"My camera feed shows that I am detecting you.  I annotate information onto the video that shows your position relative to me.  I also show your body pose overlaid on the video.  In the upper left  I show my interpretation of a few hand and arm positions that I use when playing the Robot Says game.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"Would you please put your left hand on your head?\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<RetryUntilSuccesful num_attempts=\"2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2000\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n  \t\t\t\t\t\t\t\t\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<HumanPoseDetect expected_pose_left=\"OnHead\" expected_pose_right=\"\" pose_lr_check=\"left\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdetected_person=\"\" pose_left_speech=\"{pose_left_speech}\" pose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"0\" intensity=\"10\" left_blink_pattern=\"10\" right_blink_pattern=\"01\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"That's much better!\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"5\" intensity=\"10\" left_blink_pattern=\"10\" right_blink_pattern=\"01\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ForceFailure>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t                            \t\t\t\t\t\t\t<HeadTiltAction angle=\"10\" dwell_ms=\"2000\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"Uh, well, let's try that again.  Please put your left hand on your head.\" />\n                                  \t\t\t\t\t\t\t\t\t<Delay delay_msec=\"1000\">\n                                    \t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n                                  \t\t\t\t\t\t\t\t\t</Delay>\n                                  \t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ForceFailure>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t</RetryUntilSuccesful>\n\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2000\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"You have already been hearing my speech output.  I use the Microsoft Azure Speech services for Text to speech synthesis, speech recognition, and wake word detection. I use a neural voice for a more natural voice.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"I can even change my voice like this.\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tvoice=\"en-US-Aria\" style=\"Cheerful\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"1000\">\n\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Ok, that was very weird.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2000\">\n\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n                        \t\t\t\t\t\t<!--\n  \t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"My wake word detection has been used during this demo each time Scott has said ‘Elsa bot’.  Yeah, and he had to fix me so I don’t respond to that when I say it.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<SmileAction level=\"3\" duration_ms=\"1000\" />\n\t\t\t\t\t\t\t\t\t\t\t\t-->\n\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*(navigation skills).*\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"Ok, I’ll show my skills I use for my Robot Seek game.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"For that game I move thru the house searching for my friends.\n\t\t\t\t\t\t\t\t\t\t\t\t\tWhile moving, I use my object and human pose detection capabilities of my oak, d camera to locate them.\n\t\t\t\t\t\t\t\t\t\t\t\t\tLet me show you.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<RobotSeekInitAction game_file=\"robot_seek_demo1.json\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Off to the first location.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"5\" intensity=\"10\" left_blink_pattern=\"10\" right_blink_pattern=\"10\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"first_location\" value=\"1\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"found\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TrackAction mode=\"None\" rate=\"2\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<RobotSpin angle=\"90\" velocity=\"0.6\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"750\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\n\t\t\t\t\t\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<RobotSeekNextSearchPose next_goal=\"{next_goal}\" goal_speech=\"{goal_speech}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tspin_at_goal=\"{spin_at_goal}\" scan_at_goal=\"{scan_at_goal}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{first_location}\" value_B=\"0\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn_on_mismatch=\"SUCCESS\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Not over here.  I'll keep looking.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"first_location\" value=\"0\" />\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ReactiveSequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Inverter>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Fallback ID=\"Detection\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ObjectDetectionAction class=\"person\" pose=\"detected_Pose\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmin_confidence=\"0.85\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<HumanPoseDetect pose_lr_check=\"presence\" min_points=\"12\" expected_pose_left=\"\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texpected_pose_right=\"\" detected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Inverter>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ForceFailure>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"1\" intensity=\"10\" left_blink_pattern=\"10100000\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tright_blink_pattern=\"00001010\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"I found you!\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"1000\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"5\" intensity=\"10\" left_blink_pattern=\"10\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tright_blink_pattern=\"10\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ForceFailure>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Nav2Client goal=\"{next_goal}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"I'm here. I'm looking for you!\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{spin_at_goal}\" value_B=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn_on_mismatch=\"SUCCESS\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Off\" rate=\"0\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<RobotSpin angle=\"359\" velocity=\"0.5\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{scan_at_goal}\" value_B=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn_on_mismatch=\"SUCCESS\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Scan\" rate=\"2\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ScanWaitAction />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ReactiveSequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</KeepRunningUntilFailure>\n\t\t\t\t\t\t\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Heading back now!\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"4\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<Nav2Client goal=\"-5.3,-6.7,200.9\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"4\" detect_voice=\"0\" turn_base=\"1\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"Well, those are my robot seek game skills.  You know, it's a lot more fun playing that game with my friend Caroline!\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<SmileAction level=\"3\" duration_ms=\"2000\" />\n\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t</Sequence>\n\t\t\t\t</ForceSuccess>\n\t\t\t</KeepRunningUntilFailure>\n\t\t</Sequence>\n\t</BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a robotic task where the robot is directed to move towards three different goals (Goal_a, Goal_b, Goal_c) in a repeated sequence for a total of 3 cycles. The robot will first move to Goal_a, then Goal_b, and finally Goal_c within each cycle. This process will be repeated three times.\n\nThis behavior tree utilizes the \"MoveRobot\" subtree, which contains the logic for setting the goal location and navigating the robot to that specific destination using the Nav2Client.\n\nIn summary, the behavior tree orchestrates the robot's movement by instructing it to visit the specified goals in a specific sequence and repeating this sequence for a set number of cycles.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"3\">\n            <Sequence>\n                <SetBlackboard output_key=\"Goal_a\" value=\"-5.40;-5.37;0.0;1.0\" />\n                <SetBlackboard output_key=\"Goal_b\" value=\"-3.94;-4.47;0.0;1.0\" />\n                <SetBlackboard output_key=\"Goal_c\" value=\"-4.79;-6.87;0.0;1.0\" />\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                </Sequence>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement towards three specified goals (Goal_a, Goal_b, Goal_c). Initially, the robot is instructed to move towards Goal_a, then Goal_b, and this sequence is repeated 10 times. However, if the \"gohome\" event is triggered, the repetition is interrupted. Following the completion or interruption of the repetition, the robot is directed to move towards Goal_c.\n\nThe MoveRobot behavior tree defines the sequence for setting the goal location for the robot using the Nav2Client module.\n\nIn summary, the behavior tree outlines a sequential movement plan for the robot, with the ability to interrupt and change its course based on external events.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SetBlackboard output_key=\"Goal_a\" value=\"-6.27;1.66;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_b\" value=\"-4.56;-0.87;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_c\" value=\"-3.65;0.82;0.0;1.0\" />\n            <Fallback>\n                <ReactiveSequence>\n                    <InterruptEvent event=\"gohome\"/>\n                    <Repeat num_cycles=\"10\">\n                        <Sequence>\n                            <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                            <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                        </Sequence>\n                    </Repeat>\n                </ReactiveSequence>\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                </Sequence>\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a game of hide and seek for a robot. It begins with the robot initiating various actions such as clearing the global cost map, setting initial search poses, and performing specific movements like spinning and tracking. The robot then communicates with speech, counting to 10 and announcing its intention to find the hidden person. \n\nDuring the game, the robot continuously seeks the hidden person using object detection and human pose detection. If the person is found, the robot celebrates by tracking the person and delivering a victory message. If the person is not found, the robot continues searching while communicating with speech and performing scanning and spinning actions.\n\nThe overall goal is to simulate a hide and seek game where the robot actively searches for a person, reacts to their presence or absence, and communicates throughout the process. The behavior tree ensures that the robot's actions are coordinated and responsive to the game dynamics.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n\t\t\t<Delay delay_msec=\"1000\">\n\t\t\t\t<PoseDetectionControlAction enable=\"true\" />\n\t\t\t</Delay>\n\t\t\t<Nav2ClearGlobalCostMap />\n\t\t\t<!-- RobotSeekInitAction search_poses=\"-4.3,-4,180.0;-4.7,-6.6,270.0;-6.0,-4.2,206.0\" / -->\n\t\t\t<RobotSeekInitAction search_poses=\"0.75,-3.7,225.0,0,1;\n\t\t\t               -2.9,-4.1,230.0,0,1;\n\t\t\t               -5.6,-4.1,230.0,0,1;\n\t\t\t               -6.4,-1.2,90.0,0,0;\n\t\t\t               -8.0,1.63,300.0,0,1;\n\t\t\t               -7.3,4.7,270.0,0,0;\n\t\t\t               -4.2,1.1,240.0,0,1;\n\t\t\t               -4.4,-6.8,230.0,0,1\" />\n\n\t\t\t<!-- RobotSeekInitAction search_poses=\"-4.5,-7.3,235.0,0,1;-3.3,-4.1,252.0,1,1;-5.79,-4.2,239.0,0,1\" / -->\n\n\t\t\t<!-- RobotSeekInitAction search_poses=\"-4.4,-7.0,230.0,0,1; -5.7,6.3,224.0,0,1; -3.3,-4.1,252.0,0,1; -4.1,0.95,241.0,0,1;\n\t\t\t\t-7.3,4.7,263.0,0,0; -5.72,6.25,190.0,0,1\" / -->\n\n\t\t\t<TrackAction mode=\"None\" rate=\"2\" />\n\t\t\t<TextToSpeechActionClient msg=\"Let's play hide and seek!\" />\n\t\t\t<TextToSpeechActionClient msg=\"I'll count to 10 while you go and hide.\" />\n\t\t\t<RobotSpin angle=\"180\" velocity=\"0.8\" />\n\t\t\t<TrackAction mode=\"LookDown\" rate=\"2\" />\n\t\t\t<TextToSpeechActionClient msg=\"1,2,3,4,5,6,7,8,9,10! Ready or not here I come!\" />\n\t\t\t<TrackAction mode=\"Scan\" rate=\"2\" />\n\t\t\t<RobotSpin angle=\"180\" velocity=\"0.8\" />\n\n\t\t\t<SetBlackboard output_key=\"found\" value=\"0\" />\n\t\t\t<Fallback>\n\t\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t\t<ReactiveSequence>\n\t\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t<Inverter>\n\t\t\t\t\t\t\t\t<Fallback ID=\"Detection\">\n\t\t\t\t\t\t\t\t\t<ObjectDetectionAction class=\"person\" pose=\"detected_Pose\" min_confidence=\"0.70\" min_detect_count=\"5\" />\n\t\t\t\t\t\t\t\t\t<HumanPoseDetect pose_lr_check=\"presence\" expected_pose_left=\"\" expected_pose_right=\"\" detected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\" pose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t\t</Inverter>\n\t\t\t\t\t\t\t<ForceFailure>\n\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"found\" value=\"1\" />\n\t\t\t\t\t\t\t</ForceFailure>\n\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t<RobotSeekNextSearchPose next_goal=\"{next_goal}\" goal_speech=\"{goal_speech}\" spin_at_goal=\"{spin_at_goal}\" scan_at_goal=\"{scan_at_goal}\" />\n\t\t\t\t\t\t\t<TrackAction mode=\"Scan\" rate=\"1\" />\n\t\t\t\t\t\t\t<SubTree ID=\"MoveRobot\" target=\"next_goal\" />\n\t\t\t\t\t\t\t<!--  TextToSpeechActionClient msg=\"{goal_speech}\" /-->\n\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Are you over here?\" />\n\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{spin_at_goal}\" value_B=\"1\" return_on_mismatch=\"SUCCESS\">\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Off\" rate=\"0\" />\n\t\t\t\t\t\t\t\t\t<RobotSpin angle=\"359\" velocity=\"0.5\" />\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{scan_at_goal}\" value_B=\"1\" return_on_mismatch=\"SUCCESS\">\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Scan\" rate=\"2\" />\n\t\t\t\t\t\t\t\t\t<ScanWaitAction />\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"I don't see you.\" />\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t</ReactiveSequence>\n\t\t\t\t</KeepRunningUntilFailure>\n\t\t\t\t<Sequence>\n\t\t\t\t\t<BlackboardCheckInt value_A=\"{found}\" value_B=\"1\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" />\n\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Yay, I found you!\" />\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t</Sequence>\n\t\t\t</Fallback>\n\t\t\t<BlackboardCheckInt value_A=\"{found}\" value_B=\"0\" return_on_mismatch=\"SUCCESS\">\n\t\t\t\t<Sequence>\n\t\t\t\t\t<TextToSpeechActionClient msg=\"Come out come out where ever you are!\" />\n\t\t\t\t</Sequence>\n\t\t\t</BlackboardCheckInt>\n\t\t</Sequence>\n\t</BehaviorTree>\n\n\t<BehaviorTree ID=\"MoveRobot\">\n\t\t<Sequence name=\"SetGoal\">\n\t\t\t<Nav2Client goal=\"{target}\" />\n\t\t</Sequence>\n\t</BehaviorTree>\n</root>\n\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree specifies a sequence of actions for a robot. First, it is instructed to clear the global cost map for navigation, ensuring an updated and accurate representation of the environment. Following this, the robot is directed to initiate a specific action related to seeking or searching, as indicated by the \"RobotSeekInitAction\" with reference to a game file named \"robot_seek_1.json\". This suggests that the robot is being prepared or initialized for a seeking task, likely involving exploration or search activities within the specified game environment.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n\t\t\t<Nav2ClearGlobalCostMap />\n\t\t\t<RobotSeekInitAction game_file=\"robot_seek_1.json\" />\n\t\t</Sequence>\n\t</BehaviorTree>\n</root>\n\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree specifies a task for a text-to-speech system to repeatedly say two different phrases. The first phrase is \"1. Hello. How are you today 123?\" and the second phrase is \"2. Hello. How are you?\" with a specific pitch contour defined. This sequence of speaking the two phrases will be repeated 99 times.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"99\">\n              <Sequence>\n                 <TextToSpeechActionClient msg=\"1. Hello. How are you today 123?\"/>\n                 <!-- TextToSpeechActionClient msg=\"1. Hello. How are you?\" contour=\"(0%, +0%) (100%, +0%)\"/-->\n                 <TextToSpeechActionClient msg=\"2. Hello. How are you?\" contour=\"(0%, +0Hz) (30%, +0Hz) (70%, +80Hz) (100%, +100Hz)\" />\n              </Sequence>\n        </Repeat>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a task for a robot to perform a spin cycle while interacting with humans. The robot is programmed to repeat the spin cycle three times, and before each spin, it will say \"Starting spin cycle\" using text-to-speech. During the spin cycle, the robot will continuously check for the presence of a human and if a person is detected, it will invert its action and stop spinning to interact with the person. If no person is detected, the robot will continue spinning at a velocity of 0.5 and complete the spin cycle. This behavior allows the robot to engage in a repetitive spinning activity while remaining responsive to the presence of humans, pausing the spin to interact when necessary.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n\t\t\t<TrackAction mode=\"none\" rate=\"none\" />\n\t\t\t<Repeat num_cycles=\"3\">\n\t\t\t\t<Sequence>\n\t\t\t\t\t<TextToSpeechActionClient msg=\"Starting spin cycle\" />\n\t\t\t\t\t<ReactiveSequence>\n\t\t\t\t\t\t<Inverter>\n\t\t\t\t\t\t\t<HumanPoseDetect pose_lr_check=\"presence\" expected_pose_left=\"\" expected_pose_right=\"\"\n\t\t\t\t\t\t\t\tdetected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\"\n\t\t\t\t\t\t\t\tpose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t</Inverter>\n\t\t\t\t\t\t<RobotSpin angle=\"360\" velocity=\"0.5\" />\n\t\t\t\t\t</ReactiveSequence>\n\t\t\t\t</Sequence>\n\t\t\t</Repeat>\n\t\t</Sequence>\n\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a sequence of actions for a robot. Initially, the \"PoseDetectionControlAction\" is disabled. Following this, there is a delay of 4 seconds before initiating the \"TrackAction\" with scanning mode and a rate of 3. Subsequently, the robot performs the \"SmileAction\" at level 3 for 2 seconds. Finally, it executes the \"HeadTiltAction\" by tilting its head at a 20-degree angle for 500 milliseconds.\n\nThis behavior tree seems to be designed for a robot to perform a series of predefined actions in a specific order, possibly for interaction or display purposes.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n\t\t\t<PoseDetectionControlAction enable=\"false\" />\n\n\t\t\t<Delay delay_msec=\"4000\">\n\t\t\t\t<TrackAction mode=\"Scan\" rate=\"3\" />\n\t\t\t</Delay>\n\n\t\t\t<SmileAction level=\"3\" duration_ms=\"2000\" />\n\t\t\t<HeadTiltAction angle=\"20\" dwell_ms=\"500\" />\n\t\t</Sequence>\n\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robotic system for picking, delivering, and docking tasks. The robot operates in parallel to execute variant-specific actions and switch between pick, deliver, and dock operations based on a specified variant. \n\nThe \"DefaultDeliver\" behavior involves moving to the default delivery area, delivering an object, and then repeating a delay action indefinitely. The \"Deliver\" behavior focuses solely on moving to the delivery area and delivering an object. The \"Dock\" behavior is responsible for docking the robot at a charging station.\n\nAdditionally, the \"Pick\" and \"Pick2\" behaviors handle the process of approaching and picking up objects, with \"PickDeliverStart\" coordinating the initial pick or deliver operation based on requests and stations.\n\nOverall, the behavior tree provides a structured approach for the robot to perform various tasks such as picking, delivering, and docking while handling different variants and operational scenarios.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Parallel failure_threshold=\"1\" success_threshold=\"1\">\n            <Repeat num_cycles=\"-1\">\n                <Action ID=\"VariantAction\" value=\"{variant}\"/>\n            </Repeat>\n            <Switch3 case_1=\"pick\" case_2=\"deliver\" case_3=\"dock\" variable=\"{variant}\">\n                <SubTree ID=\"PickDeliverStart\"/>\n                <SubTree ID=\"DefaultDeliver\"/>\n                <SubTree ID=\"Dock\"/>\n                <SubTree ID=\"PickDeliverStart\"/>\n            </Switch3>\n        </Parallel>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"DefaultDeliver\">\n        <Sequence>\n            <Action ID=\"moveToDefaultDeliverArea\"/>\n            <Action ID=\"DeliverObject\"/>\n            <Repeat num_cycles=\"-1\">\n                <ForceSuccess>\n                    <Delay delay_msec=\"1000\">\n                        <Action ID=\"DoNothing\"/>\n                    </Delay>\n                </ForceSuccess>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Deliver\">\n        <Sequence name=\"deliver\">\n            <Action ID=\"moveToDeliverArea\"/>\n            <Action ID=\"DeliverObject\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Dock\">\n        <Sequence name=\"Charge\">\n            <Action ID=\"dock\" angle=\"3.14\" x=\"0\" z=\"0\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Pick\">\n        <Sequence>\n            <Action ID=\"moveRoboterPosition\"/>\n            <Action ID=\"DetectObject\"/>\n            <Action ID=\"approachObject\"/>\n            <Action ID=\"DetectObject\"/>\n            <IfThenElse>\n                <Inverter>\n                    <Action ID=\"validEstimatedPosition\"/>\n                </Inverter>\n                <Sequence>\n                    <Action ID=\"approachObject\"/>\n                    <Action ID=\"PickObject\"/>\n                </Sequence>\n                <Action ID=\"PickObject\"/>\n            </IfThenElse>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Pick2\">\n        <Sequence>\n            <Action ID=\"moveRoboterPosition2\"/>\n            <Action ID=\"DetectObject\"/>\n            <Action ID=\"approachObject\"/>\n            <Action ID=\"DetectObject\"/>\n            <IfThenElse>\n                <Inverter>\n                    <Action ID=\"validEstimatedPosition\"/>\n                </Inverter>\n                <Sequence>\n                    <Action ID=\"approachObject\"/>\n                    <Action ID=\"PickObject\"/>\n                </Sequence>\n                <Action ID=\"PickObject\"/>\n            </IfThenElse>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"PickDeliverStart\">\n        <Repeat num_cycles=\"-1\">\n            <ForceSuccess>\n                <Delay delay_msec=\"500\">\n                    <IfThenElse>\n                        <Action ID=\"pickingRequests\"/>\n                        <Fallback>\n                            <Sequence name=\"Pick/Deliver/Start\">\n                                <Fallback>\n                                    <SubTree ID=\"Pick\"/>\n                                    <SubTree ID=\"Pick2\"/>\n                                </Fallback>\n                                <SubTree ID=\"Deliver\"/>\n                                <Action ID=\"moveToStart\"/>\n                            </Sequence>\n                            <Action ID=\"moveToStart\"/>\n                        </Fallback>\n                        <Action ID=\"DoNothing\"/>\n                    </IfThenElse>\n                </Delay>\n            </ForceSuccess>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <SubTree ID=\"DefaultDeliver\"/>\n        <SubTree ID=\"Deliver\"/>\n        <Action ID=\"DeliverObject\"/>\n        <Action ID=\"DetectObject\"/>\n        <Action ID=\"DoNothing\"/>\n        <SubTree ID=\"Dock\"/>\n        <SubTree ID=\"Pick\"/>\n        <SubTree ID=\"Pick2\"/>\n        <SubTree ID=\"PickDeliverStart\"/>\n        <Action ID=\"PickObject\"/>\n        <Action ID=\"VariantAction\">\n            <output_port default=\"{variant}\" name=\"value\"/>\n        </Action>\n        <Action ID=\"approachObject\"/>\n        <Action ID=\"dock\">\n            <input_port default=\"0\" name=\"angle\"/>\n            <input_port default=\"0\" name=\"x\"/>\n            <input_port default=\"0\" name=\"z\"/>\n        </Action>\n        <Action ID=\"moveRoboterPosition\"/>\n        <Action ID=\"moveRoboterPosition2\"/>\n        <Action ID=\"moveToDefaultDeliverArea\"/>\n        <Action ID=\"moveToDeliverArea\"/>\n        <Action ID=\"moveToStart\"/>\n        <Action ID=\"pickingRequests\"/>\n        <Action ID=\"pickingStations\">\n            <output_port default=\"{stations}\" name=\"stations\"/>\n        </Action>\n        <Action ID=\"validEstimatedPosition\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's task of navigating through doors and windows. The MainTree first checks if the door is open, and if so, it passes through the door. If the door is closed, it executes the DoorClosed behavior, which attempts to open the door up to 4 times before passing through it.\n\nIf the attempt to pass through the door fails, the robot will then attempt to pass through a window. This behavior tree ensures that the robot can navigate through both open and closed doors as well as windows in its environment.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n\n    <BehaviorTree ID=\"DoorClosed\">\n        <Sequence name=\"door_closed_sequence\">\n            <Inverter>\n                <IsDoorOpen/>\n            </Inverter>\n            <RetryUntilSuccesful num_attempts=\"4\">\n                <OpenDoor/>\n            </RetryUntilSuccesful>\n            <PassThroughDoor/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback name=\"root_Fallback\">\n            <Sequence name=\"door_open_sequence\">\n                <IsDoorOpen/>\n                <PassThroughDoor/>\n            </Sequence>\n            <SubTree ID=\"DoorClosed\"/>\n            <PassThroughWindow/>\n        </Fallback>\n    </BehaviorTree>\n\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a sequence where Action_A is executed first, followed by Action_B. This means that the task involves performing Action_A and then proceeding to execute Action_B in a sequential manner.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <Action_A name=\"actino_a\" />\n            <Action_B name=\"actino_b\" />\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single sequence that instructs the robot to move towards a specified goal. The \"Move\" action is parameterized with the goal location, allowing flexibility in specifying the destination for the robot. This behavior tree is simple and straightforward, as it directly commands the robot to perform a single movement action without any conditional logic or complex branching.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <Move name=\"move\" goal=\"${arg2}\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree instructs a robot to execute a sequence of movements. First, it is directed to move to the location with coordinates (1, 1, 0), and then to proceed to the position with coordinates (0, 0, 0). This indicates that the robot is expected to navigate to these specific locations in a sequential manner.",
        "output": " \n <root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <MoveBase goal=\"1;1;0\" />\n            <MoveBase goal=\"0;0;0\" />\n        </Sequence>\n     </BehaviorTree>\n </root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the decision-making process for a robotic system. The robot's behavior is reactive and involves monitoring its battery state, charging status, and performing actions accordingly.\n\nThe main sequence consists of three reactive fallbacks:\n1. The first fallback checks if the battery is not fully charged and the robot is undocked. If so, it attempts to charge the battery.\n2. The second fallback checks if the battery is fully charged and, if not charging, stops the charging action.\n3. The third fallback ensures that the robot is docked for charging; if not, it retries the charging process and alerts for assistance if unsuccessful.\n\nAdditionally, there are subroutines such as \"ChargeST\" which handles the charging process, including moving to a designated point, initiating charging, and providing audio feedback during charging.\n\nOverall, the behavior tree orchestrates the robot's actions based on its battery and charging states, ensuring it remains operational and properly charged while also handling potential issues in the charging process.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <ReactiveSequence>\n            <ReactiveFallback>\n                <Sequence>\n                    <Action ID=\"CheckBattery\" battery_state=\"k_bat_state\" percentage=\"k_bat_perc\" service_name=\"kokam_battery_state\"/>\n                    <Condition A=\"{k_bat_state}\" B=\"2\" Condition=\"&lt;\" ID=\"CompareInt\" name=\"Charged or good\"/>\n                    <Action ID=\"CheckCharging\" charging_state=\"charge_state\" service_name=\"battery_charging_state\"/>\n                    <Condition A=\"{charge_state}\" B=\"0\" Condition=\"==\" ID=\"CompareInt\" name=\"Undocked\"/>\n                </Sequence>\n                <Sequence>\n                    <Action ID=\"CheckBattery\" battery_state=\"k_bat_state\" percentage=\"k_bat_perc\" service_name=\"kokam_battery_state\"/>\n                    <Condition A=\"{k_bat_state}\" B=\"0\" Condition=\"==\" ID=\"CompareInt\" name=\"Fully charged\"/>\n                    <Sequence>\n                        <Action ID=\"CheckCharging\" charging_state=\"charge_state\" service_name=\"battery_charging_state\"/>\n                        <Condition A=\"{charge_state}\" B=\"1\" Condition=\"==\" ID=\"CompareInt\" name=\"Charging\"/>\n                        <Action ID=\"Charge\" action=\"charging_action\" action_name=\"STOP_CHARGE\" name=\"Undock\"/>\n                    </Sequence>\n                </Sequence>\n                <Sequence>\n                    <Action ID=\"CheckCharging\" charging_state=\"charge_state\" service_name=\"battery_charging_state\"/>\n                    <Condition A=\"{charge_state}\" B=\"1\" Condition=\"!=\" ID=\"CompareInt\" name=\"Not Docked\"/>\n                    <ForceFailure>\n                        <Fallback>\n                            <RetryUntilSuccesful num_attempts=\"2\">\n                                <SubTree ID=\"ChargeST\"/>\n                            </RetryUntilSuccesful>\n                            <Action ID=\"Speak\" action_name=\"gcloud_tts\" language=\"pt_PT\" utterance=\"Ajudem-me, pois não consigo chegar à estação de carregamento\" voice=\"pt-PT-Wavenet-D\"/>\n                        </Fallback>\n                    </ForceFailure>\n                </Sequence>\n            </ReactiveFallback>\n            <Action ID=\"Speak\" action_name=\"gcloud_tts\" language=\"pt_PT\" utterance=\"A minha bateria está cheia\" voice=\"pt-PT-Wavenet-D\"/>\n            <Action ID=\"WaitForXSeconds\" result=\"SUCCESS\" seconds=\"5\"/>\n        </ReactiveSequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"ChargeST\">\n        <SequenceStar>\n            <Action ID=\"Speak\" action_name=\"gcloud_tts\" language=\"pt_PT\" name=\"Hungry\" utterance=\"Tenho fome\" voice=\"pt-PT-Wavenet-D\"/>\n            <Action ID=\"WaitForXSeconds\" name=\"Wait2Seconds\" result=\"SUCCESS\" seconds=\"2\"/>\n            <Fallback>\n                <SequenceStar>\n                    <RetryUntilSuccesful num_attempts=\"5\">\n                        <Action ID=\"MoveBase\" action_name=\"move_base\" frame_id=\"map\" goal_pose=\"-1.7971;-5.5118;0.0;0;0;0.72703;0.68659\" name=\"Go to first point\"/>\n                    </RetryUntilSuccesful>\n                    <Parallel failure_threshold=\"1\" success_threshold=\"2\">\n                        <Action ID=\"Charge\" action=\"CHARGE\" action_name=\"charging_action\"/>\n                        <Repeat num_cycles=\"10\">\n                            <Action ID=\"Speak\" action_name=\"gcloud_tts\" language=\"pt_PT\" utterance=\"bip bip\" voice=\"pt-PT-Wavenet-D\"/>\n                        </Repeat>\n                    </Parallel>\n                </SequenceStar>\n            </Fallback>\n        </SequenceStar>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\"/>\n            <input_port name=\"action_name\"/>\n        </Action>\n        <SubTree ID=\"ChargeST\"/>\n        <Action ID=\"CheckBattery\">\n            <output_port name=\"battery_state\" type=\"int\"/>\n            <output_port name=\"percentage\" type=\"double\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port name=\"charging_state\" type=\"int\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Action ID=\"DetectBlocks\">\n            <output_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <input_port name=\"block_topic\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"goal_pose\"/>\n        </Action>\n        <Action ID=\"SelectBlock\">\n            <input_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <output_port name=\"block_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <input_port name=\"position_in_list\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"action_name\" type=\"std::string\"/>\n            <input_port name=\"language\" type=\"std::string\"/>\n            <input_port name=\"utterance\" type=\"std::string\"/>\n            <input_port name=\"voice\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port default=\"SUCCESS\" name=\"result\">Result after specified time: SUCCESS or FAILURE</input_port>\n            <input_port default=\"5\" name=\"seconds\">Time in seconds</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robot. Initially, it checks the battery state and charging status. If the battery is not fully charged, it initiates a charging sequence, which includes speaking, moving to a specific location, and performing charging actions. If the battery is already fully charged, it proceeds with a patrol sequence, including debugging actions, random movements, and waiting for a specified duration.\n\nThe charging sequence involves checking the battery state, determining if the robot needs to charge or stop charging, and handling different scenarios based on the battery's condition. Additionally, it includes speaking out loud, retrying movement to a specific point, and repeating spoken messages multiple times.\n\nThe overall goal of the behavior tree is to manage the robot's energy levels effectively by initiating charging when necessary and allowing the robot to perform its tasks when fully charged. It also ensures that the robot continues its operations smoothly by handling various scenarios related to battery and charging states.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback>\n            <Sequence>\n                <SubTree ID=\"charging_full_st\"/>\n                <Action ID=\"DebugAction\" string=\"Vou patrulhar\"/>\n                <Action ID=\"GeneralActionlib\" action_name=\"random_movement\" constants=\"0,1,3\" variables=\"\" result=\"result\"/>\n                <Action goal_pose=\"{result}\" ID=\"MoveBase\" action_name=\"move_base\" frame_id=\"map\"/>\n                <Action ID=\"DebugAction\" string=\"cheguei!\"/>\n                <Action seconds=\"5\" ID=\"WaitForXSeconds\" result=\"SUCCESS\"/>\n            </Sequence>\n            <Action ID=\"CallEmptySrv\" service_name=\"/move_base/clear_costmaps\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"ChargeST\">\n        <SequenceStar>\n            <Action language=\"pt_PT\" voice=\"pt-PT-Wavenet-D\" ID=\"Speak\" utterance=\"Tenho fome\" action_name=\"/gcloud_tts\"/>\n            <Action seconds=\"2\" ID=\"WaitForXSeconds\" name=\"Wait2Seconds\" result=\"SUCCESS\"/>\n            <RetryUntilSuccesful num_attempts=\"3\">\n                <Action goal_pose=\"-4.88723403052;-6.0285904746;0.0;0.0;0.0;0.997843662386;0.0503172395835\" ID=\"MoveBase\" name=\"Go to first point\" action_name=\"move_base\" frame_id=\"map\"/>\n            </RetryUntilSuccesful>\n            <Parallel failure_threshold=\"1\" success_threshold=\"2\">\n                <Action ID=\"Charge\" action_name=\"charging_action\" action=\"CHARGE\"/>\n                <Repeat num_cycles=\"10\">\n                    <Action language=\"pt_PT\" voice=\"pt-PT-Wavenet-D\" ID=\"Speak\" utterance=\"bip bip\" action_name=\"/gcloud_tts\"/>\n                </Repeat>\n            </Parallel>\n        </SequenceStar>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"charging_full_st\">\n        <Sequence>\n            <Fallback>\n                <Sequence>\n                    <Action ID=\"DebugAction\" string=\"checking battery state\"/>\n                    <Action percentage=\"k_bat_perc\" ID=\"CheckBattery\" battery_state=\"k_bat_state\" service_name=\"/vizzy_batteries_state\"/>\n                    <Condition A=\"{k_bat_state}\" Condition=\"==\" ID=\"CompareInt\" B=\"3\"/>\n                    <Action ID=\"CheckCharging\" service_name=\"battery_charging_state\" charging_state=\"charge_state\"/>\n                    <Condition A=\"{charge_state}\" Condition=\"==\" ID=\"CompareInt\" B=\"0\"/>\n                    <SubTree ID=\"ChargeST\"/>\n                </Sequence>\n                <Sequence>\n                    <Action ID=\"DebugAction\" string=\"checking if batteries are charged\"/>\n                    <Action ID=\"CheckCharging\" service_name=\"battery_charging_state\" charging_state=\"charge_state\"/>\n                    <Condition A=\"{charge_state}\" Condition=\"==\" ID=\"CompareInt\" B=\"1\"/>\n                    <Action percentage=\"k_bat_perc\" ID=\"CheckBattery\" battery_state=\"k_bat_state\" service_name=\"/vizzy_batteries_state\"/>\n                    <Condition A=\"{k_bat_state}\" Condition=\"==\" ID=\"CompareInt\" B=\"0\"/>\n                    <Action language=\"pt_PT\" voice=\"pt-PT-Wavenet-D\" ID=\"Speak\" utterance=\"Estou cheio, vou sair da estação\" action_name=\"/gcloud_tts\"/>\n                    <Action ID=\"Charge\" action_name=\"charging_action\" action=\"STOP_CHARGE\"/>\n                </Sequence>\n                <Sequence>\n                    <Action ID=\"DebugAction\" string=\"check if failed\"/>\n                    <Action percentage=\"k_bat_perc\" ID=\"CheckBattery\" battery_state=\"k_bat_state\" service_name=\"/vizzy_batteries_state\"/>\n                    <Condition A=\"{k_bat_state}\" Condition=\"==\" ID=\"CompareInt\" B=\"3\"/>\n                    <Action ID=\"CheckCharging\" service_name=\"battery_charging_state\" charging_state=\"charge_state\"/>\n                    <Condition A=\"{charge_state}\" Condition=\"==\" ID=\"CompareInt\" B=\"0\"/>\n                    <Action language=\"pt_PT\" voice=\"pt-PT-Wavenet-D\" ID=\"Speak\" utterance=\"Ajudem-me, tenho fome e não consigo carregar\" action_name=\"/gcloud_tts\"/>\n                    <Action ID=\"CallEmptySrv\" service_name=\"/move_base/clear_costmaps\"/>\n                    <Action seconds=\"10\" ID=\"WaitForXSeconds\" result=\"SUCCESS\"/>\n                </Sequence>\n                <Sequence>\n                    <Action percentage=\"k_bat_perc\" ID=\"CheckBattery\" battery_state=\"k_bat_state\" service_name=\"/vizzy_batteries_state\"/>\n                    <Condition A=\"{k_bat_state}\" Condition=\"!=\" ID=\"CompareInt\" B=\"3\"/>\n                </Sequence>\n            </Fallback>\n            <Sequence>\n                <Action ID=\"CheckCharging\" service_name=\"battery_charging_state\" charging_state=\"charge_state\"/>\n                <Condition A=\"{charge_state}\" Condition=\"==\" ID=\"CompareInt\" B=\"0\"/>\n                <Action ID=\"DebugAction\" string=\"I can move\"/>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"CallEmptySrv\">\n            <input_port name=\"service_name\"/>\n        </Action>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\"/>\n            <input_port name=\"action_name\"/>\n        </Action>\n        <SubTree ID=\"ChargeST\"/>\n        <Action ID=\"CheckBattery\">\n            <output_port type=\"int\" name=\"battery_state\"/>\n            <output_port type=\"double\" name=\"percentage\"/>\n            <input_port type=\"std::string\" name=\"service_name\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port type=\"int\" name=\"charging_state\"/>\n            <input_port type=\"std::string\" name=\"service_name\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Action ID=\"DebugAction\">\n            <input_port type=\"std::string\" name=\"string\"/>\n        </Action>\n        <Action ID=\"Destroy\"/>\n        <Action ID=\"DetectBlocks\">\n            <output_port type=\"social_cues::BlockList_&lt;std::allocator&lt;void> >\" name=\"block_list\"/>\n            <input_port type=\"std::string\" name=\"block_topic\"/>\n        </Action>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"GeneralActionlib\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"constants\">A coma separated list of constants.</input_port>\n            <output_port name=\"result\">This is a string</output_port>\n            <input_port name=\"variables\">A coma separated list of variables.</input_port>\n        </Action>\n        <Action ID=\"GetFloat64\">\n            <output_port type=\"double\" name=\"number\"/>\n            <input_port type=\"std::string\" name=\"topic\"/>\n        </Action>\n        <Action ID=\"GetInt16\">\n            <output_port name=\"number\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GetPoseArray\">\n            <output_port name=\"pose_array\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GiveFeedback\">\n            <input_port default=\"850\" name=\"almost_thr\"/>\n            <input_port name=\"correct_blocks\"/>\n            <input_port name=\"incorrect_blocks\"/>\n            <input_port default=\"0\" name=\"personality\"/>\n            <input_port name=\"score\"/>\n        </Action>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"goal_pose\"/>\n        </Action>\n        <Action ID=\"MoveTorso\">\n            <input_port name=\"angle\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"ResetVars\"/>\n        <Action ID=\"SelectBlock\">\n            <input_port type=\"social_cues::BlockList_&lt;std::allocator&lt;void> >\" name=\"block_list\"/>\n            <output_port type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void> >\" name=\"block_pose\"/>\n            <input_port type=\"std::string\" name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"SelectFieldFromPoseStamped\">\n            <input_port name=\"field\"/>\n            <output_port name=\"output_val\"/>\n            <input_port name=\"pose_stamped\"/>\n        </Action>\n        <Action ID=\"SelectPose\">\n            <input_port name=\"pose_array\"/>\n            <input_port name=\"pose_stamped\"/>\n            <input_port name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"SenseScore\">\n            <output_port name=\"score\"/>\n            <input_port name=\"score_topic\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"language\"/>\n            <input_port name=\"utterance\"/>\n            <input_port name=\"voice\"/>\n        </Action>\n        <SubTree ID=\"SubTree\"/>\n        <Action ID=\"TimerAction\">\n            <input_port name=\"s_between_success\">Time (s) before this node returns SUCCESS. It will return FAILURE in the meanwhile</input_port>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port default=\"SUCCESS\" name=\"result\">Result after specified time: SUCCESS or FAILURE</input_port>\n            <input_port default=\"5\" name=\"seconds\">Time in seconds</input_port>\n        </Action>\n        <SubTree ID=\"charging_full_st\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robot based on its personality. It first retrieves the robot's personality from a topic and then speaks a corresponding phrase based on the personality value. The robot can have two personalities represented by integer values 0 and 1, and it will speak \"Sou um bom robô\" (I am a good robot) for personality 0 and \"Sou um mau robô\" (I am a bad robot) for personality 1.\n\nThe tree uses parallel execution to simultaneously retrieve the personality and perform the speaking action. If the retrieval fails or if the robot's personality doesn't match either 0 or 1, it will fallback to the respective default phrases.\n\nThis behavior tree is designed to demonstrate the robot's ability to express different behaviors based on its perceived personality, enhancing human-robot interaction through natural language responses.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Parallel threshold=\"1\">\n            <Action topic=\"robot_personality\" ID=\"GetInt16\" number=\"personality\"/>\n            <Fallback>\n                <Sequence>\n                    <Condition ID=\"CompareInt\" Condition=\"==\" B=\"0\" A=\"{personality}\"/>\n                    <Action utterance=\"Sou um bom robô\" voice=\"pt-PT-Wavenet-D\" ID=\"Speak\" language=\"pt_PT\" action_name=\"/gcloud_tts\"/>\n                </Sequence>\n                <Sequence>\n                    <Condition ID=\"CompareInt\" Condition=\"==\" B=\"1\" A=\"{personality}\"/>\n                    <Action utterance=\"Sou um mau robô\" voice=\"pt-PT-Wavenet-D\" ID=\"Speak\" language=\"pt_PT\" action_name=\"/gcloud_tts\"/>\n                </Sequence>\n            </Fallback>\n        </Parallel>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\"/>\n            <input_port name=\"action_name\"/>\n        </Action>\n        <SubTree ID=\"ChargeST\"/>\n        <Action ID=\"CheckBattery\">\n            <output_port name=\"battery_state\" type=\"int\"/>\n            <output_port name=\"percentage\" type=\"double\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port name=\"charging_state\" type=\"int\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Action ID=\"DetectBlocks\">\n            <output_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void> >\"/>\n            <input_port name=\"block_topic\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <SubTree ID=\"ErrorGameState\"/>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"GetInt16\">\n            <output_port name=\"number\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GetPoseArray\">\n            <output_port name=\"pose_array\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"goal_pose\"/>\n        </Action>\n        <Action ID=\"MoveTorso\">\n            <input_port name=\"angle\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"SelectBlock\">\n            <input_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void> >\"/>\n            <output_port name=\"block_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void> >\"/>\n            <input_port name=\"position_in_list\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"SelectFieldFromPoseStamped\">\n            <input_port name=\"field\"/>\n            <output_port name=\"output_val\"/>\n            <input_port name=\"pose_stamped\"/>\n        </Action>\n        <Action ID=\"SelectPose\">\n            <input_port name=\"pose_array\"/>\n            <output_port name=\"pose_stamped\"/>\n            <input_port name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"action_name\" type=\"std::string\"/>\n            <input_port name=\"language\" type=\"std::string\"/>\n            <input_port name=\"utterance\" type=\"std::string\"/>\n            <input_port name=\"voice\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port name=\"result\" default=\"SUCCESS\">Result after specified time: SUCCESS or FAILURE</input_port>\n            <input_port name=\"seconds\" default=\"5\">Time in seconds</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a navigation system for a robot. It uses a pipeline sequence to handle navigation and recovery in case of failures. The robot attempts to navigate to a specified goal using a series of recovery nodes and actions. If the initial navigation attempt fails, it retries a set number of times before moving on to recovery actions such as clearing the costmap, spinning, and waiting.\n\nThe system employs rate control to manage the frequency of path planning and follows a round-robin approach for global planner recovery actions. Additionally, it includes reactive fallback behavior that triggers recovery actions when the goal is updated.\n\nOverall, the behavior tree orchestrates the robot's navigation by coordinating path planning, execution, and recovery strategies to ensure successful movement towards the specified goal while handling potential obstacles or errors along the way.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n  <PipelineSequence name=\"NavigationSequence\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <RoundRobin name=\"GlobalPlannerRecoveryActions\">\n              <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n              <Wait wait_duration=\"2.0\"/>\n            </RoundRobin>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <!-- Change below to corresponding planner from nav2_params.yaml-->\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/> \n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n    <ClearEntireCostmap name=\"ClearGlobalCostmap-Finish\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n  </PipelineSequence>\n  </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic task sequence. It begins by checking the battery status, then opens the robot's gripper, approaches an object, and finally closes the gripper. This sequence outlines the steps for the robot to perform a pick-and-place operation or a similar manipulation task. The robot first ensures that its battery is at an acceptable level, then prepares for object manipulation by opening the gripper. Subsequently, it moves towards the target object and, upon reaching it, closes the gripper to grasp the object. This behavior tree encapsulates the essential steps for the robot to successfully interact with objects in its environment.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <CheckBattery   name=\"battery_ok\"/>\n            <OpenGripper    name=\"open_gripper\"/>\n            <ApproachObject name=\"approach_object\"/>\n            <CloseGripper   name=\"close_gripper\"/>\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's task of finding and fetching items to prepare a drink. The robot first attempts to find a room, then goes to that room. If it fails to find the room or after going to the room, it follows a human. After this, it proceeds to find a bottle, fetch the bottle, find a glass, fetch the glass, and finally pour the drink. If any of these actions fail, the robot will ask for help. This sequence is designed to enable the robot to autonomously perform the task of preparing a drink, with the ability to seek assistance if needed.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n\n  <BehaviorTree ID=\"MainTree\">\n    <Fallback name = \"root\">\n      <Sequence name=\"find_and_fetch\">\n        <Fallback name = \"pippo\">\n          <Sequence name = \"pluto\">\n            <Condition ID=\"Room_known\" />\n            <Action ID=\"Go_to_room\" />\n          </Sequence>\n          <Action ID=\"Follow_human\" />\n        </Fallback>\n        <Action ID=\"Find_bottle\" />\n        <Action ID=\"Fetch_bottle\" />\n        <Action ID=\"Find_glass\" />\n        <Action ID=\"Fetch_glass\" />\n        <Action ID=\"Pour_drink\" />\n      </Sequence>\n      <Action ID=\"Ask_for_help\" />\n    </Fallback>\n  </BehaviorTree>\n\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the decision-making and actions of a robotic system. It begins by checking for stop signals and diagnostic status. If no stop or diagnostic issues are present, it proceeds to check the battery level and patient condition. If the battery is low, the robot initiates a recharge process, and in case of a patient emergency, it triggers an emergency response.\n\nFollowing these checks, the robot presents a selection of behaviors (such as movement, device pairing, etc.) to the user. Based on the user's choice, the robot executes the selected behavior using specific action nodes tailored to each behavior type. The behavior selection process is managed through a switch mechanism that directs the flow to the chosen behavior.\n\nOverall, the behavior tree enables the robot to autonomously manage its operations, respond to critical situations, and interact with users to perform various tasks based on their selections.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n\n    <include path=\"FreeWalking.xml\"/>\n    <include path=\"Emergency.xml\"/>\n    <include path=\"GuidedWalking.xml\"/>\n    <include path=\"Recharge.xml\"/>\n    <include path=\"TransportWithDevice.xml\"/>\n\n    <include path=\"BaseMovementWithRequest.xml\"/>\n    <include path=\"ArmMovementWithRequest.xml\"/>\n    <include path=\"BatteryChargingWithRequest.xml\"/>\n    <include path=\"DevicePairingWithRequest.xml\"/>\n\n    <BehaviorTree ID=\"MainTree\">\n        <ReactiveSequence>\n            <CheckStop/>\n            <CheckDiagnosticStatus/>\n            <Fallback>\n                <CheckBattery/>\n                <Recharge/>\n            </Fallback>\n            <Fallback>\n                <CheckPatientCondition/>\n                <Emergency/>\n            </Fallback>\n            <Sequence>\n                <StringParameterRequest title=\"Select a behavior\"\n                                       options=\"DevicePairingWithRequest,BaseMovementWithRequest,ArmMovementWithRequest,BatteryChargingWithRequest,FreeWalking,GuidedWalking,TransportWithDevice\"\n                                       value=\"{selected_behavior}\"/>\n                <BehaviorSwitch variable=\"{selected_behavior}\" case_1=\"DevicePairingWithRequest\" case_2=\"BaseMovementWithRequest\" case_3=\"ArmMovementWithRequest\" case_4=\"BatteryChargingWithRequest\" case_5=\"FreeWalking\" case_6=\"GuidedWalking\" case_7=\"TransportWithDevice\">\n                    <DevicePairingWithRequest/>\n                    <BaseMovementWithRequest/>\n                    <ArmMovementWithRequest/>\n                    <BatteryChargingWithRequest/>\n                    <FreeWalking/>\n                    <GuidedWalking/>\n                    <TransportWithDevice/>\n                    <AlwaysFailureNode name=\"default\"/>\n                </BehaviorSwitch>\n            </Sequence>\n        </ReactiveSequence>\n    </BehaviorTree>\n\n    <TreeNodesModel>\n        <SubTree ID=\"BaseMovementWithRequest\"/>\n        <SubTree ID=\"ArmMovementWithRequest\"/>\n        <SubTree ID=\"BatteryChargingWithRequest\"/>\n        <SubTree ID=\"DevicePairingWithRequest\"/>\n        <SubTree ID=\"FreeWalking\"/>\n        <SubTree ID=\"GuidedWalking\"/>\n        <SubTree ID=\"TransportWithDevice\"/>\n        <SubTree ID=\"Emergency\"/>\n        <SubTree ID=\"Recharge\"/>\n\n        <Condition ID=\"CheckStop\"/>\n        <Condition ID=\"CheckBattery\"/>\n        <Condition ID=\"CheckDiagnosticStatus\"/>\n        <Condition ID=\"CheckPatientCondition\"/>\n        <Condition ID=\"CheckBlackboard\"/>\n            <input_port name=\"input\" type=\"std::string\"/>\n            <input_port name=\"compare_to\" type=\"std::string\"/>\n\n        <Decorator ID=\"BehaviorSwitch\"/>\n\n        <Action ID=\"DevicePairing\">\n            <input_port name=\"pairing_mode\" type=\"int\"/>\n            <input_port name=\"device_type\" type=\"int\"/>\n        </Action>\n        <Action ID=\"ArmMovement\">\n            <input_port name=\"x\" type=\"float\"/>\n            <input_port name=\"y\" type=\"float\"/>\n            <input_port name=\"z\" type=\"float\"/>\n            <input_port name=\"gripper\" type=\"float\"/>\n        </Action>\n        <Action ID=\"BatteryCharging\">\n            <input_port name=\"goal_percentage\" type=\"float\"/>\n        </Action>\n        <Action ID=\"BaseMovement\">\n            <input_port name=\"x\" type=\"float\"/>\n            <input_port name=\"y\" type=\"float\"/>\n        </Action>\n        <Action ID=\"StringParameterRequest\">\n            <output_port name=\"value\" type=\"std::string\"/>\n            <input_port name=\"title\" type=\"std::string\"/>\n            <input_port name=\"msg\" type=\"std::string\"/>\n            <input_port name=\"key\" type=\"std::string\"/>\n            <input_port name=\"min\" type=\"std::string\"/>\n            <input_port name=\"max\" type=\"std::string\"/>\n            <input_port name=\"default_value\" type=\"std::string\"/>\n            <input_port name=\"options\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"FloatParameterRequest\">\n            <output_port name=\"value\" type=\"float\"/>\n            <input_port name=\"title\" type=\"std::string\"/>\n            <input_port name=\"msg\" type=\"std::string\"/>\n            <input_port name=\"key\" type=\"std::string\"/>\n            <input_port name=\"min\" type=\"std::string\"/>\n            <input_port name=\"max\" type=\"std::string\"/>\n            <input_port name=\"default_value\" type=\"std::string\"/>\n            <input_port name=\"options\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"IntParameterRequest\">\n            <output_port name=\"value\" type=\"int\"/>\n            <input_port name=\"title\" type=\"std::string\"/>\n            <input_port name=\"msg\" type=\"std::string\"/>\n            <input_port name=\"key\" type=\"std::string\"/>\n            <input_port name=\"min\" type=\"std::string\"/>\n            <input_port name=\"max\" type=\"std::string\"/>\n            <input_port name=\"default_value\" type=\"std::string\"/>\n            <input_port name=\"options\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"AlwaysFailureNode\"/>\n    </TreeNodesModel>\n </root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for a robotic system. The robot is programmed to execute a series of actions in a specific order, including \"go1\", \"go2\", \"go3\", \"go4\", \"go5\", \"go6\", \"go7\", and \"go8\". These actions are organized within nested sequences, with some actions being part of sub-sequences.\n\nAdditionally, the behavior tree includes various other potential actions such as \"dumpRun\", \"goClosestR\", \"isFull\", \"mineResource\", \"mineResources\", \"moveBaseToGoal\", \"stay1\", \"stay2\", \"waitFrames\", \"waitFrames2\", and \"waitFrames3\". These actions likely represent a range of behaviors or tasks that the robot can perform.\n\nOverall, the behavior tree provides a structured plan for the robot's actions, ensuring it follows a predefined sequence while also incorporating the ability to perform other tasks based on the defined actions.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Action ID=\"go1\"/>\n            <Sequence name=\"Sequence2\">\n                <Action ID=\"go2\"/>\n                <Sequence name=\"Sequence3\">\n                    <Action ID=\"go3\"/>\n                    <Action ID=\"go4\"/>\n                    <Action ID=\"go5\"/>\n                </Sequence>\n                <Action ID=\"go6\"/>\n            </Sequence>\n            <Action ID=\"go7\"/>\n            <Action ID=\"go8\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"go4\"/>\n        <Action ID=\"go5\"/>\n        <Action ID=\"go6\"/>\n        <Action ID=\"go7\"/>\n        <Action ID=\"go8\"/>\n        <Action ID=\"goClosestR\"/>\n        <Condition ID=\"isFull\"/>\n        <Action ID=\"mineResource\"/>\n        <Action ID=\"mineResources\"/>\n        <Action ID=\"moveBaseToGoal\">\n            <input_port name=\"key_name\">goal</input_port>\n        </Action>\n        <Action ID=\"stay1\"/>\n        <Action ID=\"stay2\"/>\n        <Action ID=\"waitFrames\">\n            <output_port name=\"barout\"/>\n            <input_port name=\"baz\"/>\n            <input_port name=\"fooin\"/>\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n        <Action ID=\"waitFrames2\">\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n        <Action ID=\"waitFrames3\">\n            <inout_port default=\"4\" name=\"d_one\">has default</inout_port>\n            <inout_port name=\"d_zero\">d1</inout_port>\n            <input_port default=\"2\" name=\"frames\"/>\n            <input_port name=\"stagger\">not a real argument, the other has a default</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a login process for a game. It first attempts to log in with the username \"test\" and password \"test\", retrying once if unsuccessful. Upon successful login, it selects the \"Athena\" channel and \"world 0\". If the login fails, it then tries to select and log in with an existing character named \"test\". If that also fails, it creates a new character with the name \"test\" and logs in with it.",
        "output": "<root main_tree_to_execute=\"LoginTree\">\n    <BehaviorTree ID=\"LoginTree\">\n        <sequence>\n            <RetryUntilSuccessful num_attempts=\"1\">\n                <Login username=\"test\" password=\"test\" />\n            </RetryUntilSuccessful>\n            <SelectChannelAndWorld channel=\"Athena\" world=\"0\" />\n            <FallBack>\n                <SelectAndLogCharacter name=\"test\" />\n                <CreateAndLogCharacter name=\"test\" />\n            </FallBack>\n        </sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robotic system to execute a sequence of actions. The robot is tasked with moving from one predefined point to another while also performing an item picking action. This involves the coordination of two sub-tasks: \"MoveToPredefinedPoint\" and \"PickingItem\". \n\nFirst, the robot executes the \"MoveToPredefinedPoint\" behavior, which likely involves linear movement to reach a specific location. Once this movement is completed, the robot proceeds to perform the \"PickingItem\" action, possibly involving adjustments to the tool center point orientation for grasping an item.\n\nIn summary, the behavior tree directs the robot to carry out a series of actions in a predetermined order, enabling it to move to a specified location and execute an item picking task.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"PickingItem\">\n            <Action ID = \"AdjustTCPOrientation\"/>\n    </BehaviorTree>\n    <BehaviorTree ID=\"MoveToPredefinedPoint\">\n            <Action ID = \"LinearMove\"/>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"move from bin A to bin B\">\n            <SubTree ID = \"MoveToPredefinedPoint\"/>\n            <SubTree ID = \"PickingItem\"/>\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is a simple navigation system for a robot. It first computes a path to a specified goal using the global planner and then follows this path using the local planner. The input goal and the computed path are stored in the blackboard for reference. This behavior tree essentially orchestrates the process of navigating the robot from its current position to a specified goal location, ensuring that it follows a viable path generated by the global planner and executes the necessary movements as per the local planner's guidance.",
        "output": "<!--\n  This Behavior Tree does the bare minimum - it invokes ComputePathToPose to\n  compute a path using the global planner. It then invokes the local planner\n  (FollowPath) with this path. The path endpoints (input to the global planner)\n  and the resulting path (output of the global planner and input to the local\n  planner) are passed on the blackboard.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <SequenceStar name=\"root\">\n      <ComputePathToPose goal=\"${goal}\" path=\"${path}\"/>\n      <FollowPath path=\"${path}\"/>\n    </SequenceStar>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to dynamically navigate to a specific location while continuously replanning its path. The robot's movement is controlled at a rate of 1 Hz. It first updates the goal pose based on input and computes a path to the updated goal using a GridBased planner. The computed path is then truncated to a certain distance. After this, the robot follows the truncated path using a specified controller until it reaches the goal or encounters a failure. This behavior allows the robot to adaptively navigate towards a given goal while ensuring continuous path planning and execution.",
        "output": "<!--\n  This Behavior Tree follows a dynamic pose to a certain distance\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n         <TruncatePath distance=\"1.0\" input_path=\"{path}\" output_path=\"{truncated_path}\"/>\n        </Sequence>\n      </RateController>\n      <KeepRunningUntilFailure>\n        <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\"/>\n      </KeepRunningUntilFailure>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's navigation with periodic global path replanning at a frequency of 1 Hz. It consists of a PipelineSequence that includes a RateController and FollowPath nodes. The RateController triggers the ComputePathToPose action, which calculates the path to a specified goal using the GridBased planner at a rate of 1 Hz. The computed path is then fed into the FollowPath node, which controls the robot's movement along the planned path. This setup ensures that the robot continuously updates its global path for efficient and adaptive navigation in dynamic environments.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </RateController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic system's task of approaching an object. The robot is programmed to compute a path to the specified goal using a grid-based planner and then truncate this path to a specific distance. This process is controlled at a rate of 1 Hz. Once the path is computed and truncated, the robot follows the truncated path using a designated controller.\n\nIn summary, the behavior tree orchestrates the steps for the robot to approach an object by computing a path, truncating it, and then following the truncated path using a specific controller.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"ApproachObject\">\n      <RateController hz=\"1.0\">\n        <Sequence>\n          <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          <TruncatePath distance=\"0.45\" input_path=\"{path}\" output_path=\"{truncated_path}\"/>\n        </Sequence>\n      </RateController>\n      <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a robot's decision-making process. The robot continuously performs tasks based on certain conditions and inputs. It starts by clearing the costmap and then switches between different modes based on a task ID received from a kiosk service. These modes include manual driving, setting up various camera modes, reverse mode, movement detection, and QR code processing. Each mode involves specific actions such as interfacing with cameras, printing messages to LED nametags, and delays.\n\nThe tree also includes numerous nodes for various robot functionalities such as path planning, controller selection, distance checking, goal checking, battery status monitoring, recovery behaviors, localization, goal management, speed control, time tracking, and transformation handling.\n\nOverall, the behavior tree orchestrates the robot's behavior by managing its tasks, interactions with external devices, decision-making based on inputs, and ensuring the smooth execution of operations in different scenarios.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <WhileDoElse>\n            <AlwaysSuccess name=\"WhileConditionIsTrue\"/>\n            <Sequence>\n                <Action ID=\"ClearEntireCostmap\" name=\"AskForNewTaskAtKiosk\" service_name=\"/kiosk\"/>\n                <Switch6 case_1=\"Manual \" case_2=\"Normal-Cam\" case_3=\"FLIR-Cam\" case_4=\"Reverse-Mode \" case_5=\"Movement-Detect\" case_6=\"QR Code\" variable=\"{task-id}\">\n                    <Sequence name=\"ManualDrive\">\n                        <AlwaysSuccess/>\n                    </Sequence>\n                    <Sequence name=\"Normal-Cam\">\n                        <Action ID=\"OpenMVInterface\" cam_mode=\"Setup\" cam_port=\"/dev/ttyACM0\"/>\n                        <Action ID=\"PrintToLEDNametag\" msg=\"N-Cam Setup\" serial_port=\"/dev/ttyACM0\"/>\n                    </Sequence>\n                    <Sequence name=\"FLIR-Cam\">\n                        <Action ID=\"OpenMVInterface\" cam_mode=\"Setup\" cam_port=\"/dev/ttyACM1\"/>\n                        <Action ID=\"PrintToLEDNametag\" msg=\"Hello world!\" serial_port=\"/dev/ttyACM0\"/>\n                    </Sequence>\n                    <Sequence name=\"Reverse-Mode\">\n                        <Action ID=\"OpenMVInterface\" cam_mode=\"Setup\" cam_port=\"/dev/ttyACM3\"/>\n                        <Action ID=\"PrintToLEDNametag\" msg=\"Reverse!\" serial_port=\"/dev/ttyACM0\"/>\n                    </Sequence>\n                    <Sequence name=\"Movement-Detect\">\n                        <Action ID=\"OpenMVInterface\" cam_mode=\"Mov_Detect\" cam_port=\"/dev/ttyACM0\"/>\n                        <Action ID=\"PrintToLEDNametag\" msg=\"Move-Detect\" serial_port=\"/dev/ttyACM0\"/>\n                    </Sequence>\n                    <Sequence name=\"QR-Code\">\n                        <AlwaysSuccess/>\n                        <Action ID=\"PrintToLEDNametag\" msg=\"QR Codes\" serial_port=\"/dev/ttyACM0\"/>\n                    </Sequence>\n                    <Delay delay_msec=\"1000\" name=\"DefaultSwitchCase\">\n                        <AlwaysFailure name=\"JustFailForNextLoop\"/>\n                    </Delay>\n                </Switch6>\n            </Sequence>\n        </WhileDoElse>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"BackUp\">\n            <input_port name=\"backup_dist\">Distance to backup</input_port>\n            <input_port name=\"backup_speed\">Speed at which to backup</input_port>\n        </Action>\n        <Action ID=\"ClearEntireCostmap\">\n            <input_port name=\"service_name\">Service name</input_port>\n        </Action>\n        <Action ID=\"ComputePathThroughPoses\">\n            <input_port name=\"goals\">Destinations to plan through</input_port>\n            <output_port name=\"path\">Path created by ComputePathToPose node</output_port>\n            <input_port name=\"planner_id\"/>\n            <input_port name=\"start\">Start pose of the path if overriding current robot pose</input_port>\n        </Action>\n        <Action ID=\"ComputePathToPose\">\n            <input_port name=\"goal\">Destination to plan to</input_port>\n            <output_port name=\"path\">Path created by ComputePathToPose node</output_port>\n            <input_port name=\"planner_id\"/>\n            <input_port name=\"start\">Start pose of the path if overriding current robot pose</input_port>\n        </Action>\n        <Action ID=\"ControllerSelector\">\n            <input_port name=\"default_controller\">Default controller of the controller selector</input_port>\n            <output_port name=\"selected_controller\">Name of the selected controller received from the topic subcription</output_port>\n            <input_port name=\"topic_name\">Name of the topic to receive controller selection commands</input_port>\n        </Action>\n        <Decorator ID=\"DistanceController\">\n            <input_port name=\"distance\">Distance</input_port>\n        </Decorator>\n        <Condition ID=\"DistanceTraveled\">\n            <input_port name=\"distance\">Distance to check if passed</input_port>\n            <input_port name=\"global_frame\">reference frame to check in</input_port>\n            <input_port name=\"robot_base_frame\">Robot frame to check relative to global_frame</input_port>\n        </Condition>\n        <Action ID=\"FollowPath\">\n            <input_port default=\"FollowPath\" name=\"controller_id\"/>\n            <input_port default=\"GoalChecker\" name=\"goal_checker_id\">Goal checker</input_port>\n            <input_port name=\"path\">Path to follow</input_port>\n        </Action>\n        <Action ID=\"GoalCheckerSelector\">\n            <input_port name=\"default_goal_checker\">Default goal checker of the controller selector</input_port>\n            <output_port name=\"selected_goal_checker\">Name of the selected goal checker received from the topic subcription</output_port>\n            <input_port name=\"topic_name\">Name of the topic to receive goal checker selection commands</input_port>\n        </Action>\n        <Condition ID=\"GoalReached\">\n            <input_port name=\"goal\">Destination</input_port>\n        </Condition>\n        <Condition ID=\"GoalUpdated\"/>\n        <Decorator ID=\"GoalUpdater\">\n            <input_port name=\"input_goal\">Original goal in</input_port>\n            <output_port name=\"output_goal\">Output goal set by subscription</output_port>\n        </Decorator>\n        <Condition ID=\"InitialPoseReceived\"/>\n        <Condition ID=\"IsBatteryLow\">\n            <input_port name=\"battery_topic\">Topic for battery info</input_port>\n            <input_port name=\"is_voltage\">Bool if check based on voltage or total %</input_port>\n            <input_port name=\"min_battery\">Min battery % or voltage before triggering</input_port>\n        </Condition>\n        <Condition ID=\"IsStuck\"/>\n        <Action ID=\"NavigateThroughPoses\">\n            <input_port name=\"goals\">Goals</input_port>\n        </Action>\n        <Action ID=\"NavigateToPose\">\n            <input_port name=\"goal\">Goal</input_port>\n        </Action>\n        <Action ID=\"OpenMVInterface\">\n            <input_port default=\"Setup\" name=\"cam_mode\">Function to call from interface</input_port>\n            <input_port default=\"/dev/ttyACM0\" name=\"cam_port\">Serial port for camera</input_port>\n        </Action>\n        <Control ID=\"PipelineSequence\"/>\n        <Action ID=\"PlannerSelector\">\n            <input_port name=\"default_planner\">Default planner of the planner selector</input_port>\n            <output_port name=\"selected_planner\">Name of the selected planner received from the topic subcription</output_port>\n            <input_port name=\"topic_name\">Name of the topic to receive planner selection commands</input_port>\n        </Action>\n        <Action ID=\"PrintToLEDNametag\">\n            <input_port default=\"Hello world!\" name=\"msg\">Type your message.</input_port>\n            <input_port default=\"/dev/ttyACM0\" name=\"serial_port\">Serial Port for the USB device.</input_port>\n        </Action>\n        <Decorator ID=\"RateController\">\n            <input_port name=\"hz\">Rate</input_port>\n        </Decorator>\n        <Control ID=\"RecoveryNode\">\n            <input_port name=\"number_of_retries\">Number of retries</input_port>\n        </Control>\n        <Action ID=\"ReinitializeGlobalLocalization\"/>\n        <Action ID=\"RemovePassedGoals\">\n            <input_port name=\"input_goals\">Input goals to remove if passed</input_port>\n            <output_port name=\"output_goals\">Set of goals after removing any passed</output_port>\n            <input_port name=\"radius\">Radius tolerance on a goal to consider it passed</input_port>\n        </Action>\n        <Control ID=\"RoundRobin\"/>\n        <Decorator ID=\"SingleTrigger\"/>\n        <Decorator ID=\"SpeedController\">\n            <input_port name=\"filter_duration\">Duration (secs) for velocity smoothing filter</input_port>\n            <input_port name=\"max_rate\">Maximum rate</input_port>\n            <input_port name=\"max_speed\">Maximum speed</input_port>\n            <input_port name=\"min_rate\">Minimum rate</input_port>\n            <input_port name=\"min_speed\">Minimum speed</input_port>\n        </Decorator>\n        <Action ID=\"Spin\">\n            <input_port name=\"spin_dist\">Spin distance</input_port>\n        </Action>\n        <Condition ID=\"TimeExpired\">\n            <input_port name=\"seconds\">Time to check if expired</input_port>\n        </Condition>\n        <Condition ID=\"TransformAvailable\">\n            <input_port name=\"child\">Child frame for transform</input_port>\n            <input_port name=\"parent\">Parent frame for transform</input_port>\n        </Condition>\n        <Action ID=\"TruncatePath\">\n            <input_port name=\"distance\">Distance before goal to truncate</input_port>\n            <input_port name=\"input_path\">Path to truncate</input_port>\n            <output_port name=\"output_path\">Truncated path to utilize</output_port>\n        </Action>\n        <Action ID=\"Wait\">\n            <input_port name=\"wait_duration\">Wait time</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is a simple reactive sequence that consists of a condition and an action. The condition, named \"RFConditionExample,\" likely checks for a specific state or situation. Upon the condition being met, the action, named \"RFActionExample,\" is executed. This setup suggests that the system is designed to react to certain conditions by performing specific actions using the YARP (Yet Another Robot Platform) framework. This could be part of a larger robotic system where the robot needs to respond to environmental stimuli or internal states by executing predefined actions.",
        "output": "<?xml version=\"1.0\"?>\n<!--\n Copyright (C) 2020 Fondazione Istituto Italiano di Tecnologia (IIT)\n All Rights Reserved.\n-->\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <ReactiveSequence>\n          <Condition ID=\"YARPCondition\" name=\"RFConditionExample\"/>\n          <Action ID=\"YARPAction\" name=\"RFActionExample\"/>\n        </ReactiveSequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single sequence where the robot is instructed to move towards a specified goal. The goal is provided as an argument when the behavior tree is executed. This indicates that the robot will perform a single movement action to reach the specified goal.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <Move    name=\"move\" goal=\"${arg2}\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single task, \"Recharge\", which is executed within a sequence named \"root_sequence\". This indicates that the robot's main task is to recharge its power. The behavior tree does not contain any additional details or conditions for the recharge task. Therefore, it can be inferred that the primary objective of the robot, as defined by this behavior tree, is to initiate and complete the recharging process.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <Recharge    name=\"recharge\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a robotic system's task of picking, holding, and placing objects. The robot is programmed to perform a sequence of actions based on the state of the environment and the objects it interacts with.\n\nThe main behavior tree \"BehaviorTree\" consists of three main sequences within a fallback structure: \"Back home\", \"Place\", and \"Pick\". Each sequence involves setting blackboard values, performing specific actions such as checking conditions or moving the gripper, and making decisions based on the observed pose of objects.\n\nAdditionally, there are sub-trees for camera object detection (\"CameraObj\"), execution of movement and gripping commands (\"Execution\"), picking an object (\"Pick_subtree\"), and placing an object (\"Place_subtree\"). These sub-trees contain further sequences and actions related to their specific tasks.\n\nOverall, the behavior tree orchestrates the robot's actions in a structured manner, allowing it to pick up, hold, and place objects while adapting its behavior based on the environment and the state of the objects",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback name=\"Pick_hold_place\">\n            <Sequence name=\"Back home\">\n                <Action ID=\"BTIsObjContainer\" tagisobjconin=\"{tagisobjcon}\"/>\n                <SetBlackboard output_key=\"target\" value=\"name;home\"/>\n                <SetBlackboard output_key=\"gripperout\" value=\"open\"/>\n                <SubTree GripperOut=\"gripperout\" ID=\"Execution\" Target=\"target\"/>\n                <SetBlackboard output_key=\"tagishold\" value=\"0\"/>\n                <SetBlackboard output_key=\"tagisobjcon\" value=\"0\"/>\n                <SetBlackboard output_key=\"tagisobjpose\" value=\"0\"/>\n            </Sequence>\n            <Sequence name=\"Place\">\n                <Action ID=\"BTIsHoldObj\" tagisholdin=\"{tagishold}\"/>\n                <Parallel threshold=\"3\">\n                    <SetBlackboard output_key=\"containerpose\" value=\"pose;-0.3;0.4;0.010;0;1;0;0.0002\"/>\n                    <SubTree GripperOut=\"gripperout\" ID=\"Execution\" Target=\"target\"/>\n                    <SubTree ContainerPose=\"containerpose\" GripperOut=\"gripperout\" ID=\"Place_subtree\" TagIsObjCon=\"tagisobjcon\" Target=\"target\"/>\n                </Parallel>\n            </Sequence>\n            <Sequence name=\"Pick\">\n                <Action ID=\"BTIsObjPose\" tagisobjposein=\"{tagisobjpose}\" targetin=\"{observedpose}\" targetout=\"{observedpose}\"/>\n                <Parallel threshold=\"2\">\n                    <SubTree GripperOut=\"gripperout\" ID=\"Execution\" Target=\"target\"/>\n                    <SubTree GripperOut=\"gripperout\" ID=\"Pick_subtree\" ObsObjPose=\"observedpose\" TagIsHold=\"tagishold\" Target=\"target\"/>\n                </Parallel>\n            </Sequence>\n            <Sequence>\n                <Action ID=\"BTCameraFindTarget\" tagisobjposeout=\"{tagisobjpose}\" targetout=\"{observedpose}\"/>\n                <SetBlackboard output_key=\"tagishold\" value=\"0\"/>\n                <SetBlackboard output_key=\"tagisobjcon\" value=\"0\"/>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"CameraObj\">\n        <Sequence>\n            <SetBlackboard output_key=\"TagIsHold\" value=\"0\"/>\n            <SetBlackboard output_key=\"TagIsObjCon\" value=\"0\"/>\n            <Action ID=\"BTCameraFindTarget\" tagisobjposeout=\"{TagIsObjPose}\" targetout=\"{ObservedPose}\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Execution\">\n        <SequenceStar>\n            <Sequence>\n                <Action ID=\"BTWaitForTarget\" targetin=\"{Target}\" targetout=\"{target}\"/>\n                <Action ID=\"BTPathPlanning\" goal=\"{Target}\" makeplan=\"{plan}\"/>\n                <Action ID=\"BTFollowPath\" planedplan=\"{plan}\"/>\n            </Sequence>\n            <Sequence>\n                <Action ID=\"BTCheckGripperCommand\" commandin=\"{GripperOut}\" commandout=\"{grippercom}\"/>\n                <Action ID=\"BTGripperMoveSchunk\" commandin=\"{grippercom}\"/>\n            </Sequence>\n        </SequenceStar>\n    </BehaviorTree>\n    <!-- ////////// x 0.3 y 0.4 z 0.012 x' 0.05-->\n    <BehaviorTree ID=\"Pick_subtree\">\n        <Fallback name=\"pick_fallback\">\n            <Sequence name=\"hold\">\n                <Sequence name=\"went up?\">\n                    <SetBlackboard output_key=\"height\" value=\"0.03\"/>\n                    <Action ID=\"BTCheckCondition\" heightin=\"{height}\" targetin=\"{ObsObjPose}\"/>\n                </Sequence>\n                <SetBlackboard output_key=\"TagIsHold\" value=\"1\"/>\n            </Sequence>\n            <Sequence name=\"go up\">\n                <Sequence name=\"Went down to pick?\">\n                    <SetBlackboard name=\"SetBlackBoard\" output_key=\"height\" value=\"0\"/>\n                    <Action ID=\"BTCheckCondition\" heightin=\"{height}\" targetin=\"{ObsObjPose}\"/>\n                </Sequence>\n                <SetBlackboard output_key=\"height\" value=\"0.03\"/>\n                <Action ID=\"BTCloseToTarget\" height=\"{height}\" targetin=\"{ObsObjPose}\" targetout=\"{Target}\" targettype=\"waypoint\"/>\n                <SetBlackboard output_key=\"gripperin\" value=\"no\"/>\n                <Action ID=\"BTAdvertiseGripperCommand\" commandin=\"{gripperin}\" commandout=\"{GripperOut}\" name=\"keep close\"/>\n            </Sequence>\n            <Sequence name=\"go_down_close\">\n                <Sequence name=\"Went above obj?\">\n                    <SetBlackboard output_key=\"height\" value=\"0.05\"/>\n                    <Action ID=\"BTCheckCondition\" heightin=\"{height}\" targetin=\"{ObsObjPose}\"/>\n                </Sequence>\n                <SetBlackboard output_key=\"height\" value=\"0\"/>\n                <Action ID=\"BTCloseToTarget\" height=\"{height}\" targetin=\"{ObsObjPose}\" targetout=\"{Target}\" targettype=\"waypoint\"/>\n                <SetBlackboard output_key=\"gripperin\" value=\"close\"/>\n                <Action ID=\"BTAdvertiseGripperCommand\" commandin=\"{gripperin}\" commandout=\"{GripperOut}\" name=\"close gripper\"/>\n            </Sequence>\n            <Sequence name=\"go_above\">\n                <SetBlackboard output_key=\"height\" value=\"0.05\"/>\n                <Action ID=\"BTCloseToTarget\" height=\"{height}\" targetin=\"{ObsObjPose}\" targetout=\"{Target}\" targettype=\"waypoint\"/>\n                <SetBlackboard output_key=\"gripperin\" value=\"no\"/>\n                <Action ID=\"BTAdvertiseGripperCommand\" commandin=\"{gripperin}\" commandout=\"{GripperOut}\" name=\"open gripper\"/>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Place_subtree\">\n        <Fallback>\n            <Sequence name=\"Check back\">\n                <Sequence name=\"Placed?\">\n                    <SetBlackboard output_key=\"height\" value=\"0.03\"/>\n                    <Action ID=\"BTCheckCondition\" heightin=\"{height}\" targetin=\"{ContainerPose}\"/>\n                    <SetBlackboard output_key=\"TagIsObjCon\" value=\"1\"/>\n                </Sequence>\n            </Sequence>\n            <Sequence name=\"Go up\">\n                <Sequence>\n                    <SetBlackboard output_key=\"height\" value=\"-0.00\"/>\n                    <Action ID=\"BTCheckCondition\" heightin=\"{height}\" targetin=\"{ContainerPose}\"/>\n                </Sequence>\n                <SetBlackboard output_key=\"height\" value=\"0.03\"/>\n                <Action ID=\"BTCloseToTarget\" height=\"{height}\" targetin=\"{ContainerPose}\" targetout=\"{Target}\" targettype=\"waypoint\"/>\n                <SetBlackboard output_key=\"gripperin\" value=\"no\"/>\n                <Action ID=\"BTAdvertiseGripperCommand\" commandin=\"{gripperin}\" commandout=\"{GripperOut}\"/>\n            </Sequence>\n            <Sequence name=\"Go down into container\">\n                <Sequence>\n                    <SetBlackboard output_key=\"height\" value=\"0.05\"/>\n                    <Action ID=\"BTCheckCondition\" heightin=\"{height}\" targetin=\"{ContainerPose}\"/>\n                </Sequence>\n                <SetBlackboard output_key=\"height\" value=\"-0.0\"/>\n                <Action ID=\"BTCloseToTarget\" height=\"{height}\" targetin=\"{ContainerPose}\" targetout=\"{Target}\" targettype=\"waypoint\"/>\n                <SetBlackboard output_key=\"gripperin\" value=\"open\"/>\n                <Action ID=\"BTAdvertiseGripperCommand\" commandin=\"{gripperin}\" commandout=\"{GripperOut}\"/>\n            </Sequence>\n            <Sequence name=\"Go above container\">\n                <SetBlackboard output_key=\"height\" value=\"0.05\"/>\n                <Action ID=\"BTCloseToTarget\" height=\"{height}\" targetin=\"{ContainerPose}\" targetout=\"{Target}\" targettype=\"waypoint\"/>\n                <SetBlackboard output_key=\"gripperin\" value=\"no\"/>\n                <Action ID=\"BTAdvertiseGripperCommand\" commandin=\"{gripperin}\" commandout=\"{GripperOut}\"/>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Undefined ID=\"\"/>\n        <Action ID=\"BTAdvertiseGripperCommand\">\n            <input_port default=\"{gripperin}\" name=\"commandin\"/>\n            <output_port default=\"{GripperOut}\" name=\"commandout\"/>\n        </Action>\n        <Action ID=\"BTCameraFindTarget\">\n            <output_port default=\"{tagisobjpose}\" name=\"tagisobjposeout\"/>\n            <output_port default=\"{observedpose}\" name=\"targetout\"/>\n        </Action>\n        <Action ID=\"BTCheckCondition\">\n            <input_port default=\"{height}\" name=\"heightin\"/>\n            <input_port default=\"{ObsObjPose}\" name=\"targetin\"/>\n        </Action>\n        <Action ID=\"BTCheckGripperCommand\">\n            <input_port default=\"{GripperOut}\" name=\"commandin\"/>\n            <output_port default=\"{grippercom}\" name=\"commandout\"/>\n        </Action>\n        <Action ID=\"BTCloseToTarget\">\n            <input_port default=\"{height}\" name=\"height\"/>\n            <input_port default=\"{ObsObjPose}\" name=\"targetin\"/>\n            <output_port default=\"{Target}\" name=\"targetout\"/>\n            <input_port default=\"{TargetType}\" name=\"targettype\"/>\n        </Action>\n        <Action ID=\"BTFollowPath\">\n            <input_port default=\"{plan}\" name=\"planedplan\"/>\n        </Action>\n        <Action ID=\"BTGripperMove\">\n            <input_port default=\"{grippercom}\" name=\"commandin\"/>\n        </Action>\n        <Action ID=\"BTIsHoldObj\">\n            <input_port name=\"tagisholdin\"/>\n        </Action>\n        <Action ID=\"BTIsObjContainer\">\n            <input_port default=\"{tagisobjcon}\" name=\"tagisobjconin\"/>\n        </Action>\n        <Action ID=\"BTIsObjPose\">\n            <input_port name=\"tagisobjposein\"/>\n            <input_port name=\"targetin\"/>\n            <output_port name=\"targetout\"/>\n        </Action>\n        <Action ID=\"BTPathPlanning\">\n            <input_port default=\"{Target}\" name=\"goal\"/>\n            <output_port default=\"{plan}\" name=\"makeplan\"/>\n        </Action>\n        <Action ID=\"BTPubFakeHoldObj\"/>\n        <Action ID=\"BTStringToBool\">\n            <output_port name=\"boolout\"/>\n            <input_port name=\"stringin\"/>\n        </Action>\n        <Action ID=\"BTStringtoTarget\">\n            <input_port default=\"{string}\" name=\"string\"/>\n            <input_port default=\"{target}\" name=\"targetout\"/>\n        </Action>\n        <Action ID=\"BTWaitForTarget\">\n            <input_port default=\"{Target}\" name=\"targetin\"/>\n            <output_port default=\"{target}\" name=\"targetout\"/>\n        </Action>\n        <SubTree ID=\"CameraObj\">\n            <output_port default=\"observedpose\" name=\"ObservedPose\"/>\n            <output_port default=\"tagishold\" name=\"TagIsHold\"/>\n            <output_port default=\"tagisobjcon\" name=\"TagIsObjCon\"/>\n        </SubTree>\n        <SubTree ID=\"Execution\">\n            <input_port default=\"gripperout\" name=\"GripperOut\"/>\n            <input_port default=\"target\" name=\"Target\"/>\n        </SubTree>\n        <SubTree ID=\"Pick_subtree\">\n            <output_port default=\"gripperout\" name=\"GripperOut\"/>\n            <input_port default=\"observedpose\" name=\"ObsObjPose\"/>\n            <output_port default=\"tagishold\" name=\"TagIsHold\"/>\n            <output_port default=\"target\" name=\"Target\"/>\n        </SubTree>\n        <SubTree ID=\"Place_subtree\">\n            <input_port default=\"containerpose\" name=\"ContainerPose\"/>\n            <output_port default=\"gripperout\" name=\"GripperOut\"/>\n            <output_port default=\"tagisobjcon\" name=\"TagIsObjCon\"/>\n            <input_port default=\"target\" name=\"Target\"/>\n        </SubTree>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the decision-making process for a character, likely in a game or simulation. The character will first attempt to execute a sequence of actions: obtaining a target, moving towards it, and then attacking if conditions are met. If this sequence fails, the character will resort to a fallback action of making a random move.\n\nThe available actions and conditions include getting a target, attacking a target, moving, making a random move, and sleeping. Additionally, there are conditions related to time (day or night) and the character's gender and hunger status.\n\nOverall, the behavior tree represents the character's prioritized actions, where it tries to perform a series of specific tasks but has a backup plan if the primary tasks cannot be completed.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback>\n            <SequenceStar name=\"Main\">\n                <Action ID=\"GetTarget\"/>\n                <Action ID=\"Move\"/>\n                <Sequence>\n                    <Condition ID=\"TargetAdjacent\"/>\n                    <Action ID=\"AttackTarget\"/>\n                </Sequence>\n            </SequenceStar>\n            <Action ID=\"RandomMove\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AttackTarget\"/>\n        <Action ID=\"GetTarget\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"Sleep\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the movement of a robot by computing a path using the global planner and then running two sub-branches in parallel. The first sub-branch involves following the computed path using the local planner, while the second sub-branch controls the rate at which new paths are computed using the global planner. The goal for the global planner and the resulting path are stored in the blackboard for communication between different parts of the system.\n\nThe RateController node regulates the frequency at which the ComputePathToPose operation is invoked. If the FollowPath operation returns SUCCESS or FAILURE, the parallel node will also return this result due to the threshold set to 1.0. This ensures that the overall task execution reflects the success or failure of the FollowPath operation.\n\nOverall, the behavior tree manages the continuous planning and execution of robot movement, ensuring that it follows the computed paths while allowing for dynamic updates and adjustments based on the environment.",
        "output": "<!--\n  This Behavior Tree first computes a path using the global planner (ComputePathToPose).\n  Then, it runs two sub-branches in parallel. The first sub-branch is a FollowPath\n  operation (the local planner). In parallel, there is a rate controlled execution of\n  FollowPath (the global planner). Each time a new path is computed, the path update\n  is sent to the local planner. The right branch, which is the rate controlled\n  ComputePathToPose, always returns RUNNING. Because the Parallel node uses a\n  threshold of 1, whenever the FollowPath returns SUCCESS or FAILURE, the parallel\n  node will return this result.\n\n  The goal (input to the global planner) and the resulting path (output of the global\n  planner and input to the local planner) are passed on the blackboard.\n\n  The rate at which the ComputePathToPose operation is invoked can be controlled with\n  the hz parameter to the RateController node.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"root\">\n      <RateController hz=\"1.0\">\n        <Fallback>\n          <GoalReached/>\n          <ComputePathToPose goal=\"${goal}\"/>\n        </Fallback>\n      </RateController>\n      <FollowPath path=\"${path}\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to dynamically navigate towards a specific goal pose while handling potential recovery scenarios. The main sequence involves the robot updating its goal, computing a path to the updated goal using a specified planner, and then following the computed path. If the navigation encounters issues, it enters a recovery phase where it attempts various actions such as clearing the costmap, waiting, spinning, and backing up.\n\nThe RecoveryNode allows for a set number of retries before moving on to the next action in case of failure. The ReactiveFallback nodes handle recovery actions when the main sequence encounters problems, ensuring that the robot can recover from unexpected situations during navigation.\n\nOverall, the behavior tree enables the robot to robustly navigate towards its goal while handling potential obstacles or failures along the way.",
        "output": "<!--\n  This Behavior Tree follows a dynamic pose to a certain distance\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"20\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <Sequence>\n            <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n              <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            </GoalUpdater>\n          </Sequence>\n        </RateController>\n        <KeepRunningUntilFailure>\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n        </KeepRunningUntilFailure>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <RoundRobin name=\"RecoveryActions\">\n          <Sequence name=\"ClearingActions\">\n            <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </Sequence>\n          <Wait wait_duration=\"0.2\"/>\n        </RoundRobin>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n\n<!--\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"2.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n         <TruncatePath distance=\"0.0\" input_path=\"{path}\" output_path=\"{truncated_path}\"/>\n        </Sequence>\n      </RateController>\n      <KeepRunningUntilFailure>\n        <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\"/>\n      </KeepRunningUntilFailure>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>-->\n<!--\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ReactiveFallback name=\"ComputePathToPoseRecoveryFallback\">\n              <GoalUpdated/>\n              <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n            </ReactiveFallback>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ReactiveFallback name=\"FollowPathRecoveryFallback\">\n            <GoalUpdated/>\n            <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          </ReactiveFallback>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <RoundRobin name=\"RecoveryActions\">\n          <Sequence name=\"ClearingActions\">\n            <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </Sequence>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n          <BackUp backup_dist=\"0.15\" backup_speed=\"0.025\"/>\n        </RoundRobin>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n-->"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robot that is programmed to patrol through waypoints and recharge itself. The robot will repeat the patrolling and recharging sequence 100 times. During patrolling, it will navigate sequentially through wp_1 to wp_7. If the robot receives a \"recharge\" event or its battery level is low, it will interrupt the patrolling sequence, navigate to the recharge station, and then initiate the recharging process before resuming patrolling.\n\nIn summary, the behavior tree controls the robot's repetitive task of patrolling through waypoints and autonomously managing its energy levels by recharging when necessary.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <Repeat num_cycles=\"100\">\n                <Fallback>\n                    <Sequence name=\"patrolling\">\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_1\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_2\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_3\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_4\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_5\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_6\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_7\"/>\n                    </Sequence>\n                    <Sequence name=\"recharging\">\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"recharge_station\"/>\n                        <Recharge/>\n                    </Sequence>\n                </Fallback>\n            </Repeat>\n        </Sequence>\n     </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's navigation and recovery process. The robot is programmed to navigate towards a specified goal while incorporating recovery behaviors in case of failures. \n\nThe main sequence involves navigating with replanning, where the robot computes a path to the goal using a grid-based planner and then follows the computed path. In case of failures during these processes, recovery mechanisms are initiated. These include clearing the global and local costmaps, spinning to reorient itself, and waiting for a specified duration.\n\nAdditionally, the recovery node has a limited number of retries (6) before it stops attempting to reach the goal. If the recovery actions fail to resolve the issue within this limit, the robot will likely need human intervention or alternative methods to reach its destination.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a sequence of smile actions with varying intensity levels. The robot is programmed to execute the smile actions in a specific order, pausing for 3 seconds between each action. Once all the smile actions have been completed, the sequence restarts from the beginning and continues indefinitely.\n\nIn summary, the behavior tree ensures that the robot continuously performs a series of smiling actions at different intensity levels, creating a repetitive and continuous smiling behavior.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<KeepRunningUntilFailure>\n\t\t\t<Sequence>\n\t\t\t\t<SmileAction level=\"1\" duration_ms=\"2000\" />\n\t\t\t\t<Delay delay_msec=\"3000\">\n\t\t\t\t\t<SmileAction level=\"2\" duration_ms=\"2000\" />\n\t\t\t\t</Delay>\n\t\t\t\t<Delay delay_msec=\"3000\">\n\t\t\t\t\t<SmileAction level=\"3\" duration_ms=\"2000\" />\n\t\t\t\t</Delay>\n\t\t\t\t<Delay delay_msec=\"3000\">\n\t\t\t\t\t<SmileAction level=\"4\" duration_ms=\"2000\" />\n\t\t\t\t</Delay>\n\t\t\t\t<Delay delay_msec=\"3000\">\n\t\t\t\t\t<SmileAction level=\"0\" duration_ms=\"2000\" />\n\t\t\t\t</Delay>\n\t\t\t\t<Delay delay_msec=\"3000\">\n\t\t\t\t\t<SmileAction level=\"3\" duration_ms=\"2000\" />\n\t\t\t\t</Delay>\n\t\t\t</Sequence>\n\t\t</KeepRunningUntilFailure>\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the task for a robot. Initially, it disables pose detection and tracking actions. Then, it repeats a sequence three times. Within each repetition, the robot performs a text-to-speech action to announce the start of a spin cycle. Following this, it executes a reactive sequence: if no person is detected, the robot spins 360 degrees at a velocity of 0.5. This process is repeated for a total of three cycles.\n\nOverall, the behavior tree sets up a scenario where the robot will perform a spinning action unless a person is detected, in which case it will not execute the spinning action.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n  \t\t<PoseDetectionControlAction enable=\"false\" />\n\t\t\t<TrackAction mode=\"none\" rate=\"none\" />\n\t\t\t<Repeat num_cycles=\"3\">\n\t\t\t\t<Sequence>\n\t\t\t\t\t<TextToSpeechActionClient msg=\"Starting spin cycle\" />\n\t\t\t\t\t<ReactiveSequence>\n\t\t\t\t\t\t<Inverter>\n\t\t\t\t\t\t\t<ObjectDetectionAction class=\"person\" pose=\"detected_Pose\" />\n\t\t\t\t\t\t</Inverter>\n\t\t\t\t\t\t<RobotSpin angle=\"360\" velocity=\"0.5\" />\n\t\t\t\t\t</ReactiveSequence>\n\t\t\t\t</Sequence>\n\t\t\t</Repeat>\n\t\t</Sequence>\n\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a continuous process where a system monitors for the presence of a person. Initially, it sets the \"person_detected\" value to 0 and then enters a loop that repeats indefinitely.\n\nWithin this loop, it employs a fallback mechanism. If the \"person_detected\" value is not equal to 0, it executes a sequence involving checking the status of an object tracker. If the tracker indicates the presence of a person for at least 2 seconds, it updates the \"person_detected\" value to 1 and triggers a speech output indicating detection. \n\nConversely, if the tracker does not detect a person for at least 4 seconds, the \"person_detected\" value is set to 0 and a message indicating non-detection is spoken.\n\nThis behavior tree essentially creates a perpetual monitoring system that responds to the presence or absence of a person as indicated by the object tracker.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n\t\t\t<SetBlackboard output_key=\"person_detected\" value=\"0\" />\n\n\t\t\t<Repeat num_cycles=\"99999\">\n\t\t\t\t<Fallback>\n\t\t\t\t\t<BlackboardCheckInt value_A=\"{person_detected}\" value_B=\"0\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t<ObjectTrackerStatusAction ck_state=\"1\" min_duration=\"2\" />\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"person_detected\" value=\"1\" />\n\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Detected\" />\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t</BlackboardCheckInt>\n\n\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t<ObjectTrackerStatusAction ck_state=\"0\" min_duration=\"4\" />\n\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"person_detected\" value=\"0\" />\n\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Not Detected\" />\n\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t</ForceSuccess>\n\t\t\t\t</Fallback>\n\t\t\t</Repeat>\n\t\t</Sequence>\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a system that periodically replans its global path at a frequency of 1 Hz. It consists of a sequence where, at each iteration, the system either checks if the goal has been reached or computes a new path to a specified pose. This decision-making process occurs within a rate controller set at 1 Hz. Once this decision is made, the system follows the computed path. This behavior allows the system to continuously update and adapt its path based on changing conditions or goals.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"root\">\n      <RateController hz=\"1.0\">\n        <Fallback>\n          <GoalReached/>\n          <ComputePathToPose goal=\"${goal}\"/>\n        </Fallback>\n      </RateController>\n      <FollowPath path=\"${path}\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through a series of waypoints. It follows a reactive fallback approach, ensuring that all goals are achieved before moving on to the next one. The robot will continuously attempt to reach the next goal until it fails or until all goals are achieved. Upon reaching each waypoint, it sets a blackboard value to indicate that the goal has been achieved.\n\nOverall, the behavior tree orchestrates the navigation of the robot through a set of given waypoints using the NavigateToPose action and ensures that all goals are successfully reached before proceeding to the next one.",
        "output": "\n<!--\n  This Behavior Tree processes each of the given waypoints with NavigateToPose.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <ReactiveFallback name=\"FollowTargets\">\n      <AllGoalsAchieved goal_achieved=\"{goal_achieved}\"/>\n      <KeepRunningUntilFailure>\n        <ReactiveSequence>\n          <GetNextGoal goals=\"{goals}\" goal=\"{goal}\" goal_achieved=\"{goal_achieved}\"/>\n          <NavigateToPose goal=\"{goal}\"/>\n          <SetBlackboard output_key=\"goal_achieved\" value=\"true\"/>\n        </ReactiveSequence>\n      </KeepRunningUntilFailure>\n    </ReactiveFallback>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robot. Initially, it checks the battery component and if it needs recharging, it navigates to a recharge station and initiates the recharge process. If the battery is not in need of recharging, the robot enters a patrolling mode where it sequentially navigates through multiple waypoints (wp_1 to wp_7).\n\nIn summary, the behavior tree ensures that the robot's battery level is maintained by recharging when necessary and then sets the robot to patrol through a series of waypoints. If the battery requires recharging, it prioritizes this over the patrolling task.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <Fallback>\n                <Action ID=\"CheckComponent\" component=\"battery\"/>\n                <Sequence name=\"recharging\">\n                    <Action ID=\"NavigateToWp\" goal=\"recharge_station\" name=\"navigate_to_wp\"/>\n                    <Action ID=\"Recharge\"/>\n                </Sequence>\n            </Fallback>\n            <SequenceStar name=\"patrolling\">\n                <Action ID=\"NavigateToWp\" goal=\"wp_1\" name=\"navigate_to_wp\"/>\n                <Action ID=\"NavigateToWp\" goal=\"wp_2\" name=\"navigate_to_wp\"/>\n                <Action ID=\"NavigateToWp\" goal=\"wp_3\" name=\"navigate_to_wp\"/>\n                <Action ID=\"NavigateToWp\" goal=\"wp_4\" name=\"navigate_to_wp\"/>\n                <Action ID=\"NavigateToWp\" goal=\"wp_5\" name=\"navigate_to_wp\"/>\n                <Action ID=\"NavigateToWp\" goal=\"wp_6\" name=\"navigate_to_wp\"/>\n                <Action ID=\"NavigateToWp\" goal=\"wp_7\" name=\"navigate_to_wp\"/>\n            </SequenceStar>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CheckComponent\">\n            <input_port name=\"component\"/>\n        </Action>\n        <Action ID=\"NavigateToWp\">\n            <input_port name=\"goal\"/>\n        </Action>\n        <Action ID=\"Recharge\"/>\n        <Action ID=\"Reconfigure\">\n            <input_port name=\"mode\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a system to perform a sequence of actions. It starts by saying \"Start thinking...\" and then proceeds to determine what to say next. Once it has determined the answer, it says the answer out loud.\n\nIn this scenario, the system first initiates by vocalizing \"Start thinking...\". Subsequently, it engages in a process to determine the content of its response. Finally, it verbalizes the derived answer.\n\nThis behavior tree essentially represents a decision-making process where the system formulates a response after contemplating a given input or situation.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"SaySomething\" message=\"Start thinking...\"/>\n            <Action ID=\"ThinkWhatToSay\" text=\"{the_answer}\"/>\n            <Action ID=\"SaySomething\" message=\"{the_answer}\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"SaySomething\">\n            <input_port default=\"&quot;Start thinking...&quot;\" name=\"message\"/>\n        </Action>\n        <Action ID=\"ThinkWhatToSay\">\n            <output_port default=\"{the_answer}\" name=\"text\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions for a robot. Initially, it sets the velocity and distance parameters, then instructs the robot to move forward using these parameters. Subsequently, it vocalizes the result in Portuguese, waits for 5 seconds, and then completes the sequence.\n\nAdditionally, the XML includes a list of available actions and conditions that can be used within the behavior tree. These include tasks such as arm movement, battery checking, debugging, face detection, gaze control, feedback giving, navigation, pose manipulation, scoring, speech synthesis, time-based actions, and more.\n\nOverall, the behavior tree orchestrates a series of robotic actions, including movement, communication, and timing, while also providing an extensive library of available actions and conditions for further customization and expansion of the robot's capabilities.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <SetBlackboard output_key=\"velocity\" value=\"0.5\"/>\n            <SetBlackboard output_key=\"distance\" value=\"1.0\"/>\n            <Action ID=\"GeneralActionlib\" action_name=\"move_forward\" constants=\"5\" result=\"result\" variables=\"velocity, distance\"/>\n            <Action ID=\"Speak\" action_name=\"gcloud_tts\" language=\"pt_PT\" utterance=\"{result}\" voice=\"pt-PT-Wavenet-D\"/>\n            <Action ID=\"WaitForXSeconds\" result=\"SUCCESS\" seconds=\"5\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\"/>\n            <input_port name=\"action_name\"/>\n        </Action>\n        <Action ID=\"CheckBattery\">\n            <output_port name=\"battery_state\" type=\"int\"/>\n            <output_port name=\"percentage\" type=\"double\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port name=\"charging_state\" type=\"int\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Action ID=\"DebugAction\">\n            <input_port name=\"string\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"Destroy\"/>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"GeneralActionlib\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"constants\">A coma separated list of constants.</input_port>\n            <output_port name=\"result\">This is a string</output_port>\n            <input_port name=\"variables\">A coma separated list of variables.</input_port>\n        </Action>\n        <Action ID=\"GetFloat64\">\n            <output_port name=\"number\" type=\"double\"/>\n            <input_port name=\"topic\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"GetInt16\">\n            <output_port name=\"number\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GetPoseArray\">\n            <input_port name=\"pose_array\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GiveFeedback\">\n            <input_port default=\"850\" name=\"almost_thr\"/>\n            <input_port name=\"correct_blocks\"/>\n            <input_port name=\"incorrect_blocks\"/>\n            <input_port default=\"0\" name=\"personality\"/>\n            <input_port name=\"score\"/>\n        </Action>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"goal_pose\"/>\n        </Action>\n        <Action ID=\"MoveTorso\">\n            <input_port name=\"angle\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"ResetVars\"/>\n        <Action ID=\"SelectBlock\">\n            <input_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <output_port name=\"block_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <input_port name=\"position_in_list\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"SelectFieldFromPoseStamped\">\n            <input_port name=\"field\"/>\n            <output_port name=\"output_val\"/>\n            <input_port name=\"pose_stamped\"/>\n        </Action>\n        <Action ID=\"SelectPose\">\n            <input_port name=\"pose_array\"/>\n            <input_port name=\"pose_stamped\"/>\n            <input_port name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"SenseScore\">\n            <output_port name=\"score\"/>\n            <input_port name=\"score_topic\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"language\"/>\n            <input_port name=\"utterance\"/>\n            <input_port name=\"voice\"/>\n        </Action>\n        <Action ID=\"TimerAction\">\n            <input_port name=\"s_between_success\">Time (s) before this node returns SUCCESS. It will return FAILURE in the meanwhile</input_port>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port default=\"SUCCESS\" name=\"result\">Result after specified time: SUCCESS or FAILURE</input_port>\n            <input_port default=\"5\" name=\"seconds\">Time in seconds</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an environment with periodic global path replanning at 1 Hz and includes recovery actions. The robot uses a recovery node with a maximum of 6 retries, which contains a pipeline sequence for navigating with replanning. Within this sequence, the rate controller ensures the frequency of path computation and clearing the global costmap. It also includes a recovery node for following the path and clearing the local costmap.\n\nIn case of failure, the recovery fallback activates reactive recovery actions such as clearing the local and global costmaps, spinning, and waiting. These actions aim to recover from navigation issues caused by dynamic changes in the environment or unexpected events.\n\nOverall, the behavior tree enables the robot to continuously navigate while handling potential failures and environmental changes through periodic replanning and reactive recovery actions.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate with periodic global path replanning at a frequency of 1 Hz. The robot's movement is controlled by a sequence of actions within the \"NavigateWithReplanning\" pipeline. This includes speed control, path computation using a grid-based planner, and following the computed path using a specified controller.\n\nThe speed controller regulates the robot's speed within defined limits and filters the speed changes over a duration of 0.3 seconds. The path is computed to a specific goal pose using the \"GridBased\" planner, and the resulting path is then followed by the robot using the designated path-following controller.\n\nOverall, the behavior tree orchestrates the robot's navigation process, ensuring that it continuously updates its global path while controlling its speed and movement along the planned trajectory.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <SpeedController min_rate=\"0.1\" max_rate=\"1.0\" min_speed=\"0.0\" max_speed=\"0.26\" filter_duration=\"0.3\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </SpeedController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a decision-making process for a robot navigating through doors and windows. The \"MainTree\" sequence first attempts to pass through an open door, if the door is open. If the door is closed, it executes the \"DoorClosed\" behavior, which repeatedly attempts to open the door before passing through it. If both these attempts fail, the robot will resort to passing through a window. After this, the robot closes the door behind itself.\n\nIn summary, the behavior tree orchestrates the robot's actions as it navigates through obstacles in its environment, prioritizing passing through an open door, then attempting to open a closed door, and finally passing through a window as a last resort.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"DoorClosed\">\n        <Sequence name=\"door_closed_sequence\">\n            <Inverter>\n                <Condition ID=\"IsDoorOpen\"/>\n            </Inverter>\n            <RetryUntilSuccesful num_attempts=\"4\">\n                <Action ID=\"OpenDoor\"/>\n            </RetryUntilSuccesful>\n            <Action ID=\"PassThroughDoor\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <Sequence>\n                <Fallback name=\"root_Fallback\">\n                    <Sequence name=\"door_open_sequence\">\n                        <Condition ID=\"IsDoorOpen\"/>\n                        <Action ID=\"PassThroughDoor\"/>\n                    </Sequence>\n                    <SubTree ID=\"DoorClosed\"/>\n                    <Action ID=\"PassThroughWindow\"/>\n                </Fallback>\n                <Action ID=\"CloseDoor\"/>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CloseDoor\"/>\n        <SubTree ID=\"DoorClosed\"/>\n        <Condition ID=\"IsDoorOpen\"/>\n        <Action ID=\"OpenDoor\"/>\n        <Action ID=\"PassThroughDoor\"/>\n        <Action ID=\"PassThroughWindow\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a task for a robot to repeatedly move towards three different goals (Goal_a, Goal_b, Goal_c) in a sequence. The robot is programmed to execute this sequence three times. For each cycle of the sequence, the robot sets the values for the three goals and then moves towards each goal sequentially using the \"MoveRobot\" behavior tree. After reaching each goal, the robot takes a snapshot using the SnapshotClient.\n\nIn summary, the behavior tree orchestrates the robot's movement by setting goals and navigating towards them in a specific order, repeating this process for a total of three cycles.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"3\">\n            <Sequence>\n                <SetBlackboard output_key=\"Goal_a\" value=\"-0.579;-1.341;0.0;1.0\" />\n                <SetBlackboard output_key=\"Goal_b\" value=\"5.214;-1.533;0.0;1.0\" />\n                <SetBlackboard output_key=\"Goal_c\" value=\"-1.588;1.253;0.0;1.0\" />\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                    <SnapshotClient/>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                    <SnapshotClient/>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                    <SnapshotClient/>\n                </Sequence>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a sequence of three actions: go1, go2, and go3. However, the execution of go2 is forced to fail using the ForceFailure node. This means that when the behavior tree is executed, it will first perform action go1, then attempt to perform go2 but intentionally fail, and finally execute action go3 regardless of the failure of go2.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"go1\"/>\n            <ForceFailure>\n                <Action ID=\"go2\"/>\n            </ForceFailure>\n            <Action ID=\"go3\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions for a system. It first attempts to execute \"go1\", and if that fails, it will proceed with \"go2\". If both \"go1\" and \"go2\" fail, the system will perform \"go2\". The available actions include \"alwaysTrue\", \"dumpRun\", \"go1\", \"go2\", \"go3\", \"goClosestR\", \"guardAiMovement\", \"isFull\", \"mineResource\", and \"waitFrames\".\n\nIn summary, the behavior tree outlines a prioritized set of actions for the system to follow, where it tries to execute \"go1\" first, then \"go2\" if needed. If both fail, it defaults to \"go2\".",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Fallback>\n                <Sequence>\n                    <Action ID=\"go1\"/>\n                </Sequence>\n            </Fallback>\n            <Action ID=\"go2\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"alwaysTrue\"/>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"goClosestR\"/>\n        <Action ID=\"guardAiMovement\"/>\n        <Action ID=\"isFull\"/>\n        <Action ID=\"mineResource\"/>\n        <Action ID=\"waitFrames\">\n            <input_port name=\"_in_0\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is a simple dialogue system where a character is programmed to say something, think about what to say, and then speak the thought. The character also has an additional action to say something else and then repeat the previous message. This behavior tree essentially simulates a conversational agent that initiates a conversation by saying \"start thinking...\", thinks about a response, speaks the response, says an additional message, and then repeats the response.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <SaySomething     message=\"start thinking...\" />\n            <ThinkWhatToSay   text=\"{the_answer}\"/>\n            <SaySomething     message=\"{the_answer}\" />\n            <SaySomething2    message=\"SaySomething2 works too...\" />\n            <SaySomething2    message=\"{the_answer}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's task of finding and fetching a bottle. The robot first attempts to find the room where the bottle is located, and if it knows the room, it goes there; otherwise, it follows a human for guidance. After reaching the room, it searches for the bottle and then fetches it. If at any point the robot encounters difficulty, it will ask for help.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n\n  <BehaviorTree ID=\"MainTree\">\n    <Fallback name = \"root\">\n      <Sequence name=\"find_and_fetch\">\n        <Fallback name = \"pippo\">\n          <Sequence name = \"pluto\">\n            <Condition ID=\"Room_known\" />\n            <Action ID=\"Go_to_room\" />\n          </Sequence>\n          <Action ID=\"Follow_human\" />\n        </Fallback>\n        <Action ID=\"Find_bottle\" />\n        <Action ID=\"Fetch_bottle\" />\n      </Sequence>\n      <Action ID=\"Ask_for_help\" />\n    </Fallback>\n  </BehaviorTree>\n\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions to be executed. The first action \"addObjOut\" takes two input values (1 and 2), performs an addition operation, and stores the result in a variable named \"foo\". The second action \"add\" also performs an addition operation with inputs 3 and 4, but it does not store the result in a variable.\n\nAdditionally, the XML includes a section \"TreeNodesModel\" that specifies the input and output ports for each action.\n\nOverall, this behavior tree represents a simple computational process where specific operations are performed on given inputs, and in one case, the result is stored in a variable for potential future use.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"addObjOut\" _in_0=\"1\" _in_1=\"2\" out=\"${foo}\"/>\n            <Action ID=\"add\" _in_0=\"3\" _in_1=\"4\" _out_0=\"not a var\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"add\">\n            <input_port name=\"_in_0\"/>\n            <input_port name=\"_in_1\"/>\n            <output_port name=\"_out_0\"/>\n        </Action>\n        <Action ID=\"addObjOut\">\n            <input_port name=\"_in_0\"/>\n            <input_port name=\"_in_1\"/>\n            <output_port name=\"out\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is complex and involves multiple nested control flow nodes such as Fallback, Sequence, Parallel, IfThenElse, ManualSelector, Switch, WhileDoElse, Timeout, Inverter, RetryUntilSuccessful, and more. It also includes various decorators like AlwaysFailure, AlwaysSuccess, ForceFailure, ForceSuccess, KeepRunningUntilFailure.\n\nOverall, the behavior tree seems to be designed for decision-making and control of an autonomous system or agent. It likely handles a range of tasks including navigation, obstacle avoidance, and possibly interacting with its environment based on certain conditions and blackboard values.\n\nDue to the complexity and depth of the tree, it's evident that the system it controls needs to exhibit sophisticated and adaptive behavior, potentially in a dynamic and uncertain environment. The tree appears to support robust error handling, retries, and continuous monitoring of blackboard values to make decisions and execute actions.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Parallel threshold=\"\">\n            <ReactiveFallback>\n                <AlwaysFailure/>\n                <AlwaysSuccess/>\n                <SetBlackboard output_key=\"\" value=\"\"/>\n            </ReactiveFallback>\n            <ReactiveSequence>\n                <IfThenElse>\n                    <ManualSelector repeat_last_selection=\"0\">\n                        <Fallback>\n                            <Parallel threshold=\"\">\n                                <Sequence>\n                                    <SequenceStar>\n                                        <Switch2 case_1=\"\" case_2=\"\" variable=\"\">\n                                            <Switch3 case_1=\"\" case_2=\"\" case_3=\"\" variable=\"\">\n                                                <AlwaysFailure/>\n                                            </Switch3>\n                                        </Switch2>\n                                    </SequenceStar>\n                                </Sequence>\n                            </Parallel>\n                            <Switch4 case_1=\"\" case_2=\"\" case_3=\"\" case_4=\"\" variable=\"\">\n                                <Switch5 case_1=\"\" case_2=\"\" case_3=\"\" case_4=\"\" case_5=\"\" variable=\"\">\n                                    <Switch6 case_1=\"\" case_2=\"\" case_3=\"\" case_4=\"\" case_5=\"\" case_6=\"\" variable=\"\">\n                                        <WhileDoElse>\n                                            <Sequence>\n                                                <BlackboardCheckDouble return_on_mismatch=\"\" value_A=\"\" value_B=\"\">\n                                                    <ForceFailure>\n                                                        <Repeat num_cycles=\"\">\n                                                            <Timeout msec=\"\">\n                                                                <AlwaysSuccess/>\n                                                            </Timeout>\n                                                        </Repeat>\n                                                    </ForceFailure>\n                                                </BlackboardCheckDouble>\n                                                <BlackboardCheckInt return_on_mismatch=\"\" value_A=\"\" value_B=\"\">\n                                                    <ForceSuccess>\n                                                        <KeepRunningUntilFailure>\n                                                            <AlwaysSuccess/>\n                                                        </KeepRunningUntilFailure>\n                                                    </ForceSuccess>\n                                                </BlackboardCheckInt>\n                                                <BlackboardCheckString return_on_mismatch=\"\" value_A=\"\" value_B=\"\">\n                                                    <Inverter>\n                                                        <RetryUntilSuccesful num_attempts=\"\">\n                                                            <AlwaysFailure/>\n                                                        </RetryUntilSuccesful>\n                                                    </Inverter>\n                                                </BlackboardCheckString>\n                                            </Sequence>\n                                        </WhileDoElse>\n                                    </Switch6>\n                                </Switch5>\n                            </Switch4>\n                        </Fallback>\n                    </ManualSelector>\n                </IfThenElse>\n            </ReactiveSequence>\n        </Parallel>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel/>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's task. It begins by checking the laser sensor, and if it detects an obstacle, it will execute a sequence of moving backward for 3 seconds and then turning for 4 seconds. If no obstacle is detected, it will simply move forward. This behavior tree essentially guides the robot to navigate its environment by avoiding obstacles using the laser sensor and executing specific movements based on the sensor readings.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence>\n      <Fallback ID=\"Fallback\">\n        <CheckLaser name=\"check_laser\"/>\n        <Sequence>\n          <Backward name=\"backward\" duration=\"3\"/>\n          <Turn name=\"turn\" duration=\"4\"/>\n        </Sequence>\n      </Fallback>\n      <Forward name=\"forward\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the automated cleaning and preparation of a coffee machine. It first checks if the cleaning process is finished and there is enough water. If not, it initiates the cleaning process, ensuring the water tank is filled and placed correctly. Following this, it verifies the status of the Marro tank, empties it if necessary, and ensures it is placed in the coffee machine. Once the cleaning process is completed, it proceeds to open the coffee machine, initiate the cleaning cycle, place a coffee cup, select the desired coffee type, and add milk and sugar if required. The tree includes timeouts for various actions and retries until successful attempts for certain conditions.\n\nOverall, the behavior tree automates the sequence of steps required for cleaning and preparing the coffee machine, ensuring that all necessary components are in place and the machine is ready for use.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"AutoClean\">\n        <Fallback>\n            <Condition ID=\"IsCleanProcessFinished\"/>\n            <Fallback>\n                <Condition ID=\"IsThereEnoughWater\"/>\n                <Sequence>\n                    <Timeout msec=\"120000\">\n                        <Condition ID=\"IsWaterTankRemoved\"/>\n                    </Timeout>\n                    <Fallback>\n                        <Timeout msec=\"120000\">\n                            <Condition ID=\"IsWaterTankFull\"/>\n                        </Timeout>\n                        <Action ID=\"FillWaterTank\"/>\n                    </Fallback>\n                    <Timeout msec=\"120000\">\n                        <Condition ID=\"IsWaterTankPlacedInCoffeeMachine\"/>\n                    </Timeout>\n                    <Timeout msec=\"120000\">\n                        <Condition ID=\"IsCleanProcessFinished\"/>\n                    </Timeout>\n                </Sequence>\n            </Fallback>\n            <Fallback>\n                <Inverter>\n                    <Condition ID=\"IsMarroTankFull\"/>\n                </Inverter>\n                <Sequence>\n                    <Timeout msec=\"120000\">\n                        <Condition ID=\"IsMarroTankRemoved\"/>\n                    </Timeout>\n                    <Fallback>\n                        <Timeout msec=\"120000\">\n                            <Condition ID=\"IsMarroTankEmpty\"/>\n                        </Timeout>\n                        <Action ID=\"EmptyMarroTank\"/>\n                    </Fallback>\n                    <RetryUntilSuccesful num_attempts=\"15\">\n                        <Condition ID=\"IsMarroTankPlacedInCoffeeMachine\"/>\n                    </RetryUntilSuccesful>\n                    <Timeout msec=\"120000\">\n                        <Condition ID=\"IsCleanProcessFinished\"/>\n                    </Timeout>\n                </Sequence>\n            </Fallback>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <SubTree ID=\"OpenCoffeeMachine\" __shared_blackboard=\"false\"/>\n            <SubTree ID=\"AutoClean\" __shared_blackboard=\"false\"/>\n            <SubTree ID=\"PutCoffeeCup\" __shared_blackboard=\"false\"/>\n            <SubTree ID=\"CoffeeType\" __shared_blackboard=\"false\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"CoffeeType\">\n        <Sequence>\n            <Fallback>\n                <Timeout msec=\"120000\">\n                    <Condition ID=\"IsDesiredCoffeeSelected\"/>\n                </Timeout>\n                <Action ID=\"PressDesiredCoffee\"/>\n            </Fallback>\n            <Timeout msec=\"120000\">\n                <Condition ID=\"IsCoffeeFinished\"/>\n            </Timeout>\n            <Timeout msec=\"120000\">\n                <Condition ID=\"HasCupOfCoffeeBeenRemoved\"/>\n            </Timeout>\n            <Timeout msec=\"120000\">\n                <Fallback>\n                    <Condition ID=\"HasHumanAddedCleaningCup\"/>\n                    <Sequence>\n                        <Action ID=\"PlaceCleanCup\"/>\n                        <Action ID=\"SwitchOffCoffeeMachine\"/>\n                    </Sequence>\n                </Fallback>\n            </Timeout>\n            <Timeout msec=\"120000\">\n                <Fallback name=\"arallel\">\n                    <Timeout msec=\"600000\">\n                        <Condition ID=\"HasHumanAddedMilk\"/>\n                    </Timeout>\n                    <Fallback>\n                        <Inverter>\n                            <Condition ID=\"IsMilkDesired\"/>\n                        </Inverter>\n                        <Action ID=\"AddMilkToCoffee\"/>\n                    </Fallback>\n                </Fallback>\n            </Timeout>\n            <Timeout msec=\"120000\">\n                <Fallback>\n                    <Timeout msec=\"600000\">\n                        <Condition ID=\"HasHumanAddedSugar\"/>\n                    </Timeout>\n                    <Fallback>\n                        <Inverter>\n                            <Condition ID=\"IsSugarDesired\"/>\n                        </Inverter>\n                        <Action ID=\"AddSugarToCoffee\"/>\n                    </Fallback>\n                </Fallback>\n            </Timeout>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"OpenCoffeeMachine\">\n        <Fallback>\n            <Condition ID=\"IsMachineOpen\"/>\n            <Sequence>\n                <RetryUntilSuccesful num_attempts=\"10\">\n                    <Condition ID=\"IsCleanCupReady\"/>\n                </RetryUntilSuccesful>\n                <Fallback>\n                    <Timeout msec=\"60000\">\n                        <Condition ID=\"IsMachineOpen\"/>\n                    </Timeout>\n                    <Action ID=\"SwitchOnCoffeeMachine\"/>\n                </Fallback>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"PutCoffeeCup\">\n        <Fallback>\n            <Timeout msec=\"120000\">\n                <Condition ID=\"IsCoffeeCupReady\"/>\n            </Timeout>\n            <Action ID=\"PlaceCoffeeCup\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AddMilkToCoffee\"/>\n        <Action ID=\"AddSugarToCoffee\"/>\n        <SubTree ID=\"AutoClean\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n        </SubTree>\n        <SubTree ID=\"CoffeeType\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n        </SubTree>\n        <Action ID=\"EmptyMarroTank\"/>\n        <Action ID=\"FillWaterTank\"/>\n        <Condition ID=\"HasCupOfCoffeeBeenRemoved\"/>\n        <Condition ID=\"HasHumanAddedCleaningCup\"/>\n        <Condition ID=\"HasHumanAddedMilk\"/>\n        <Condition ID=\"HasHumanAddedSugar\"/>\n        <Condition ID=\"IsCleanCupReady\"/>\n        <Condition ID=\"IsCleanProcessFinished\"/>\n        <Condition ID=\"IsCoffeeCupReady\"/>\n        <Condition ID=\"IsCoffeeFinished\"/>\n        <Condition ID=\"IsDesiredCoffeeSelected\"/>\n        <Condition ID=\"IsMachineOpen\"/>\n        <Condition ID=\"IsMarroTankEmpty\"/>\n        <Condition ID=\"IsMarroTankFull\"/>\n        <Condition ID=\"IsMarroTankPlacedInCoffeeMachine\"/>\n        <Condition ID=\"IsMarroTankRemoved\"/>\n        <Condition ID=\"IsMilkDesired\"/>\n        <Condition ID=\"IsSugarDesired\"/>\n        <Condition ID=\"IsThereEnoughWater\"/>\n        <Condition ID=\"IsWaterTankFull\"/>\n        <Condition ID=\"IsWaterTankPlacedInCoffeeMachine\"/>\n        <Condition ID=\"IsWaterTankRemoved\"/>\n        <SubTree ID=\"OpenCoffeeMachine\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n        </SubTree>\n        <Action ID=\"PlaceCleanCup\"/>\n        <Action ID=\"PlaceCoffeeCup\"/>\n        <Action ID=\"PressDesiredCoffee\"/>\n        <SubTree ID=\"PutCoffeeCup\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n        </SubTree>\n        <Action ID=\"SwitchOffCoffeeMachine\"/>\n        <Action ID=\"SwitchOnCoffeeMachine\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's path planning and execution. It begins by computing a path using the global planner, then runs two sub-branches in parallel. The first sub-branch involves executing the local planner to follow the computed path, while the second sub-branch controls the rate at which the global planner computes new paths. The goal for the global planner and the resulting path are stored in the blackboard.\n\nThe rate at which the global planner is invoked can be adjusted using the hz parameter. If the FollowPath operation returns SUCCESS or FAILURE, the parallel node will return this result. Additionally, the ComputePathToPose operation always returns RUNNING, ensuring continuous path computation.\n\nOverall, the behavior tree manages the coordination of path planning and execution, allowing the robot to continuously update its path based on the environment and progress towards its goal.",
        "output": "<!--\n  This Behavior Tree first computes a path using the global planner (ComputePathToPose).\n  Then, it runs two sub-branches in parallel. The first sub-branch is a FollowPath\n  operation (the local planner). In parallel, there is a rate controlled execution of\n  FollowPath (the global planner). Each time a new path is computed, the path update\n  is sent to the local planner. The right branch, which is the rate controlled\n  ComputePathToPose, always returns RUNNING. Because the Parallel node uses a\n  threshold of 1, whenever the FollowPath returns SUCCESS or FAILURE, the parallel\n  node will return this result.\n\n  The goal (input to the global planner) and the resulting path (output of the global\n  planner and input to the local planner) are passed on the blackboard.\n\n  The rate at which the ComputePathToPose operation is invoked can be controlled with\n  the hz parameter to the RateController node.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"root\">\n      <RateController hz=\"1.0\">\n        <Fallback>\n          <GoalReached/>\n          <ComputePathToPose goal=\"${goal}\"/>\n        </Fallback>\n      </RateController>\n      <FollowPath path=\"${path}\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic pick-and-place task. The robot is programmed to execute a sequence of actions to pick up a block from one location and place it at another. \n\nFirst, the robot moves its joints to a start position. Then, it performs the \"Pick_Block\" sequence, which involves setting the hover position and orientation for picking the block, moving to the pick block hover pose, opening the gripper, setting the grip position and orientation, closing the gripper, and finally moving to the gripped block hover pose.\n\nAfter successfully picking the block, the robot executes the \"Place_Block\" sequence. This includes setting the hover position and orientation for placing the block, moving to the place block hover pose, setting the release position and orientation, opening the gripper to release the block, and moving to the released block hover pose.\n\nThe behavior tree defines specific actions such as moving joints, moving to a pose, and setting the gripper, with associated input parameters for each action.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Pick_and_Place\">\n            <Action ID=\"MoveJoints\" commands=\"0.1 -1.49998 -1.18997 1.94002 0.67 1.03001 -0.5\" name=\"Move_To_Start_Position\"/>\n            <Sequence name=\"Pick_Block\">\n                <SetBlackboard name=\"IK_Pick_Block_Hover_Position\" output_key=\"pick_hove_position\" value=\"0.7 0.158 0.021\"/>\n                <SetBlackboard name=\"IK_Pick_Block_Hover_Orientation\" output_key=\"pick_hove_orientation\" value=\"-0.02496 0.99965 0.00738 0.00486\"/>\n                <Action ID=\"MoveToPose\" name=\"Move_To_Pick_Block_Hovre_Pose\" position=\"{pick_hove_position}\" orientation=\"{pick_hove_orientation}\"/>\n                <Action ID=\"SetGripper\" name=\"Open_Gripper\" command=\"open\"/>\n                <SetBlackboard name=\"IK_Pick_Block_Grip_Position\" output_key=\"pick_gripper_position\" value=\"0.7 0.158 -0.129\"/>\n                <SetBlackboard name=\"IK_Pick_Block_Grip_Orientation\" output_key=\"pick_gripper_orientation\" value=\"-0.02496 0.99965 0.00738 0.00486\"/>\n                <Action ID=\"MoveToPose\" name=\"Move_To_Pick_Block_Grip_Pose\" position=\"{pick_gripper_position}\" orientation=\"{pick_gripper_orientation}\"/>\n                <Action ID=\"SetGripper\" name=\"Close_Gripper\" position=\"70\"/>\n                <Action ID=\"MoveToPose\" name=\"Move_To_Gripped_Block_Hover_Pose\" position=\"0.7 0.158 -0.021\" orientation=\"-0.02496 0.99965 0.00738 0.00486\"/>\n            </Sequence>\n            <Sequence name=\"Place_Block\">\n                <SetBlackboard name=\"IK_Place_Block_Hover_Position\" output_key=\"place_hover_position\" value=\"0.75 -0.05 -0.021\"/>\n                <SetBlackboard name=\"IK_Place_Block_Hover_Orientation\" output_key=\"place_hover_orientation\" value=\"-0.02496 0.99965 0.00738 0.00486\"/>\n                <Action ID=\"MoveToPose\" name=\"Move_To_Place_Block_Hove_Pose\" position=\"{place_hover_position}\" orientation=\"{place_hover_orientation}\"/>\n                <SetBlackboard name=\"IK_Place_Block_Release_Pose\" output_key=\"place_release_position\" value=\"0.75 -0.05 -0.129\"/>\n                <SetBlackboard name=\"IK_Place_Block_Release_Pose\" output_key=\"place_release_orientation\" value=\"-0.02496 0.99965 0.00738 0.00486\"/>\n                <Action ID=\"MoveToPose\" name=\"Move_To_Place_Block_Grip_Pose\" position=\"{place_release_position}\" orientation=\"{place_release_orientation}\"/>\n                <Action ID=\"SetGripper\" name=\"Open_Gripper\" command=\"open\"/>\n                <Action ID=\"MoveToPose\" name=\"Move_To_Relased_Block_Hove_Pose\" position=\"0.75 -0.05 -0.021\" orientation=\"-0.02496 0.99965 0.00738 0.00486\"/>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"MoveJoints\">\n            <input_port default=\"0 0 0 0 0 0 0\" name=\"commands\">position of each joint</input_port>\n        </Action>\n        <Action ID=\"MoveToPose\">\n            <input_port default=\"0 0 0\" name=\"position\">IK position</input_port>/>\n            <input_port default=\"0 0 0 1\" name=\"orientation\">IK orientation</input_port>/>\n        </Action>\n        <Action ID=\"SetGripper\">\n            <input_port default=\"0.0\" name=\"position\">position of the gripper</input_port>\n            <input_port default=\"open\" name=\"command\">open or close gripper</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a complex series of actions for a robotic system, specifically for a depalletizing demo involving two robots (arm and Aubo). The sequence involves setting the speed for both robots, adding collision objects to their environments, initializing the robots, and then executing a repeated process of depalletizing.\n\nDuring the depalletizing process, the robot senses the pose of an object, plans its pick and place poses, executes various motions including picking, placing, and suctioning, and finally adds a box back to the environment. This entire process is repeated 100 times.\n\nThe tree utilizes various predefined actions such as setting speeds, adding collision objects, planning motions, executing group poses, and sensing object poses. These actions are orchestrated in a specific sequence to achieve the overall task of depalletizing.\n\nOverall, the behavior tree coordinates the intricate steps required for the depalletizing demo, ensuring that the robots perform the necessary actions accurately and efficiently.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Robot-Aubo Depalletizing Demo\">\n            <Sequence name=\"set speed for robots\">\n                <Action ID=\"ExecuteGroupSpeed\" group_name=\"arm\" name=\"set robot speed\" service_name=\"robot/execute_group_speed\" value=\"1.0\"/>\n                <Action ID=\"ExecuteGroupSpeed\" group_name=\"aubo\" name=\"set aubo speed\" service_name=\"aubo/execute_group_speed\" value=\"0.5\"/>\n            </Sequence>\n            <Sequence name=\"add collisions for Robot\">\n                <Action ID=\"ExecuteAddPlane\" group_name=\"arm\" name=\"Add groud to scene\" plane_name=\"ground\" plane_normal=\"0 0 1\" plane_pose=\"0 0 0 0 0 0 1\" service_name=\"robot/execute_add_plane\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"left_wall\" box_pose=\"2.76 1.2 1.35 0 0 0 1\" box_size=\"5.5 0.001 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"Add left wall\" service_name=\"robot/execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"right_wall\" box_pose=\"2.76 -1.2 1.35 0 0 0 1\" box_size=\"5.5 0.001 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"Add right wall\" service_name=\"robot/execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"top_wall\" box_pose=\"2.5 0 2.7 0 0 0 1\" box_size=\"5 2.4 0.001\" group_name=\"arm\" is_absolute=\"1\" name=\"Add top wall\" service_name=\"robot/execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"conveyor\" box_pose=\"-1.341 0 0.4 0 0 0 1\" box_size=\"2.56 1.26 0.8\" group_name=\"arm\" is_absolute=\"1\" name=\"Add conveyor\" service_name=\"robot/execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"0\" box_name=\"boxsur\" box_pose=\"0.881 0 1.35 0 0 0 1\" box_size=\"0.001 2.4 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"box_surface\" service_name=\"robot/execute_add_box\"/>\n            </Sequence>\n            <Sequence name=\"add collisions for Aubo\">\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"conveyor\" box_pose=\"-0.49 0 -0.4 0 0 0 1\" box_size=\"2.56 1.26 0.8\" group_name=\"aubo\" is_absolute=\"1\" name=\"Add conveyor\" service_name=\"aubo/execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"top_wall\" box_pose=\"0 0 1.9 0 0 0 1\" box_size=\"2 2.4 0.001\" group_name=\"aubo\" is_absolute=\"1\" name=\"Add top wall\" service_name=\"aubo/execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"left_wall\" box_pose=\"0 -1.2 0.55 0 0 0 1\" box_size=\"2 0.001 2.7\" group_name=\"aubo\" is_absolute=\"1\" name=\"Add left wall\" service_name=\"aubo/execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"right_wall\" box_pose=\"0 1.2 0.55 0 0 0 1\" box_size=\"2 0.001 2.7\" group_name=\"aubo\" is_absolute=\"1\" name=\"Add right wall\" service_name=\"aubo/execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"Robot_back\" box_pose=\"0.85 0 0.55 0 0 0 1\" box_size=\"0.001 0.15 2.7\" group_name=\"aubo\" is_absolute=\"1\" name=\"Add Robot back\" service_name=\"aubo/execute_add_box\"/>\n            </Sequence>\n            <Sequence name=\"initialize robots\">\n                <Action ID=\"ExecuteGroupNamedStates\" group_name=\"aubo\" name=\"aubo initial state\" service_name=\"aubo/execute_group_named_states\" state_name=\"A\"/>\n                <Action ID=\"ExecuteGroupNamedStates\" group_name=\"arm\" name=\"robot initial state\" service_name=\"robot/execute_group_named_states\" state_name=\"left_pre\"/>\n            </Sequence>\n            <Repeat num_cycles=\"100\">\n                <Sequence name=\"Depalletizing Proccess\">\n                    <Action ID=\"SenseObjectPose\" category=\"\" pose=\"{box_surface_pose}\" service_name=\"sense_object_pose\"/>\n                    <Action ID=\"ExecutePlanning\" category=\"\" pick_pose=\"{pick_pose}\" place_pose=\"{place_pose}\" pose=\"{box_surface_pose}\" post_middle_pose=\"{post_middle_pose}\" post_pick_pose=\"{post_pick_pose}\" post_pick_pose_edge=\"{post_pick_pose_edge}\" pre_middle_pose=\"{pre_middle_pose}\" pre_pick_pose=\"{pre_pick_pose}\" service_name=\"execute_planning\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"{pre_middle_pose}\" group_name=\"arm\" name=\"pre middle\" service_name=\"robot/execute_group_joint_states\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteRemoveObject\" is_exact=\"1\" name=\"remove boxes_surface\" obj_name=\"boxsur\" service_name=\"robot/execute_remove_object\"/>\n                    <Action ID=\"ConnectWaypoints\" connected_waypoints=\"{pick_motion}\" name=\"pick motion\" service_name=\"connect_waypoints\" waypoint1=\"{pre_pick_pose}\" waypoint2=\"{pick_pose}\" waypoint3=\"\" waypoint4=\"\" waypoint5=\"\"/>\n                    <Action ID=\"ExecuteGroupManyPoses\" constraint=\"\" eef_step=\"0.1\" goal_type=\"0\" goals=\"{pick_motion}\" group_name=\"arm\" name=\"pre pick and pick\" service_name=\"robot/execute_group_many_poses\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteSuction\" enable=\"1\" service_name=\"execute_suction\"/>\n                    <Action ID=\"ConnectWaypoints\" connected_waypoints=\"{pull_out}\" name=\"pull out\" service_name=\"connect_waypoints\" waypoint1=\"{post_pick_pose}\" waypoint2=\"{post_pick_pose_edge}\" waypoint3=\"\" waypoint4=\"\" waypoint5=\"\"/>\n                    <Action ID=\"ExecuteGroupManyPoses\" constraint=\"\" eef_step=\"0.1\" goal_type=\"0\" goals=\"{pull_out}\" group_name=\"arm\" name=\"post pick\" service_name=\"robot/execute_group_many_poses\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"{post_middle_pose}\" group_name=\"arm\" name=\"post middle\" service_name=\"robot/execute_group_joint_states\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"{place_pose}\" group_name=\"arm\" name=\"place\" service_name=\"robot/execute_group_joint_states\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteSuction\" enable=\"0\" service_name=\"execute_suction\"/>\n                    <Action ID=\"ExecuteAddBox\" auto_subfix=\"0\" box_name=\"boxsur\" box_pose=\"0.881 0 1.35 0 0 0 1\" box_size=\"0.001 2.4 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"box_surface\" service_name=\"robot/execute_add_box\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"{pre_middle_pose}\" group_name=\"arm\" name=\"back to pre middle\" service_name=\"robot/execute_group_joint_states\" tolerance=\"0.01\"/>\n                </Sequence>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ConnectWaypoints\">\n            <output_port name=\"connected_waypoints\">PoseArray</output_port>\n            <input_port default=\"connect_waypoints\" name=\"service_name\"/>\n            <input_port name=\"waypoint1\">Pose</input_port>\n            <input_port name=\"waypoint2\">Pose</input_port>\n            <input_port name=\"waypoint3\">Pose</input_port>\n            <input_port name=\"waypoint4\">Pose</input_port>\n            <input_port name=\"waypoint5\">Pose</input_port>\n        </Action>\n        <Action ID=\"ExecuteAddBox\">\n            <input_port default=\"1\" name=\"auto_subfix\"/>\n            <input_port default=\"box\" name=\"box_name\"/>\n            <input_port default=\"{place_pose}\" name=\"box_pose\"/>\n            <input_port default=\"0.2 0.2 0.2\" name=\"box_size\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"1\" name=\"is_absolute\"/>\n            <input_port default=\"robot/execute_add_box\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteAddPlane\">\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"ground\" name=\"plane_name\"/>\n            <input_port default=\"0 0 1\" name=\"plane_normal\"/>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"plane_pose\">Pose</input_port>\n            <input_port default=\"robot/execute_add_plane\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteAttachBox\">\n            <input_port name=\"box_name\"/>\n            <input_port name=\"box_pose\"/>\n            <input_port name=\"box_size\"/>\n            <input_port default=\"gripper\" name=\"eef_group_name\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"robot/execute_attach_box\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteDetachObject\">\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port name=\"obj_name\"/>\n            <input_port default=\"robot/execute_detach_object\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupAngularJointStates\">\n            <input_port default=\"0 0 0 0 0 0 0\" name=\"goal\"/>\n            <input_port default=\"panda_arm\" name=\"group_name\"/>\n            <input_port default=\"robot/execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupLinearJointStates\">\n            <input_port default=\"0.04 0.04\" name=\"goal\"/>\n            <input_port default=\"hand\" name=\"group_name\"/>\n            <input_port default=\"robot/execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupManyPoses\">\n            <input_port name=\"constraint\">If 'r', 'p', or 'y' is given, the eef_frame should not rotate about itself along x-, y-, or z-axis. You can combine them like 'rp', 'ry', 'py', and 'rpy'. Default ''</input_port>\n            <input_port default=\"0.1\" name=\"eef_step\"/>\n            <input_port default=\"0\" name=\"goal_type\">0: Pose wrt the global base frame (robot base); 1: Pose wrt the base frame transferred to current eef base position; 2: pose wrt the eef frame</input_port>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goals\">Goals for each waypoint to reach, seperate with ; </input_port>\n            <input_port default=\"arm\" name=\"group_name\">The group providing the reference frame</input_port>\n            <input_port default=\"robot/execute_group_many_poses\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupNamedStates\">\n            <input_port default=\"aubo\" name=\"group_name\">The group providing the reference frame</input_port>\n            <input_port default=\"aubo/execute_group_named_states\" name=\"service_name\"/>\n            <input_port default=\"A\" name=\"state_name\">A: Camera to up left; B: Camera to up right; C: Camera to bottom left; D: Camera to bottom right</input_port>\n        </Action>\n        <Action ID=\"ExecuteGroupPose\">\n            <input_port name=\"constraint\">If 'r', 'p', or 'y' is given, the eef_frame should not rotate about itself along x-, y-, or z-axis. You can combine them like 'rp', 'ry', 'py', and 'rpy'. Default ''</input_port>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goal\"/>\n            <input_port default=\"0\" name=\"goal_type\">0: Pose wrt the global base frame (robot base); 1: Pose wrt the base frame transferred to current eef base position; 2: pose wrt the eef frame</input_port>\n            <input_port default=\"arm\" name=\"group_name\">The group providing the reference frame</input_port>\n            <input_port default=\"robot/execute_group_pose\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupShift\">\n            <input_port default=\"z\" name=\"axis\">Could be x y z roll pitch yaw</input_port>\n            <input_port default=\"0\" name=\"goal\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"robot/execute_group_shift\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupSpeed\">\n            <input_port default=\"arm\" name=\"group_name\">The group providing the reference frame</input_port>\n            <input_port default=\"robot/execute_group_speed\" name=\"service_name\"/>\n            <input_port default=\"0.5\" name=\"value\">The velocity scaling factor, Allowed values are in (0,1]</input_port>\n        </Action>\n        <Action ID=\"ExecutePlanning\">\n            <input_port name=\"category\">0 for large box, 1 for small box</input_port>\n            <output_port default=\"{pick_pose}\" name=\"pick_pose\">Pose</output_port>\n            <output_port default=\"{place_pose}\" name=\"place_pose\">Double Array</output_port>\n            <input_port default=\"{box_surface_pose}\" name=\"pose\">Pose</input_port>\n            <output_port default=\"{post_middle_pose}\" name=\"post_middle_pose\">Double Array</output_port>\n            <output_port default=\"{post_pick_pose}\" name=\"post_pick_pose\">Pose</output_port>\n            <output_port default=\"{post_pick_pose_edge}\" name=\"post_pick_pose_edge\">Pose</output_port>\n            <output_port default=\"{pre_middle_pose}\" name=\"pre_middle_pose\">Double Array</output_port>\n            <output_port default=\"{pre_pick_pose}\" name=\"pre_pick_pose\">Pose</output_port>\n            <input_port default=\"execute_planning\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteRemoveObject\">\n            <input_port default=\"1\" name=\"is_exact\"/>\n            <input_port name=\"obj_name\"/>\n            <input_port default=\"robot/execute_remove_object\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteSuction\">\n            <input_port default=\"0\" name=\"enable\"/>\n            <input_port default=\"execute_suction\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"FetchDetectedInfo\">\n            <output_port name=\"category\">String, 0 for large box, 1 for small box</output_port>\n            <output_port name=\"pose\">Pose</output_port>\n            <input_port default=\"fetch_detected_info\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"SenseObjectPose\">\n            <output_port name=\"category\">String, 0 for large box, 1 for small box</output_port>\n            <output_port name=\"pose\">Pose</output_port>\n            <input_port default=\"sense_object_pose\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"StoreDetectedInfo\">\n            <input_port name=\"category\">String, 0 for large box, 1 for small box</input_port>\n            <input_port name=\"pose\">Pose</input_port>\n            <input_port default=\"store_detected_info\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"TypeInPose\">\n            <output_port name=\"pose_on_blackboard\">Pose on blackboard</output_port>\n            <input_port default=\"type_in_pose\" name=\"service_name\"/>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"type_in_pose\">Pose to be typed in</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot's navigation system. It periodically replans the global path at 1 Hz and includes recovery actions in case of failures. The sequence of operations includes adjusting various parameters related to the robot's navigation, such as setting the footprint size, adjusting speed and goal tolerances, modifying path weights, and configuring the inflation radius.\n\nThe main loop involves computing a path to a specific goal, navigating with replanning, and executing recovery actions if needed. The recovery actions include clearing the global and local costmaps and waiting for a specified duration.\n\nAdditionally, it checks people's status frequently and avoids individuals not in the queue while navigating. It also updates the path based on the current environment and follows the updated path using a controller. If any of these processes fail, recovery actions are initiated to ensure smooth navigation.\n\nOverall, this behavior tree aims to maintain robust and adaptive navigation for the robot, ensuring safe and efficient movement in dynamic environments.",
        "output": "<!--\n Copyright (c) 2020  Carnegie Mellon University\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n-->\n\n<!--\n    This Behavior Tree replans the global path periodically at 1 Hz and it also has\n    recovery actions.\n-->\n\n<root main_tree_to_execute=\"QueueTree\">\n  <BehaviorTree ID=\"QueueTree\">\n    <RestoreConfig node_name=\"/footprint_publisher\">\n      <RestoreConfig node_name=\"/controller_server\">\n\t<RestoreConfig node_name=\"/global_costmap/global_costmap\">\n\t  <Sequence>\n\t    <!-- set the footprint as smallest -->\n\t    <ChangeParam node_name=\"/footprint_publisher\"\n\t\t\t param_name=\"footprint_mode\"\n\t\t\t param_value=\"1\"  name=\"ChangeParamFootprintToSmall\"/>\n\t    \n\t    <ChangeParam node_name=\"/controller_server\"\n\t\t\t param_name=\"FollowPath.max_vel_x\"\n\t\t\t param_value=\"0.5\"  name=\"ChangeParamSpeedDown\"/>\n\t    \n\t    <ChangeParam node_name=\"/controller_server\"\n\t\t\t param_name=\"cabot_goal_checker.xy_goal_tolerance\"\n\t\t\t param_value=\"0.20\"  name=\"ChangeParamFollowPathXyGoalTolerance\"/>\n\t    <ChangeParam node_name=\"/controller_server\"\n\t\t\t param_name=\"cabot_goal_checker.yaw_goal_tolerance\"\n\t\t\t param_value=\"0.20\"  name=\"ChangeParamFollowPathYawGoalTolerance\"/>\n\t    \n\t    <ChangeParam node_name=\"/global_costmap/global_costmap\"\n\t\t\t param_name=\"navcog_path_layer.walk_weight\"\n\t\t\t param_value=\"[0.3, 0.0, 0.3] \"  name=\"ChangeParamWalkWeightToCenter\"/>\n\t    <!-- 1: use adjust mode to use actual center of the corridor based on costmap\n\t\t 0: use navcog path as the ceter of the corridor -->\n\t    <ChangeParam node_name=\"/global_costmap/global_costmap\"\n\t\t\t param_name=\"navcog_path_layer.path_mode\"\n\t\t\t param_value=\"0\"  name=\"ChangeParamToAdjust\"/>\n\t    <ChangeParam node_name=\"/global_costmap/global_costmap\"\n\t\t\t param_name=\"navcog_path_layer.path_adjusted_center\"\n\t\t\t param_value=\"0.0\"  name=\"ChangeParamPathAdjustedCenter\"/>\n\n\t    <ChangeParam node_name=\"/global_costmap/global_costmap\"\n\t\t\t param_name=\"inflation_layer.inflation_radius\"\n\t\t\t param_value=\"0.2\"  name=\"ChangeParamInflationRadius\"/>\n\t    \n\t    <!-- compute a path -->\n\t    <RecoveryNode number_of_retries=\"999999999\" name=\"InitialComputePathRepeat\">\n\t      <Sequence name=\"ComputePathSequence\">\n\t\t<!-- clear costmap -->\n\t\t<!--\n\t\t<ClearCostmapAroundRobot name=\"ClearCostmapAroundRobot\" server_timeout=\"5000\"\n\t\t\t\t\t service_name=\"global_costmap/clear_around_global_costmap\"\n\t\t\t\t\t window_size_x=\"20\" window_size_y=\"20\"/>\n\t\t-->\n\t\t<ClearEntireCostmap name=\"ClearGlobalCostmap-context\" server_timeout=\"5000\"\n\t\t\t\t    service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n\t\t\n\t\t<!-- wait long enough to include neighbor obstacles -->\n\t\t<WaitFloat wait_duration_float=\"0.5\"/>\n\t\t<ComputePathToPose goal=\"{goal}\" path=\"{path_temp}\" planner_id=\"GridBased\"/>\n\t\t<CheckPath  path=\"{path_temp}\" path_topic=\"/path\" plan_topic=\"/plan\" path_out=\"{path}\" />\n\t\t<!-- front vibration -->\n\t\t<!--\n\t\t<PublishTopicInt8 topic=\"/cabot/notification\" value=\"5\" />\n\t\t-->\n\t      </Sequence>\n\t      <ForceSuccess>\n\t\t<WaitFloat wait_duration_float=\"0.5\"/>\n\t      </ForceSuccess>\n\t    </RecoveryNode>\n\t    \n\t    <!-- main loop -->\n\t    <RecoveryNode number_of_retries=\"999999999\" name=\"NavigateRecovery\">\n\t      <!-- navigation -->\n\t      <PipelineSequence name=\"NavigateWithReplanning\">\n\t\t<!-- Check people status frequently -->\n\t\t<!-- find people needs to be avoided not in queue -->\n\t\t<!--\n\t\t<RateController hz=\"2\" name=\"AvoidPeople\">\n\t\t  <Fallback name=\"AvoidPersonFallback\">\n\t\t    <Sequence name=\"AvoidPerson\">\n\t\t      <PeopleExist people_topic=\"people\" people_out=\"{people}\"/>\n\t\t      <NeedToAvoid people=\"{people}\" robot_frame=\"base_footprint\" path=\"{path}\" avoid=\"{people_avoid}\"/>\n\t\t      <SomeoneNotInQueue queue_topic=\"queue_people_py/queue\" people=\"{people_avoid}\" people_out_not_queue=\"{people_avoid_not_queue}\"/>\n\t\t      <IgnorePeople people=\"{people_avoid_not_queue}\" ignore_topic=\"ignore\" wait_duration=\"0.5\"/>\n\t\t      <ComputePathToPose goal=\"{goal}\" path=\"{path_temp}\" planner_id=\"GridBased\"/>\n\t\t      <CheckPath current=\"{path}\" path=\"{path_temp}\" path_topic=\"/path\" plan_topic=\"/plan\" path_out=\"{path}\" />\n\t\t      <Wait wait_duration=\"5\"/>\n\t\t    </Sequence>\n\t\t    <AlwaysSuccess/>\n\t\t  </Fallback>\n\t\t</RateController>\n\t\t-->\n\t\t<RateController hz=\"2.0\" name=\"UpdatePath\">\n\t\t  <RecoveryNode number_of_retries=\"1\" name=\"UpdatePathRecovery\">\n\t\t    <Sequence>\n\t\t      <ClearEntireCostmap name=\"UpdatePathClearGlobalCostmap-context\" server_timeout=\"5000\"\n\t\t\t\t\t  service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n\t\t      <WaitFloat wait_duration_float=\"0.5\"/>\n\t\t      <ComputePathToPose goal=\"{goal}\" path=\"{path_temp}\" planner_id=\"GridBased\"/>\n\t\t      <CheckPath  path=\"{path_temp}\" path_topic=\"/path\" plan_topic=\"/plan\" path_out=\"{path}\" />\n\t\t    </Sequence>\n\t\t    <ForceSuccess>\n\t\t      <WaitFloat wait_duration_float=\"0.5\"/>\n\t\t    </ForceSuccess>\n\t\t  </RecoveryNode>\n\t\t</RateController>\n\t\t\n\t\t<!-- follow path -->\n\t\t<RecoveryNode number_of_retries=\"1\" name=\"FollowPathRecovery\">\n\t\t  <FollowPath path=\"{path}\" controller_id=\"FollowPath\" />\n\t\t  <AlwaysSuccess/>\n\t\t</RecoveryNode>\n\t      </PipelineSequence>\n\t      \n\t      <!-- recovery -->\n\t      <SequenceStar name=\"RecoveryActions\">\n\t\t<ClearEntireCostmap name=\"Recovery-ClearGlobalCostmap-context\" server_timeout=\"5000\"\n                                    service_name=\"/global_costmap/clear_entirely_global_costmap\"/>\n\t\t<ClearEntireCostmap name=\"Recovery-ClearLocalCostmap-Context\" server_timeout=\"5000\"\n\t\t\t\t    service_name=\"/local_costmap/clear_entirely_local_costmap\"/>\n\t\t<Wait wait_duration=\"1.0\"/>\n\t      </SequenceStar>\n\t    </RecoveryNode>\n\t  </Sequence>\n\t</RestoreConfig>\n      </RestoreConfig>\n    </RestoreConfig>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for a robot. The robot is programmed to perform a series of actions based on certain conditions and events. \n\nInitially, it attempts to execute a sequence of tasks in a specific order. If it encounters an obstacle or failure during any task, it will move to the next available action. The robot first checks if the room is known, then proceeds to go to the room if known, otherwise follows a human. Subsequently, it tries to find a bottle and fetch it. If all these actions fail, the robot resorts to asking for help.\n\nIn summary, the behavior tree outlines the robot's hierarchical decision-making process, where it attempts various actions in a structured manner, with fallback options in case of failure or unmet conditions.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!--------------------------------------->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Root>\n            <Fallback name=\"FB1\">\n                <Sequence name=\"S1\">\n                    <Fallback name=\"FB2\">\n                        <Sequence name=\"S3\">\n                            <Condition ID=\"Room_known\"/>\n                            <Action ID=\"Go_to_room\"/>\n                        </Sequence>\n                        <Action ID=\"Follow_human\"/>\n                    </Fallback>\n                    <Action ID=\"Find_bottle\"/>\n                    <Action ID=\"Fetch_bottle\"/>\n                </Sequence>\n                <Action ID=\"Ask_for_help\"/>\n            </Fallback>\n        </Root>\n    </BehaviorTree>\n    <!--------------------------------------->\n    <TreeNodesModel>\n        <Action ID=\"Ask_for_help\"/>\n        <Action ID=\"Fetch_bottle\"/>\n        <Action ID=\"Find_bottle\"/>\n        <Action ID=\"Follow_human\"/>\n        <Action ID=\"Go_to_kitchen\"/>\n        <Action ID=\"Go_to_room\"/>\n        <Condition ID=\"Room_known\"/>\n    </TreeNodesModel>\n    <!--------------------------------------->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the decision-making process for a robot tasked with interacting with a ball and a bin. The robot follows a sequence of actions, attempting to find and interact with the ball and the bin in a specific order. It first attempts to find the ball, then approaches it if it's close enough, grasps it once it's found, finds the bin, approaches the bin, and finally places the ball in the bin. If at any point the robot is unable to complete an action, it will ask for help.\n\nThis behavior tree reflects a hierarchical decision-making process where the robot prioritizes finding and interacting with the ball before moving on to the bin. If any step fails, it resorts to asking for assistance.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!--  -----------------------------------  -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback name=\"Fallback1\">\n            <Sequence>\n                <Fallback name=\"Fallback2\">\n                    <Condition ID=\"BallFound\"/>\n                    <Action ID=\"FindBall\"/>\n                </Fallback>\n                <Fallback name=\"Fallback3\">\n                    <Condition ID=\"BallClose\" thd=\"10\"/>\n                    <Action ID=\"ApproachBall\"/>\n                </Fallback>\n                <Fallback name=\"Fallback4\">\n                    <Condition ID=\"BallGrasped\"/>\n                    <Action ID=\"GraspBall\"/>\n                </Fallback>\n                <Fallback name=\"Fallback5\">\n                    <Condition ID=\"BinFound\"/>\n                    <Action ID=\"FindBin\"/>\n                </Fallback>\n                <Fallback name=\"Fallback6\">\n                    <Condition ID=\"BinClose\"/>\n                    <Action ID=\"ApproachBin\"/>\n                </Fallback>\n                <Fallback name=\"Fallback7\">\n                    <Condition ID=\"BallPlaced\"/>\n                    <Action ID=\"PlaceBall\"/>\n                </Fallback>\n            </Sequence>\n            <Action ID=\"AskForHelp\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  -----------------------------------  -->\n    <TreeNodesModel>\n        <Action ID=\"ApproachBall\"/>\n        <Action ID=\"ApproachBin\"/>\n        <Action ID=\"AskForHelp\"/>\n        <Condition ID=\"BallClose\"/>\n        <Condition ID=\"BallFound\"/>\n        <Condition ID=\"BallGrasped\"/>\n        <Condition ID=\"BallPlaced\"/>\n        <Condition ID=\"BinClose\"/>\n        <Condition ID=\"BinFound\"/>\n        <Action ID=\"FindBall\"/>\n        <Action ID=\"FindBin\"/>\n        <Action ID=\"GraspBall\"/>\n        <Action ID=\"PlaceBall\"/>\n    </TreeNodesModel>\n    <!--  -----------------------------------  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate while periodically replanning its global path at a frequency of 1 Hz. The robot's movement is controlled by a pipeline sequence that includes a speed controller and a path following component. The speed controller regulates the robot's speed within specified limits and filters the speed changes over a duration. The ComputePathToPose node calculates the path to a given goal using a planner identified as \"GridBased\". This path is then followed by the robot using the FollowPath component. Overall, the behavior tree ensures that the robot navigates towards its goal while continuously updating its global path to adapt to changing environments or obstacles.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <SpeedController min_rate=\"0.1\" max_rate=\"1.0\" min_speed=\"0.0\" max_speed=\"0.26\" filter_duration=\"0.3\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </SpeedController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's active policy for going home based on its battery level. If the \"IsGoHomeOkConditionNode\" indicates that it is not okay to go home, the robot will perform the \"GoHomeMockNode\" action, indicating the need to go home. However, if the condition allows, the robot will proceed with the go-home action, which is yet to be implemented as indicated by the comment.\n\nOverall, the behavior tree serves as a decision-making structure for the robot's go-home policy, ensuring that it responds appropriately based on the battery level and the readiness to return home.",
        "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<root main_tree_to_execute = \"ActiveGoHomePolicy\">\n    <BehaviorTree ID=\"ActiveGoHomePolicy\">\n        <ReactiveSequence name=\"ActiveBatteryPolicy_ReactiveSequence\">\n            <Inverter>\n                <IsGoHomeOkConditionNode name=\"Is GoHome OK ConditionNode\"/>\n            </Inverter>\n            <Action ID=\"GoHomeMockNode\" message=\"Need to go home!!\"/>\n            <!-- todo: Implement GoHomeActionNode -->\n        </ReactiveSequence>\n    </BehaviorTree>\n\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to execute a sequence of actions with specific conditions and behaviors. It starts with a fallback node that contains a reactive fallback, which in turn has an always-failure node inside it. Following this, there is a sequence star containing a retry until successful node with a blackboard check string condition. Then, there is an inverter node that encompasses a force failure node, within which there is a force success node setting a value on the blackboard. Finally, there is a reactive sequence with an action \"Pippo\" as its child node.\n\nOverall, the behavior tree seems to be focused on handling various types of conditions and executing a specific action based on those conditions, such as setting values on the blackboard and performing the \"Pippo\" action within the defined sequence.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Fallback>\n                <ReactiveFallback>\n                    <Repeat num_cycles=\"1\">\n                        <AlwaysFailure/>\n                    </Repeat>\n                </ReactiveFallback>\n            </Fallback>\n            <SequenceStar name=\"DoSequenceStar\">\n                <RetryUntilSuccesful num_attempts=\"1\">\n                    <BlackboardCheckString value_A=\"\" return_on_mismatch=\"\" value_B=\"\">\n                        <AlwaysSuccess/>\n                    </BlackboardCheckString>\n                </RetryUntilSuccesful>\n            </SequenceStar>\n            <Inverter>\n                <ForceFailure>\n                    <ForceSuccess>\n                        <SetBlackboard value=\"value\" output_key=\"\"/>\n                    </ForceSuccess>\n                </ForceFailure>\n            </Inverter>\n            <ReactiveSequence>\n                <Action ID=\"Pippo\"/>\n            </ReactiveSequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"Pippo\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the task for an autonomous agent. The agent is programmed to continuously explore its environment by moving to different waypoints until it encounters a failure. \n\nThe sequence begins with the agent checking if the current location has been explored. If not, it selects a potential waypoint and moves towards it. After reaching the waypoint, it again checks if the new location has been explored before proceeding.\n\nThis behavior tree operates in a loop, ensuring that the agent keeps exploring new areas until it encounters a failure. The \"Explored\" action indicates the agent's exploration status, while \"SelectPF\" and \"Move\" actions handle the selection and movement to the next waypoint respectively.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <KeepRunningUntilFailure>\n            <Sequence>\n                <Action ID=\"Explored\"/>\n                <Action ID=\"SelectPF\" waypoint=\"{wp}\"/>\n                <Action ID=\"Move\" goal=\"{wp}\"/>\n                <Action ID=\"Explored\"/>\n            </Sequence>\n        </KeepRunningUntilFailure>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"Explored\"/>\n        <Action ID=\"SelectPF\">\n            <output_port name=\"waypoint\"/>\n        </Action>\n        <Action ID=\"Move\">\n            <input_port name=\"goal\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's activities. The robot is programmed to repeat a sequence of actions 100 times. Within each repetition, it follows a fallback pattern: first, it patrols by navigating through waypoints (wp_1 to wp_7) in sequence. If the patrolling sequence fails or the robot needs recharging, it falls back to the recharging sequence, which involves navigating to a recharge station and then recharging.\n\nIn summary, the robot will repeatedly patrol through waypoints and, if needed, recharge at a designated station. This behavior allows the robot to efficiently cover its designated area while ensuring it can maintain operational readiness through periodic recharging.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <Repeat num_cycles=\"100\">\n                <Fallback>\n                    <Sequence name=\"patrolling\">\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_1\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_2\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_3\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_4\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_5\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_6\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_7\"/>\n                    </Sequence>\n                    <Sequence name=\"recharging\">\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"recharge_station\"/>\n                        <Recharge/>\n                    </Sequence>\n                </Fallback>\n            </Repeat>\n        </Sequence>\n     </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an environment with periodic global path replanning at 1 Hz and includes recovery actions. The robot's navigation involves several steps: \nFirst, it computes a path to a specific goal using the \"GridBased\" planner and clears the entire global costmap context. Then, it follows the computed path while clearing the entire local costmap context. If there are any failures during these processes, the recovery node allows for up to 10 retries. Additionally, if the goal is updated, the robot performs recovery actions such as clearing both the local and global costmaps and waiting for a specified duration.\n\nOverall, the behavior tree ensures that the robot can continuously navigate towards its goal, periodically updating its path and performing recovery actions in case of failures or changes in the goal.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"10\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <!-- <Spin spin_dist=\"1.57\"/> -->\n          <Wait wait_duration=\"1\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a decision-making process for an autonomous vehicle. The vehicle's actions are determined by various conditions and sequences within the tree. It starts with checking if there is a mission wait, and if not, it stops. If there is no global path available, it initializes and then selects a state (such as lane-keeping or lane-changing) based on certain conditions. It also handles scenarios like avoiding obstacles, changing lanes, following traffic rules, and recovering from failures.\n\nThe tree consists of multiple sequences and fallbacks to handle different driving states and contingencies. Actions such as generating paths, setting paths, changing lanes, stopping at traffic lights, and publishing data are performed based on the conditions and states encountered during the vehicle's operation.\n\nOverall, the behavior tree orchestrates the decision-making process for the autonomous vehicle, ensuring safe and efficient navigation while adhering to traffic rules and handling unexpected situations.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback name=\"Core_seq\">\n            <Sequence name=\"\">\n                <Condition ID=\"checkMissionWait\"/>\n                <Action ID=\"stop\"/>\n            </Sequence>\n            <Sequence name=\"Init\">\n                <Condition ID=\"checkExistPathGlobal\"/>\n                <Action ID=\"init\"/>\n                <Fallback name=\"StateSelect\">\n                    <Sequence name=\"LaneKeeping\">\n                        <Condition ID=\"checkStateLaneKeeping\"/>\n                        <Action ID=\"genPathLaneKeeping\"/>\n                        <Action ID=\"setPath\"/>\n                        <Fallback name=\"\">\n                            <Sequence name=\"\">\n                                <Condition ID=\"checkFrontObject\"/>\n                                <Fallback name=\"\">\n                                    <Fallback name=\"\">\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkNearCorner\"/>\n                                            <Action ID=\"acc\"/>\n                                        </Sequence>\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkNearStopline\"/>\n                                            <Action ID=\"acc\"/>\n                                        </Sequence>\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkProfitKeeplane\"/>\n                                            <Action ID=\"acc\"/>\n                                        </Sequence>\n                                    </Fallback>\n                                    <Fallback name=\"state_change\">\n                                        <Sequence name=\"lane_change_left\">\n                                            <Condition ID=\"checkLaneChangeableLeft\"/>\n                                            <Action ID=\"genPathLaneChangeLeft\"/>\n                                            <Fallback name=\"\">\n                                                <Sequence name=\"\">\n                                                    <Condition ID=\"checkCollision\"/>\n                                                    <Action ID=\"setStateLaneKeeping\"/>\n                                                    <Action ID=\"keepLane\"/>\n                                                </Sequence>\n                                                <Sequence name=\"\">\n                                                    <Action ID=\"setStateLaneChangeLeft\"/>\n                                                    <Action ID=\"laneChangeLeft\"/>\n                                                </Sequence>\n                                            </Fallback>\n                                        </Sequence>\n                                        <Sequence name=\"lane_change_right\">\n                                            <Condition ID=\"checkLaneChangeableRight\"/>\n                                            <Action ID=\"genPathLaneChangeRight\"/>\n                                            <Fallback name=\"\">\n                                                <Sequence name=\"\">\n                                                    <Condition ID=\"checkCollision\"/>\n                                                    <Action ID=\"setStateLaneKeeping\"/>\n                                                    <Action ID=\"keepLane\"/>\n                                                </Sequence>\n                                                <Sequence name=\"\">\n                                                    <Action ID=\"setStateLaneChangeRight\"/>\n                                                    <Action ID=\"laneChangeRight\"/>\n                                                </Sequence>\n                                            </Fallback>\n                                        </Sequence>\n                                        <Sequence name=\"astar\">\n                                            <Condition ID=\"checkAbleAstar\"/>\n                                            <Sequence name=\"\">\n                                                <Condition ID=\"checkEmptyLocal\"/>\n                                                <Sequence name=\"Gen_Local\">\n                                                    <Action ID=\"stop\"/>\n                                                    <Action ID=\"setStateAstar\"/>\n                                                    <Action ID=\"genPathAstar\"/>\n                                                </Sequence>\n                                            </Sequence>\n                                        </Sequence>\n                                    </Fallback>\n                                </Fallback>\n                            </Sequence>\n                            <Sequence name=\"\">\n                                <Condition ID=\"checkGlobalLaneChange\"/>\n                                <Fallback name=\"\">\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkLeftChange\"/>\n                                        <Fallback name=\"\">\n                                            <Condition ID=\"checkGenPathLaneChange\"/>\n                                            <Action ID=\"genPathLaneChangeLeft\"/>\n                                        </Fallback>\n                                        <Fallback name=\"\">\n                                            <Sequence name=\"\">\n                                                <Condition ID=\"checkCollision\"/>\n                                                <Action ID=\"setStateLaneKeeping\"/>\n                                                <Action ID=\"keepLane\"/>\n                                            </Sequence>\n                                            <Sequence name=\"\">\n                                                <Action ID=\"setStateLaneChangeLeft\"/>\n                                                <Action ID=\"laneChangeLeft\"/>\n                                            </Sequence>\n                                        </Fallback>\n                                    </Sequence>\n                                    <Sequence name=\"\">\n                                        <Fallback name=\"\">\n                                            <Condition ID=\"checkGenPathLaneChange\"/>\n                                            <Action ID=\"genPathLaneChangeRight\"/>\n                                        </Fallback>\n                                        <Fallback name=\"\">\n                                            <Sequence name=\"\">\n                                                <Condition ID=\"checkCollision\"/>\n                                                <Action ID=\"setStateLaneKeeping\"/>\n                                                <Action ID=\"keepLane\"/>\n                                            </Sequence>\n                                            <Sequence name=\"\">\n                                                <Action ID=\"setStateLaneChangeRight\"/>\n                                                <Action ID=\"laneChangeRight\"/>\n                                            </Sequence>\n                                        </Fallback>\n                                    </Sequence>\n                                </Fallback>\n                            </Sequence>\n                            <Action ID=\"setStateLaneKeeping\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Sequence name=\"LaneChangeLeft\">\n                        <Condition ID=\"checkStateLaneChangeLeft\"/>\n                        <Action ID=\"setPath\"/>\n                        <Fallback name=\"\">\n                            <Sequence name=\"\">\n                                <Condition ID=\"checkCollision\"/>\n                                <Action ID=\"setStateLaneKeeping\"/>\n                            </Sequence>\n                            <Sequence name=\"\">\n                                <Condition ID=\"checkEndLaneChange\"/>\n                                <Action ID=\"setStateLaneKeeping\"/>\n                            </Sequence>\n                            <Action ID=\"setStateLaneChangeLeft\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Sequence name=\"LaneChangeRigth\">\n                        <Condition ID=\"checkStateLaneChangeRight\"/>\n                        <Action ID=\"setPath\"/>\n                        <Fallback name=\"\">\n                            <Sequence name=\"\">\n                                <Condition ID=\"checkCollision\"/>\n                                <Action ID=\"setStateLaneKeeping\"/>\n                            </Sequence>\n                            <Sequence name=\"\">\n                                <Condition ID=\"checkEndLaneChange\"/>\n                                <Action ID=\"setStateLaneKeeping\"/>\n                            </Sequence>\n                            <Action ID=\"setStateLaneChangeRight\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Sequence name=\"Astar\">\n                        <Condition ID=\"checkStateAstar\"/>\n                        <Action ID=\"setPath\"/>\n                        <Fallback name=\"local_check\">\n                            <Sequence name=\"\">\n                                <Condition ID=\"checkCollision\"/>\n                                <Action ID=\"stop\"/>\n                                <Action ID=\"genPathAstar\"/>\n                            </Sequence>\n                            <Sequence name=\"\">\n                                <Condition ID=\"checkFinishAstar\"/>\n                                <Action ID=\"setFinishLocal\"/>\n                                <Action ID=\"setStateLaneKeeping\"/>\n                            </Sequence>\n                            <Action ID=\"localPathfollow\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Sequence name=\"Recovery\">\n                        <AlwaysFailure/>\n                    </Sequence>\n                </Fallback>\n                <Action ID=\"publishData\"/>\n            </Sequence>\n            <Sequence name=\"\">\n                <AlwaysFailure/>\n                <Sequence name=\"\">\n                    <Condition ID=\"checkExistPathGlobal\"/>\n                    <Action ID=\"init\"/>\n                    <Fallback name=\"\">\n                        <Sequence name=\"\">\n                            <Condition ID=\"checkGlobalLaneChange\"/>\n                        </Sequence>\n                        <Action ID=\"genGlobalFollowPath\"/>\n                    </Fallback>\n                </Sequence>\n                <Action ID=\"setPath\"/>\n                <Fallback name=\"\">\n                    <Sequence name=\"\">\n                        <Condition ID=\"checkFrontObject\"/>\n                        <Fallback name=\"\">\n                            <Sequence name=\"\">\n                                <Condition ID=\"checkIsGlobalFollow\"/>\n                                <Fallback name=\"loc_check\">\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkNearCorner\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkNearStopline\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkProfitKeeplane\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                </Fallback>\n                            </Sequence>\n                            <Fallback name=\"lane_check\">\n                                <Sequence name=\"\">\n                                    <Condition ID=\"checkLaneChange\"/>\n                                    <Fallback name=\"lane_check\">\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkLaneChangeableLeft\"/>\n                                            <Fallback name=\"\">\n                                                <Condition ID=\"checkGenPathLaneChange\"/>\n                                                <Action ID=\"genPathLaneChangeLeft\"/>\n                                            </Fallback>\n                                            <Fallback name=\"\">\n                                                <Sequence name=\"\">\n                                                    <Condition ID=\"checkCollision\"/>\n                                                    <Action ID=\"keepLane\"/>\n                                                </Sequence>\n                                                <Action ID=\"laneChangeLeft\"/>\n                                            </Fallback>\n                                        </Sequence>\n                                        <Sequence name=\"\">\n                                            <Fallback name=\"\">\n                                                <Condition ID=\"checkGenPathLaneChange\"/>\n                                                <Action ID=\"genPathLaneChangeRight\"/>\n                                            </Fallback>\n                                            <Fallback name=\"\">\n                                                <Sequence name=\"\">\n                                                    <Condition ID=\"checkCollision\"/>\n                                                    <Action ID=\"keepLane\"/>\n                                                </Sequence>\n                                                <Action ID=\"laneChangeRight\"/>\n                                            </Fallback>\n                                        </Sequence>\n                                    </Fallback>\n                                </Sequence>\n                            </Fallback>\n                        </Fallback>\n                    </Sequence>\n                    <Sequence name=\"\">\n                        <Condition ID=\"checkTrafficLight\"/>\n                        <Fallback name=\"\">\n                            <Sequence name=\"\">\n                                <Condition ID=\"checkPassAbleTrafficLight\"/>\n                                <Sequence name=\"\">\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkCollision\"/>\n                                        <Action ID=\"stop\"/>\n                                    </Sequence>\n                                    <Action ID=\"drive\"/>\n                                </Sequence>\n                            </Sequence>\n                            <Action ID=\"stopTrafficLight\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Action ID=\"drive\"/>\n                </Fallback>\n                <Action ID=\"setPath\"/>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"acc\"/>\n        <Condition ID=\"checkAbleAstar\"/>\n        <Condition ID=\"checkCollision\"/>\n        <Condition ID=\"checkEmptyLocal\"/>\n        <Condition ID=\"checkEndLaneChange\"/>\n        <Condition ID=\"checkExistPathGlobal\"/>\n        <Condition ID=\"checkFinishAstar\"/>\n        <Condition ID=\"checkFinishLocal\"/>\n        <Condition ID=\"checkFrontObject\"/>\n        <Condition ID=\"checkGenPathLaneChange\"/>\n        <Condition ID=\"checkGlobalLaneChange\"/>\n        <Condition ID=\"checkInitPose\"/>\n        <Condition ID=\"checkIsGlobalFollow\"/>\n        <Condition ID=\"checkLaneChange\"/>\n        <Condition ID=\"checkLaneChangeableLeft\"/>\n        <Condition ID=\"checkLaneChangeableRight\"/>\n        <Condition ID=\"checkLeftChange\"/>\n        <Condition ID=\"checkMissionWait\"/>\n        <Condition ID=\"checkNearCorner\"/>\n        <Condition ID=\"checkNearStopline\"/>\n        <Condition ID=\"checkPassAbleTrafficLight\"/>\n        <Condition ID=\"checkProfitKeeplane\"/>\n        <Condition ID=\"checkStateAstar\"/>\n        <Condition ID=\"checkStateLaneChangeLeft\"/>\n        <Condition ID=\"checkStateLaneChangeRight\"/>\n        <Condition ID=\"checkStateLaneKeeping\"/>\n        <Condition ID=\"checkTrafficLight\"/>\n        <Action ID=\"drive\"/>\n        <Action ID=\"genGlobalFollowPath\"/>\n        <Action ID=\"genLocalPath\"/>\n        <Action ID=\"genPathAstar\"/>\n        <Action ID=\"genPathLaneChangeLeft\"/>\n        <Action ID=\"genPathLaneChangeRight\"/>\n        <Action ID=\"genPathLaneKeeping\"/>\n        <Action ID=\"init\"/>\n        <Action ID=\"keepLane\"/>\n        <Action ID=\"laneChangeLeft\"/>\n        <Action ID=\"laneChangeRight\"/>\n        <Action ID=\"localPathFollow\"/>\n        <Action ID=\"localPathfollow\"/>\n        <Action ID=\"publishData\"/>\n        <Action ID=\"setFinishLocal\"/>\n        <Action ID=\"setPath\"/>\n        <Action ID=\"setStartLocal\"/>\n        <Action ID=\"setStateAstar\"/>\n        <Action ID=\"setStateLaneChangeLeft\"/>\n        <Action ID=\"setStateLaneChangeRight\"/>\n        <Action ID=\"setStateLaneKeeping\"/>\n        <Action ID=\"stop\"/>\n        <Action ID=\"stopTrafficLight\"/>\n        <SubTree ID=\"treeGenGlobalFollowPath\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's actions. It begins by setting the velocity to 3 and saying \"Hello\". Then, it executes two sub-trees, Variant1 and Variant2, in sequence, followed by an always successful action. Afterward, it opens the gripper, approaches an object with the previously set velocity, closes the gripper, and finally says \"Bye\". This sequence of actions likely represents a robotic task such as approaching an object, manipulating it, and then concluding the task. The behavior tree is designed to ensure the robot follows this specific sequence of actions.",
        "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root main_tree_to_execute = \"MainTree\" >\n\t<!-- The include paths need to be adapted to the ones required by the interpreter -->\n\t<include path = \"variant1.xml\"/>\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence name=\"root_sequence\">\n\t\t\t<SetBlackboard output_key = \"vp_velocity\" value = \"3\"/>\n\t\t\t<Action ID=\"SaySomething\"   name=\"action_hello\" message=\"Hello\"/>\n\t\t\t<Sequence>\n\t\t\t\t<SubTree ID = \"Variant1\"/>\n\t\t\t\t<SubTree ID = \"Variant2\"/> \n\t\t\t\t<AlwaysSuccess/> \n\t\t\t</Sequence >\t\t\t\n\t\t\t<Action ID=\"OpenGripper\"    name=\"open_gripper\"/>\n\t\t\t<Action ID=\"ApproachObject\" name=\"approach_object\" velocity=\"{vp_velocity}\"/>\n\t\t\t<Action ID=\"CloseGripper\"   name=\"close_gripper\"/>\n\t\t\t<Action ID=\"SaySomething\"   name=\"action_bye\" message=\"Bye\"/>\n        </Sequence>\n     </BehaviorTree>\n</root >\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's task of searching for and following a person. The robot first performs the \"SearchAction\" to locate the person, and then executes the \"FollowAction\" to follow them once found. Both actions have an objective parameter set to \"person\". The sequence implies that the robot will search for the person before attempting to follow them. This behavior can be useful in scenarios where a robot needs to autonomously locate and track a specific individual.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"SearchAction\" objective=\"person\"/>\n            <Action ID=\"FollowAction\" objective=\"person\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"FollowAction\">\n            <input_port default=\"person\" name=\"objective\">It follows a objective</input_port>\n        </Action>\n        <Action ID=\"SearchAction\">\n            <input_port default=\"person\" name=\"objective\">It turns itself searching an objective</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a complex sequence of actions for a robotic system. The robot is programmed to perform a series of tasks in stages, with each stage involving multiple repetitions of specific actions. These actions include waiting for a set duration, navigating to different goal locations, and performing various monitoring and logging tasks.\n\nThe behavior tree starts with a sequence of actions that involve waiting for a specified time, followed by navigating to different goal positions. Each navigation action is repeated 10 times before moving on to the next stage. This process is then repeated for several stages, each with its own set of goals and actions.\n\nAdditionally, the behavior tree includes a variety of utility actions such as monitoring ROS messages, performing mathematical operations, generating random values, and interacting with ROS services. It also incorporates logging functionalities for debugging and information purposes.\n\nOverall, the behavior tree orchestrates a complex multi-stage operation for the robot, encompassing navigation, monitoring, and decision-making tasks.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"WaitSeconds\" duration=\"2\" name=\"Stage1WaitSeconds1\"/>\n            <ForceSuccess>\n                <Repeat num_cycles=\"10\">\n                    <Action ID=\"UPOGoToGoalByName\" action=\"/Make_Plan\" goal_name=\"stage_1_pos_final_1\" name=\"Stage1GoToGoal1\" state=\"gpf1\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" duration=\"2\" name=\"Stage1WaitSeconds2\"/>\n            <ForceSuccess>\n                <Repeat num_cycles=\"10\">\n                    <Action ID=\"UPOGoToGoalByName\" action=\"/Make_Plan\" goal_name=\"stage_1_pos_final_2\" name=\"Stage1GoToGoal2\" state=\"gpf2\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" duration=\"2\" name=\"Stage1WaitSeconds3\"/>\n            <ForceSuccess>\n                <Repeat num_cycles=\"10\">\n                    <Action ID=\"UPOGoToGoalByName\" action=\"/Make_Plan\" goal_name=\"stage_1_pos_final_3\" name=\"Stage1GoToGoal3\" state=\"gpf3\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" duration=\"2\" name=\"Stage1WaitSeconds4\"/>\n            <ForceSuccess>\n                <Repeat num_cycles=\"10\">\n                    <Action ID=\"UPOGoToGoalByName\" action=\"/Make_Plan\" goal_name=\"stage_1_pos_final_4\" name=\"Stage1GoToGoa4\" state=\"gpf4\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" duration=\"2\" name=\"Stage1WaitSeconds5\"/>\n            <ForceSuccess>\n                <Repeat num_cycles=\"10\">\n                    <Action ID=\"UPOGoToGoalByName\" action=\"/Make_Plan\" goal_name=\"stage_1_pos_final_5\" name=\"Stage1GoToGoal5\" state=\"gpf5\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" duration=\"2\" name=\"WaitSecondsEnd\"/>\n            <ForceSuccess>\n                <Repeat num_cycles=\"10\">\n                    <Action ID=\"UPOGoToGoalByName\" action=\"/Make_Plan\" goal_name=\"stage_1_pos_final_6\" name=\"Stage1GoToGoal6\" state=\"gpf6\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" duration=\"1\" name=\"WaitSecondsEnd\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CallEmptyService\">\n            <input_port name=\"service\" type=\"std::string\">ROS service name</input_port>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"input\" type=\"bool\">Input boolean value</input_port>\n        </Condition>\n        <Action ID=\"CheckKey\">\n            <input_port name=\"no_key\" type=\"std::string\">Key to determine if key to say 'no' has benn pressed</input_port>\n            <input_port name=\"yes_key\" type=\"std::string\">Key to determine if key to say 'yes' has been pressed</input_port>\n        </Action>\n        <Condition ID=\"CompareNumbers\">\n            <input_port name=\"comparison_op\" type=\"std::string\">Comparison operator. Valid operators are &lt;, &gt;, &lt;=, &gt;=, == and !=</input_port>\n            <input_port name=\"first\" type=\"double\">First operand</input_port>\n            <input_port name=\"second\" type=\"double\">Second operand</input_port>\n        </Condition>\n        <Condition ID=\"CompareStrings\">\n            <input_port name=\"comparison_op\" type=\"std::string\">Comparison operator. Valid operators are &lt;, &gt;, &lt;=, &gt;=, == and !=</input_port>\n            <input_port name=\"first\" type=\"std::string\">First operand</input_port>\n            <input_port name=\"second\" type=\"std::string\">Second operand</input_port>\n        </Condition>\n        <Action ID=\"ConcatenateStrings\">\n            <input_port name=\"first\" type=\"std::string\">First string</input_port>\n            <output_port name=\"output\" type=\"std::string\">Concatenated result string</output_port>\n            <input_port name=\"second\" type=\"std::string\">Second string</input_port>\n        </Action>\n        <Action ID=\"ConvertJsonToDouble\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"double\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToInt64\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"long\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToString\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"std::string\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToUint64\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"unsigned long\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertMessageField\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"void\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertRandomMessageField\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"void\">Output variable</output_port>\n        </Action>\n        <Decorator ID=\"CooldownMilliseconds\">\n            <input_port default=\"0\" name=\"cooldown\" type=\"unsigned int\">Cooldown time</input_port>\n        </Decorator>\n        <Decorator ID=\"CooldownSeconds\">\n            <input_port default=\"0\" name=\"cooldown\" type=\"unsigned int\">Cooldown time</input_port>\n        </Decorator>\n        <Action ID=\"CopyJson\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Input variable</input_port>\n            <output_port name=\"output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Output variable to copy to</output_port>\n        </Action>\n        <Action ID=\"DebugLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Action ID=\"ErrorLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Action ID=\"FatalLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Action ID=\"FindByFieldValue\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"void\">Output variable</output_port>\n            <input_port name=\"value\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Value to search for</input_port>\n        </Action>\n        <Action ID=\"FindSubstrings\">\n            <input_port name=\"input\" type=\"std::string\">String to look into</input_port>\n            <input_port name=\"substrings\" type=\"std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;\">Substrings to look for</input_port>\n        </Action>\n        <Decorator ID=\"ForEachLoop\">\n            <input_port name=\"break_on_child_failure\" type=\"bool\">Break loop on child failure?</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Input sequence</input_port>\n            <output_port name=\"output_element\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Output element variable</output_port>\n            <output_port name=\"output_index\" type=\"unsigned long\">Output index variable</output_port>\n        </Decorator>\n        <Action ID=\"GetJsonSize\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Input sequence</input_port>\n            <output_port name=\"output\" type=\"unsigned long\">Sequence size output</output_port>\n        </Action>\n        <Action ID=\"GetKeyboard\">\n            <output_port name=\"output\" type=\"std::string\">String received from keyboard</output_port>\n        </Action>\n        <Action ID=\"GetMessageField\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Output variable</output_port>\n        </Action>\n        <Action ID=\"GetRandomMessageField\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Output variable</output_port>\n        </Action>\n        <Action ID=\"GetTransformDistance\">\n            <input_port name=\"input\" type=\"tf::StampedTransform\">TF transform</input_port>\n            <output_port name=\"output\" type=\"double\">Distance form transform origin</output_port>\n        </Action>\n        <Action ID=\"GetTransformHorizontalDistance\">\n            <input_port name=\"input\" type=\"tf::StampedTransform\">TF transform</input_port>\n            <output_port name=\"output\" type=\"double\">2D distance from TF transform origin</output_port>\n        </Action>\n        <Action ID=\"GetTransformOrigin\">\n            <input_port name=\"input\" type=\"tf::StampedTransform\">TF transform</input_port>\n            <output_port name=\"x\" type=\"double\">Origin x coordinate</output_port>\n            <output_port name=\"y\" type=\"double\">Origin y coordinate</output_port>\n            <output_port name=\"z\" type=\"double\">Origin z coordinate</output_port>\n        </Action>\n        <Action ID=\"InfoLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Action ID=\"InitializeJson\">\n            <output_port name=\"output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Output variable to initialize</output_port>\n        </Action>\n        <Action ID=\"InterpolateFloat\">\n            <input_port name=\"input_range\" type=\"std::vector&lt;double, std::allocator&lt;double&gt; &gt;\">Input value range.</input_port>\n            <input_port name=\"input_value\" type=\"double\">Value to interpolate.</input_port>\n            <input_port name=\"output_range\" type=\"std::vector&lt;double, std::allocator&lt;double&gt; &gt;\">Output value range.</input_port>\n            <output_port name=\"output_value\" type=\"double\">Interpolated value.</output_port>\n        </Action>\n        <Control ID=\"Interruptible\"/>\n        <Action ID=\"LookupTransform\">\n            <output_port name=\"output\" type=\"tf::StampedTransform\">Result transform</output_port>\n            <input_port name=\"source_frame\" type=\"std::string\">Origin TF frame</input_port>\n            <input_port name=\"target_frame\" type=\"std::string\">Target TF frame</input_port>\n            <input_port default=\"0\" name=\"use_last_available\" type=\"bool\">Use last available transform?</input_port>\n        </Action>\n        <Decorator ID=\"Loop\"/>\n        <Action ID=\"MathOperationFloat\">\n            <input_port name=\"first\" type=\"double\">First operand</input_port>\n            <input_port name=\"operator\" type=\"std::string\">Math operation. Valid operatores are: +, -, / and *</input_port>\n            <output_port name=\"output\" type=\"double\">Operation result</output_port>\n            <input_port name=\"second\" type=\"double\">Second operand</input_port>\n        </Action>\n        <Action ID=\"MathOperationInt\">\n            <input_port name=\"first\" type=\"int\">First operand</input_port>\n            <input_port name=\"operator\" type=\"std::string\">Math operation. Valid operatores are: +, -, / and *</input_port>\n            <output_port name=\"output\" type=\"int\">Operation result</output_port>\n            <input_port name=\"second\" type=\"int\">Second operand</input_port>\n        </Action>\n        <Action ID=\"MonitorStdBool\">\n            <input_port default=\"0\" name=\"consume_msgs\" type=\"bool\">Should messages be consumed?</input_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Subscriber callback queue size</input_port>\n            <output_port name=\"serialized_output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Serialized ROS message [std_msgs::Bool_&lt;std::allocator&lt;void&gt; &gt;]</output_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"MonitorStdFloat64\">\n            <input_port default=\"0\" name=\"consume_msgs\" type=\"bool\">Should messages be consumed?</input_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Subscriber callback queue size</input_port>\n            <output_port name=\"serialized_output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Serialized ROS message [std_msgs::Float64_&lt;std::allocator&lt;void&gt; &gt;]</output_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"MonitorStdInt32\">\n            <input_port default=\"0\" name=\"consume_msgs\" type=\"bool\">Should messages be consumed?</input_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Subscriber callback queue size</input_port>\n            <output_port name=\"serialized_output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Serialized ROS message [std_msgs::Int32_&lt;std::allocator&lt;void&gt; &gt;]</output_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"OStreamNode\">\n            <input_port name=\"message\" type=\"std::string\">String to print</input_port>\n        </Action>\n        <Decorator ID=\"OnlyOnce\"/>\n        <Action ID=\"PublishBool\">\n            <input_port name=\"data\" type=\"bool\">Auto-generated field from std_msgs::Bool_&lt;std::allocator&lt;void&gt; &gt;</input_port>\n            <input_port default=\"0\" name=\"latch\" type=\"bool\">Latch messages?</input_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Internal publisher queue size</input_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to publish to</input_port>\n        </Action>\n        <Action ID=\"PublishStdString\">\n            <input_port name=\"data\" type=\"std::string\">Auto-generated field from std_msgs::String_&lt;std::allocator&lt;void&gt; &gt;</input_port>\n            <input_port default=\"0\" name=\"latch\" type=\"bool\">Latch messages?</input_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Internal publisher queue size</input_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to publish to</input_port>\n        </Action>\n        <Action ID=\"RandomFloat\">\n            <input_port name=\"max\" type=\"double\">Max range value</input_port>\n            <input_port name=\"min\" type=\"double\">Minimum range value</input_port>\n            <output_port name=\"result\" type=\"double\">Random result value</output_port>\n        </Action>\n        <Action ID=\"RandomInteger\">\n            <input_port name=\"max\" type=\"int\">Max range value</input_port>\n            <input_port name=\"min\" type=\"int\">Minimum range value</input_port>\n            <output_port name=\"result\" type=\"int\">Random result value</output_port>\n        </Action>\n        <Action ID=\"RandomSequenceValue\">\n            <input_port default=\";\" name=\"delimiter\" type=\"std::string\">Sequence entries delimiter</input_port>\n            <output_port name=\"output\" type=\"std::string\">Result random sequence entry</output_port>\n            <input_port name=\"sequence\" type=\"std::string\">Sequence to randomize</input_port>\n        </Action>\n        <Action ID=\"SubscribeUPOGoal\">\n            <input_port default=\"0\" name=\"consume_msgs\" type=\"bool\">Should messages be consumed?</input_port>\n            <output_port name=\"output\" type=\"upo_actions::MakePlanGoal_&lt;std::allocator&lt;void&gt; &gt;\">Received ROS message [upo_actions::MakePlanGoal_&lt;std::allocator&lt;void&gt; &gt;]</output_port>\n            <input_port default=\"1\" name=\"queue_size\" type=\"unsigned int\">Subscriber callback queue size</input_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"UPOFireDetection3D\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"duration\" type=\"int\">Duration</input_port>\n            <output_port name=\"fire_found\" type=\"bool\">Fire Found</output_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n            <output_port name=\"x\" type=\"double\">Fire x</output_port>\n            <output_port name=\"y\" type=\"double\">Fire x</output_port>\n            <output_port name=\"z\" type=\"double\">Fire x</output_port>\n        </Action>\n        <Action ID=\"UPOFireExtinguish\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"detect_fire\" type=\"bool\">Detect Fire</input_port>\n            <output_port name=\"serialized_feedback\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Serialized ROS message [upo_actions::FireExtinguishFeedback_&lt;std::allocator&lt;void&gt; &gt;]</output_port>\n            <output_port name=\"serialized_result\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;\">Serialized ROS message [upo_actions::FireExtinguishResult_&lt;std::allocator&lt;void&gt; &gt;]</output_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOGoToGoal\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"global_goal.header.frame_id\" type=\"std::string\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>\n            <input_port name=\"global_goal.header.seq\" type=\"unsigned int\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>\n            <input_port name=\"global_goal.pose.orientation.w\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>\n            <input_port name=\"global_goal.pose.orientation.x\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>\n            <input_port name=\"global_goal.pose.orientation.y\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>\n            <input_port name=\"global_goal.pose.orientation.z\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>\n            <input_port name=\"global_goal.pose.position.x\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>\n            <input_port name=\"global_goal.pose.position.y\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>\n            <input_port name=\"global_goal.pose.position.z\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOGoToGoalByName\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"goal_name\" type=\"std::string\">Name of goal</input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOLanding\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"land\" type=\"bool\">Auto-generated field from upo_actions::LandingGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOTakeOff\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n            <input_port name=\"takeoff_height.data\" type=\"float\">Auto-generated field from upo_actions::TakeOffGoal_&lt;std::allocator&lt;void&gt; &gt;</input_port>\n        </Action>\n        <Action ID=\"UPOWindowDetection\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"duration\" type=\"int\">Duration</input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n            <output_port name=\"window_present\" type=\"bool\">Window Present</output_port>\n            <output_port name=\"x\" type=\"double\">Window x</output_port>\n            <output_port name=\"y\" type=\"double\">Window y</output_port>\n            <output_port name=\"z\" type=\"double\">Window z</output_port>\n        </Action>\n        <Action ID=\"WaitMilliseconds\">\n            <input_port default=\"0\" name=\"duration\" type=\"unsigned int\">Time to wait</input_port>\n        </Action>\n        <Action ID=\"WaitSeconds\">\n            <input_port default=\"0\" name=\"duration\" type=\"unsigned int\">Time to wait</input_port>\n        </Action>\n        <Action ID=\"WarnLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Decorator ID=\"WhileSuccess\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic system that executes a sequence of tasks. Initially, it clears the local and global cost maps for navigation. Then, it sets a goal location (Goal_a) and computes a path to reach that goal using navigation algorithms. This entire sequence is repeated once. In summary, the robot's task involves preparing the environment for navigation by clearing cost maps, setting a specific goal location, and computing a path to navigate towards that goal.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"1\">\n            <Sequence>\n                <Nav2ClearLocalCostMap/>\n                <Nav2ClearGlobalCostMap/>\n                <SetBlackboard output_key=\"Goal_a\" value=\"-0.7,-3.8\" />\n                <Nav2ComputePathClient goal=\"{Goal_a}\" />\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic system's task flow. It begins by loading a pallet, then moving to a specified location, and finally dropping the pallet at the destination. This sequence is encapsulated within the \"root_sequence\". The \"Move\" action takes a goal as an argument, allowing flexibility in specifying the destination for the robot. Overall, the behavior tree orchestrates the steps required for the robot to load, transport, and unload a pallet at a designated location.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <LoadPallet   name=\"load_pallet\"/>\n           <Move    name=\"move\" goal=\"${arg2}\"/>\n           <DropPallet    name=\"drop_pallet\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for building a gearbox kit using a robot. The main task involves picking up a large gear, inserting it into a machine, and then performing various steps to pick and place screws. \n\nThe \"go insert large gear\" subtree includes the robot's attempts to move to the designated location, detect the chuck, and then insert the large gear while handling potential failures.\n\nThe \"go pick screw\" subtree details the robot's efforts to move to the screw station, detect the screw, pick it up, and handle any potential failures in the process.\n\nThe \"go place screw\" subtree describes the robot's movements to the caddy station, detecting the screw compartment, placing the screw into the compartment, and managing potential failures during the process.\n\nOverall, the behavior tree orchestrates the robot's actions in building the gearbox kit by coordinating its movements, object detection, and manipulation tasks to complete the assembly process.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"build a gearbox kit\">\n            <!--            <SubTree ID=\"prepare navigation and arm\" />-->\n            <!--            <SubTree ID=\"go pick large gear\" />-->\n            <SubTree ID=\"go insert large gear\" name=\"\" />\n            <!--            <SubTree ID=\"go place machined large gear\" />-->\n            <!--            <SubTree ID=\"go pick small gear\" />-->\n            <!--            <SubTree ID=\"go place small gear\" />-->\n            <!--            <SubTree ID=\"go pick gearbox top\" />-->\n            <!--            <SubTree ID=\"go place gearbox top\" />-->\n            <!--            <SubTree ID=\"go pick gearbox bottom\" />-->\n            <!--            <SubTree ID=\"go place gearbox bottom\" />-->\n\n            <!--            <SubTree ID=\"ask\" what=\"Press Enter to pick 1st screw...\"/>-->\n            <!--            <SubTree name=\"go pick first screw\" ID=\"go pick screw\" />-->\n            <SubTree ID=\"go pick screw\" name=\"go pick first screw\"/>\n            <!--            <SubTree ID=\"ask\" what=\"Press Enter to place 1st screw...\"/>-->\n            <!--            <SubTree name=\"go place first screw\" ID=\"go place screw\" />-->\n            <SubTree ID=\"go place screw\" name=\"go place first screw\"/>\n            <!--            <SubTree ID=\"ask\" what=\"Press Enter to pick 2nd screw...\"/>-->\n            <!--            <SubTree name=\"go pick second screw\" ID=\"go pick screw\" />-->\n            <!--            <SubTree ID=\"ask\" what=\"Press Enter to place 2nd screw...\"/>-->\n            <!--            <SubTree name=\"go place second screw\" ID=\"go place screw\" />-->\n\n            <!--            <SubTree ID=\"go pick caddy\" />-->\n            <!--            <SubTree ID=\"go drop off caddy\" />-->\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"go insert large gear\">\n        <Fallback name=\"go insert large gear\">\n            <Sequence name=\"go insert large gear\">\n                <RetryUntilSuccesful num_attempts=\"3\" name=\"\">\n                    <Action ID=\"move to\" place=\"chuck place\" name=\"move to see chuck\" />\n                </RetryUntilSuccesful>\n\n                <RetryUntilSuccesful num_attempts=\"3\" name=\"\">\n                    <Sequence name=\"\">\n                        <Sequence name=\"detect chuck\">\n                            <Action ID=\"lift torso\" name=\"\" />\n                            <Action ID=\"look at chuck roughly\" name=\"\" />\n                            <Action ID=\"detect chuck\" output=\"{object pose}\" name=\"\" />\n                        </Sequence>\n                        <Fallback name=\"insert large gear\">\n                            <Sequence name=\"insert large gear\">\n                                <Action ID=\"convert to insertion pose\" name=\"\" from=\"{object pose}\" output=\"{insertion pose}\" />\n                                <Action ID=\"scan scene\" name=\"scan scene for collision avoidance\" />\n                                <Action ID=\"attach large gear to scene\" name=\"\" />\n                                <Action ID=\"look at\" name=\"look at chuck\" pose=\"{object pose}\" />\n                                <Action ID=\"reach\" name=\"approach door\" pose=\"{insertion pose}\" shift_x=\"-0.35\" shift_y=\"-0.12\" shift_z=\"0.2\" />\n                                <Action ID=\"reach\" name=\"prepare to insert\" pose=\"{insertion pose}\" shift_y=\"-0.17\" />\n                                <Action ID=\"trial and error insert\" name=\"\" pose=\"{insertion pose}\" />\n                                <Action ID=\"remove large gear from scene\" name=\"\" />\n                                <Action ID=\"reach\" name=\"back to prepare to insert\" pose=\"{insertion pose}\" shift_y=\"-0.17\" />\n                                <Action ID=\"reach\" name=\"back to approach for door\" pose=\"{insertion pose}\" shift_x=\"-0.35\" shift_y=\"0.12\" shift_z=\"0.2\" />\n                                <Action ID=\"retreat arm\" name=\"\" />\n                            </Sequence>\n\n                            <ForceFailure name=\"reset arm\">\n                                <Action ID=\"retreat arm\" name=\"\" />\n                            </ForceFailure>\n                        </Fallback>\n                    </Sequence>\n                </RetryUntilSuccesful>\n            </Sequence>\n\n            <Action ID=\"ask\" name=\"\" what=\"unable insert large gear\" />\n        </Fallback>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"go pick screw\">\n        <!--        <Action name=\"go pick first screw\" ID=\"go pick screw\" />-->\n        <Fallback name=\"go pick screw\">\n\n            <Sequence name=\"go pick screw\">\n                <RetryUntilSuccesful num_attempts=\"3\" name=\"\">\n                    <Action ID=\"move to\" place=\"screw station\" name=\"move to screw station\" />\n                </RetryUntilSuccesful>\n\n                <RetryUntilSuccesful num_attempts=\"3\" name=\"\">\n                    <Sequence name=\"\">\n                        <Sequence name=\"detect screw\">\n                            <Action ID=\"lift torso\" name=\"\" />\n                            <Action ID=\"look at table\" name=\"\" />\n                            <Action ID=\"detect screw\" output=\"{object pose}\" name=\"\" />\n                        </Sequence>\n                        <Fallback name=\"pick screw\">\n                            <Sequence name=\"pick screw\">\n                                <Action ID=\"convert to grasp pose\" name=\"\" from=\"{object pose}\" output=\"{grasp pose}\" />\n                                <Action ID=\"scan scene\" name=\"scan scene for collision avoidance\" />\n                                <!--                                <Action ID=\"attach object\" object_name=\"screw\" name=\"\" />-->\n                                <Action ID=\"look at\" name=\"look at screw\" pose=\"{object pose}\" />\n                                <Action ID=\"open gripper\" name=\"close griper slightly\" position=\"0.035\" />\n                                <!--                                <Action ID=\"reach\" name=\"approach for grasp pose\" pose=\"{grasp pose}\" shift_z=\"0.2\" />-->\n                                <Action ID=\"reach\" name=\"approach for grasp pose\" pose=\"{grasp pose}\" shift_z=\"0.1\" />\n                                <Action ID=\"allow partial collision\" where=\"{object pose}\" width=\"0.06\" padding=\"0.03\" />\n                                <Action ID=\"reach\" name=\"reach for grasp pose\" pose=\"{grasp pose}\" shift_z=\"-0.01\" />\n                                <Action ID=\"close gripper\" name=\"grasp screw\" />\n                                <Condition ID=\"check grasped\" name=\"check if grasped\" />\n                                <Action ID=\"reach\" name=\"back to approach pose\" pose=\"{grasp pose}\" shift_z=\"0.1\" />\n                                <!--                                <Action ID=\"reach\" name=\"back to approach pose\" pose=\"{grasp pose}\" shift_z=\"0.2\" />-->\n                                <Action ID=\"retreat arm\" name=\"\" />\n                            </Sequence>\n\n                            <ForceFailure name=\"reset arm\">\n                                <Action ID=\"retreat arm\" name=\"\" />\n                            </ForceFailure>\n                        </Fallback>\n                    </Sequence>\n                </RetryUntilSuccesful>\n            </Sequence>\n\n            <Action ID=\"ask\" name=\"\" what=\"unable pick screw\" />\n        </Fallback>\n    </BehaviorTree>\n\n\n    <BehaviorTree ID=\"go place screw\">\n        <!--        <Action name=\"go place first screw\" ID=\"go place screw\" />-->\n        <Fallback name=\"go place screw\" >\n\n            <Sequence name=\"go place screw\">\n                <RetryUntilSuccesful num_attempts=\"3\" name=\"\">\n                    <Action ID=\"move to\" place=\"caddy station\" name=\"move to caddy station\" />\n                </RetryUntilSuccesful>\n\n                <RetryUntilSuccesful num_attempts=\"3\" name=\"\">\n                    <Sequence name=\"\">\n                        <Sequence name=\"detect screw compartment\">\n                            <Action ID=\"lift torso\" name=\"\" />\n                            <Action ID=\"look at table\" name=\"\"/>\n                            <Action ID=\"detect caddy\" name=\"detect screw compartment\" part=\"screw compartment\" output=\"{object pose}\" />\n                        </Sequence>\n\n                        <Fallback name=\"place screw into caddy\">\n                            <Sequence name=\"place screw into caddy\">\n                                <Action ID=\"convert to grasp pose\" name=\"convert to place pose\" from=\"{object pose}\" shift_z=\"0.06\" output=\"{place pose}\" />\n                                <Action ID=\"scan scene\" name=\"scan scene for collision avoidance\" />\n                                <!--                                <Action ID=\"attach object\" object_name=\"screw\" name=\"\" />-->\n                                <Action ID=\"look at\" name=\"look at screw compartment\" pose=\"{object pose}\" />\n                                <Action ID=\"reach\" name=\"approach for place pose\" pose=\"{place pose}\" shift_z=\"0.1\" />\n                                <Action ID=\"reach\" name=\"reach for place pose\" pose=\"{place pose}\" />\n                                <Action ID=\"open gripper\" name=\"release screw\" />\n                                <Action ID=\"reach\" name=\"back to approach pose\" pose=\"{place pose}\" shift_z=\"0.1\"/>\n                                <Action ID=\"retreat arm\" name=\"\" />\n                            </Sequence>\n                            <ForceFailure name=\"reset arm\">\n                                <Action ID=\"retreat arm\" name=\"\" />\n                            </ForceFailure>\n                        </Fallback>\n                    </Sequence>\n                </RetryUntilSuccesful>\n            </Sequence>\n\n            <Action ID=\"ask\" what=\"unable to place screw\" name=\"\" />\n        </Fallback>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree sets three values in the blackboard and then executes a Fibonacci task with a specified server. The Fibonacci task has a timeout of 10 seconds, and if it takes longer than 5 seconds to cancel, an \"AlwaysSuccess\" node is executed. This behavior tree seems to be part of a system where a robot or an AI agent is performing a series of tasks, possibly as part of a larger decision-making process or action sequence.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <ReactiveSequence>\n            <SetBlackboard output_key=\"the_answer1\" value=\"hello\"/>\n            <SetBlackboard output_key=\"the_answer2\" value=\"hello\"/>\n            <SetBlackboard output_key=\"the_answer3\" value=\"hello\"/>\n            <Fibonacci server_name=\"/fibonacci\" server_timeout=\"10\" cancel_timeout=\"5\" />\n            <AlwaysSuccess/>\n        </ReactiveSequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to handle the task of opening a closed door. It consists of a sequence that includes a retry mechanism, attempting to open the door four times before succeeding. The tree also contains various other actions and conditions related to doors, such as closing the door, checking if the door is open, and passing through the door or window.\n\nIn summary, the main task of this behavior tree is to repeatedly attempt to open a closed door until it succeeds, while also providing additional functionalities related to door operations such as closing the door, checking its status, and passing through it.",
        "output": "<root main_tree_to_execute=\"DoorClosed\">\n    <!--  //////////  -->\n    <BehaviorTree ID=\"DoorClosed\">\n        <Sequence name=\"door_closed_sequence\">\n            <RetryUntilSuccesful num_attempts=\"4\">\n                <Action ID=\"OpenDoor\"/>\n            </RetryUntilSuccesful>\n        </Sequence>\n    </BehaviorTree>\n    <!--  //////////  -->\n    <TreeNodesModel>\n        <Action ID=\"CloseDoor\"/>\n        <SubTree ID=\"DoorClosed\"/>\n        <Condition ID=\"IsDoorOpen\"/>\n        <Action ID=\"OpenDoor\"/>\n        <Action ID=\"PassThroughDoor\"/>\n        <Action ID=\"PassThroughWindow\"/>\n    </TreeNodesModel>\n    <!--  //////////  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a sequence of actions and conditions. The robot will first check if a certain condition \"isFull\" is met, and if it is true, it will perform the action \"go1\". However, the provided XML does not specify the exact details of the condition or the actions.\n\nIn summary, the behavior tree seems to represent a decision-making process for a robot based on whether a specific condition is fulfilled. If the condition is met, the robot will execute a particular action. It's likely that this behavior tree is part of a larger system where the details of the condition and actions are defined elsewhere in the codebase.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Condition ID=\"isFull\"/>\n            <Action ID=\"go1\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"go4\"/>\n        <Action ID=\"go5\"/>\n        <Action ID=\"go6\"/>\n        <Action ID=\"go7\"/>\n        <Action ID=\"go8\"/>\n        <Condition ID=\"isFull\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the task of a robot navigating through a door or window. The \"MainTree\" sequence first attempts to check if the door is open; if it is, the robot passes through the door. If the door is closed, the robot follows the behavior specified in the \"DoorClosed\" subtree. This subtree includes an attempt to open the door, with a retry mechanism if unsuccessful, and then passing through the door.\n\nIf both these attempts fail, the robot resorts to passing through a window. Finally, regardless of the outcome, the robot closes the door behind it. The behavior tree is designed to ensure that the robot successfully navigates from one side of the door or window to the other, adapting its approach based on the state of the door.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"DoorClosed\">\n        <Sequence name=\"door_closed_sequence\">\n            <Inverter>\n                <Condition ID=\"IsDoorOpen\"/>\n            </Inverter>\n            <RetryUntilSuccesful num_attempts=\"4\">\n                <Action ID=\"OpenDoor\"/>\n            </RetryUntilSuccesful>\n            <Action ID=\"PassThroughDoor\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <Fallback name=\"root_Fallback\">\n                <Sequence name=\"door_open_sequence\">\n                    <Condition ID=\"IsDoorOpen\"/>\n                    <Action ID=\"PassThroughDoor\"/>\n                </Sequence>\n                <SubTree ID=\"DoorClosed\"/>\n                <Action ID=\"PassThroughWindow\"/>\n            </Fallback>\n            <Action ID=\"CloseDoor\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CloseDoor\"/>\n        <SubTree ID=\"DoorClosed\"/>\n        <Condition ID=\"IsDoorOpen\"/>\n        <Action ID=\"OpenDoor\"/>\n        <Action ID=\"PassThroughDoor\"/>\n        <Action ID=\"PassThroughWindow\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot's navigation and recovery in case of being stuck. It begins by checking if the robot is stuck, and if so, it initiates a recovery sequence involving stopping, backing up, and spinning to free itself. If not stuck, it proceeds with the navigation branch based on the \"parallel.xml\" file.\n\nIn the navigation branch, it computes a path to a specific pose using the given endpoints and stores it as 'path'. Then, it enters a parallel node where it simultaneously follows the computed path and updates the path at a specified rate. This allows the robot to navigate while continuously updating its path to adapt to any changes in the environment.\n\nOverall, the behavior tree ensures that the robot can recover from being stuck and efficiently navigate to its designated pose, adapting to changes in the environment during navigation.",
        "output": "<!--\n  This Behavior Tree first goes into a branch where it will check if the robot is stuck.\n  If that is the case, it will attempt to recover. Otherwise it will continue with\n  the navigation branch. In this case the navigation branch is based on `parallel.xml`.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"root\">\n      <FallbackStar name=\"check_motion\">\n        <Inverter name=\"is_not_stuck\">\n          <IsStuck/>\n        </Inverter>\n        <SequenceStar name=\"stuck_recovery\">\n          <Stop/>\n          <BackUp/>\n          <Spin/>\n        </SequenceStar>\n      </FallbackStar>\n      <SequenceStar name=\"navigate\">\n        <ComputePathToPose endpoints=\"${endpoints}\" path=\"${path}\"/>\n        <ParallelNode threshold=\"1\">\n          <FollowPath path=\"${path}\"/>\n          <Sequence>\n            <RateController hz=\"2\">\n              <ComputePathToPose endpoints=\"${endpoints}\" path=\"${path}\"/>\n            </RateController>\n            <UpdatePath/>\n          </Sequence>\n        </ParallelNode>\n      </SequenceStar>\n    </Sequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to navigate a robot while continuously replanning the global path after every 1 meter of movement. It uses a pipeline sequence consisting of two steps: \n1. The DistanceController component computes a new path to the goal pose using the \"GridBased\" planner whenever the robot has moved 1 meter.\n2. The FollowPath component then guides the robot along the computed path.\n\nThis setup ensures that the robot dynamically adjusts its path as it moves, allowing for efficient and adaptive navigation in changing environments.",
        "output": "<!--\n  This Behavior Tree replans the global path after every 1m.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <DistanceController distance=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </DistanceController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of movements for a robot. The robot is initially instructed to wait for 5000 milliseconds, then move forward by 100 units. It subsequently executes a series of turns and movements, including turning at specific angles and moving forward or backward by designated distances.\n\nOverall, the robot follows a predefined path involving multiple forward and backward movements combined with turns. This behavior tree essentially orchestrates a set of movements for the robot to navigate through a specific route or perform a predefined task.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root\">\n\n            <Wait name=\"wait for small robot to advance\"\n            delay=\"5000\"/>\n\n            <MoveAhead name=\"Avancer un peu\" distance=\"100\"></MoveAhead>\n\n            <Turn name=\"turn 1\" angle=\"90\"></Turn>\n\n            <MoveAhead name=\"move forward\"\n                       distance=\"500\"/>\n\n            <Turn name=\"turn 1\" angle=\"-90\"></Turn>\n\n            <MoveAhead name=\"move forward\"\n                       distance=\"600\"/>\n\n            <Turn name=\"turn 1\" angle=\"-90\"></Turn>\n\n            <MoveAhead name=\"move forward\"\n                       distance=\"200\"/>\n\n            <Turn name=\"turn 1\" angle=\"-90\"></Turn>\n\n            <MoveAhead name=\"move forward\"\n                       distance=\"600\"/>\n\n            <MoveAhead name=\"move back\"\n                       distance=\"-600\"/>\n\n            <MoveAhead name=\"move forward\"\n                       distance=\"600\"/>\n\n\n        </Sequence>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "This behavior tree is designed for a robot to navigate within an environment, specifically in the context of an elevator. The tree includes recovery actions and periodic global path replanning at 1 Hz. \n\nThe sequence begins with restoring configurations for various nodes related to mapping, control, and footprints. It then proceeds to execute a series of actions within a recovery node named \"NavigateRecovery\". This involves updating the path to the goal, following the updated path, and performing recovery actions if needed.\n\nThe \"UpdatePathRecovery\" node attempts to compute a new path to the goal, while the \"FollowPathRecovery\" node follows the computed path using a specific controller. If necessary, it also executes recovery actions such as clearing the global and local costmaps and waiting.\n\nOverall, this behavior tree ensures that the robot can navigate within the elevator environment by periodically updating its path and executing recovery actions when required.",
        "output": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n Copyright (c) 2020  Carnegie Mellon University\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n-->\n<!--\n    This Behavior Tree replans the global path periodically at 1 Hz and it also has\n    recovery actions.\n-->\n\n<root main_tree_to_execute=\"ElevatorTree\">\n  <BehaviorTree ID=\"ElevatorTree\">\n    <RestoreConfig node_name=\"/footprint_publisher\">\n      <RestoreConfig node_name=\"/global_costmap/global_costmap\">\n\t<RestoreConfig node_name=\"/controller_server\">\n\t  <Sequence>\n\t    <ChangeParam node_name=\"/controller_server\"\n\t\t\t param_name=\"FollowPath.max_vel_x\"\n\t\t\t param_value=\"0.5\"  name=\"ChangeParamSpeedDown\"/>\n\t    \n\t    <ChangeParam node_name=\"/global_costmap/global_costmap\"\n\t\t\t param_name=\"people_obstacle_layer.people_enabled\"\n\t\t\t param_value=\"false\"  name=\"DisablePeopleObstacle\"/>\n\n\t    <SetBlackboard value=\"true\" output_key=\"first_time\" />\n\n\t    <RecoveryNode number_of_retries=\"99999999\" name=\"NavigateRecovery\">\n\t      <PipelineSequence name=\"NavigateWithReplanning\">\n\t\t<!-- Not using RateController, so that the robot can keep trying to find the initial/updated path -->\n\t\t<RecoveryNode number_of_retries=\"99999999\" name=\"UpdatePathRecovery\">\n\t\t  <Sequence>\n\t\t    <WaitFloat wait_duration_float=\"0.5\"/>\n\t\t    <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\" />\n\t\t    <BlackboardCheckString value_A=\"{first_time}\" value_B=\"true\">\n\t\t      <Sequence>\n\t\t\t<PublishTopic topic=\"/cabot/event\" value=\"navigation;event;elevator_door_may_be_ready\"/>\n\t\t\t<SetBlackboard value=\"false\" output_key=\"first_time\" />\n\t\t      </Sequence>\n\t\t    </BlackboardCheckString>\n\t\t  </Sequence>\n\t\t  <AlwaysSuccess/>\n\t\t</RecoveryNode>\n\t\t<RecoveryNode number_of_retries=\"1\" name=\"FollowPathRecovery\">\n\t\t  <FollowPath path=\"{path}\" controller_id=\"FollowPath\" />\n\t\t  <AlwaysSuccess/>\n\t\t</RecoveryNode>\n\t      </PipelineSequence>\n\t      <RecoveryNode>\n\t\t<SequenceStar name=\"RecoveryActions\">\n\t\t  <ClearEntireCostmap name=\"ClearGlobalCostmap-context\" server_timeout=\"5000\"\n                                      service_name=\"/global_costmap/clear_entirely_global_costmap\"/>\n\t\t  <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" server_timeout=\"5000\"\n\t\t\t\t      service_name=\"/local_costmap/clear_entirely_local_costmap\"/>\n\t\t  <Wait wait_duration=\"1.0\"/>\t\t  \n\t\t</SequenceStar>\n\t\t<AlwaysSuccess/>\n\t      </RecoveryNode>\n\t    </RecoveryNode>\n\t  </Sequence>\n\t</RestoreConfig>\n      </RestoreConfig>\n    </RestoreConfig>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robot named mobipick to fetch a tool, offer it to a person, stow it away if necessary, and then drive back home. It consists of several sequential steps:\n\n1. Initialization\n2. Fetching the tool from a table if not already holding any objects\n3. Driving to the handover location\n4. Moving the arm to hand over the tool to a person\n5. User interaction\n6. Placing any held object onto the table if necessary\n7. Driving back home\n\nThe tree handles contingencies such as checking if the robot is already holding objects before fetching the tool and ensuring that any held object is placed on the table if needed. Once all these tasks are completed, the robot signals that it's done.\n\nOverall, the behavior tree coordinates a series of actions for mobipick to perform a tool-handling task, including error handling and user interaction.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <!-- This behavior tree lets mobipick fetch the tool, offer it to a person, stow it away if needed,\n        and finally drive back home. -->\n    <BehaviorTree ID=\"MainTree\">\n        <SequenceStar name=\"mobipick_pick_n_place\">\n            <InitNode name=\"Init\"/>\n            <!-- The get_tool_fallback lets mobipick fetch the tool from the table if it is not holding any objects already. -->\n            <Fallback name=\"get_tool_fallback\">\n                <HasAttachedObjects name=\"HasAttachedObjects\"/>\n                <SequenceStar name=\"fetch_tool_sequence\">\n                    <DriveToNode name=\"DriveTo\" goal=\"pick\"/>\n                    <MoveItNode name=\"MoveIt\" function=\"CaptureObject\"/>\n                    <MoveItNode name=\"MoveIt\" function=\"PickUpObject\"/>\n                </SequenceStar>\n            </Fallback>\n            <DriveToNode name=\"DriveTo\" goal=\"handover\"/>\n            <MoveItNode name=\"MoveIt\" function=\"MoveArmToHandover\"/>\n            <UserInteractionNode name=\"UserInteraction\"/>\n            <!-- The clear_gripper_fallback lets mobipick place any object it is holding onto the table. -->\n            <Fallback name=\"clear_gripper_fallback\">\n                <Inverter>\n                    <HasAttachedObjects name=\"HasAttachedObjects\"/>\n                </Inverter>\n                <SequenceStar name=\"stash_tool_sequence\">\n                    <DriveToNode name=\"DriveTo\" goal=\"place\"/>\n                    <MoveItNode name=\"MoveIt\" function=\"PlaceObject\"/>\n                </SequenceStar>\n            </Fallback>\n            <DriveToNode name=\"DriveTo\" goal=\"home\"/>\n            <DoneNode name=\"Done\"/>\n        </SequenceStar>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for a robot. The robot is programmed to perform various tasks based on different conditions and events. \n\nInitially, it attempts to autonomously navigate through a sequence of actions. If it encounters an obstacle or challenge, it will either follow a human for guidance, search for a specific object (bottle), or attempt to grasp the bottle if found. If none of these actions are feasible, it will resort to asking for help.\n\nThe tree encompasses multiple fallbacks and sequences, each containing conditions and actions such as navigating to a room, following a human, finding and grasping a bottle, computing inverse poses, and handling invalid poses. Additionally, there are conditions to check if the robot is in a known room, if the bottle is found, if it's grasped, if it's located, and if the inverse pose is computed and valid.\n\nIn summary, the behavior tree orchestrates the robot's decision-making process, enabling it to autonomously perform tasks,",
        "output": "<root main_tree_to_execute=\"bt0008\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"bt0008\">\n        <Fallback name=\"Main\">\n            <Sequence name=\"Autonomus\">\n                <Fallback name=\"ReachRoom\">\n                    <Sequence name=\"ShouldFollow\">\n                        <Condition ID=\"RoomKnown\"/>\n                        <Fallback name=\"GoToRoom_Fal\">\n                            <Condition ID=\"RobotInRoom\"/>\n                            <Action ID=\"GoToRoom\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Action ID=\"FollowHuman\"/>\n                </Fallback>\n                <Fallback name=\"BottleFound\">\n                    <Condition ID=\"BottleFound\"/>\n                    <Action ID=\"FindBottle\"/>\n                </Fallback>\n                <Fallback name=\"Fetch\">\n                    <Condition ID=\"BottleGrasped\"/>\n                    <Sequence name=\"Grasp\">\n                        <Fallback name=\"InvPoseCompute\">\n                            <Sequence name=\"SeqInvPose\">\n                                <Condition ID=\"InvPoseComputed\"/>\n                                <Condition ID=\"InvPoseValid\"/>\n                            </Sequence>\n                            <Action ID=\"ComputeInvPose\"/>\n                        </Fallback>\n                        <Fallback name=\"GoInvPose\">\n                            <Condition ID=\"RobotAtInvPose\"/>\n                            <Sequence name=\"prepare\">\n                                <Action ID=\"KeepArmsForGrasp\"/>\n                                <Action ID=\"GoToInvPose\"/>\n                            </Sequence>\n                        </Fallback>\n                        <Fallback name=\"Locate\">\n                            <Condition ID=\"BottleLocated\"/>\n                            <Action ID=\"LocateBottle\"/>\n                        </Fallback>\n                        <Action ID=\"GraspBottle\"/>\n                    </Sequence>\n                    <Action ID=\"SetInvPoseInvaild\"/>\n                    <Action ID=\"KeepRunning\"/>\n                </Fallback>\n            </Sequence>\n            <Action ID=\"AskForHelp\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AskForHelp\"/>\n        <Condition ID=\"BottleFound\"/>\n        <Condition ID=\"BottleGrasped\"/>\n        <Condition ID=\"BottleLocated\"/>\n        <Action ID=\"ComputeInvPose\"/>\n        <Action ID=\"FindBottle\"/>\n        <Action ID=\"FollowHuman\"/>\n        <Action ID=\"GoToInvPose\"/>\n        <Action ID=\"GoToRoom\"/>\n        <Action ID=\"GraspBottle\"/>\n        <Condition ID=\"InvPoseComputed\"/>\n        <Condition ID=\"InvPoseValid\"/>\n        <Action ID=\"KeepArmsForGrasp\"/>\n        <Action ID=\"KeepRunning\"/>\n        <Action ID=\"LocateBottle\"/>\n        <Condition ID=\"RobotAtInvPose\"/>\n        <Condition ID=\"RobotInRoom\"/>\n        <Condition ID=\"RoomKnown\"/>\n        <Action ID=\"SetInvPoseInvaild\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence for arm movement with user input. It prompts the user to input x, y, and z coordinates in millimeters within the range of -1000 to 1000. Additionally, it requests the gripper position as a value between 0 (open) and 1 (closed). Once these inputs are provided, the ArmMovement action is executed using the specified coordinates and gripper position. This behavior tree essentially facilitates user-driven control of the robot arm's movement by taking user input for the desired arm position and gripper state, and then executing the arm movement accordingly.",
        "output": " <root main_tree_to_execute = \"ArmMovementWithRequest\" >\n    <BehaviorTree ID=\"ArmMovementWithRequest\">\n        <Sequence>\n            <FloatParameterRequest title=\"Bitte geben Sie x, y und z in [mm] an\"\n                                   value=\"{x}\" key=\"x\" min=\"-1000\" max=\"1000\"/>\n            <FloatParameterRequest value=\"{y}\" key=\"y\" min=\"-1000\" max=\"1000\"/>\n            <FloatParameterRequest value=\"{z}\" key=\"z\" min=\"-1000\" max=\"1000\"/>\n            <FloatParameterRequest msg=\"Geben Sie die Greiferposition von 0 [open] bis 1 [closed] an\"\n                                   value=\"{gripper_position}\" key=\"gripper_position\" min=\"0\" max=\"1\"/>\n            <ArmMovement x=\"{x}\" y=\"{y}\" z=\"{z}\" gripper_position=\"{gripper_position}\"/>\n        </Sequence>\n    </BehaviorTree>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a social robot's interactions over a period of 100 cycles. During each cycle, the robot performs a sequence of actions. It first checks the time using \"Chrono\", then attempts a social interaction with another agent (\"agent_3\") by navigating to a specific goal (\"hri\"). If this social interaction fails, it navigates back home (\"navigate_to_wp\" with goal \"home\"), turns, and writes data to a CSV file.\n\nThis behavior is designed for a social robot to engage in repeated social interactions while also ensuring it can navigate back home, record its activities, and manage its overall behavior within a defined timeframe.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <Repeat num_cycles=\"100\">\n                <Sequence name=\"social_interaction\">\n                    <Chrono/>\n                    <ReactiveFallback name=\"SocialActionFallback\">\n                        <isGoalReached/>\n                        <SocialNav2Action \n                            name=\"social_nav2_action\" \n                            goal=\"hri\" \n                            agent_id=\"agent_3\"/>\n                    </ReactiveFallback>\n                    <NavigateToWp  name=\"navigate_to_wp\" goal=\"home\"/>\n                    <TurnAgent/>\n                    <WriteCSV/>\n                </Sequence>\n            </Repeat>\n        </Sequence>\n     </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a system to dynamically navigate towards a specific pose while continuously updating the goal and path. The system operates at a frequency of 2 Hz, ensuring that the navigation process is updated regularly. It uses a planner with the ID \"GridBased\" to compute the path to the updated goal. If the goal is updated, it triggers the system to follow the updated path using the \"FollowPath\" controller. This approach allows the system to adapt its navigation based on changes in the environment or the target pose.",
        "output": "<!--\n  This Behavior Tree follows a dynamic pose to a certain distance\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"2.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n        </Sequence>\n      </RateController>\n      <ReactiveFallback name=\"test\">\n        <GoalUpdated/>\n        <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n      </ReactiveFallback>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an environment with periodic global path replanning at 1 Hz and includes recovery actions. The main sequence involves navigating with replanning, where the robot computes a path to a specific pose using a grid-based planner and then follows that path using a specified controller. If there are issues during this process, it allows for a limited number of retries before moving on to recovery actions.\n\nThe recovery actions involve clearing the entire local and global costmaps to reset the robot's perception of the environment and waiting for a brief duration. This ensures that if the robot encounters difficulties in navigation, it can recover by resetting its understanding of the surroundings and taking a momentary pause before resuming its navigation tasks.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <SequenceStar name=\"RecoveryActions\">\n        <ClearEntireCostmap service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        <ClearEntireCostmap service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n        <Wait wait_duration=\"2\"/>\n      </SequenceStar>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the decision-making process for an animal, with different actions based on various conditions. The \"MainTree\" starts with a fallback node that contains a single action \"RandomMoveBig\". \n\nThe \"ShedTree\" consists of three main sequences within a fallback node. The first sequence involves leaving the shed, finding a random pasture field, and moving there. The second sequence is triggered when it's night and involves finding the shed, moving there, and entering the shed. The third sequence occurs during the day and if not in the shed, triggers a random move action.\n\nThe tree includes numerous conditions and actions such as determining if it's day or night, being in the shed or on the pasture, finding prey, giving birth, laying eggs, and more. It also includes sub-tree references like \"ShedTree\" to encapsulate complex behaviors.\n\nOverall, the behavior tree models the decision-making process of an animal, encompassing various activities and responses based on environmental and internal conditions",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <FallbackStar name=\"AnimalStandard\">\n            <Action ID=\"RandomMoveBig\"/>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"ShedTree\">\n        <FallbackStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsDay\"/>\n                <Condition ID=\"IsInShed\"/>\n                <Action ID=\"LeaveShed\"/>\n                <Action ID=\"FindRandomPastureField\"/>\n                <Action ID=\"Move\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsNight\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"FindShed\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"EnterShed\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsDay\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"RandomMove\"/>\n            </SequenceStar>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Condition ID=\"CanHaveSex\"/>\n        <Action ID=\"EatPrey\"/>\n        <Action ID=\"EnterShed\"/>\n        <Action ID=\"FindPrey\"/>\n        <Action ID=\"FindRandomPastureField\"/>\n        <Action ID=\"FindRetreat\"/>\n        <Action ID=\"FindShed\"/>\n        <Action ID=\"GiveBirth\"/>\n        <Condition ID=\"IsAdult\"/>\n        <Condition ID=\"IsCarnivore\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsEgg\"/>\n        <Condition ID=\"IsEggLayer\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHerbivore\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInShed\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Condition ID=\"IsOnPasture\"/>\n        <Condition ID=\"IsPregnant\"/>\n        <Condition ID=\"IsProducer\"/>\n        <Condition ID=\"IsReadyToGiveBirth\"/>\n        <Condition ID=\"IsWoodVermin\"/>\n        <Condition ID=\"IsYoung\"/>\n        <Action ID=\"KillPrey\"/>\n        <Action ID=\"LayEgg\"/>\n        <Action ID=\"LeaveShed\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"Produce\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"RandomMoveBig\"/>\n        <SubTree ID=\"ShedTree\"/>\n        <Action ID=\"Sleep\"/>\n        <Action ID=\"TryHaveSex\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the decision-making process for a virtual character. The character's main priorities are addressing its needs (hunger, thirst, and sleep) and performing various job-related tasks.\n\nWhen the character is hungry, it will first attempt to find food and then eat. If thirsty, it will search for a drink and then consume it. When sleepy, it will locate a bed and proceed to sleep. These actions are prioritized within the \"Hunger,\" \"Thirst,\" and \"Sleepy\" sub-trees.\n\nIn addition to managing its basic needs, the character also engages in job-related activities. It follows a sequence of steps for standard jobs, including initializing the job, claiming items, finding tools, moving, equipping tools, working, and finishing the job. It also handles specific tasks such as leaving the map or trading at a market stall.\n\nThe overarching \"MainTree\" coordinates these activities, ensuring that the character addresses its needs before attending to its job responsibilities. If",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Hunger\">\n        <SequenceStar name=\"Hunger\">\n            <FallbackStar>\n                <Sequence>\n                    <Condition ID=\"IsHungry\"/>\n                    <Action ID=\"FindFood\"/>\n                </Sequence>\n            </FallbackStar>\n            <Action ID=\"Move\"/>\n            <Action ID=\"PickUpItem\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"FindDining\"/>\n                    <Action ID=\"Move\"/>\n                </SequenceStar>\n            </ForceSuccess>\n            <Action ID=\"Eat\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobStandard\">\n        <SequenceStar name=\"StandardJobs\">\n            <Action ID=\"InitJob\"/>\n            <Action ID=\"ClaimItems\"/>\n            <Action ID=\"FindTool\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"EquipTool\"/>\n            <RetryUntilSuccesful num_attempts=\"20\">\n                <Inverter>\n                    <SequenceStar>\n                        <Inverter>\n                            <Condition ID=\"AllItemsInPlaceForJob\"/>\n                        </Inverter>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"PickUpItem\"/>\n                        <Action ID=\"GetItemDropPosition\"/>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"DropItem\"/>\n                    </SequenceStar>\n                </Inverter>\n            </RetryUntilSuccesful>\n            <Action ID=\"GetWorkPosition\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"Work\"/>\n            <Action ID=\"FinishJob\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Jobs\">\n        <FallbackStar>\n            <SequenceStar name=\"Leave\">\n                <Condition ID=\"IsTimeToLeave\"/>\n                <Action ID=\"GetExitPosition\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"LeaveMap\"/>\n            </SequenceStar>\n            <SequenceStar name=\"WorkAtMarketStall\">\n                <Action ID=\"GetMarketStallPosition\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"Trade\"/>\n            </SequenceStar>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <FallbackStar name=\"GnomeTrader\">\n            <FallbackStar name=\"Needs\">\n                <SubTree ID=\"Hunger\"/>\n                <SubTree ID=\"Thirst\"/>\n                <SubTree ID=\"Sleepy\"/>\n            </FallbackStar>\n            <SubTree ID=\"Jobs\"/>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Sleepy\">\n        <SequenceStar name=\"Sleep\">\n            <Condition ID=\"IsSleepy\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"FindBed\"/>\n                    <Action ID=\"Move\"/>\n                </SequenceStar>\n            </ForceSuccess>\n            <Action ID=\"Sleep\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Thirst\">\n        <SequenceStar name=\"Thirst\">\n            <FallbackStar>\n                <Sequence>\n                    <Condition ID=\"IsThirsty\"/>\n                    <Action ID=\"FindDrink\"/>\n                </Sequence>\n            </FallbackStar>\n            <Action ID=\"Move\"/>\n            <Action ID=\"PickUpItem\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"FindDining\"/>\n                    <Action ID=\"Move\"/>\n                </SequenceStar>\n            </ForceSuccess>\n            <Action ID=\"Drink\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Condition ID=\"AllItemsInPlaceForJob\"/>\n        <Action ID=\"ButcherAnimal\"/>\n        <Action ID=\"ClaimItems\"/>\n        <Action ID=\"Drink\"/>\n        <Action ID=\"DropItem\"/>\n        <Action ID=\"Eat\"/>\n        <Action ID=\"EquipTool\"/>\n        <Action ID=\"FindBed\"/>\n        <Action ID=\"FindDrink\"/>\n        <Action ID=\"FindFood\"/>\n        <Action ID=\"FindDining\"/>\n        <Action ID=\"FindTool\"/>\n        <Action ID=\"FinishJob\"/>\n        <Action ID=\"GetExitPosition\"/>\n        <Action ID=\"GetItemDropPosition\"/>\n        <Action ID=\"GetJob\"/>\n        <Action ID=\"GetMarketStallPosition\"/>\n        <Action ID=\"GetWorkPosition\"/>\n        <Action ID=\"GrabAnimal\"/>\n        <Action ID=\"HarvestAnimal\"/>\n        <SubTree ID=\"Hunger\"/>\n        <Action ID=\"InitAnimalJob\"/>\n        <Action ID=\"InitButcherJob\"/>\n        <Action ID=\"InitJob\"/>\n        <Condition ID=\"IsButcherJob\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsSleepy\"/>\n        <Condition ID=\"IsThirsty\"/>\n        <Condition ID=\"IsTimeToLeave\"/>\n        <Condition ID=\"IsVeryHungry\"/>\n        <Condition ID=\"IsVeryThirsty\"/>\n        <SubTree ID=\"JobStandard\"/>\n        <SubTree ID=\"Jobs\"/>\n        <Action ID=\"LeaveMap\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"PickUpItem\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"ReleaseAnimal\"/>\n        <Action ID=\"Sleep\"/>\n        <SubTree ID=\"Sleepy\"/>\n        <SubTree ID=\"Thirst\"/>\n        <Action ID=\"Trade\"/>\n        <Action ID=\"Work\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the decision-making process for an entity, likely a game character or AI agent. The entity has several actions and conditions that guide its behavior. \n\nThe main tree \"MainTree\" follows a fallback pattern, where it first attempts to execute a sequence of actions: getting a target, moving, checking if the target is adjacent, and attacking the target if so. If any of these fail, it resorts to a random movement action.\n\nThe available actions include \"AttackTarget,\" \"GetTarget,\" \"Move,\" \"RandomMove,\" and \"Sleep.\" Additionally, there are conditions such as \"IsDay,\" \"IsFemale,\" \"IsHungry,\" \"IsMale,\" \"IsNight,\" and \"TargetAdjacent\" which likely influence the decision-making within the tree.\n\nOverall, the behavior tree governs the entity's decision-making process, considering various conditions and executing appropriate actions based on the circumstances.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback>\n            <SequenceStar name=\"Main\">\n                <Action ID=\"GetTarget\"/>\n                <Action ID=\"Move\"/>\n                <Sequence>\n                    <Condition ID=\"TargetAdjacent\"/>\n                    <Action ID=\"AttackTarget\"/>\n                </Sequence>\n            </SequenceStar>\n            <Action ID=\"RandomMove\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AttackTarget\"/>\n        <Action ID=\"GetTarget\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"Sleep\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for an autonomous vehicle. The vehicle is programmed to perform various actions based on conditions and events encountered during its operation.\n\nThe main sequence \"Core_seq\" includes sub-sequences and actions such as initializing, generating global paths, handling mission start conditions, lane change checks, local path generation, collision checks, and driving actions. These sequences and actions are executed based on specific conditions like checking for nearby objects, lane change feasibility, collision avoidance, and mission wait status.\n\nAdditionally, the behavior tree contains a sub-tree \"treeGenGlobalFollowPath\" that handles the generation of global paths with considerations for lane changes, collision avoidance, and following predefined routes.\n\nOverall, the behavior tree orchestrates the vehicle's decision-making process by evaluating environmental conditions and executing appropriate actions to ensure safe and efficient navigation.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback name=\"Core_seq\">\n            <Sequence>\n                <Condition ID=\"checkMissionWait\"/>\n                <Action ID=\"stop\"/>\n            </Sequence>\n            <Sequence>\n                <Action ID=\"init\"/>\n                <SubTree ID=\"treeGenGlobalFollowPath\"/>\n                <Fallback name=\"mission_start\">\n                    <Sequence>\n                        <Condition ID=\"checkFrontObject\"/>\n                        <Fallback>\n                            <Sequence>\n                                <Condition ID=\"checkIsGlobalFollow\"/>\n                                <Fallback name=\"loc_check\">\n                                    <Sequence>\n                                        <Condition ID=\"checkNearCorner\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                    <Sequence>\n                                        <Condition ID=\"checkNearStopline\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                    <Sequence>\n                                        <Condition ID=\"checkProfitKeeplane\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                </Fallback>\n                            </Sequence>\n                            <Fallback name=\"lane_check\">\n                                <Sequence>\n                                    <Condition ID=\"checkLaneChange\"/>\n                                    <Fallback name=\"lane_check\">\n                                        <Sequence>\n                                            <Condition ID=\"checkLeftchageAble\"/>\n                                            <Fallback>\n                                                <Sequence>\n                                                    <Condition ID=\"checkCollision\"/>\n                                                    <Action ID=\"keepLane\"/>\n                                                </Sequence>\n                                                <Action ID=\"laneChangeLeft\"/>\n                                            </Fallback>\n                                        </Sequence>\n                                        <Fallback>\n                                            <Sequence>\n                                                <Condition ID=\"checkCollision\"/>\n                                                <Action ID=\"keepLane\"/>\n                                            </Sequence>\n                                            <Action ID=\"laneChangeRight\"/>\n                                        </Fallback>\n                                    </Fallback>\n                                </Sequence>\n                                <Sequence name=\"Local_path\">\n                                    <Sequence>\n                                        <Condition ID=\"checkEmptyLocal\"/>\n                                        <Sequence name=\"Gen_Local\">\n                                            <Action ID=\"stop\"/>\n                                            <Action ID=\"genLocalPath\"/>\n                                            <Action ID=\"setStartLocal\"/>\n                                        </Sequence>\n                                    </Sequence>\n                                    <Fallback name=\"local_check\">\n                                        <Sequence>\n                                            <Condition ID=\"checkFinishLocal\"/>\n                                            <Action ID=\"setFinishLocal\"/>\n                                        </Sequence>\n                                        <Sequence>\n                                            <Condition ID=\"checkCollision\"/>\n                                            <Action ID=\"stop\"/>\n                                        </Sequence>\n                                        <Action ID=\"localPathfollow\"/>\n                                    </Fallback>\n                                </Sequence>\n                            </Fallback>\n                        </Fallback>\n                    </Sequence>\n                    <Sequence>\n                        <Condition ID=\"checkNearStopline\"/>\n                        <Fallback>\n                            <Sequence>\n                                <Condition ID=\"checkPassAble\"/>\n                                <Sequence>\n                                    <Sequence>\n                                        <Condition ID=\"checkCollision\"/>\n                                        <Action ID=\"stop\"/>\n                                    </Sequence>\n                                    <Action ID=\"drive\"/>\n                                </Sequence>\n                            </Sequence>\n                            <Action ID=\"stop\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Action ID=\"drive\"/>\n                </Fallback>\n                <Action ID=\"setPath\"/>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"treeGenGlobalFollowPath\">\n        <Fallback>\n            <Sequence>\n                <Condition ID=\"checkGlobalLaneChange\"/>\n                <Fallback>\n                    <Sequence>\n                        <Condition ID=\"checkLetfChange\"/>\n                        <Fallback>\n                            <Sequence>\n                                <Condition ID=\"checkCollision\"/>\n                                <Action ID=\"keepLane\"/>\n                            </Sequence>\n                            <Action ID=\"laneChangeLeft\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Fallback>\n                        <Sequence>\n                            <Condition ID=\"checkCollision\"/>\n                            <Action ID=\"keepLane\"/>\n                        </Sequence>\n                        <Action ID=\"laneChangeRight\"/>\n                    </Fallback>\n                </Fallback>\n            </Sequence>\n            <Action ID=\"genGlobalFollowPath\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"acc\"/>\n        <Condition ID=\"checkCollision\"/>\n        <Condition ID=\"checkEmptyLocal\"/>\n        <Condition ID=\"checkFinishLocal\"/>\n        <Condition ID=\"checkFrontObject\"/>\n        <Condition ID=\"checkGlobalLaneChange\"/>\n        <Condition ID=\"checkIsGlobalFollow\"/>\n        <Condition ID=\"checkLaneChange\"/>\n        <Condition ID=\"checkLeftchageAble\"/>\n        <Condition ID=\"checkLetfChange\"/>\n        <Condition ID=\"checkMissionWait\"/>\n        <Condition ID=\"checkNearCorner\"/>\n        <Condition ID=\"checkNearStopline\"/>\n        <Condition ID=\"checkPassAble\"/>\n        <Condition ID=\"checkProfitKeeplane\"/>\n        <Action ID=\"drive\"/>\n        <Action ID=\"genGlobalFollowPath\"/>\n        <Action ID=\"genLocalPath\"/>\n        <Action ID=\"init\"/>\n        <Action ID=\"keepLane\"/>\n        <Action ID=\"laneChangeLeft\"/>\n        <Action ID=\"laneChangeRight\"/>\n        <Action ID=\"localPathFollow\"/>\n        <Action ID=\"localPathfollow\"/>\n        <Action ID=\"setFinishLocal\"/>\n        <Action ID=\"setPath\"/>\n        <Action ID=\"setStartLocal\"/>\n        <Action ID=\"stop\"/>\n        <SubTree ID=\"treeGenGlobalFollowPath\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree initializes navigation and instructs a robot to navigate and find an object. It first sets up the navigation system and then attempts to find the object. If the object is not found, it enters a recovery mode where it repeatedly navigates and spins in an attempt to locate the object. Once the object is found, it will perform the next sequence of tasks. The behavior tree allows for flexibility by specifying parameters such as timeout duration, number of retries, goal poses, spin cycles, spin distance, and wait time. Overall, the behavior tree orchestrates the process of navigating and searching for a specific object while incorporating recovery mechanisms to handle potential failures.",
        "output": "<!--\n  This Behavior Tree initialize navigation at the moment, but will navigate and find an object\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n      <Sequence name=\"root_sequence\">\n          <InitializeNavigation timeout_s=\"{timeout_s}\"/>\n          <!-- Set this value at task_monitor! -->\n          <RecoveryNode number_of_retries=\"100\" name=\"FindElementRecovery\">\n              <ElementFound/>\n              <Sequence name=\"navigate_and_spin_sequence\">\n                  <GetNextPose goal_poses=\"{goal_poses}\" new_position_goal=\"{goal_position}\" new_orientation_goal=\"{goal_orientation}\"/>\n                  <NavigateToPose position=\"{goal_position}\" orientation=\"{goal_orientation}\"/>\n                  <Repeat num_cycles=\"{spin_cycles}\">\n                      <Sequence name=\"spin_and_wait\">\n                          <Spin spin_dist=\"{spin_angle}\"/>\n                          <Wait wait_duration=\"{wait_time}\"/>\n                      </Sequence>\n                  </Repeat>\n              </Sequence> \n            <!-- Insert next sequence once the element is found -->\n          </RecoveryNode>\n      </Sequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to dynamically navigate to a specific location while continuously updating its path. The robot's movement is controlled by a pipeline sequence that includes rate control and path following with replanning.\n\nAt a set frequency of 1.0 Hz, the robot updates its goal pose and computes a new path using the GridBased planner. This updated path is then truncated based on a specified distance. The robot will continuously follow this truncated path until it reaches the goal or encounters a failure.\n\nOverall, the behavior tree orchestrates the robot's navigation by dynamically adjusting its path while ensuring continuous movement towards the goal location.",
        "output": "<!--\n  This Behavior Tree follows a dynamic pose to a certain distance\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n         <TruncatePath distance=\"1.0\" input_path=\"{path}\" output_path=\"{truncated_path}\"/>\n        </Sequence>\n      </RateController>\n      <KeepRunningUntilFailure>\n        <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\"/>\n      </KeepRunningUntilFailure>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a high-level mission planner for a vehicle. It first computes a route to the desired goal pose using a server named \"/route_planner/plan_route\". Then, it uses a rate controller to ensure a frequency of 10 Hz and computes a trajectory based on the route using a server named \"/trajectory_planner/plan_trajectory\". Finally, it follows the computed trajectory using a path tracking controller with the server name \"/path_tracking_controller/follow_trajectory\".\n\nIn summary, the behavior tree orchestrates the process of planning a route, computing a trajectory, and then following that trajectory to reach the desired goal pose. This sequence of actions allows the vehicle to navigate towards its intended destination while considering constraints and collision information.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <!-- Compute the route to desired goal pose. This will be the high-level mission planner which doesn't \n            consider any vehicle constraints or collison information. Later change \"trajectory\" to \"route\" -->\n            <ComputeRoute goal_pose=\"{goal_pose}\" route=\"{route}\" server_name=\"/route_planner/plan_route\"/>\n            <!-- <ComputePlan route=\"{route}\" path=\"{path}\" server_name=\"/path_planner/plan_path\"/> -->\n            <ReactiveSequence>\n                <RateController hz=\"10.0\">\n                    <ComputeTrajectory route=\"{route}\" trajectory=\"{trajectory}\" server_name=\"/trajectory_planner/plan_trajectory\"/>\n                </RateController>\n                <FollowTrajectory trajectory=\"{trajectory}\" server_name=\"/path_tracking_controller/follow_trajectory\"/>\n            </ReactiveSequence>\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate with periodic global path replanning at 1 Hz and includes recovery actions. The main sequence involves navigating with replanning, which consists of computing a path to a specific pose using a grid-based planner and then following that path while clearing the local costmap. If there are any failures during this process, it allows for retries before moving to recovery fallback actions. The recovery fallback includes clearing both the local and global costmaps, performing a spin action, and then waiting for a specified duration. This entire process is encapsulated within a recovery node with a set number of retries. Overall, the behavior tree ensures robust navigation by incorporating periodic replanning and recovery mechanisms to handle potential failures in the navigation process.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an environment with periodic global path replanning at 1 Hz and includes recovery actions. The main sequence involves navigating with replanning, where the robot computes a path to a specified goal using a grid-based planner. If there are failures in computing the path or following the path, recovery nodes are triggered with a limited number of retries. These recovery nodes include actions such as clearing the global and local costmaps, waiting for a specific duration, and spinning to recover from errors. Additionally, if the robot receives updated goals during any phase, it will wait for a specified duration before attempting to recover. This behavior tree ensures that the robot can navigate effectively through the environment while handling potential failures and adapting to changing circumstances.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"2\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"4\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ReactiveFallback name=\"PathToPoseFallback\">\n              <GoalUpdated/>\n              <RoundRobin name=\"GlobalPlannerRecoveryActions\">\n                <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n                <Wait wait_duration=\"2\"/>\n              </RoundRobin>\n            </ReactiveFallback>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"4\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ReactiveFallback name=\"FollowPathFallback\">\n            <GoalUpdated/>\n            <RoundRobin name=\"PlannerRecoveryActions\">\n              <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n              <Spin spin_dist=\"1.57\"/>\n            </RoundRobin>\n          </ReactiveFallback>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <Wait wait_duration=\"5\"/>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a set of tasks for an AI entity. The tasks include combat, acquiring a uniform, managing hunger and thirst, performing various job types such as butchering animals, dyeing animals, harvesting animals, hauling multiple items, leading animals to pasture, standard jobs, and taming animals. Additionally, it includes actions related to sleeping, training, and supervising training.\n\nThe \"Combat\" behavior involves checking if the entity is in combat, aborting the current job, getting a target, moving towards the target, and attacking if the target is adjacent.\n\nThe \"GetUniform\" behavior focuses on checking, equipping, and cleaning up a uniform.\n\nThe \"Hunger\" and \"Thirst\" behaviors involve finding food or drink, moving to the location, picking up items, and consuming them until full.\n\nThe \"Job\" behaviors are specific to different types of jobs with sequences for each type, including conditions and actions related to the respective job type.\n\nOverall, the behavior tree",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Combat\">\n        <SequenceStar>\n            <Condition ID=\"IsInCombat\"/>\n            <Action ID=\"AbortJob\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"GetTarget\"/>\n                    <Action ID=\"Move\"/>\n                    <Sequence>\n                        <Condition ID=\"TargetAdjacent\"/>\n                        <Action ID=\"AttackTarget\"/>\n                    </Sequence>\n                </SequenceStar>\n            </ForceSuccess>\n            <Condition ID=\"IsInCombat\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"GetUniform\">\n        <SequenceStar name=\"GetUniform\">\n            <Action ID=\"CheckUniform\"/>\n            <Fallback>\n                <Action ID=\"Move\"/>\n                <Action ID=\"UniformCleanUp\"/>\n            </Fallback>\n            <Action ID=\"EquipUniform\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Hunger\">\n        <SequenceStar>\n            <Condition ID=\"IsHungry\"/>\n            <Sequence>\n                <SequenceStar name=\"Hunger\">\n                    <Action ID=\"FindFood\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"PickUpItem\"/>\n                    <ForceSuccess>\n                        <SequenceStar>\n                            <Action ID=\"FindDining\"/>\n                            <Action ID=\"Move\"/>\n                        </SequenceStar>\n                    </ForceSuccess>\n                    <Action ID=\"Eat\"/>\n                </SequenceStar>\n                <Condition ID=\"IsFull\"/>\n            </Sequence>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobButcherAnimal\">\n        <BB_Precondition expected=\"ButcherAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ButcherAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobDyeAnimal\">\n        <BB_Precondition expected=\"DyeAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitJob\"/>\n                    <Action ID=\"ClaimItems\"/>\n                    <SubTree ID=\"MoveAllItemsToJob\"/>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"DyeAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobHarvestAnimal\">\n        <BB_Precondition expected=\"HarvestAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"HarvestAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobHaulMultiple\">\n        <BB_Precondition expected=\"HauleMultipleItems\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitJob\"/>\n                    <Action ID=\"FindTool\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"EquipTool\"/>\n                    <Inverter>\n                        <Sequence>\n                            <Inverter>\n                                <Condition ID=\"AllPickedUp\"/>\n                            </Inverter>\n                            <Sequence>\n                                <Action ID=\"Move\"/>\n                                <Action ID=\"PickUpItem\"/>\n                            </Sequence>\n                            <Action ID=\"ReturnAlwaysRunning\"/>\n                        </Sequence>\n                    </Inverter>\n                    <Condition ID=\"AllPickedUp\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"DropAllItems\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobLeadAnimalToPasture\">\n        <BB_Precondition expected=\"LeadAnimalToPasture\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobStandard\">\n        <Fallback>\n            <SequenceStar name=\"StandardJobs\">\n                <Action ID=\"InitJob\"/>\n                <Action ID=\"ClaimItems\"/>\n                <Action ID=\"FindTool\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"EquipTool\"/>\n                <SubTree ID=\"MoveAllItemsToJob\"/>\n                <Action ID=\"GetWorkPosition\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"Work\"/>\n                <Action ID=\"FinishJob\"/>\n            </SequenceStar>\n            <Action ID=\"AbortJob\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobTameAnimal\">\n        <BB_Precondition expected=\"TameAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"TameAnimal\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Jobs\">\n        <SequenceStar>\n            <Action ID=\"GetJob\"/>\n            <FallbackStar>\n                <SubTree ID=\"JobButcherAnimal\"/>\n                <SubTree ID=\"JobDyeAnimal\"/>\n                <SubTree ID=\"JobLeadAnimalToPasture\"/>\n                <SubTree ID=\"JobHarvestAnimal\"/>\n                <SubTree ID=\"JobTameAnimal\"/>\n                <SubTree ID=\"JobHaulMultiple\"/>\n                <SubTree ID=\"JobStandard\"/>\n            </FallbackStar>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <SubTree ID=\"Jobs\"/>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MoveAllItemsToJob\">\n        <Sequence>\n            <Inverter>\n                <Sequence>\n                    <Inverter>\n                        <Condition ID=\"AllItemsInPlaceForJob\"/>\n                    </Inverter>\n                    <SequenceStar>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"PickUpItem\"/>\n                        <Action ID=\"GetItemDropPosition\"/>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"DropItem\"/>\n                    </SequenceStar>\n                    <Action ID=\"ReturnAlwaysRunning\"/>\n                </Sequence>\n            </Inverter>\n            <Condition ID=\"AllItemsInPlaceForJob\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"OldMoveAllItemsToJob\">\n        <FallbackStar>\n            <Condition ID=\"AllItemsInPlaceForJob\"/>\n            <RetryUntilSuccesful num_attempts=\"20\">\n                <Sequence>\n                    <SequenceStar>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"PickUpItem\"/>\n                        <Fallback>\n                            <Action ID=\"GetItemDropPosition\"/>\n                            <Action ID=\"DropItem\"/>\n                        </Fallback>\n                        <Fallback>\n                            <Action ID=\"Move\"/>\n                            <Action ID=\"DropItem\"/>\n                        </Fallback>\n                        <Action ID=\"DropItem\"/>\n                    </SequenceStar>\n                    <Condition ID=\"AllItemsInPlaceForJob\"/>\n                </Sequence>\n            </RetryUntilSuccesful>\n            <ForceFailure>\n                <Action ID=\"AbortJob\"/>\n            </ForceFailure>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Sleepy\">\n        <SequenceStar name=\"Sleep\">\n            <Condition ID=\"IsSleepy\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"FindBed\"/>\n                    <Action ID=\"Move\"/>\n                </SequenceStar>\n            </ForceSuccess>\n            <Action ID=\"Sleep\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Thirst\">\n        <SequenceStar>\n            <Condition ID=\"IsThirsty\"/>\n            <Sequence>\n                <SequenceStar name=\"Thirst\">\n                    <Action ID=\"FindDrink\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"PickUpItem\"/>\n                    <ForceSuccess>\n                        <SequenceStar>\n                            <Action ID=\"FindDining\"/>\n                            <Action ID=\"Move\"/>\n                        </SequenceStar>\n                    </ForceSuccess>\n                    <Action ID=\"Drink\"/>\n                </SequenceStar>\n                <Condition ID=\"IsDrinkFull\"/>\n            </Sequence>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Trainer\">\n        <SequenceStar name=\"Trainer\">\n            <Condition ID=\"IsTrainer\"/>\n            <Action ID=\"FindTrainerPosition\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"SuperviseTraining\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Training\">\n        <SequenceStar name=\"Training\">\n            <Condition ID=\"IsTrainingTime\"/>\n            <Action ID=\"FindTrainingGround\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"Train\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AbortJob\"/>\n        <Condition ID=\"AllItemsInPlaceForJob\"/>\n        <Condition ID=\"AllPickedUp\"/>\n        <Action ID=\"AttackTarget\"/>\n        <Action ID=\"ButcherAnimal\"/>\n        <Action ID=\"CheckUniform\"/>\n        <Action ID=\"ClaimItems\"/>\n        <SubTree ID=\"Combat\"/>\n        <Action ID=\"Drink\"/>\n        <Action ID=\"DropAllItems\"/>\n        <Action ID=\"DropItem\"/>\n        <Action ID=\"DyeAnimal\"/>\n        <Action ID=\"Eat\"/>\n        <Action ID=\"EquipTool\"/>\n        <Action ID=\"EquipUniform\"/>\n        <Action ID=\"FinalMoveAnimal\"/>\n        <Action ID=\"FindBed\"/>\n        <Action ID=\"FindDining\"/>\n        <Action ID=\"FindDrink\"/>\n        <Action ID=\"FindFood\"/>\n        <Action ID=\"FindTool\"/>\n        <Action ID=\"FindTrainerPosition\"/>\n        <Action ID=\"FindTrainingGround\"/>\n        <Action ID=\"FinishJob\"/>\n        <Action ID=\"GetItemDropPosition\"/>\n        <Action ID=\"GetJob\"/>\n        <Action ID=\"GetTarget\"/>\n        <SubTree ID=\"GetUniform\"/>\n        <Action ID=\"GetWorkPosition\"/>\n        <Action ID=\"GrabAnimal\"/>\n        <Action ID=\"HarvestAnimal\"/>\n        <SubTree ID=\"Hunger\"/>\n        <Action ID=\"InitAnimalJob\"/>\n        <Action ID=\"InitButcherJob\"/>\n        <Action ID=\"InitJob\"/>\n        <Condition ID=\"IsButcherJob\"/>\n        <Condition ID=\"IsDrinkFull\"/>\n        <Condition ID=\"IsFull\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInCombat\"/>\n        <Condition ID=\"IsSleepy\"/>\n        <Condition ID=\"IsThirsty\"/>\n        <Condition ID=\"IsTrainer\"/>\n        <Condition ID=\"IsTrainingTime\"/>\n        <Condition ID=\"IsVeryHungry\"/>\n        <Condition ID=\"IsVeryThirsty\"/>\n        <SubTree ID=\"JobButcherAnimal\"/>\n        <SubTree ID=\"JobDyeAnimal\"/>\n        <SubTree ID=\"JobHarvestAnimal\"/>\n        <SubTree ID=\"JobHaulMultiple\"/>\n        <SubTree ID=\"JobLeadAnimalToPasture\"/>\n        <SubTree ID=\"JobStandard\"/>\n        <SubTree ID=\"JobTameAnimal\"/>\n        <SubTree ID=\"Jobs\"/>\n        <Action ID=\"Move\"/>\n        <SubTree ID=\"MoveAllItemsToJob\"/>\n        <SubTree ID=\"OldMoveAllItemsToJob\"/>\n        <Action ID=\"PickUpItem\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"ReleaseAnimal\"/>\n        <Action ID=\"ReturnAlwaysRunning\"/>\n        <Action ID=\"Sleep\"/>\n        <SubTree ID=\"Sleepy\"/>\n        <Action ID=\"SuperviseTraining\"/>\n        <Action ID=\"TameAnimal\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n        <SubTree ID=\"Thirst\"/>\n        <Action ID=\"Train\"/>\n        <SubTree ID=\"Trainer\"/>\n        <SubTree ID=\"Training\"/>\n        <Action ID=\"UniformCleanUp\"/>\n        <Action ID=\"Work\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic system that controls the movement and blinking of its antennas. The system is designed to continuously run a sequence of actions until it encounters a failure. \n\nInitially, the system activates the antennas with a specific rate and intensity, causing them to blink in a certain pattern for 3 seconds. After this, there is another delay of 3 seconds before the antennas are activated again with a different rate and intensity, resulting in a new blinking pattern. Following another 9-second delay, the antennas are once more activated with an altered rate, intensity, and blinking pattern.\n\nIn summary, the behavior tree orchestrates a continuous cycle where the robot's antennas undergo predefined actions involving activation, delays, and changes in blinking patterns. This process continues indefinitely unless a failure occurs.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<KeepRunningUntilFailure>\n\t\t\t<Sequence>\n\t\t\t\t<Delay delay_msec=\"3000\">\n\t\t\t\t\t<AntennaAction rate=\"0\" intensity=\"10\" left_blink_pattern=\"01\" right_blink_pattern=\"10\" />\n\t\t\t\t</Delay>\n\t\t\t\t<Delay delay_msec=\"3000\">\n\t\t\t\t\t<AntennaAction rate=\"5\" intensity=\"100\" left_blink_pattern=\"01\" right_blink_pattern=\"10\" />\n\t\t\t\t</Delay>\n        \t\t<Delay delay_msec=\"9000\">\n          \t\t\t<AntennaAction rate=\"10\" intensity=\"100\" left_blink_pattern=\"111100000\" right_blink_pattern=\"00001111\" />\n        \t\t</Delay>\n\t\t\t</Sequence>\n\t\t</KeepRunningUntilFailure>\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement towards a specified goal. Initially, the robot is instructed to move to a location with coordinates (1, 2, 3). The \"MoveRobot\" subtree handles this movement and provides feedback on the outcome. If successful, the robot will say \"mission accomplished\"; otherwise, it will say \"mission failed\".\n\nThe \"MoveRobot\" subtree employs a fallback mechanism, attempting to execute a sequence of moving to the specified goal and updating the output accordingly. In case of failure, it directly sets the output as \"mission failed\". This structure ensures that the robot communicates the result of its movement operation.\n\nIn summary, the behavior tree manages the robot's navigation to a designated location and conveys the success or failure of this task through verbal communication.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n\n    <BehaviorTree ID=\"MainTree\">\n\n        <Sequence name=\"main_sequence\">\n            <SetBlackboard output_key=\"move_goal\" value=\"1;2;3\" />\n            <SubTree ID=\"MoveRobot\" target=\"move_goal\" output=\"move_result\" />\n            <SaySomething message=\"{move_result}\"/>\n        </Sequence>\n\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Fallback name=\"move_robot_main\">\n            <SequenceStar>\n                <MoveBase       goal=\"{target}\"/>\n                <SetBlackboard output_key=\"output\" value=\"mission accomplished\" />\n            </SequenceStar>\n            <ForceFailure>\n                <SetBlackboard output_key=\"output\" value=\"mission failed\" />\n            </ForceFailure>\n        </Fallback>\n    </BehaviorTree>\n\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree provided is a simple structure with a single sequence that contains a pick node. The pick node likely represents a decision-making process where the robot or agent will choose between multiple options based on certain conditions or criteria. However, without further details about the pick node's implementation and its child nodes, it is challenging to provide a more specific summary of the task performed by this behavior tree.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <Pick  name=\"pick\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions for a robot. First, it checks if the battery is okay, then it says \"Mission Started!\", moves to a specific location (1;2;3), and finally says \"Mission completed!\". The behavior tree follows a linear sequence of these actions.\n\nThe \"BatteryOK\" action presumably checks the status of the robot's battery. Then, the \"SaySomething\" action is used twice to communicate messages at the beginning and end of the mission. The \"MoveBase\" action directs the robot to move to a specific location defined by the coordinates (1;2;3).\n\nAdditionally, there are other actions defined in the TreeNodesModel section such as \"ThinkWhatToSay\", which seems to generate some text output based on input. However, these actions are not utilized in the main BehaviorTree.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"BatteryOK\"/>\n            <Action ID=\"SaySomething\" message=\"Mission Started!\"/>\n            <Action ID=\"MoveBase\" goal=\"1;2;3\"/>\n            <Action ID=\"SaySomething\" message=\"Mission completed!\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"BatteryOK\"/>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"goal\"/>\n        </Action>\n        <Action ID=\"SaySomething\">\n            <input_port default=\"&quot;Start thinking...&quot;\" name=\"message\"/>\n        </Action>\n        <Action ID=\"ThinkWhatToSay\">\n            <output_port default=\"{the_answer}\" name=\"text\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is a simple sequence of actions. It starts by waiting for 5 seconds and then executes a debug action, printing \"Hello world\". The behavior tree seems to be a basic demonstration or test scenario rather than a complex task. The available actions include waiting for a specified duration, debugging by displaying a string, and other potential robot control actions such as moving the base, speaking, sensing scores, and detecting faces. However, these actions are not utilized in the provided behavior tree. Therefore, it appears to be a simplified example or template for creating more complex behavior trees involving robotic tasks.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"WaitForXSeconds\" result=\"SUCCESS\" seconds=\"5\"/>\n            <Action ID=\"DebugAction\" string=\"Hello world\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\"/>\n            <input_port name=\"action_name\"/>\n        </Action>\n        <Action ID=\"CheckBattery\">\n            <output_port name=\"battery_state\" type=\"int\"/>\n            <output_port name=\"percentage\" type=\"double\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port name=\"charging_state\" type=\"int\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Action ID=\"DebugAction\">\n            <input_port name=\"string\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"Destroy\"/>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"GeneralActionlib\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"constants\">A coma separated list of constants.</input_port>\n            <output_port name=\"result\">This is a string</output_port>\n            <input_port name=\"variables\">A coma separated list of variables.</input_port>\n        </Action>\n        <Action ID=\"GetFloat64\">\n            <output_port name=\"number\" type=\"double\"/>\n            <input_port name=\"topic\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"GetInt16\">\n            <output_port name=\"number\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GetPoseArray\">\n            <input_port name=\"pose_array\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GiveFeedback\">\n            <input_port default=\"850\" name=\"almost_thr\"/>\n            <input_port name=\"correct_blocks\"/>\n            <input_port name=\"incorrect_blocks\"/>\n            <input_port default=\"0\" name=\"personality\"/>\n            <input_port name=\"score\"/>\n        </Action>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"goal_pose\"/>\n        </Action>\n        <Action ID=\"MoveTorso\">\n            <input_port name=\"angle\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"ResetVars\"/>\n        <Action ID=\"SelectBlock\">\n            <input_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <output_port name=\"block_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <input_port name=\"position_in_list\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"SelectFieldFromPoseStamped\">\n            <input_port name=\"field\"/>\n            <output_port name=\"output_val\"/>\n            <input_port name=\"pose_stamped\"/>\n        </Action>\n        <Action ID=\"SelectPose\">\n            <input_port name=\"pose_array\"/>\n            <input_port name=\"pose_stamped\"/>\n            <input_port name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"SenseScore\">\n            <output_port name=\"score\"/>\n            <input_port name=\"score_topic\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"language\"/>\n            <input_port name=\"utterance\"/>\n            <input_port name=\"voice\"/>\n        </Action>\n        <Action ID=\"TimerAction\">\n            <input_port name=\"s_between_success\">Time (s) before this node returns SUCCESS. It will return FAILURE in the meanwhile</input_port>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port default=\"SUCCESS\" name=\"result\">Result after specified time: SUCCESS or FAILURE</input_port>\n            <input_port default=\"5\" name=\"seconds\">Time in seconds</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a system that involves repeating a sequence of actions for a specified number of cycles. The actions include \"LTLPreCheck\" which checks the current and desired state sequence, \"MoveAction\" which initiates a move based on given parameters, and \"UpdateLTL\" which updates the action sequence and desired state while also outputting a new navigation goal.\n\nThe behavior tree iterates through these actions for a defined number of cycles, with each cycle involving the execution of the sequence of actions. The input and output ports of the actions facilitate the flow of data between them, enabling the coordination of the overall system behavior.\n\nOverall, the behavior tree orchestrates the repetitive execution of a sequence of actions, facilitating the monitoring and updating of states and goals within the system.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Action ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                <Action ID=\"MoveAction\" action=\"{action}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\" nav_goal=\"{nav_goal}\"/>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" nav_goal=\"{nav_goal}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n        <Action ID=\"MoveAction\">\n            <output_port name=\"action\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n            <input_port name=\"nav_goal\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n            <output_port name=\"nav_goal\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control the actions of a robotic system. It consists of a sequence of actions that are repeated for a specified number of cycles. The tree includes various conditions, actions, and fallbacks to handle different scenarios.\n\nThe main sequence involves checking a pre-defined state against a desired sequence and executed sequence. If certain conditions are met, it triggers replanning requests at different levels. Additionally, there are reactive sequences that handle fake detections and check reactive LTL (Linear Temporal Logic) states.\n\nWithin the sequence, there's a switch statement that determines the type of action to be performed, such as moving, staying, picking, dropping, resetting, or guiding. Each action has specific input and output ports for managing the state and execution flow.\n\nOverall, the behavior tree orchestrates the robot's actions based on its current state, desired sequences, and reactive inputs, while also handling replanning requests and executing different types of actions based on the situation.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Condition ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <Action ID=\"FakeDetectionLevel1\" replanning_fake_input=\"{replanning_fake_input}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel1\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Condition ID=\"ReactiveLTLStateCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Action ID=\"FakeDetectionLevel3\" replanning_fake_input=\"{replanning_fake_input}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Switch6 case_1=\"move\" case_2=\"stay\" case_3=\"pick\" case_4=\"drop\" case_5=\"reset\" case_6=\"start_guiding\" variable=\"{bt_action_type}\">\n                            <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                            <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"PickAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"DropActionNew\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"ResetAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"GuideActionNew\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <AlwaysFailure/>\n                        </Switch6>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"BackNormalAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"DropAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"DropActionNew\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel1\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel2\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel3\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"GuideActionNew\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Condition>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Condition ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Condition>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"PickAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"ReactiveLTLStateCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Condition>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel1\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ResetAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement towards three different goals (Goal_a, Goal_b, Goal_c) in a repeated sequence. The robot is instructed to move towards each goal sequentially for a total of 3 cycles. The \"MoveRobot\" behavior tree specifies the navigation to a given target using the Nav2Client.\n\nIn summary, the robot will repeatedly navigate to Goal_a, then Goal_b, and finally Goal_c, for a total of 3 cycles. Each cycle involves moving to all three goals in sequence. This behavior can be interrupted if needed, allowing flexibility in the robot's task execution.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"3\">\n            <Sequence>\n                <!-- The goal value=\"position-x;position-y;orientaion-z;orientation-w\" -->\n                <SetBlackboard output_key=\"Goal_a\" value=\"-0.579;-1.341;0.0;1.0\" />\n                <SetBlackboard output_key=\"Goal_b\" value=\"5.214;-1.533;0.0;1.0\" />\n                <SetBlackboard output_key=\"Goal_c\" value=\"-1.588;1.253;0.0;1.0\" />\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                </Sequence>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree controls a robot's actions in an environment. The robot is programmed to perform a sequence of tasks, starting with checking if it is in a specific room. If not, it will approach the room. Then, it sets the transformation frame for a specified object. Following this, it checks if it needs to turn towards the object and approaches the object if necessary.\n\nThe behavior tree uses Fallback to prioritize approaching the room over other tasks if the condition is met. It also utilizes ReactiveSequence to ensure that the robot only approaches the object after successfully turning towards it. This allows the robot to efficiently navigate its environment and interact with objects based on the specified conditions.",
        "output": " <root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <!-- Utilizo Fallback por que en caso de que se cumpla -->\n            <!-- la primera condicion, no es necesario AproachRoom -->\n            <Fallback name=\"check_room\"> <!-- Fallback: comprueba si esta en la habitacion, si no, va a ella-->\n                <inRoom         name=\"in_room\"        room=\"{room}\"/>\n                <ApproachRoom   name=\"approach_room\"  room=\"{room}\"/>\n            </Fallback>\n            <setTF         name=\"setTF\"          object=\"{object}\"/>\n            <ReactiveSequence name=\"check_room\"> <!-- Secuencia reactiva: si turnToTf no da success, no se ejcuta approach object-->\n                <turnToTf        name=\"turn_to_tf\"        object=\"{object}\"/>\n                <ApproachObject name=\"approach_object\" object=\"{object}\"/> <!-- Si esta en frente del objeto, se acerca-->\n            </ReactiveSequence>\n        </Sequence>\n     </BehaviorTree>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a series of actions for a robot to perform. Initially, the robot is directed to move towards a puck using a predefined sequence of arm and movement commands. Once at the puck, it is instructed to push the puck in a specific direction. There's also a commented out section for grabbing a gold puck. The ControlTree behavior tree seems to define various arm and pincer movements without specifying their exact usage.\n\nIn summary, the behavior tree orchestrates the robot's movements and manipulations to interact with pucks, including pushing and potentially grabbing them. It also includes a set of control actions for the robot's arms and pincers.",
        "output": "<!-- Evitement\n<ReactiveSequence>\n<Fallback>\n    <Condition ID=\"NoObstacle\"/>\n    <Avoid/>\n</Fallback>\n<Move pos= positions['P2'] />\n</ReactiveSequence>\n-->\n\n<!-- AX1 : Open/Close clamp\n    AX2 : Move clamp forward/backwards\n    AX3 : Moe clamp left/right\n    AX4 :  Turn clamp\n\n      <SubTree ID=\"PushPuck\"/>\n            <SubTree ID=\"GetG\"/>\n            <SubTree ID=\"WeightG\"/>\n            <SubTree ID=\"ChasseNeige\"/>\n\n\n\n\n\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n\n            <SubTree ID=\"MoveToPuck\"/>\n\n            <SubTree ID=\"PushPuck\"/>\n            <!-- <SubTree ID=\"GrabGoldPuck\"/> -->\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveToPuck\">\n        <Sequence>\n            <TurnArm name=\"TurnFront\" pos=\"512\"/>\n            <MoveArmFront name=\"MoveBack\" pos=\"48\"/>\n            <OpenPince name=\"close_pince\" pos=\"477\"/>\n\n            <MoveAhead distance=\"205\"/>\n            <Turn angle=\"-92\"/>\n            <MoveAhead distance=\"1190\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"PushPuck\">\n        <Sequence>\n            <TurnArm name=\"TurnRight\" pos=\"230\"/>\n            <MoveAhead distance=\"90\"/>\n            <MoveArmSide name=\"MoveRight\" pos=\"620\"/>\n            <TurnArm name=\"TurnFront\" pos=\"512\"/>\n            <MoveArmSide name=\"MoveLeft\" pos=\"0\"/>\n            <Turn angle=\"-9\"/>\n\n            <MoveAhead distance=\"605\"/>\n            <Turn angle=\"95\"/>\n            <OpenPince pos=\"650\"/>\n            <MoveAhead distance=\"25\"/>\n            <MoveArmFront name=\"MoveFront\" pos=\"632\"/>\n            <OpenPince name=\"close_pince_Gold\" pos=\"550\"/>\n            <Wait delay=\"1000\"/>\n            <MoveArmFront name=\"MoveBack\" pos=\"48\"/>\n            <OpenPince name=\"open_pince\" pos=\"661\"/>\n\n\n\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"GrabGoldPuck\">\n        <Sequence>            <Turn angle=\"90\"/>\n            <OpenPince name=\"open_pince\" pos=\"680\"/>\n            <MoveArmFront name=\"MoveFront\" pos=\"632\"/>\n            <OpenPince name=\"close_pince_Gold\" pos=\"557\"/>\n            <MoveArmFront name=\"MoveBack\" pos=\"48\"/>\n            <Turn angle=\"180\"/>\n        </Sequence>\n    </BehaviorTree>\n\n\n\n\n\n    <BehaviorTree ID=\"ControlTree\">\n        <Sequence>\n            <Wait delay=\"5000\"/>\n            <OpenPince name=\"close_pince\" pos=\"477\"/>\n            <OpenPince name=\"close_pince_Gold\" pos=\"557\"/>\n            <OpenPince name=\"open_pince\" pos=\"661\"/>\n            <TurnArm name=\"TurnLeft\" pos=\"820\"/>\n            <TurnArm name=\"TurnFront\" pos=\"512\"/>\n            <TurnArm name=\"TurnRight\" pos=\"230\"/>\n            <MoveArmFront name=\"MoveFront\" pos=\"632\"/>\n            <MoveArmFront name=\"MoveBack\" pos=\"48\"/>\n            <MoveArmSide name=\"MoveRight\" pos=\"803\"/>\n            <MoveArmSide name=\"MoveLeft\" pos=\"0\"/>\n        </Sequence>\n    </BehaviorTree>\n\n\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot's navigation system. It continuously plans and adjusts the global path at 1 Hz, with specific recovery actions for planning, control, and general system issues. The RecoveryNode \"NavigateRecovery\" handles retries and contains a PipelineSequence \"NavigateWithReplanning\", which includes a RateController to control the planning frequency.\n\nWithin the \"NavigateWithReplanning\" sequence, there are two RecoveryNodes: \"ComputePathToPose\" and \"FollowPath\". \"ComputePathToPose\" calculates the path to the goal using a grid-based planner and has a recovery fallback mechanism. \"FollowPath\" executes the planned path and also has a recovery fallback in case of issues.\n\nIf any of the above recovery nodes fail, the \"RecoveryFallback\" handles general recovery actions such as clearing the costmaps, spinning, waiting, and backing up. These actions are executed in a round-robin manner to address various types of issues that may arise during navigation.\n\nOverall",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions specific to planning / control as well as general system issues.\n  This will be continuous if a kinematically valid planner is selected.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ReactiveFallback name=\"ComputePathToPoseRecoveryFallback\">\n              <GoalUpdated/>\n              <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n            </ReactiveFallback>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ReactiveFallback name=\"FollowPathRecoveryFallback\">\n            <GoalUpdated/>\n            <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          </ReactiveFallback>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <RoundRobin name=\"RecoveryActions\">\n          <Sequence name=\"ClearingActions\">\n            <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </Sequence>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n          <BackUp backup_dist=\"0.15\" backup_speed=\"0.025\"/>\n        </RoundRobin>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's task. The robot is programmed to perform a series of actions based on certain conditions and events. Initially, it will attempt to go to a known room. If the room is known, it will execute the action \"Go_to_room\"; otherwise, it will follow a human. Following this, the robot will try to find a bottle and fetch it. If any of these actions fail, the robot will resort to asking for help. \n\nThis behavior tree outlines a decision-making process for the robot, where it prioritizes specific tasks but also has fallback options in case of failure. The actions are executed based on the state of the environment and the success or failure of preceding actions.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!--------------------------------------->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Root>\n            <Fallback name=\"FB1\">\n                <Sequence name=\"S1\">\n                    <Fallback name=\"FB2\">\n                        <Sequence name=\"S3\">\n                            <Condition ID=\"Room_known\"/>\n                            <Action ID=\"Go_to_room\"/>\n                        </Sequence>\n                        <Action ID=\"Follow_human\"/>\n                    </Fallback>\n                    <Sequence name=\"S2\">\n                        <Action ID=\"Find_bottle\"/>\n                        <Action ID=\"Fetch_bottle\"/>\n                    </Sequence>\n                </Sequence>\n                <Action ID=\"Ask_for_help\"/>\n            </Fallback>\n        </Root>\n    </BehaviorTree>\n    <!--------------------------------------->\n    <TreeNodesModel>\n        <Action ID=\"Ask_for_help\"/>\n        <Action ID=\"Fetch_bottle\"/>\n        <Action ID=\"Find_bottle\"/>\n        <Action ID=\"Follow_human\"/>\n        <Action ID=\"Go_to_kitchen\"/>\n        <Action ID=\"Go_to_room\"/>\n        <Condition ID=\"Room_known\"/>\n    </TreeNodesModel>\n    <!--------------------------------------->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robotic system to perform a series of tasks in a structured sequence. The robot is programmed to execute the following steps:\n1. ResetAX12: The robot resets its AX12 arm by performing a sequence of movements.\n2. PickAllYellowAtoms: The robot moves to specific locations, picks up yellow atoms, and then performs a U-turn to drop the atoms.\n3. EmptyBarrelRight: The robot empties a barrel by pushing items out from the right side.\n4. TakeChaos: The robot navigates towards chaos and moves ahead a certain distance.\n\nEach task involves a sequence of subtasks such as moving the arm, turning, picking up items, and waiting for specified durations. Additionally, there are parallel actions involved in some tasks, where the robot simultaneously performs multiple subtasks within certain thresholds.\n\nOverall, the behavior tree outlines a complex set of coordinated actions for the robot, involving precise movements and interactions with its environment to accomplish various objectives.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root\">\n            <SubTree ID=\"ResetAX12\"/>\n\n            <SubTree ID=\"PickAllYellowAtoms\"/>\n            <SubTree ID=\"EmptyBarrelRight\"/>\n            <SubTree ID=\"TakeChaos\"/>\n\n        </Sequence>\n    </BehaviorTree>\n\n    <!--    Global subtrees-->\n\n    <BehaviorTree ID=\"ResetAX12\">\n        <Sequence>\n            <MoveArmFront name=\"move arm to the back\"\n                          pos=\"950\"/>\n            <TurnArm name=\"turn arm to the center\"\n                     pos=\"510\"/>\n            <PushLeftAtom name=\"move arm to the back\"\n                          pos=\"1000\"/>\n            <PushRightAtom name=\"move arm to the back\"\n                           pos=\"580\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"PickAllPurpleAtoms\">\n        <Sequence>\n            <!-- Move to atoms and adjust-->\n            <MoveAhead name=\"move ahead\" distance=\"655\"/>\n            <Turn name=\"turn to the left (to be backwards)\" angle=\"-90\"/>\n            <MoveAhead name=\"move ahead\" distance=\"-142\"/>\n            <Turn name=\"adjust\" angle=\"-1\"/>\n\n            <!-- Pick up atoms-->\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"-100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"9535\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"-100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"19070\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"-100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"28605\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"-100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"38140\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"-100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"47675\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"720\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"57210\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <!-- Move forward to do a U-turn, then go back to drop the atoms -->\n\n            <Turn name=\"u turn\"\n                  angle=\"181\"/>\n            <MoveAhead name=\"move ahead\"\n                       distance=\"920\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"PickAllYellowAtoms\">\n        <Sequence>\n            <!-- Move to atoms and adjust-->\n            <MoveAhead name=\"move ahead\" distance=\"632\"/>\n            <Turn name=\"turn to the left\"\n                  angle=\"-90\"/>\n            <MoveAhead name=\"move ahead\" distance=\"258\"/>\n            <Turn name=\"adjust\" angle=\"-2\"/>\n\n            <!-- Pick up atoms -->\n            <!--<SubTree ID=\"PickAtomRight\"/> shitty pos -->\n\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"9535\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"19070\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"28605\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"38140\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"47675\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <!-- Move to balance -->\n                <MoveAhead name=\"move ahead\" distance=\"200\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"57210\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"EmptyBarrelLeft\">\n        <Sequence>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"58340\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushLeft\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"67875\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushLeft\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"77410\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushLeft\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"86945\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushLeft\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"96480\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushLeft\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"106015\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushLeft\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"EmptyBarrelRight\">\n        <Sequence>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"65460\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushRight\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"74845\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushRight\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"84380\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushRight\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"93915\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushRight\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"103450\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushRight\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"112985*\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushRight\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <!--    Basic subtrees-->\n\n    <BehaviorTree ID=\"PickAtomLeft\">\n        <!--   NOT UP TO DATE   -->\n\n        <Sequence>\n            <Wait delay=\"1000\"/>\n            <!--            <MoveArmFront name=\"move arm to the back\"-->\n            <!--                          pos=\"800\"-->\n            <!--            />-->\n            <!--            <MoveArmSideJoint name=\"move arm to the center (joint mode)\"-->\n            <!--                              pos=\"1023\"-->\n            <!--            />-->\n            <!--            <TurnArm name=\"turn arm to the left\"-->\n            <!--                     pos=\"200\"-->\n            <!--            />-->\n\n            <!--            <MoveArmSideJoint name=\"move arm to the left (new joint mode)\"-->\n            <!--                              pos=\"250\"-->\n            <!--            />-->\n\n            <!--            <ActivatePump/>-->\n            <!--            <Wait name=\"wait for the atom to be stuck\"-->\n            <!--                  delay=\"1000\"/>-->\n\n            <!--            <MoveArmSideJoint name=\"move arm back to the center (joint mode)\"-->\n            <!--                              pos=\"1023\"-->\n            <!--            />-->\n\n            <!--            <TurnArm name=\"turn arm to the center\"-->\n            <!--                     pos=\"510\"-->\n            <!--            />-->\n            <!--            <MoveArmFront name=\"move arm to the front\"-->\n            <!--                          pos=\"200\"-->\n            <!--            />-->\n\n            <!--            <DeactivatePump/>-->\n            <!--            <Wait name=\"wait for the atom to fall\"-->\n            <!--                  delay=\"500\"/>-->\n\n            <!--            <MoveArmFront name=\"move arm to the back\"-->\n            <!--                          pos=\"500\"-->\n            <!--            />-->\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"PickAtomRight\">\n        <Sequence>\n            <MoveArmFront name=\"move arm to the back\" pos=\"950\"/>\n\n            <MoveArmSideJoint name=\"move arm to the center (joint mode)\" pos=\"235\"/>\n            <TurnArm name=\"turn arm to the right\" pos=\"820\"/>\n\n            <MoveArmSideJoint name=\"move arm to the right (joint mode)\" pos=\"1023\"/>\n\n            <!--<ActivatePump/>-->\n            <Wait name=\"wait for the atom to be stuck\" delay=\"500\"/>\n\n            <MoveArmSideJoint name=\"move arm back to the center (joint mode)\" pos=\"235\"/>\n\n            <TurnArm name=\"turn arm to the center\"\n                     pos=\"510\"/>\n            <MoveArmFront name=\"move arm to the front\" pos=\"460\"/>\n\n            <!--<DeactivatePump/>-->\n            <Wait name=\"wait for the atom to fall\" delay=\"1000\"/>\n\n            <MoveArmFront name=\"move arm to the back\" pos=\"950\"/>\n\n            <Wait name=\"wait for the atom to fall\" delay=\"500\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"TurnBarrel\">\n        <Sequence>\n            <ActivateBarrel name=\"start turning the barrel\"/>\n            <RetryUntilSuccesful num_attempts=\"10000000\">\n                <IsBarrelMoveFinished name=\"check if the barrel has turned enough\"\n                                      goalPosition=\"{barrelGoalPosition}\"/>\n            </RetryUntilSuccesful>\n            <DeactivateBarrel name=\"stop turning the barrel\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"PushLeft\">\n        <Sequence>\n            <PushLeftAtom name=\"push it\"\n                          pos=\"530\"/>\n            <PushLeftAtom name=\"come back\"\n                          pos=\"1000\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"PushRight\">\n        <Sequence>\n            <!--<Wait name=\"visual\" delay=\"2000\"/>-->\n            <PushRightAtom name=\"push it\" pos=\"1000\"/>\n            <PushRightAtom name=\"come back\" pos=\"580\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"TakeChaos\">\n        <Sequence>\n            <!--<MoveAhead name=\"move ahead\" distance=\"632\"/>\n            <Turn name=\"turn to the left\" angle=\"-90\"/>\n            <MoveAhead name=\"move ahead\" distance=\"255\"/>\n            <Turn name=\"adjust\" angle=\"-1\"/>\n            <MoveAhead name=\"move ahead\" distance=\"700\"/>-->\n            <Turn name=\"towards chaos\" angle=\"-45\"/>\n            <MoveAhead name=\"move ahead\" distance=\"500\"/>\n            <Turn name=\"towards chaos\" angle=\"-137\"/>\n            <MoveAhead name=\"move ahead\" distance=\"1200\"/>\n        </Sequence>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robotic system in a healthcare environment. It encompasses various tasks such as arm and base movements, battery charging, device pairing, emergency response, and patient transportation.\n\nThe main sequence within the \"MainTree\" includes reactive checks for stopping, diagnostic status, battery level, and patient condition. If any of these checks fail, it falls back to recharging or handling an emergency situation.\n\nFurthermore, it allows selection between different behaviors such as free walking, guided walking, and transport with devices based on user input. Each behavior involves a series of movements and interactions, including parameter requests for user input and decision-making based on the responses.\n\nOverall, the behavior tree provides a framework for the robot to perform essential tasks in a healthcare setting, including assisting patients, responding to emergencies, and managing its own energy requirements.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n\n    <BehaviorTree ID=\"ArmMovementWithRequest\">\n        <Sequence>\n            <FloatParameterRequest title=\"Bitte geben Sie x, y und z in [mm] an\"\n                                   value=\"{x}\" key=\"x\" min=\"-1000\" max=\"1000\"/>\n            <FloatParameterRequest value=\"{y}\" key=\"y\" min=\"-1000\" max=\"1000\"/>\n            <FloatParameterRequest value=\"{z}\" key=\"z\" min=\"-1000\" max=\"1000\"/>\n            <FloatParameterRequest msg=\"Geben Sie die Greiferposition von 0 [open] bis 1 [closed] an\"\n                                   value=\"{gripper_position}\" key=\"gripper_position\" min=\"0\" max=\"1\"/>\n            <ArmMovement x=\"{x}\" y=\"{y}\" z=\"{z}\" gripper_position=\"{gripper_position}\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"BaseMovementWithRequest\">\n        <Sequence>\n            <FloatParameterRequest title=\"Bitte geben Sie x und y in [m] an\"\n                                   value=\"{x}\" key=\"x\" min=\"-10\" max=\"10\"/>\n            <FloatParameterRequest value=\"{y}\" key=\"y\" min=\"-10\" max=\"10\"/>\n            <BaseMovement x=\"{x}\" y=\"{y}\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"BatteryChargingWithRequest\">\n        <Sequence>\n            <FloatParameterRequest title=\"Bitte geben Sie die Zielladung an von 0 [empty] bis 1 [full]\"\n                                   value=\"{goal_percentage}\" key=\"goal_percentage\" min=\"0\" max=\"1\"/>\n            <BatteryCharging goal_percentage=\"{goal_percentage}\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"DevicePairingWithRequest\">\n        <Sequence>\n            <!--pairing_mode und device_type müssen den Konstanten im .action file entsprechen-->\n            <IntParameterRequest title=\"Bitte geben Sie den Kopplungsmodus und das Gerät an\"\n                                   options=\"pair,unpair\"\n                                   value=\"{pairing_mode}\"/>\n            <IntParameterRequest options=\"wheelchair,rollator,hospitalbed,chargingstation\"\n                                   value=\"{device_type}\"/>\n            <DevicePairing pairing_mode=\"{pairing_mode}\" device_type=\"{device_type}\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"Emergency\">\n        <Sequence>\n            <StringParameterRequest title=\"Emergency finished?\" \n                                    msg=\"type [y] or [n]\"\n                                    value=\"{confirm}\"/>\n            <CheckBlackboard input=\"{confirm}\" compare_to=\"y\" />\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"FreeWalking\">\n        <Sequence>\n            <!--room1 = (2,2)-->\n            <BaseMovement x=\"2\" y=\"2\"/>\n            <StringParameterRequest title=\"Start walking to destination?\" \n                                    msg=\"type [y] or [n]\"\n                                    value=\"{confirm}\"/>\n            <CheckBlackboard input=\"{confirm}\" compare_to=\"y\" />\n            <!--room2 = (5,5)-->\n            <BaseMovement x=\"5\" y=\"5\"/>\n            <StringParameterRequest title=\"Patient arrived?\" \n                                    msg=\"type [y] or [n]\"\n                                    value=\"{confirm}\"/>\n            <CheckBlackboard input=\"{confirm}\" compare_to=\"y\" />\n            <!--waiting_area = (0,0)-->\n            <BaseMovement x=\"0\" y=\"0\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"GuidedWalking\">\n        <Sequence>\n            <!--room1 = (2,2)-->\n            <BaseMovement x=\"2\" y=\"2\"/>\n            <!--arm_support_position = (200,200,0,0)-->\n            <ArmMovement x=\"200\" y=\"200\" z=\"0\" gripper_position=\"0\"/>\n            <StringParameterRequest title=\"Start walking to destination?\" \n                                    msg=\"type [y] or [n]\"\n                                    value=\"{confirm}\"/>\n            <CheckBlackboard input=\"{confirm}\" compare_to=\"y\" />\n            <!--room2 = (5,5)-->\n            <BaseMovement x=\"5\" y=\"5\"/>\n            <StringParameterRequest title=\"Patient arrived?\" \n                                    msg=\"type [y] or [n]\"\n                                    value=\"{confirm}\"/>\n            <CheckBlackboard input=\"{confirm}\" compare_to=\"y\" />\n            <!--arm_home_position = (0,0,0,0)-->\n            <ArmMovement x=\"0\" y=\"0\" z=\"0\" gripper_position=\"0\"/>\n            <!--waiting_area = (0,0)-->\n            <BaseMovement x=\"0\" y=\"0\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"Recharge\">\n        <Sequence>\n            <!--charging_station = (-5,-5)-->\n            <BaseMovement x=\"-5\" y=\"-5\"/>\n            <!--mode 1 = pair, type 4 = chargingstation-->\n            <DevicePairing pairing_mode=\"1\" device_type=\"4\"/>\n            <BatteryCharging goal_percentage=\"1\"/>\n            <!--mode 2 = unpair, type 4 = chargingstation-->\n            <DevicePairing pairing_mode=\"2\" device_type=\"4\"/>\n            <!--waiting_area = (0,0)-->\n            <BaseMovement x=\"0\" y=\"0\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"TransportWithDevice\">\n        <Sequence>\n            <!--room1 = (2,2)-->\n            <BaseMovement x=\"2\" y=\"2\"/>\n            <StringParameterRequest title=\"Start pairing and move to destination?\" \n                                    msg=\"type [y] or [n]\"\n                                    value=\"{confirm}\"/>\n            <CheckBlackboard input=\"{confirm}\" compare_to=\"y\" />\n            <IntParameterRequest options=\"wheelchair,rollator,hospitalbed,chargingstation\"\n                                   value=\"{device_type}\"/>\n            <!--mode 1 = pair-->\n            <DevicePairing pairing_mode=\"1\" device_type=\"{device_type}\"/>\n            <!--room2 = (5,5)-->\n            <BaseMovement x=\"5\" y=\"5\"/>\n            <StringParameterRequest title=\"Patient arrived?\" \n                                    msg=\"type [y] or [n]\"\n                                    value=\"{confirm}\"/>\n            <CheckBlackboard input=\"{confirm}\" compare_to=\"y\" />\n            <!--mode 2 = unpair-->\n            <DevicePairing pairing_mode=\"2\" device_type=\"{device_type}\"/>\n            <!--waiting_area = (0,0)-->\n            <BaseMovement x=\"0\" y=\"0\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MainTree\">\n        <ReactiveSequence>\n            <CheckStop/>\n            <CheckDiagnosticStatus/>\n            <Fallback>\n                <CheckBattery/>\n                <Recharge/>\n            </Fallback>\n            <Fallback>\n                <CheckPatientCondition/>\n                <Emergency/>\n            </Fallback>\n            <Sequence>\n                <StringParameterRequest title=\"Select a behavior\"\n                                       options=\"FreeW,GuidedW,TransportWD\"\n                                       value=\"{selected_behavior}\"/>\n                <BehaviorSwitch variable=\"{selected_behavior}\" case_1=\"FreeW\" case_2=\"GuidedW\" case_3=\"TransportWD\">\n                    <FreeWalking/>\n                    <GuidedWalking/>\n                    <TransportWithDevice/>\n                    <AlwaysFailureNode name=\"default\"/>\n                </BehaviorSwitch>\n            </Sequence>\n        </ReactiveSequence>\n    </BehaviorTree>\n\n    <TreeNodesModel>\n        <SubTree ID=\"BaseMovementWithRequest\"/>\n        <SubTree ID=\"ArmMovementWithRequest\"/>\n        <SubTree ID=\"BatteryChargingWithRequest\"/>\n        <SubTree ID=\"DevicePairingWithRequest\"/>\n        <SubTree ID=\"FreeWalking\"/>\n        <SubTree ID=\"GuidedWalking\"/>\n        <SubTree ID=\"TransportWithDevice\"/>\n        <SubTree ID=\"Emergency\"/>\n        <SubTree ID=\"Recharge\"/>\n\n        <Condition ID=\"CheckStop\"/>\n        <Condition ID=\"CheckBattery\"/>\n        <Condition ID=\"CheckDiagnosticStatus\"/>\n        <Condition ID=\"CheckPatientCondition\"/>\n        <Condition ID=\"CheckBlackboard\"/>\n            <input_port name=\"input\" type=\"std::string\"/>\n            <input_port name=\"compare_to\" type=\"std::string\"/>\n\n        <Decorator ID=\"BehaviorSwitch\"/>\n\n        <Action ID=\"DevicePairing\">\n            <input_port name=\"pairing_mode\" type=\"int\"/>\n            <input_port name=\"device_type\" type=\"int\"/>\n        </Action>\n        <Action ID=\"ArmMovement\">\n            <input_port name=\"x\" type=\"float\"/>\n            <input_port name=\"y\" type=\"float\"/>\n            <input_port name=\"z\" type=\"float\"/>\n            <input_port name=\"gripper\" type=\"float\"/>\n        </Action>\n        <Action ID=\"BatteryCharging\">\n            <input_port name=\"goal_percentage\" type=\"float\"/>\n        </Action>\n        <Action ID=\"BaseMovement\">\n            <input_port name=\"x\" type=\"float\"/>\n            <input_port name=\"y\" type=\"float\"/>\n        </Action>\n        <Action ID=\"StringParameterRequest\">\n            <output_port name=\"value\" type=\"std::string\"/>\n            <input_port name=\"title\" type=\"std::string\"/>\n            <input_port name=\"msg\" type=\"std::string\"/>\n            <input_port name=\"key\" type=\"std::string\"/>\n            <input_port name=\"min\" type=\"std::string\"/>\n            <input_port name=\"max\" type=\"std::string\"/>\n            <input_port name=\"default_value\" type=\"std::string\"/>\n            <input_port name=\"options\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"FloatParameterRequest\">\n            <output_port name=\"value\" type=\"float\"/>\n            <input_port name=\"title\" type=\"std::string\"/>\n            <input_port name=\"msg\" type=\"std::string\"/>\n            <input_port name=\"key\" type=\"std::string\"/>\n            <input_port name=\"min\" type=\"std::string\"/>\n            <input_port name=\"max\" type=\"std::string\"/>\n            <input_port name=\"default_value\" type=\"std::string\"/>\n            <input_port name=\"options\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"IntParameterRequest\">\n            <output_port name=\"value\" type=\"int\"/>\n            <input_port name=\"title\" type=\"std::string\"/>\n            <input_port name=\"msg\" type=\"std::string\"/>\n            <input_port name=\"key\" type=\"std::string\"/>\n            <input_port name=\"min\" type=\"std::string\"/>\n            <input_port name=\"max\" type=\"std::string\"/>\n            <input_port name=\"default_value\" type=\"std::string\"/>\n            <input_port name=\"options\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"AlwaysFailureNode\"/>\n    </TreeNodesModel>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of tasks for a robot. First, it calculates a goal position and then prints the target position. Next, it sets another goal position and prints this new target. The overall task seems to involve setting and printing different goal positions for the robot to follow.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <CalculateGoal   goal=\"{GoalPosition}\" />\n            <PrintTarget     target=\"{GoalPosition}\" />\n            <SetBlackboard   output_key=\"OtherGoal\" value=\"-1;3\" />\n            <PrintTarget     target=\"{OtherGoal}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for a robot to place an object. The robot first obtains the pose of the object and then determines where to place it. After that, it approaches the object and proceeds to place it in the specified location using a simple placing action.\n\nOverall, the behavior tree orchestrates the process of placing an object by ensuring that the robot has the necessary information about the object's pose and the desired placement location before executing the placement action. This ensures a systematic and controlled approach to the task of placing objects.",
        "output": "<!-- \n    Prerrequisitos\n    - el objeto está en el brazo\n    - sabemos donde va el objeto\n    va a clean up\n -->\n\n\n<root main_tree_to_execute = \"MainTree\" >\n   <BehaviorTree ID=\"MainTree\">\n      <Sequence name=\"place\">\n        <GetPickObject  name=\"get_pose_from_object\" object_id=\"{object_id}\"/> <!-- TODO: leer grafo y averiguar objeto con su tipo-->\n        <GetPlacingPose  name=\"get_placing_pose\" object=\"{object_id}\" ob_pose=\"{pose}\"/> <!-- TODO: lee el world model y decide donde va el objeto -->\n        <ApproachObject name=\"approach_object\" object_pose=\"{pose}\"/>   <!-- from bt_test_approach -->\n        <PlaceSimple  name=\"place\" goal=\"{pose}\"/>  <!-- from gb_manipulation -->\n      </Sequence>\n   </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is quite simple. It instructs the system to execute a sequence that involves taking a snapshot using the SnapshotClient. This likely indicates that the system needs to capture and process some form of data or information, possibly for analysis or decision-making purposes.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SnapshotClient/>\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a simple task for a robot. The robot is instructed to first perform a \"Turn\" action and then proceed to \"Go_object\" where the specific target object is provided as input. This suggests that the robot is expected to turn in a certain direction and then move towards a specified object.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n      <Sequence name=\"root_sequence\">\n        <Turn   name=\"Turn\"/>\n        <Go_object   name=\"Go_object\" target=\"{object}\"/>\n      </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a process involving collection and dumping tasks. Initially, the robot follows a sequence to execute the \"collectTree\" and \"dumpTree\". The \"collectTree\" involves the robot performing two actions in sequence - \"go1\" followed by \"go2\". On the other hand, the \"dumpTree\" employs a fallback mechanism where the robot attempts \"go1\" and if it fails, it proceeds with \"go2\".\n\nIn summary, the behavior tree outlines a workflow for the robot to collect items using a specific sequence of actions and then dump them using a fallback mechanism. This allows the robot to efficiently handle both collection and dumping tasks.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <SubTree ID=\"collectTree\"/>\n            <SubTree ID=\"dumpTree\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"collectTree\">\n        <Sequence>\n            <Action ID=\"go1\"/>\n            <Action ID=\"go2\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"dumpTree\">\n        <Fallback>\n            <Action ID=\"go1\"/>\n            <Action ID=\"go2\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <SubTree ID=\"collectTree\"/>\n        <SubTree ID=\"dumpTree\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an environment with periodic global path replanning at 1 Hz and includes recovery actions. It uses a RecoveryNode with 6 retries, incorporating a PipelineSequence for navigation with replanning. The RateController ensures the frequency of path computation. If there's a failure in computing the path, it clears the global costmap and retries once. Then, the robot follows the computed path and clears the local costmap if necessary.\n\nIn case of any recovery, the ReactiveFallback node handles it by first checking for updated goals, followed by executing a sequence of recovery actions including clearing both local and global costmaps, spinning the robot, and waiting for a specified duration.\n\nOverall, the behavior tree ensures robust navigation by periodically updating the path, handling failures in path computation, and executing recovery actions when needed to ensure successful navigation in dynamic environments.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a task for a mobile robot equipped with a device. The robot is programmed to perform a sequence of actions: first, it moves to coordinates (4.5, -7), then prompts for confirmation to start pairing and move to the destination. After receiving confirmation, it selects a type of device from a predefined list and initiates pairing in mode 1. Subsequently, the robot moves to coordinates (-9, -5) and checks for patient arrival. Upon confirmation, it proceeds to unpair the device in mode 2. Finally, it navigates back to the waiting area at coordinates (0, 0).\n\nIn summary, the behavior tree orchestrates the transportation of a device by a mobile robot, including the processes of pairing, movement, and unpairing, all while interacting with the user through parameter requests and blackboard checks.",
        "output": "<root main_tree_to_execute = \"TransportWithDevice\" >\n    <BehaviorTree ID=\"TransportWithDevice\">\n        <Sequence>\n            <!--room1 = (4.5,-7)-->\n            <BaseMovement x=\"4.5\" y=\"-7\"/>\n            <StringParameterRequest title=\"Start pairing and move to destination?\" \n                                    msg=\"type [y] or [n]\"\n                                    value=\"{confirm}\"/>\n            <CheckBlackboard input=\"{confirm}\" compare_to=\"y\" />\n            <IntParameterRequest options=\"wheelchair,rollator,hospitalbed,chargingstation\"\n                                   value=\"{device_type}\"/>\n            <!--mode 1 = pair-->\n            <DevicePairing pairing_mode=\"1\" device_type=\"{device_type}\"/>\n            <!--room2 = (-9,-5)-->\n            <BaseMovement x=\"-9\" y=\"-5\"/>\n            <StringParameterRequest title=\"Patient arrived?\" \n                                    msg=\"type [y] or [n]\"\n                                    value=\"{confirm}\"/>\n            <CheckBlackboard input=\"{confirm}\" compare_to=\"y\" />\n            <!--mode 2 = unpair-->\n            <DevicePairing pairing_mode=\"2\" device_type=\"{device_type}\"/>\n            <!--waiting_area = (0,0)-->\n            <BaseMovement x=\"0\" y=\"0\"/>\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a navigation system for a robot that periodically recalculates its global path at a frequency of 1 Hz. It uses a pipeline sequence where it first computes the path to a specified goal using a \"GridBased\" planner, and then follows the computed path using a specific controller. This setup allows the robot to continuously update and follow an optimal path towards its goal while considering dynamic changes in the environment.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </RateController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a Reactive Sequence that contains a condition and an action. The condition, named \"SCConditionExample,\" is checked first, and if it is satisfied, the action \"SCActionExample\" is executed. This suggests that the behavior tree is designed to perform a reactive action based on the satisfaction of a specific condition.",
        "output": "<?xml version=\"1.0\"?>\n<!--\n Copyright (C) 2020 Fondazione Istituto Italiano di Tecnologia (IIT)\n All Rights Reserved.\n-->\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <ReactiveSequence>\n         <Condition ID=\"YARPCondition\" name=\"SCConditionExample\"/>\n         <Action ID=\"YARPAction\" name=\"SCActionExample\"/>\n        </ReactiveSequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robotic task involving multiple sub-tasks. Initially, the robot checks the quantity of specific objects and then proceeds with its main task behavior. If required, it asks for human assistance. The main task behavior involves checking the location of objects and replanning the task accordingly. It also ensures that the final task location is reached. \n\nThe \"Robot_Task_Behaviour\" behavior tree coordinates these tasks, including object location checks, task completion verification, and the execution of the actual task through the \"Task_BT\" behavior tree. The \"Task_BT\" behavior tree further breaks down the task into smaller actions such as movement, picking, placing, and other complex arm movements.\n\nEach action within the \"Task_BT\" behavior tree has its own recovery mechanism in case of failure, ensuring robustness. For instance, the \"MOVE1\" behavior tree handles movement failures by attempting to find a new point or generating an alarm and setting a failure if necessary. Similarly, the \"PICK",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute ='Main_Tree'>\n\t<BehaviourTree ID = 'Main_Tree'>\n\t\t<Fallback>\n\t\t\t<ReactiveSequence name = 'root_sequence'>\n\t\t\t\t<CheckObjQtySrv service_name = '/check_obj_qty' object_name1='WhitePawn' quantity1='2' object_name2='BlackPawn' quantity2='1' result='{response1}' sku_id = '{result}'/>\n\t\t\t\t<SubTree ID = 'Robot_Task_Behaviour'/>\n\t\t\t</ReactiveSequence>\n\t\t\t<AskForHelpAction server_name = '/tts' text = 'Hi Human, Can you please help me?' language_id = 'en_US' result = '{response}'/>\n\t\t</Fallback>\n\t</BehaviourTree>\n\t<BehaviourTree ID = 'Robot_Task_Behaviour'>\n\t\t<ReactiveSequence name = 'task_behaviour_sequence'>\n\t\t\t<Fallback>\n\t\t\t\t<CheckObjLocationSrv service_name = '/check_obj_location' sku_ids = '{result}' result = '{response1}' location_names = '{locations}'/>\n\t\t\t\t<SubTree ID = 'Replan_Task'/>\n\t\t\t</Fallback>\n\t\t\t<Fallback>\n\t\t\t\t<TaskCompleteSrv service_name = '/check_final_location' sku_ids = '{result}' final_location = 'C' result = '{response1}' />\n\t\t\t\t<SubTree ID = 'Task_BT'/>\n\t\t\t</Fallback>\n\t\t</ReactiveSequence>\n\t</BehaviourTree>\n\t<BehaviourTree ID = 'Task_BT'>\n\t\t<ReactiveSequence name = 'action_sequence'>\n\t\t\t<SubTree ID='MOVE1'/>\n\t\t\t<SubTree ID='PICK2'/>\n\t\t\t<SubTree ID='MOVE3'/>\n\t\t\t<SubTree ID='PLACE4'/>\n\t\t</ReactiveSequence>\n\t</BehaviourTree>\n\t<BehaviourTree ID = 'MOVE1'>\n\t\t<Fallback name = 'move_fallback'>\n\t\t\t<ReactiveSequence name = 'recovery_move'>\n\t\t\t\t<Fallback name = 'move_recovery'>\n\t\t\t\t\t<MovePointAvailable service_name ='ABCD3' />\n\t\t\t\t\t<FindNewPoint service_name = '/findpoint' />\n\t\t\t\t</Fallback>\n\t\t\t\t<Fallback name = 'move_action'>\n\t\t\t\t\t<RobotAtPoint service_name ='ABCD2' />\n\t\t\t\t\t<MoveBaseModActionClient server_name = 'movebase_mod_action' x_ = '2.7086000442504883' y_ = '5.208399772644043' z_ ='0.09854999929666519'  wx_ ='0.0' wy_ ='0.0' wz_ ='0.0' w_ ='1.0' result = '{recieved_message}' />\n\t\t\t\t</Fallback>\n\t\t\t</ReactiveSequence>\n\t\t\t<GenerateAlarm_and_SetFailure/>\n\t\t</Fallback>\n\t</BehaviourTree>\n\t<BehaviourTree ID = 'PICK2'>\n\t\t<Fallback name = 'pick_fallback'>\n\t\t\t<ReactiveSequence name = 'pick_behaviour'>\n\t\t\t\t<Fallback name = 'pick_recovery_action'>\n\t\t\t\t\t<CheckObjPose service_name ='check_current_pose' initial_pose = '[3.7875, 5.1225, 0.78, 1.0, 0.0, 0.0, 0.0]' result ='{res}' current_pose ='{pose}'  />\n\t\t\t\t\t<ReplanMotion service_name = '/findpoint' />\n\t\t\t\t</Fallback>\n\t\t\t\t<Fallback name = 'pick_action'>\n\t\t\t\t\t<DummyCondition service_name ='dummy_srv' request = 'true' result = '{res1}'/>\n\t\t\t\t\t<TrajArmTorsoGripActionClient server_name = 'arm_controller/follow_joint_trajectory' traj_size = '41.0' j1_pos = '[0.2004449963569641, 0.23802199959754944, 0.3158380091190338, 0.393653005361557, 0.4714690148830414, 0.5492849946022034, 0.6270999908447266, 0.7049160003662109, 0.7827309966087341, 0.8605470061302185, 0.9383630156517029, 1.0161800384521484, 1.0939899682998657, 1.1718100309371948, 1.249619960784912, 1.3274400234222412, 1.4052599668502808, 1.4830700159072876, 1.5608899593353271, 1.638700008392334, 1.7165199518203735, 1.7044800519943237, 1.692430019378662, 1.6803900003433228, 1.6683499813079834, 1.656309962272644, 1.6442699432373047, 1.6322300434112549, 1.6201800107955933, 1.608139991760254, 1.5960999727249146, 1.5840599536895752, 1.5720200538635254, 1.5599700212478638, 1.5479300022125244, 1.535889983177185, 1.5238499641418457, 1.5118099451065063, 1.4997600317001343, 1.487720012664795, 1.4756799936294556]' j1_name = 'arm_1_joint' j2_pos = '[-1.2990700006484985, -1.2213399410247803, -1.1865299940109253, -1.1517200469970703, -1.1169099807739258, -1.0821000337600708, -1.0472899675369263, -1.0124800205230713, -0.9776700139045715, -0.9428600072860718, -0.908050000667572, -0.8732389807701111, -0.8384289741516113, -0.8036190271377563, -0.7688090205192566, -0.7339990139007568, -0.6991890072822571, -0.6643790006637573, -0.6295689940452576, -0.5947589874267578, -0.5599489808082581, -0.5300559997558594, -0.5001620054244995, -0.47026899456977844, -0.44037601351737976, -0.4104830026626587, -0.3805899918079376, -0.35069599747657776, -0.3208029866218567, -0.290910005569458, -0.26101699471473694, -0.23112399876117706, -0.2012300044298172, -0.17133699357509613, -0.14144399762153625, -0.11155100166797638, -0.08165770024061203, -0.05176449939608574, -0.021871300414204597, 0.00802191998809576, 0.037915099412202835]' j2_name = 'arm_2_joint' j3_pos = '[-0.20222899317741394, -0.26052799820899963, -0.2908940017223358, -0.321260005235672, -0.3516260087490082, -0.38199299573898315, -0.41235899925231934, -0.4427250027656555, -0.4730910062789917, -0.5034570097923279, -0.5338230133056641, -0.5641890168190002, -0.5945559740066528, -0.624921977519989, -0.6552879810333252, -0.6856539845466614, -0.7160199880599976, -0.7463859915733337, -0.7767530083656311, -0.8071190118789673, -0.8374850153923035, -0.7660520076751709, -0.6946200132369995, -0.6231870055198669, -0.5517539978027344, -0.480322003364563, -0.4088889956474304, -0.33745598793029785, -0.26602399349212646, -0.1945910006761551, -0.1231589987874031, -0.051725901663303375, 0.01970669999718666, 0.0911393016576767, 0.1625719964504242, 0.23400500416755676, 0.30543699860572815, 0.3768700063228607, 0.4483020007610321, 0.5197349786758423, 0.5911679863929749]' j3_name = 'arm_3_joint' j4_pos = '[2.0018301010131836, 1.9821399450302124, 1.942039966583252, 1.9019500017166138, 1.8618500232696533, 1.8217600584030151, 1.7816599607467651, 1.741569995880127, 1.7014700174331665, 1.6613800525665283, 1.6212799549102783, 1.5811899900436401, 1.5410900115966797, 1.5010000467300415, 1.4608999490737915, 1.420799970626831, 1.3807100057601929, 1.3406100273132324, 1.3005199432373047, 1.2604199647903442, 1.220329999923706, 1.178689956665039, 1.1370500326156616, 1.095420002937317, 1.05377995967865, 1.0121400356292725, 0.9705079793930054, 0.9288709759712219, 0.8872339725494385, 0.8455970287322998, 0.8039609789848328, 0.7623239755630493, 0.7206869721412659, 0.6790500283241272, 0.6374130249023438, 0.5957769751548767, 0.5541399717330933, 0.5125030279159546, 0.47086599469184875, 0.4292300045490265, 0.38759300112724304]' j4_name = 'arm_4_joint' j5_pos = '[-1.530900001525879, -1.5361900329589844, -1.4778300523757935, -1.419469952583313, -1.361109972000122, -1.3027499914169312, -1.2443900108337402, -1.1860300302505493, -1.1276700496673584, -1.069309949874878, -1.010949969291687, -0.9525910019874573, -0.8942310214042664, -0.8358709812164307, -0.7775110006332397, -0.7191510200500488, -0.6607909798622131, -0.6024309992790222, -0.5440710186958313, -0.485711008310318, -0.4273509979248047, -0.3558639883995056, -0.28437599539756775, -0.21288900077342987, -0.141402006149292, -0.06991469860076904, 0.0015725699486210942, 0.0730597972869873, 0.1445470005273819, 0.21603399515151978, 0.28752100467681885, 0.3590089976787567, 0.4304960072040558, 0.5019829869270325, 0.5734699964523315, 0.6449580192565918, 0.7164450287818909, 0.7879319787025452, 0.8594189882278442, 0.9309059977531433, 1.0023900270462036]' j5_name = 'arm_5_joint' j6_pos = '[0.0, -0.050750598311424255, -0.06854359805583954, -0.08633659780025482, -0.10412999987602234, -0.12192299962043762, -0.1397159993648529, -0.1575089991092682, -0.17530199885368347, -0.19309499859809875, -0.21088799834251404, -0.22868099808692932, -0.2464739978313446, -0.2642669975757599, -0.28205999732017517, -0.29985299706459045, -0.31764599680900574, -0.335438996553421, -0.3532319962978363, -0.3710249960422516, -0.38881799578666687, -0.34549999237060547, -0.3021810054779053, -0.2588619887828827, -0.2155430018901825, -0.1722249984741211, -0.1289059966802597, -0.08558720350265503, -0.04226849973201752, 0.001050270046107471, 0.04436900094151497, 0.08768770098686218, 0.13100600242614746, 0.17432500422000885, 0.21764400601387024, 0.26096299290657043, 0.30428099632263184, 0.3476000130176544, 0.3909189999103546, 0.4342379868030548, 0.4775559902191162]' j6_name = 'arm_6_joint' j7_pos = '[0.0, -0.04087819904088974, -0.09016209840774536, -0.13944600522518158, -0.18873000144958496, -0.23801399767398834, -0.2872979938983917, -0.3365820050239563, -0.3858659863471985, -0.43514999747276306, -0.48443400859832764, -0.5337169766426086, -0.5830010175704956, -0.6322849988937378, -0.68156898021698, -0.7308530211448669, -0.7801370024681091, -0.8294209837913513, -0.8787050247192383, -0.9279890060424805, -0.9772729873657227, -1.0266499519348145, -1.0760300159454346, -1.1254099607467651, -1.1747900247573853, -1.2241699695587158, -1.2735400199890137, -1.3229199647903442, -1.3723000288009644, -1.421679973602295, -1.471060037612915, -1.5204399824142456, -1.5698100328445435, -1.619189977645874, -1.6685700416564941, -1.7179499864578247, -1.7673300504684448, -1.8167099952697754, -1.8660900592803955, -1.9154599905014038, -1.964840054512024]' j7_name = 'arm_7_joint' j8_pos = '[0.16590000689029694, 0.1581220030784607, 0.1561249941587448, 0.1541289985179901, 0.15213200449943542, 0.15013499557971954, 0.14813899993896484, 0.14614200592041016, 0.14414499700069427, 0.14214900135993958, 0.1401520073413849, 0.138154998421669, 0.1361590027809143, 0.13416199386119843, 0.13216599822044373, 0.13016900420188904, 0.12817199528217316, 0.12617599964141846, 0.12417899817228317, 0.12218199670314789, 0.12018600106239319, 0.1158130019903183, 0.11144000291824341, 0.1070680022239685, 0.10269500315189362, 0.09832250326871872, 0.09394989907741547, 0.08957719802856445, 0.0852046012878418, 0.08083190023899078, 0.07645930349826813, 0.07208660244941711, 0.06771399825811386, 0.06334129720926285, 0.05896870046854019, 0.05459599941968918, 0.050223398953676224, 0.04585070163011551, 0.041478101164102554, 0.0371055006980896, 0.032732799649238586]' j8_name = 'torso_lift_joint' j9_pos = '[0.02250000089406967, 0.022265100851655006, 0.022665200755000114, 0.02306539937853813, 0.02346549928188324, 0.023865699768066406, 0.024265799671411514, 0.02466600015759468, 0.02506610006093979, 0.025466300547122955, 0.025866400450468063, 0.02626650035381317, 0.026666700839996338, 0.027066800743341446, 0.027466999366879463, 0.02786709927022457, 0.028267299756407738, 0.028667399659752846, 0.029067600145936012, 0.02946770004928112, 0.029867900535464287, 0.030574500560760498, 0.03128109872341156, 0.03198770061135292, 0.03269429877400398, 0.03340090066194534, 0.034107498824596405, 0.034814100712537766, 0.03552069887518883, 0.03622730076313019, 0.03693389892578125, 0.03764050081372261, 0.03834709897637367, 0.03905380144715309, 0.03976039960980415, 0.040467001497745514, 0.041173599660396576, 0.041880201548337936, 0.042586799710989, 0.04329340159893036, 0.04399999976158142]' j9_name = 'gripper_right_finger_joint' j10_pos = '[0.02250000089406967, 0.022265100851655006, 0.022665200755000114, 0.02306539937853813, 0.02346549928188324, 0.023865699768066406, 0.024265799671411514, 0.02466600015759468, 0.02506610006093979, 0.025466300547122955, 0.025866400450468063, 0.02626650035381317, 0.026666700839996338, 0.027066800743341446, 0.027466999366879463, 0.02786709927022457, 0.028267299756407738, 0.028667399659752846, 0.029067600145936012, 0.02946770004928112, 0.029867900535464287, 0.030574500560760498, 0.03128109872341156, 0.03198770061135292, 0.03269429877400398, 0.03340090066194534, 0.034107498824596405, 0.034814100712537766, 0.03552069887518883, 0.03622730076313019, 0.03693389892578125, 0.03764050081372261, 0.03834709897637367, 0.03905380144715309, 0.03976039960980415, 0.040467001497745514, 0.041173599660396576, 0.041880201548337936, 0.042586799710989, 0.04329340159893036, 0.04399999976158142]' j10_name = 'gripper_left_finger_joint' time_from_start = '1'  result = '{recieved_message}' />\n\t<BehaviourTree ID = 'MOVE3'>\n\t\t<Fallback name = 'move_fallback'>\n\t\t\t<ReactiveSequence name = 'recovery_move'>\n\t\t\t\t<Fallback name = 'move_recovery'>\n\t\t\t\t\t<MovePointAvailable service_name ='ABCD3' />\n\t\t\t\t\t<FindNewPoint service_name = '/findpoint' />\n\t\t\t\t</Fallback>\n\t\t\t\t<Fallback name = 'move_action'>\n\t\t\t\t\t<RobotAtPoint service_name ='ABCD2' />\n\t\t\t\t\t<MoveBaseModActionClient server_name = 'movebase_mod_action' x_ = '4.436999797821045' y_ = '4.013599872589111' z_ ='0.09854999929666519'  wx_ ='0.0' wy_ ='0.0' wz_ ='0.7071070075035095' w_ ='0.7071070075035095' result = '{recieved_message}' />\n\t\t\t\t</Fallback>\n\t\t\t</ReactiveSequence>\n\t\t\t<GenerateAlarm_and_SetFailure/>\n\t\t</Fallback>\n\t</BehaviourTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for an autonomous vehicle. It prioritizes various actions based on different scenarios encountered while driving. The vehicle first checks for obstacles and decides whether to replan around them or apply emergency brakes if necessary. Then, it considers road features such as intersections, roundabouts, stop signs, and lane changes. \n\nIf there is no obstacle ahead, it proceeds with normal driving behavior. If an intersection is detected, it follows a sequence of approaching, waiting, entering, and leaving the intersection. Similarly, for roundabouts and stops, it follows specific sequences of actions. Additionally, it handles multi-lane and single-lane scenarios, including overtaking and lane switching.\n\nOverall, the behavior tree outlines the decision-making process for an autonomous vehicle to navigate through various traffic scenarios, prioritize actions based on the current situation, and ensure safe and efficient driving.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback name=\"Priorities\">\n            <Inverter>\n                <Fallback name=\"Avoid Collisions\">\n                    <Condition ID=\"Condition\" name=\"No Obstacle Ahead?\"/>\n                    <Fallback>\n                        <Action ID=\"Behaviour\" name=\"Replan Around Obstacle\"/>\n                        <Action ID=\"Behaviour\" name=\"Emergency Brake\"/>\n                    </Fallback>\n                </Fallback>\n            </Inverter>\n            <Fallback name=\"Road Features\">\n                <SubTree ID=\"Intersection\"/>\n                <SubTree ID=\"Roundabout\"/>\n                <SubTree ID=\"Stop\"/>\n            </Fallback>\n            <Fallback name=\"\">\n                <Inverter>\n                    <Fallback>\n                        <Condition ID=\"Condition\" name=\"Not Slowed by Car in Front?\"/>\n                        <Fallback>\n                            <SubTree ID=\"Multi-Lane\"/>\n                            <SubTree ID=\"Single-Lane\"/>\n                        </Fallback>\n                    </Fallback>\n                </Inverter>\n                <Sequence>\n                    <Condition ID=\"Condition\" name=\"Right Lane Available?\"/>\n                    <Condition ID=\"Condition\" name=\"Not Slowed by Car in Front Right?\"/>\n                    <Action ID=\"Behaviour\" name=\"Wait for Right Lane Free\"/>\n                    <Action ID=\"Behaviour\" name=\"Switch Lane Right\"/>\n                </Sequence>\n            </Fallback>\n            <Action ID=\"Behaviour\" name=\"Cruise\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Intersection\">\n        <Sequence>\n            <Condition ID=\"Condition\" name=\"Intersection Ahead\"/>\n            <Sequence>\n                <Action ID=\"Behaviour\" name=\"Approach Intersection\"/>\n                <Action ID=\"Behaviour\" name=\"Wait\"/>\n                <Action ID=\"Behaviour\" name=\"Enter Intersection\"/>\n                <Action ID=\"Behaviour\" name=\"Leave Intersection\"/>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Multi-Lane\">\n        <Fallback>\n            <Sequence>\n                <Condition ID=\"Condition\" name=\"Multi-Lane?\"/>\n                <Condition ID=\"Condition\" name=\"Left Lane available?\"/>\n                <Action ID=\"Behaviour\" name=\"Wait for left lane free\"/>\n                <Action ID=\"Behaviour\" name=\"switch lane to left\"/>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Roundabout\">\n        <Sequence>\n            <Condition ID=\"Condition\" name=\"Roundabout Ahead?\"/>\n            <Sequence>\n                <Action ID=\"Behaviour\" name=\"Approach Roundabout\"/>\n                <Action ID=\"Behaviour\" name=\"Wait\"/>\n                <Action ID=\"Behaviour\" name=\"Enter\"/>\n                <Action ID=\"Behaviour\" name=\"Leave\"/>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Single-Lane\">\n        <Sequence>\n            <Condition ID=\"Condition\" name=\"Single Lane with dotted Line?\"/>\n            <Action ID=\"Behaviour\" name=\"Wait Left Lane Free\"/>\n            <Action ID=\"Behaviour\" name=\"Switch Lane Left\"/>\n            <Fallback>\n                <Sequence>\n                    <Condition ID=\"Condition\" name=\"Overtaking Possible\"/>\n                    <Action ID=\"Behaviour\" name=\"Overtake\"/>\n                    <Action ID=\"Behaviour\" name=\"Switch Lane Right\"/>\n                </Sequence>\n                <Action ID=\"Behaviour\" name=\"Switch Lane Right\"/>\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Stop\">\n        <Sequence>\n            <Condition ID=\"Condition\" name=\"Stop Ahead?\"/>\n            <Sequence>\n                <Action ID=\"Behaviour\" name=\"Approach\"/>\n                <Action ID=\"Behaviour\" name=\"Wait\"/>\n                <Action ID=\"Behaviour\" name=\"Go\"/>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"Behaviour\"/>\n        <Condition ID=\"Condition\"/>\n        <SubTree ID=\"Intersection\"/>\n        <SubTree ID=\"Multi-Lane\"/>\n        <SubTree ID=\"Roundabout\"/>\n        <SubTree ID=\"Single-Lane\"/>\n        <SubTree ID=\"Stop\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic system tasked with peg manipulation. The robot is programmed to perform a sequence of actions based on reactive conditions and parallel processes. \n\nFirst, the robot checks if it is within close proximity to a specific goal position. If not, it simultaneously configures its motion and checks for the goal condition. If the goal condition is met, the robot proceeds to execute a search motion based on a threshold for the z-coordinate. \n\nSimultaneously, the robot configures its motion again and sets a new goal position. These two processes run in parallel, and both require meeting success thresholds.\n\nOverall, the behavior tree orchestrates the robot's actions by reacting to different conditions and executing multiple tasks concurrently to achieve the peg manipulation task.",
        "output": "<root main_tree_to_execute = \"PegTree\" >\n    <BehaviorTree ID=\"PegTree\">\n    <ReactiveFallback name=\"root_sequence\">\n        <ReactiveSequence name=\"goal_condition\">\n            <EEPositionDistance name=\"goal_check\"\n                threshold=\"0.05\"\n                target_x=\"-0.6\"\n                target_y=\"0.0\"\n                target_z=\"0.64\"\n                ee_x=\"{ee_x}\"\n                ee_y=\"{ee_y}\"\n                ee_z=\"{ee_z}\"/>\n            <Parallel name=\"mg_config_goal_and_check\" success_threshold=\"1\" failure_threshold=\"1\">\n                <SetMGSin   name=\"mg_sinus\"\n                    mp_ampl=\"0\"\n                    mp_freq=\"0\"\n                    mg_ampl=\"{mg_ampl}\"\n                    mg_freq=\"{mg_freq}\"/>\n                <SetMGGoal   name=\"mg_goal1\"\n                    mp_param_x=\"-0.6\"\n                    mp_param_y=\"0.0\"\n                    mp_param_z=\"0.73\"\n                    mg_trans_x=\"{mg_trans_x}\"\n                    mg_trans_y=\"{mg_trans_y}\"\n                    mg_trans_z=\"{mg_trans_z}\"/>\n                <EEPositionDistance name=\"goal_check\"\n                    threshold=\"0.05\"\n                    target_x=\"-0.6\"\n                    target_y=\"0.0\"\n                    target_z=\"0.64\"\n                    ee_x=\"{ee_x}\"\n                    ee_y=\"{ee_y}\"\n                    ee_z=\"{ee_z}\"/>\n            </Parallel>\n        </ReactiveSequence>\n        <ReactiveSequence name=\"search_motion\">\n            <EEZThreshold   name=\"ee_z_threshold\" threshold=\"{z_threshold}\" ee_z=\"{ee_z}\" above=\"false\"/>\n                <SetMGSin   name=\"mg_sinus\"\n                    mp_ampl=\"{mp_ampl}\"\n                    mp_freq=\"{mp_freq}\"\n                    mg_ampl=\"{mg_ampl}\"\n                    mg_freq=\"{mg_freq}\"/>\n        </ReactiveSequence>\n        <Parallel name=\"mg_config\" success_threshold=\"1\" failure_threshold=\"1\">\n            <SetMGSin   name=\"mg_sinus\"\n                mp_ampl=\"0\"\n                mp_freq=\"0\"\n                mg_ampl=\"{mg_ampl}\"\n                mg_freq=\"{mg_freq}\"/>\n            <SetMGGoal   name=\"mg_goal1\"\n                mp_param_x=\"{mp_1_x}\"\n                mp_param_y=\"{mp_1_y}\"\n                mp_param_z=\"{mp_1_z}\"\n                mg_trans_x=\"{mg_trans_x}\"\n                mg_trans_y=\"{mg_trans_y}\"\n                mg_trans_z=\"{mg_trans_z}\"/>\n        </Parallel>\n    </ReactiveFallback>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines the actions for a robot's task. The robot is programmed to perform multiple tasks in parallel, including recognizing people, moving to specific positions, and handling different scenarios based on a variant parameter.\n\nThe robot continuously repeats an action (VariantAction) and then executes a sequence of actions which involves recognizing people, moving to specific locations, and making decisions based on the variant parameter. It can switch between different cases based on the variant value and handle various scenarios such as searching for a person in different rooms or recharging at a designated location.\n\nAdditionally, it includes actions related to navigation, localization, map loading, and controlling the robot's movement. The tree also contains error handling mechanisms such as ForceFailure to handle specific scenarios.\n\nOverall, the behavior tree orchestrates the robot's activities, ensuring it performs tasks concurrently, handles variations in its environment, and manages its movements and interactions with objects and people.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Parallel threshold=\"1\">\n            <Repeat num_cycles=\"-1\">\n                <Action ID=\"VariantAction\" value=\"{variant}\"/>\n            </Repeat>\n            <Sequence>\n                <Action ID=\"peoplerecognition\"/>\n                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" x=\"5630\" y=\"-12000\"/>\n                <Switch2 case_1=\"one\" case_2=\"two\" variable=\"{variant}\">\n                    <Fallback name=\"SearchThomas\">\n                        <Fallback name=\"Room1\">\n                            <Sequence name=\"SearchRoom1\">\n                                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" name=\"Door2\" x=\"7520\" y=\"-12000\"/>\n                                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" x=\"7520\" y=\"-9040\"/>\n                                <Action ID=\"getPersonPose\" personname=\"THOMAS\" x=\"{x_}\" y=\"{y_}\" z=\"{z_}\"/>\n                                <Action ID=\"moveRoboterPosition\" approachRadius=\"500\" name=\"MoveToPerson\" x=\"{x_}\" y=\"{y_}\"/>\n                                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" name=\"Door2\" x=\"7520\" y=\"-12000\"/>\n                            </Sequence>\n                            <ForceFailure>\n                                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" name=\"Door2\" x=\"7520\" y=\"-12000\"/>\n                            </ForceFailure>\n                        </Fallback>\n                        <Fallback name=\"Room2\">\n                            <Sequence name=\"SearchRoom4\">\n                                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" name=\"Door4\" x=\"14500\" y=\"-12000\"/>\n                                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" x=\"14400\" y=\"-9640\"/>\n                                <Action ID=\"getPersonPose\" personname=\"THOMAS\" x=\"{x_}\" y=\"{y_}\" z=\"{z_}\"/>\n                                <Action ID=\"moveRoboterPosition\" approachRadius=\"500\" name=\"MoveToPerson\" x=\"{x_}\" y=\"{y_}\"/>\n                                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" name=\"Door4\" x=\"14500\" y=\"-12000\"/>\n                            </Sequence>\n                            <ForceFailure>\n                                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" name=\"Door4\" x=\"14500\" y=\"-12000\"/>\n                            </ForceFailure>\n                        </Fallback>\n                        <Sequence name=\"Recharge\">\n                            <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" name=\"Door8\" x=\"23200\" y=\"-12000\"/>\n                            <Action ID=\"moveRoboterPosition\" approachRadius=\"10\" name=\"GotoCharger\" x=\"23200\" y=\"-14800\"/>\n                        </Sequence>\n                    </Fallback>\n                </Switch2>\n            </Sequence>\n        </Parallel>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"VariantAction\">\n            <output_port default=\"{variant}\" name=\"value\"/>\n        </Action>\n        <Action ID=\"activateLocalization\"/>\n        <Action ID=\"approachLocation\">\n            <input_port default=\"1\" name=\"locationId\"/>\n        </Action>\n        <Action ID=\"approachWall\"/>\n        <Action ID=\"deactivateLocalization\"/>\n        <Action ID=\"getBaseCharging\">\n            <output_port default=\"{charging}\" name=\"charging\"/>\n        </Action>\n        <Action ID=\"getPersonPose\">\n            <input_port default=\"MARIA\" name=\"personname\"/>\n            <output_port default=\"{x_}\" name=\"x\"/>\n            <output_port default=\"{y_}\" name=\"y\"/>\n            <output_port default=\"{z_}\" name=\"z\"/>\n        </Action>\n        <Action ID=\"initNavigation\"/>\n        <Action ID=\"loadMap\"/>\n        <Action ID=\"loadNavigationMap\">\n            <input_port default=\"navigation-map\" name=\"mapname\"/>\n        </Action>\n        <Action ID=\"moveRoboterBackwardsLocation\"/>\n        <Action ID=\"moveRoboterBackwardsRelative\"/>\n        <Action ID=\"moveRoboterOrientateRobotAbs\"/>\n        <Action ID=\"moveRoboterOrientateRobotRel\"/>\n        <Action ID=\"moveRoboterPosition\">\n            <input_port default=\"50\" name=\"approachRadius\"/>\n            <input_port default=\"0\" name=\"x\"/>\n            <input_port default=\"0\" name=\"y\"/>\n        </Action>\n        <Action ID=\"peoplerecognition\"/>\n        <Action ID=\"setRobotPose\">\n            <input_port default=\"0\" name=\"x\"/>\n            <input_port default=\"0\" name=\"y\"/>\n            <input_port default=\"0\" name=\"yaw\"/>\n        </Action>\n        <Action ID=\"startJoystickNavigation\"/>\n        <Action ID=\"startReactiveNavigation\"/>\n        <Action ID=\"stopJoystickNavigation\"/>\n        <Action ID=\"stopReactiveNavigation\"/>\n        <Action ID=\"triggerGlobalLocalization\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robot's navigation while periodically replanning its global path at a frequency of 1 Hz. It uses a PipelineSequence to coordinate the navigation and replanning process. The SpeedController component sets the speed limits for the robot and filters the speed changes, while also computing the path to the specified goal using the \"GridBased\" planner. The computed path is then followed by the robot using the FollowPath controller. This setup ensures that the robot navigates towards its goal while dynamically adjusting its path based on the environment and any changes in the goal or obstacles.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <SpeedController min_rate=\"0.1\" max_rate=\"1.0\" min_speed=\"0.0\" max_speed=\"0.26\" filter_duration=\"0.3\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </SpeedController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's decision-making process. It begins by checking the battery and cleaning, with both actions being inverted (i.e., if one fails, the other is attempted). If both of these fail, the robot will then proceed to recharge its battery. This sequence ensures that the robot prioritizes maintaining functionality by attempting to address issues with its battery or cleanliness before resorting to recharging.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Fallback>\n                <Inverter>\n                    <Action ID=\"CheckBattery\"/>\n                </Inverter>\n                <Inverter>\n                    <Action ID=\"CleanAction\"/>\n                </Inverter>\n            </Fallback>\n            <Action ID=\"Recharge\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CheckBattery\"/>\n        <Action ID=\"CleanAction\"/>\n        <Action ID=\"Recharge\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robot's navigation with periodic global path replanning at 1 Hz. It operates based on different conditions related to the robot's need for various types of trajectory modification.\n\nThe behavior starts by splitting the goal into different components, and then it follows a sequence of actions based on the specific needs. If the robot requires to get out of its current trajectory, it computes a new path using the GridBased planner and follows it using the AccurateController. Similarly, if there is a nominal trajectory adjustment or a need to get into a new trajectory, it performs the corresponding planning and following actions.\n\nOverall, this behavior tree ensures that the robot continuously evaluates its trajectory needs and adjusts its path accordingly, ensuring smooth and efficient navigation in dynamic environments.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <SequenceStar name=\"NavigateWithReplanning\">\n      <SplitGoal goal=\"{goal}\"\n        get_out_teb_need=\"{getOutTebNeed}\" get_out_teb_goal=\"{getOutTebGoal}\"\n        nominal_teb_need=\"{nominalTebNeed}\" nominal_teb_goal=\"{nominalTebGoal}\"\n        get_in_teb_need=\"{getInTebNeed}\" get_in_teb_goal=\"{getInTebGoal}\"/>\n\n      <Fallback>\n        <Inverter>\n          <BooleanCondition boolean=\"{getOutTebNeed}\"/>\n        </Inverter>\n\n        <PipelineSequence>\n          <RateController hz=\"2.0\">\n            <ComputePathToPose goal=\"{getOutTebGoal}\" path=\"{pathGetOut}\" planner_id=\"GridBased\"/>\n          </RateController>\n          <FollowPath path=\"{pathGetOut}\" controller_id=\"AccurateController\"/>\n        </PipelineSequence>\n      </Fallback>\n\n      <Fallback>\n        <Inverter>\n          <BooleanCondition boolean=\"{nominalTebNeed}\"/>\n        </Inverter>\n\n        <PipelineSequence>\n          <RateController hz=\"2.0\">\n            <ComputePathToPose goal=\"{nominalTebGoal}\" path=\"{pathNominal}\" planner_id=\"GridBased\"/>\n          </RateController>\n          <FollowPath path=\"{pathNominal}\" controller_id=\"NominalController\"/>\n        </PipelineSequence>\n      </Fallback>\n\n      <Fallback>\n        <Inverter>\n          <BooleanCondition boolean=\"{getInTebNeed}\"/>\n        </Inverter>\n        <PipelineSequence>\n          <RateController hz=\"2.0\">\n            <ComputePathToPose goal=\"{getInTebGoal}\" path=\"{pathGetIn}\" planner_id=\"GridBased\"/>\n          </RateController>\n          <FollowPath path=\"{pathGetIn}\" controller_id=\"AccurateController\"/>\n        </PipelineSequence>\n      </Fallback>\n    </SequenceStar>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a continuous loop where a robot performs the following actions: \n1. It checks for the presence of an object using an object tracker and then speaks \"Detected\" if the object is found.\n2. It waits for 3 seconds, then smiles for 2 seconds.\n3. It checks again for the absence of the object using the object tracker and speaks \"Not Detected\" if the object is not found.\n4. It waits for another 3 seconds, then smiles for 2 seconds.\n\nThis loop repeats indefinitely (99999 cycles) unless interrupted externally. The robot's actions are designed to continuously monitor and respond to the presence or absence of the specified object, providing audible and visual feedback based on its observations.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Repeat num_cycles=\"99999\">\n\t\t\t<Sequence>\n\t\t\t\t<ForceSuccess>\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<ObjectTrackerStatusAction ck_state=\"1\" min_duration=\"3\" />\n\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Detected\" />\n\t\t\t\t\t</Sequence>\n\t\t\t\t</ForceSuccess>\n\n\t\t\t\t<Sequence>\n\t\t\t\t\t<Delay delay_msec=\"3000\">\n\t\t\t\t\t\t<SmileAction level=\"2\" duration_ms=\"2000\" />\n\t\t\t\t\t</Delay>\n\t\t\t\t</Sequence>\n\n\t\t\t\t<ForceSuccess>\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<ObjectTrackerStatusAction ck_state=\"0\" min_duration=\"4\" />\n\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Not Detected\" />\n\t\t\t\t\t</Sequence>\n\t\t\t\t</ForceSuccess>\n\n\t\t\t\t<Sequence>\n\t\t\t\t\t<Delay delay_msec=\"3000\">\n\t\t\t\t\t\t<SmileAction level=\"2\" duration_ms=\"2000\" />\n\t\t\t\t\t</Delay>\n\t\t\t\t</Sequence>\n\t\t\t</Sequence>\n\t\t</Repeat>\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through a series of waypoints using the NavigateToPose behavior. The robot will continuously attempt to reach the next goal until all goals are achieved. It follows a reactive approach, where it checks if the current goal has been achieved and then proceeds to navigate to the next goal in the sequence. Once a goal is reached, it updates the status of that goal as achieved in the blackboard.\n\nOverall, the behavior tree orchestrates the process of navigating through multiple waypoints by iteratively selecting and reaching each goal until all goals are successfully achieved. If any failure occurs during navigation, the robot will continue attempting to reach the remaining goals.",
        "output": "\n<!--\n  This Behavior Tree processes each of the given waypoints with NavigateToPose.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <ReactiveFallback name=\"FollowTargets\">\n      <AllGoalsAchieved goal_achieved=\"{goal_achieved}\"/>\n      <KeepRunningUntilFailure>\n        <ReactiveSequence>\n          <GetNextGoal goals=\"{goals}\" goal=\"{goal}\" goal_achieved=\"{goal_achieved}\"/>\n          <NavigateToPose goal=\"{goal}\"/>\n          <SetBlackboard output_key=\"goal_achieved\" value=\"true\"/>\n        </ReactiveSequence>\n      </KeepRunningUntilFailure>\n    </ReactiveFallback>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through a series of waypoints using the NavigateToPose behavior. The robot will continue to move through each waypoint until all goals are achieved. It follows a reactive sequence where it retrieves the next goal, navigates to the pose, loads a pallet at the goal location, and then sets the \"goal_achieved\" flag to true. This process continues until all goals are accomplished. If any failure occurs during this sequence, the robot will fallback and attempt to achieve the remaining goals.\n\nOverall, the behavior tree orchestrates the robot's movement by iteratively processing each waypoint with the NavigateToPose behavior while handling the achievement and potential failure of goals.",
        "output": "\n<!--\n  This Behavior Tree processes each of the given waypoints with NavigateToPose.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <ReactiveFallback name=\"FollowWaypoints\">\n      <AllGoalsAchieved goal_achieved=\"{goal_achieved}\"/>\n      <KeepRunningUntilFailure>\n        <ReactiveSequence>\n          <GetNextGoal goals=\"{goals}\" goal=\"{goal}\" goal_achieved=\"{goal_achieved}\"/>\n          <NavigateToPose goal=\"{goal}\"/>\n          <LoadPallet goal=\"{goal}\"/>\n          <SetBlackboard output_key=\"goal_achieved\" value=\"true\"/>\n        </ReactiveSequence>\n      </KeepRunningUntilFailure>\n    </ReactiveFallback>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's mission execution. It begins by checking if the battery is okay, followed by verifying if the temperature is below 80 degrees. If both conditions are met, the robot will announce the start of the mission, move to a specific location (1;2;3), and then announce the completion of the mission. The \"ThinkWhatToSay\" action seems to be defined but not used in the behavior tree.\n\nIn summary, the behavior tree ensures that the robot's battery is functional and the temperature is within acceptable limits before initiating its mission. Once confirmed, it communicates the mission's start, performs the necessary movement, and concludes by announcing the mission's completion.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <ReactiveSequence>\n            <Action ID=\"BatteryOK\"/>\n            <Condition ID=\"TemperatureOK\" threshold=\"80\"/>\n            <Sequence>\n                <Action ID=\"SaySomething\" message=\"Mission Started!\"/>\n                <Action ID=\"MoveBase\" goal=\"1;2;3\"/>\n                <Action ID=\"SaySomething\" message=\"Mission completed!\"/>\n            </Sequence>\n        </ReactiveSequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"BatteryOK\"/>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"goal\"/>\n        </Action>\n        <Action ID=\"SaySomething\">\n            <input_port default=\"&quot;Start thinking...&quot;\" name=\"message\"/>\n        </Action>\n        <Condition ID=\"TemperatureOK\">\n            <input_port default=\"80\" name=\"threshold\"/>\n        </Condition>\n        <Action ID=\"ThinkWhatToSay\">\n            <output_port default=\"{the_answer}\" name=\"text\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a complex robotic system with multiple actions and decision-making processes. The robot is designed to execute a series of tasks in a repetitive manner, as indicated by the \"Repeat\" node with a specified number of cycles.\n\nWithin each cycle, the robot follows a sequence of actions and fallback behaviors. These actions include checking and updating the state of the robot (such as locomotion status and LTL state), performing specific movements (e.g., moving or staying in place), handling recovery and replanning requests, and updating the action sequences.\n\nThe tree incorporates reactive sequences and fallbacks to handle different scenarios and ensure robustness in the face of potential failures. It also includes conditional actions based on the value of variables, such as the type of action to be performed.\n\nOverall, the behavior tree orchestrates the robot's decision-making and task execution, aiming to achieve robust and adaptive behavior in dynamic environments.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Action ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <RetryUntilSuccesful num_attempts=\"3\">\n                            <Fallback>\n                                <Action ID=\"LocomotionStatusCheck\" locomotion_status=\"{locomotion_status}\"/>\n                                <Sequence>\n                                    <Action ID=\"RecoveryStand\" locomotion_status=\"{locomotion_status}\"/>\n                                    <Delay delay_msec=\"2000\">\n                                        <Action ID=\"LocomotionStart\" locomotion_status=\"{locomotion_status}\"/>\n                                    </Delay>\n                                </Sequence>\n                            </Fallback>\n                        </RetryUntilSuccesful>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel1\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Switch3 case_1=\"move\" case_2=\"stay\" case_3=\"synchronized_transition\" variable=\"{bt_action_type}\">\n                            <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                            <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"SynchronizedTransitionAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <AlwaysFailure/>\n                        </Switch3>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Action>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel1\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for a robot. First, it checks if the battery is okay, then opens the gripper, approaches an object, and finally closes the gripper. This suggests that the robot is designed to perform a series of tasks in a specific order, likely related to handling objects or performing specific operations. The sequence ensures that each action is executed only if the preceding action is successful, creating a structured and reliable process for the robot to follow.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <CheckBattery   name=\"battery_ok\"/>\n            <OpenGripper    name=\"open_gripper\"/>\n            <ApproachObject name=\"approach_object\"/>\n            <CloseGripper   name=\"close_gripper\"/>\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robotic system to execute a sequence of actions based on certain conditions and inputs. The main behavior tree consists of a repeat node that cycles through a sequence containing various sub-tasks.\n\nWithin the sequence, there are conditional checks, reactive sequences, and actions such as movement, staying in place, guiding, and updating the state. These actions are influenced by input parameters like the current action type, desired sequences, and execution states.\n\nThe tree also includes nodes for handling locomotion status, recovery, and replanning requests at different levels. The behavior tree seems to be part of a complex decision-making system for controlling the robot's behavior in dynamic environments.\n\nOverall, the behavior tree orchestrates the robot's actions, responses to environmental changes, and ensures the fulfillment of desired sequences while allowing for adaptation and recovery through replanning requests.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Condition ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <Condition ID=\"ReactiveLTLStateCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Switch4 case_1=\"move\" case_2=\"stay\" case_3=\"start_training\" case_4=\"terminate_training\" variable=\"{bt_action_type}\">\n                            <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                            <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"GuideAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"BackNormalAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <AlwaysFailure/>\n                        </Switch4>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"BackNormalAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"DropAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"GuideAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Condition>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Condition ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Condition>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"PickAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"ReactiveLTLStateCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Condition>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel1\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a system that guides a robot to dynamically adjust its pose while navigating towards a specific goal. The process involves continuously updating the goal position, computing a path to the updated goal using a grid-based planner, and then truncating the path to a certain distance. This sequence is controlled at a rate of 1 Hz.\n\nOnce the path is truncated, the robot follows this path using a specified controller until it reaches the goal. The system keeps running this process until it encounters a failure.\n\nIn summary, the behavior tree orchestrates the dynamic navigation of a robot by updating the goal, computing a path, and controlling the robot's movement along the path until it reaches the desired destination.",
        "output": "<!--\n  This Behavior Tree follows a dynamic pose to a certain distance\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n         <TruncatePath distance=\"1.0\" input_path=\"{path}\" output_path=\"{truncated_path}\"/>\n        </Sequence>\n      </RateController>\n      <KeepRunningUntilFailure>\n        <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\"/>\n      </KeepRunningUntilFailure>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an environment with periodic global path replanning at 1 Hz. It includes recovery mechanisms to handle navigation failures and obstacles. The main sequence involves navigating with replanning, where the robot computes a path to a specified goal using a grid-based planner, clears the global costmap context, follows the computed path using a specific controller, and then clears the local costmap context. If there are navigation failures or goal updates, it triggers recovery actions such as clearing the local and global costmaps to ensure accurate navigation. The recovery nodes have predefined number of retries to handle potential issues effectively. Overall, the behavior tree ensures robust and adaptive navigation for the robot in dynamic environments.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"0.1\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"100\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robot, specifically a turtle. The tree instructs the turtle to perform a sequence of actions in a loop indefinitely. Within each cycle, the turtle is enabled to perform four specific actions (enable=1, enable=2, enable=3, enable=4) sequentially. After completing these actions, there is a delay of 2000 milliseconds before the next cycle begins.\n\nIn summary, the behavior tree continuously enables the turtle to execute a set of predefined actions in a specific order, with a delay between cycles. This could be used to simulate or test the turtle's behavior under repetitive actions and delays.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"-1\">\n            <ForceSuccess>\n                <Sequence>\n                    <Action ID=\"Turtle\" enable=\"1\"/>\n                    <Action ID=\"Turtle\" enable=\"2\"/>\n                    <Action ID=\"Turtle\" enable=\"3\"/>\n                    <Action ID=\"Turtle\" enable=\"4\"/>\n                    <Delay delay_msec=\"2000\">\n                        <AlwaysSuccess/>\n                    </Delay>\n                </Sequence>\n            </ForceSuccess>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"Turtle\">\n            <input_port default=\"1\" name=\"enable\">Enables Beep</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree provided contains various actions and conditions for controlling a robot or an autonomous agent. It includes actions such as movement (Movcs, Movcv, Movpv), multiplication (Mulas, Mulav), and rotation (Rotav), along with conditions like Ifprob and Ifsect.\n\nThe tree also features a repeati decorator which repeats the execution of a subtree a specified number of times. However, the specific sequence of these actions and conditions is not defined in the given XML snippet.\n\nIn summary, this behavior tree provides a framework for defining the logic and decision-making process for an autonomous agent, allowing it to perform movements, calculations, and conditional checks based on input parameters. The actual implementation and orchestration of these components would require further details about their interconnections and the overall control flow.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n\t<!-- Paste your BT inside the following tag -->\n\t<BehaviorTree ID=\"MainTree\">\n\t</BehaviorTree>\n\t\n\t<TreeNodesModel>\n\t\t<Condition ID=\"Ifprob\">\n\t\t\t<input_port name=\"arg0\" type=\"float\"/>\n\t\t\t<input_port name=\"arg1\" type=\"float\"/>\n\t\t\t<input_port name=\"arg2\" type=\"float\"/>\n\t\t</Condition>\n\t\t<Condition ID=\"Ifsect\">\n\t\t\t<input_port name=\"arg0\" type=\"VectorPolar\"/>\n\t\t\t<input_port name=\"arg1\" type=\"float\"/>\n\t\t\t<input_port name=\"arg2\" type=\"float\"/>\n\t\t</Condition>\n\t\t<Action ID=\"Movcs\">\n\t\t\t<output_port name=\"arg0\" type=\"float\"/>\n\t\t\t<input_port name=\"arg1\" type=\"int\"/>\n\t\t</Action>\n\t\t<Action ID=\"Movcv\">\n\t\t\t<output_port name=\"arg0\" type=\"VectorPolar\"/>\n\t\t\t<input_port name=\"arg1\" type=\"int\"/>\n\t\t</Action>\n\t\t<Action ID=\"Movpv\">\n\t\t\t<output_port name=\"arg0\" type=\"VectorPolar\"/>\n\t\t\t<input_port name=\"arg1\" type=\"VectorPolar\"/>\n\t\t\t<input_port name=\"arg2\" type=\"int\"/>\n\t\t</Action>\n\t\t<Action ID=\"Mulas\">\n\t\t\t<output_port name=\"arg0\" type=\"float\"/>\n\t\t\t<input_port name=\"arg1\" type=\"float\"/>\n\t\t\t<input_port name=\"arg2\" type=\"float\"/>\n\t\t\t<input_port name=\"arg3\" type=\"float\"/>\n\t\t</Action>\n\t\t<Action ID=\"Mulav\">\n\t\t\t<output_port name=\"arg0\" type=\"VectorPolar\"/>\n\t\t\t<input_port name=\"arg1\" type=\"VectorPolar\"/>\n\t\t\t<input_port name=\"arg2\" type=\"float\"/>\n\t\t\t<input_port name=\"arg3\" type=\"VectorPolar\"/>\n\t\t</Action>\n\t\t<Decorator ID=\"Repeati\">\n\t\t\t<input_port name=\"arg0\" type=\"int\"/>\n\t\t</Decorator>\n\t\t<Action ID=\"Rotav\">\n\t\t\t<output_port name=\"arg0\" type=\"VectorPolar\"/>\n\t\t\t<input_port name=\"arg1\" type=\"VectorPolar\"/>\n\t\t\t<input_port name=\"arg2\" type=\"int\"/>\n\t\t\t<input_port name=\"arg3\" type=\"VectorPolar\"/>\n\t\t</Action>\n\t</TreeNodesModel>\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement based on visual input. The robot is programmed to continuously execute a sequence of movements, alternating between different sequences based on the object detected by its vision system (cat, dog, cow). Each sequence involves moving in a specific direction (forward, backward, left, right) and then stopping.\n\nIf the robot detects a cat, it will move forward, stop, move backward, and stop. If it detects a dog, it will move backward, stop, move forward, and stop. If it detects a cow, it will move left, stop, move right, and stop. This entire process is repeated indefinitely.\n\nThe \"MoveRobot\" behavior tree defines the individual movements that the robot can perform, such as moving forward, backward, left, or right, which are executed based on the input received from the main behavior tree.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SetBlackboard output_key=\"Foward\" value=\"i;0.5\" />\n            <SetBlackboard output_key=\"Stop\"   value=\"k;0.25\"/>\n            <SetBlackboard output_key=\"Backward\" value=\"<;0.5\" /> \n            <SetBlackboard output_key=\"Right\" value=\"l;2\" /> \n            <SetBlackboard output_key=\"Left\" value=\"j;2\" /> \n            <Repeat num_cycles=\"-1\">\n                <ForceSuccess>\n                    <Fallback>\n                        <Sequence>\n                            <OpenVINOEvent object=\"cat\"/>\n                            <Sequence>\n                                <SubTree ID=\"MoveRobot\" target=\"Foward\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Stop\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Backward\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Stop\" />\n                            </Sequence>\n                        </Sequence>\n                        <Sequence>\n                            <OpenVINOEvent object=\"dog\"/>\n                            <Sequence>\n                                <SubTree ID=\"MoveRobot\" target=\"Backward\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Stop\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Foward\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Stop\" />\n                            </Sequence>\n                        </Sequence>\n                        <Sequence>\n                            <OpenVINOEvent object=\"cow\"/>\n                            <Sequence>\n                                <SubTree ID=\"MoveRobot\" target=\"Left\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Stop\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Right\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Stop\" />\n                            </Sequence>\n                        </Sequence>\n                    </Fallback>\n                </ForceSuccess>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <SendCommandVel movement=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single task where the robot is instructed to perform a scan in \"floor_near\" mode. This likely involves the robot using its sensors or scanning equipment to gather information about the nearby floor area. The purpose of this scan could be for mapping, obstacle detection, or any other relevant task related to the floor area.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n   <BehaviorTree ID=\"MainTree\">\n      <Scan  name=\"scan\" mode=\"floor_near\"/>\n   </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an environment with periodic global path replanning at 1 Hz and includes recovery actions. The robot uses a pipeline sequence to navigate with replanning, allowing it to retry the navigation process multiple times if necessary.\n\nIf the robot encounters issues during path planning or following the path, it will attempt recovery by clearing the costmap, waiting, or spinning to correct its orientation. Additionally, it incorporates a recovery fallback that involves waiting for 5 seconds if all other recovery attempts fail.\n\nOverall, this behavior tree ensures robust navigation by incorporating periodic path replanning and various recovery strategies to handle unexpected obstacles or disruptions in the environment.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"2\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"4\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ReactiveFallback name=\"PathToPoseFallback\">\n              <GoalUpdated/>\n              <RoundRobin name=\"GlobalPlannerRecoveryActions\">\n                <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n                <Wait wait_duration=\"2\"/>\n              </RoundRobin>\n            </ReactiveFallback>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"4\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ReactiveFallback name=\"FollowPathFallback\">\n            <GoalUpdated/>\n            <RoundRobin name=\"PlannerRecoveryActions\">\n              <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n              <Spin spin_dist=\"1.57\"/>\n            </RoundRobin>\n          </ReactiveFallback>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <Wait wait_duration=\"5\"/>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for an entity to execute. The entity is first instructed to perform \"go1\", followed by a sub-sequence comprising \"go2\", \"go3\" (forced to succeed), \"go4\", \"go5\", and \"go6\". Upon completion of this sub-sequence, the entity will then execute \"go7\" and \"go8\" in sequence.\n\nThe use of \"ForceSuccess\" ensures that \"go3\" always succeeds, regardless of its outcome. This means that even if \"go3\" fails, it will be considered successful and the subsequent actions will still be executed.\n\nOverall, the behavior tree orchestrates a specific sequence of actions for the entity to follow, with the provision for ensuring the success of a particular action within the sub-sequence.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Action ID=\"go1\"/>\n            <Sequence name=\"Sequence2\">\n                <Action ID=\"go2\"/>\n                <ForceSuccess>\n                    <Action ID=\"go3\"/>\n                </ForceSuccess>\n                <Action ID=\"go4\"/>\n                <Action ID=\"go5\"/>\n                <Action ID=\"go6\"/>\n            </Sequence>\n            <Action ID=\"go7\"/>\n            <Action ID=\"go8\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"go4\"/>\n        <Action ID=\"go5\"/>\n        <Action ID=\"go6\"/>\n        <Action ID=\"go7\"/>\n        <Action ID=\"go8\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a sequence of actions, where each action has an output parameter \"out0\" that is set to the value of \"${foo}\". The TreeNodesModel defines three actions: inoutA, inoutB, and inoutC, each with an \"out0\" port. The inoutB action has a default value of \"foobar\" for its \"out0\" port.\n\nIn summary, the behavior tree executes a sequence of actions (inoutA, inoutB, inoutC), setting their \"out0\" ports to the value of \"${foo}\" or \"foobar\".",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Action ID=\"inoutA\" out0=\"${foo}\"/>\n            <Action ID=\"inoutB\" out0=\"${foo}\"/>\n            <Action ID=\"inoutC\" out0=\"${foo}\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"inoutA\">\n            <inout_port name=\"out0\"/>\n        </Action>\n        <Action ID=\"inoutB\">\n            <inout_port default=\"foobar\" name=\"out0\"/>\n        </Action>\n        <Action ID=\"inoutC\">\n            <inout_port name=\"out0\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions for controlling a robotic system. The robot is programmed to perform a series of movements and poses using its arms and other components.\n\nThe sequence begins with the robot executing specific joint states for its left and right arms, followed by executing multiple poses for both arms simultaneously. This is achieved through the execution of predefined action nodes such as \"ExecuteGroupAngularJointStates\" and \"ExecuteAllPoses\".\n\nAdditionally, there are other potential actions defined in the model, such as \"ExecuteGroupLinearJointStates\", \"ExecuteGroupPlan\", and \"ExecuteGroupPose\", which can be utilized for further control and manipulation of the robot's components.\n\nOverall, the behavior tree orchestrates a complex set of actions to coordinate the movement and positioning of the robot's arms and potentially other components, allowing it to perform specific tasks or maneuvers as per the defined goals and parameters.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"RoPort Walker demo\">\n            <Action ID=\"ExecuteGroupAngularJointStates\" goal=\"0 0 0 0 0 0 0\" group_name=\"walker_left_arm\" name=\"Go to prepare pose\" service_name=\"execute_group_joint_states\" tolerance=\"0.01\"/>\n            <Action ID=\"ExecuteGroupAngularJointStates\" goal=\"0 0 0 0 0 0 0\" group_name=\"walker_right_arm\" service_name=\"execute_group_joint_states\" tolerance=\"0.01\"/>\n<!--            <Action ID=\"ExecuteGroupPose\" goal=\"0.37 0.37 -0.15 0 0 -0.174 0.985\" goal_type=\"0\" group_name=\"walker_left_arm\" service_name=\"execute_group_pose\" tolerance=\"0.01\"/>-->\n            <Action ID=\"ExecuteAllPoses\" allow_collision=\"0\" goal_type=\"0\" goals=\"0.37 0.37 -0.15 0 0 -0.174 0.985;0.37 -0.37 -0.15 0 0 0.174 0.985\" group_names=\"walker_left_arm walker_right_arm\" service_name=\"execute_all_poses\" stamps=\"10 10\"/>\n<!--            <Action ID=\"ExecuteAllPlans\" all_poses=\"0 0 0 0 0 0 1;0 0.1 0 0 0 0 1;0 -0.1 0 0 0 0 1|0 0 0 0 0 0 1;0 -0.1 0 0 0 0 1;0 0.1 0 0 0 0 1\" allow_collision=\"0\" group_names=\"walker_left_arm walker_right_arm\" is_absolute=\"0\" service_name=\"execute_all_plans\" stamps=\"15 15\"/>-->\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ExecuteAllPlans\">\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"all_poses\">Poses for each group to visit, separate with | for different groups</input_port>\n            <input_port default=\"0\" name=\"allow_collision\"/>\n            <input_port default=\"panda_arm\" name=\"group_names\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"execute_all_plans\" name=\"service_name\"/>\n            <input_port default=\"1\" name=\"stamps\"/>\n        </Action>\n        <Action ID=\"ExecuteAllPoses\">\n            <input_port default=\"0\" name=\"allow_collision\"/>\n            <input_port default=\"0\" name=\"goal_type\"/>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goals\">Goals for each group to reach, separate with ;</input_port>\n            <input_port default=\"panda_arm\" name=\"group_names\">Names of groups to control, separate with space</input_port>\n            <input_port default=\"execute_all_poses\" name=\"service_name\"/>\n            <input_port default=\"1\" name=\"stamps\">Time stamps for each group reaching the goal, separate with space</input_port>\n        </Action>\n        <Action ID=\"ExecuteGroupAngularJointStates\">\n            <input_port default=\"0 0 0 0 0 0 0\" name=\"goal\"/>\n            <input_port default=\"panda_arm\" name=\"group_name\"/>\n            <input_port default=\"execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupLinearJointStates\">\n            <input_port default=\"0.04 0.04\" name=\"goal\"/>\n            <input_port default=\"hand\" name=\"group_name\"/>\n            <input_port default=\"execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.001\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupPlan\">\n            <input_port default=\"0\" name=\"allow_collision\"/>\n            <input_port default=\"panda_arm\" name=\"group_name\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"0 0 0.1 0 0 0 1;0 0 -0.1 0 0 0 1\" name=\"poses\">Trajectory poses in plan. Each pose is relevant to the last pose.</input_port>\n            <input_port default=\"execute_group_plan\" name=\"service_name\"/>\n            <input_port default=\"2\" name=\"stamp\">Time stamp of the last pose in plan</input_port>\n        </Action>\n        <Action ID=\"ExecuteGroupPose\">\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goal\"/>\n            <input_port default=\"0\" name=\"goal_type\"/>\n            <input_port default=\"panda_arm\" name=\"group_name\"/>\n            <input_port default=\"execute_group_pose\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a series of actions for a robot or system. It begins by printing \"Hello\" and then enters a fallback sequence, which includes a timeout action that runs the \"AlwaysRunning\" action after 2 seconds. If a condition check on the topic \"/condition\" is met, it prints \"Baby\"; otherwise, it prints \"World\". \n\nFollowing this, another fallback sequence checks for a message on the topic \"/trigger\" and triggers the \"safety\" service with a 100-millisecond timeout if the condition is met. Otherwise, it waits for 3000 milliseconds.\n\nFinally, the tree concludes by printing \"Done\".\n\nThis behavior tree is designed to handle various scenarios based on conditions and timeouts, while also including ROS services and waiting periods.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"Print\" message=\"Hello\"/>\n            <Fallback>\n                <Timeout msec=\"2000\">\n                    <Action ID=\"AlwaysRunning\"/>\n                </Timeout>\n                <Sequence>\n                    <Condition ID=\"ConditionCheck\" topic=\"/condition\"/>\n                    <Action ID=\"Print\" message=\"Baby\"/>\n                </Sequence>\n                <Action ID=\"Print\" message=\"World\"/>\n            </Fallback>\n            <Fallback>\n                <Sequence>\n                    <Condition ID=\"MessageCheck\" topic=\"/trigger\"/>\n                    <Action timeout=\"100\" ID=\"Trigger\" service_name=\"safety\"/>\n                </Sequence>\n                <Action ID=\"Wait\" duration=\"3000\"/>\n            </Fallback>\n            <Action ID=\"Print\" message=\"Done\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AlwaysRunning\"/>\n        <Condition ID=\"ConditionCheck\">\n            <input_port name=\"topic\"/>\n        </Condition>\n        <Condition ID=\"MessageCheck\">\n            <input_port name=\"topic\"/>\n        </Condition>\n        <Action ID=\"Print\">\n            <input_port type=\"std::string\" name=\"message\"/>\n        </Action>\n        <Action ID=\"Trigger\">\n            <input_port type=\"std::string\" name=\"service_name\">name of the ROS service</input_port>\n            <input_port type=\"unsigned int\" name=\"timeout\">timeout to connect to server (milliseconds)</input_port>\n        </Action>\n        <Action ID=\"Wait\">\n            <input_port name=\"duration\">Waiting for duration (ms)</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for a robot or autonomous agent. The sequence involves the robot performing various tasks such as moving to specific locations, checking if a certain condition (isFull) is met, and making decisions based on the outcome.\n\nThe main sequence (Sequence1) includes sub-sequences and individual actions. It starts with the robot going to a location (go1), then proceeding to another location (go2), and finally reaching a third location (go3). Additionally, there are conditional checks within Sequence2 and Sequence4, where the robot may stay at certain positions (stay1, stay2) or perform alternative actions (go4, go2) based on the conditions.\n\nThe behavior tree also includes a set of available actions and conditions that can be utilized within the sequences, such as mineResources, moveBaseToGoal, and waitFrames.\n\nOverall, the behavior tree represents a complex decision-making process for the robot, involving movement, conditional checks, and task execution.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Action ID=\"go1\"/>\n            <Sequence name=\"Sequence2\">\n                <Action ID=\"stay1\"/>\n                <Action ID=\"stay2\"/>\n                <Sequence name=\"Sequence3\">\n                    <Action ID=\"go1\"/>\n                    <Action ID=\"go2\"/>\n                    <Condition ID=\"isFull\"/>\n                    <Action ID=\"go3\"/>\n                </Sequence>\n            </Sequence>\n            <Action ID=\"go2\"/>\n            <Action ID=\"go3\"/>\n            <Sequence name=\"Sequence4\">\n                <Action ID=\"go1\"/>\n                <Action ID=\"go2\"/>\n                <Fallback>\n                    <Inverter>\n                        <Action ID=\"go4\"/>\n                    </Inverter>\n                    <ForceSuccess>\n                        <Action ID=\"go2\"/>\n                    </ForceSuccess>\n                    <Action ID=\"cIName\"/>\n                </Fallback>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"cIName\"/>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"go4\"/>\n        <Action ID=\"goClosestR\"/>\n        <Condition ID=\"isFull\"/>\n        <Action ID=\"mineResources\"/>\n        <Action ID=\"moveBaseToGoal\">\n            <input_port name=\"key_name\">goal</input_port>\n        </Action>\n        <Action ID=\"stay1\"/>\n        <Action ID=\"stay2\"/>\n        <Action ID=\"waitFrames\">\n            <output_port name=\"barout\"/>\n            <input_port name=\"baz\"/>\n            <input_port name=\"fooin\"/>\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a robot's task to move to a specified waypoint. It begins by retrieving the pose of the waypoint indicated by \"{arg0}\" and storing it in \"{pose}\". The robot then executes two actions in parallel: scanning the environment using the \"floor_near\" mode and moving towards the previously obtained pose. The success threshold for both actions is set to 1, meaning that if either action succeeds, the entire sequence is considered successful. This behavior allows the robot to adapt its movement based on real-time environmental data while progressing towards the designated waypoint.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n   <BehaviorTree ID=\"MainTree\">\n      <Sequence name=\"move\">\n        <GetPoseFromWp  name=\"get_pose_from_wp\" wp_id=\"{arg0}\" wp_pose=\"{pose}\"/>\n        <Parallel success_threshold=\"1\" failure_threshold=\"1\">\n          <Scan  name=\"scan\" mode=\"floor_near\"/>\n          <Move name=\"move\" goal=\"{pose}\"/>\n        </Parallel>\n      </Sequence>\n   </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a scenario where a robot needs to pass through a door or window. If the door is open, it will pass through it; otherwise, it will attempt to open the door and then pass through. If the door cannot be opened after 4 attempts, the robot will resort to passing through the window.\n\nIn summary, the robot first checks if the door is open. If it is, the robot passes through the door. If the door is closed, the robot attempts to open the door up to 4 times before eventually passing through it. If all attempts to open the door fail, the robot will then pass through the window as an alternative route.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback>\n            <Sequence>\n                <IsDoorOpen/>\n                <PassThroughDoor/>\n            </Sequence>\n            <SubTree ID=\"DoorClosed\"/>\n            <PassThroughWindow/>\n        </Fallback>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"DoorClosed\">\n        <Sequence>\n            <IsDoorClosed/>\n            <RetryUntilSuccesful num_attempts=\"4\">\n                <OpenDoor/>\n            </RetryUntilSuccesful>\n            <PassThroughDoor/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"IsDoorClosed\">\n        <Inverter>\n            <IsDoorOpen/>\n        </Inverter>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree instructs a robot to perform a sequence of head movements. The robot is first directed to move its head to a specific pitch and yaw angle, then pause for 2 seconds before proceeding to the next head movement. The commented out sections indicate alternative head movements and pauses that are not currently part of the sequence. Overall, the task involves controlling the robot's head movements in a predefined sequence with pauses in between each movement.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <!-- <HeadControl      pitch=\"0.0\" yaw=\"10.0\" />\n            <HeadControl      pitch=\"0.0\" yaw=\"170.0\" />\n            <HeadControl      pitch=\"-80.0\" yaw=\"90.0\" />\n            <HeadControl      pitch=\"80.0\" yaw=\"90.0\" /> -->\n            <HeadControl      pitch=\"0.0\" yaw=\"135.0\" />\n            <Pause       time_limit_sec=\"2\"/>\n            <!-- <HeadControl      pitch=\"90.0\" yaw=\"165.0\" />\n            <Pause       time_limit_sec=\"2\"/>\n            <HeadControl      pitch=\"-60.0\" yaw=\"115.0\" />\n            <Pause       time_limit_sec=\"2\"/> -->\n        </Sequence>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a series of tasks for a robot. Initially, the robot is instructed to collect pucks from various locations and activate a mechanism to grab them. Subsequently, it moves forward, repeating a process five times to handle the collected pucks. After this, the robot navigates through a specific path to reach an accelerator and then drops the pucks into it.\n\nOverall, the robot's main task involves collecting pucks, weighing them, reaching the accelerator, and finally depositing the pucks into it. The behavior tree provides a structured sequence of actions for the robot to execute in order to accomplish these tasks efficiently.",
        "output": "<!--\ndépart violet -> AX2\n(départ jaune -> AX1,et tourner barillet pour se placer devant un non-rouge)\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n\n\n    <BehaviorTree ID=\"CollectPucks\">\n        <Sequence>\n            <MoveAhead moveForward=\"true\"\n                       distance = \"778\"\n            />\n            <Turn name = \"turn_90_right\"\n                  angle = \"\"\n            />\n            <SubTree ID = \"GetPuck\" dist = \"485\">\n            <SubTree ID = \"GetPuck\" dist = \"100\">\n            <SubTree ID = \"GetPuck\" dist = \"100\">\n            <SubTree ID = \"GetPuck\" dist = \"100\">\n            <SubTree ID = \"GetPuck\" dist = \"100\">\n            <SubTree ID = \"GetPuck\" dist = \"100\">\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID = \"GetPuck\">\n        <MoveAhead moveForward=\"true\"\n                   distance = \"{dist}\"\n        />\n        <GrabPuck/>\n        <ActiverBarillet/>\n    </BehaviorTree>\n\n    <BehaviorTree ID = \"GrabPuck\">\n        <MoveAX_5 name=\"turn_90_left\"\n                  pos=\"\"\n                  mode=\"joint\"\n        />\n        <MoveAX_3 name=\"approach_puck\"\n                  pos=\"\"\n                  mode=\"joint\"\n        />\n        <ActivatePump/>\n        <MoveAX_3 name=\"come_back\"\n                  pos=\"\"\n                  mode=\"joint\"\n        />\n        <MoveAX_5 name=\"turn_90_right\"\n                  pos=\"\"\n                  mode=\"joint\"\n        />\n        <MoveAX_4 name=\"approach_barrel\"\n                  pos=\"\"\n                  mode=\"joint\"\n        />\n        <ActivatePump/>\n        <MoveAX_4 name=\"come_back\"\n                  pos=\"\"\n                  mode=\"joint\"\n        />\n    </BehaviorTree>\n\n\n\n    <BehaviorTree ID=\"WeightPucks\">\n        <Sequence>\n            <ActiverBarillet/>\n            <MoveAhead moveForward=\"true\"\n                       distance = \"828\"\n            />\n            <!-- Trouver le noeud pour la répétition -->\n            <Repeat nb=\"5\">\n                <MoveAX_1 name=\"psuh_puck\"\n                          pos=\"\"\n                          mode=\"joint\"\n                />\n                <MoveAX_1 name=\"return\"\n                          pos=\"\"\n                          mode=\"joint\"\n                />\n                <ActiverBarillet/>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n\n\n\n    <BehaviorTree ID=\"ReachAccelerator\">\n        <Sequence>\n            <Turn name = \"turn_90_right\"\n                  angle = \"\"\n            />\n            <MoveAhead moveForward=\"true\"\n                       distance = \"\"\n            />\n            <Turn name = \"turn_90_left\"\n                  angle = \"\"\n            />\n            <MoveAhead moveForward=\"true\"\n                       distance = \"\"\n            />\n            <Turn name = \"turn_90_right\"\n                  angle = \"\"\n            />\n            <MoveAhead moveForward=\"true\"\n                       distance = \"\"\n            />\n        </Sequence>\n    </BehaviorTree>\n\n\n\n    <BehaviorTree ID=\"DropInAccelerator\">\n        <MoveAX_1 name=\"psuh_puck\"\n                  pos=\"\"\n                  mode=\"joint\"\n        />\n        <MoveAX_1 name=\"come_back\"\n                  pos=\"\"\n                  mode=\"joint\"\n        />\n    </BehaviorTree>\n\n\n\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SubTree ID=\"CollectPucks\"/>\n            <SubTree ID=\"WeightPucks\"/>\n            <SubTree ID=\"ReachAccelerator\"/>\n            <SubTree ID=\"DropInAccelerator\"/>\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of tasks for a robot. First, it is instructed to navigate to the entrance, then ask a person, localize an unoccupied site, and finally navigate to the unoccupied site. The tasks are executed in sequence, with each subsequent task being activated only if the previous one has been successfully completed. This behavior tree essentially directs the robot through a series of steps aimed at reaching and interacting with an unoccupied site, likely as part of a larger operation or mission.",
        "output": "  <root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <ActivationSequence name=\"root_sequence\">\n            <NavigateToEntrance             name=\"navigate_to_entrance\"/>\n            <AskPerson                      name=\"ask_person\"/>\n            <LocalizeUnoccupiedSite         name=\"localize_unoccupied_site\"/>\n            <NavigateToUnoccupiedSite       name=\"navigate_to_unoccupied_site\"/>\n        </ActivationSequence>\n     </BehaviorTree>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robotic system to perform a sequence of actions. It begins with a brief pause, followed by adjusting the torso control to a relative height of 0.95. After another short pause, the torso control is then adjusted to a lower relative height of 0.15.\n\nIn summary, the behavior tree coordinates the robot to execute a specific set of movements and pauses in a sequential manner, likely for a particular task or action.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Pause          time_limit_sec=\"1\" />\n            <TorsoControl   relative_height=\"0.95\" />\n            <Pause          time_limit_sec=\"1\" />\n            <TorsoControl   relative_height=\"0.15\" />\n        </Sequence>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a sequence of actions for a robot to perform. It starts with the robot attempting to pass through a window, followed by closing a door. There are variations in the sequence where the robot may attempt to pass through the window multiple times before closing the door. The specific conditions and details of these actions are defined in the TreeNodesModel section.\n\nIn summary, the behavior tree outlines a series of steps for the robot, involving interactions with doors and windows. The robot first attempts to pass through a window, then closes a door. The tree allows for flexibility in the number of attempts to pass through the window before proceeding to close the door.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"SeqA\">\n            <Sequence>\n                <Sequence name=\"SeqB\">\n                    <Action ID=\"PassThroughWindow\"/>\n                </Sequence>\n                <Sequence name=\"SeqE\">\n                    <Action ID=\"PassThroughWindow\"/>\n                    <Action ID=\"PassThroughWindow\"/>\n                </Sequence>\n            </Sequence>\n            <Action ID=\"CloseDoor\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CloseDoor\"/>\n        <Condition ID=\"IsDoorOpen\"/>\n        <Action ID=\"OpenDoor\"/>\n        <Action ID=\"PassThroughDoor\"/>\n        <Action ID=\"PassThroughWindow\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the task flow for a robot interacting in a bar or restaurant setting. The robot is programmed to follow a sequence of actions: first, it retrieves an order (GetOrder), then navigates to the barman (NavigateToBarman) and interacts with them (InteractWithBarman). After this, it checks the order (CheckOrder), navigates to the client (NavigateToClient), and finally delivers the order to the client (DeliverOrder).\n\nThis behavior tree orchestrates the robot's actions in a structured manner, ensuring that it follows a predefined sequence of tasks to successfully complete the order delivery process in a bar or restaurant environment.",
        "output": " <root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <ActivationSequence name=\"root_sequence\">\n            <GetOrder           name=\"get_order\"/>\n            <NavigateToBarman   name=\"navigate_to_barman\"/>\n            <InteractWithBarman name=\"interact_with_barman\"/>\n            <CheckOrder         name=\"check_order\"/>\n            <NavigateToClient   name=\"navigate_to_client\"/>\n            <DeliverOrder       name=\"deliver_order\"/>\n        </ActivationSequence>\n     </BehaviorTree>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to execute a sequence that repeatedly prints \"Hello World\" for a specified number of cycles. The number of cycles is determined by the value of the variable \"num_hello\". When executed, the behavior tree will repeat the sequence of printing \"Hello World\" for the specified number of cycles. This behavior can be utilized in scenarios where repetitive actions or greetings need to be performed, such as in testing, demonstration, or communication with users.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_hello}\">\n            <Sequence>\n                <Action ID=\"Print\" message=\"Hello World\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"Print\">\n            <input_port type=\"std::string\" name=\"message\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a sequence of actions for a robot or an autonomous agent. The sequence involves the robot performing various tasks such as moving to specific locations, staying in place, and executing conditional checks.\n\nInitially, the robot executes \"go1\" followed by a nested sequence where it first stays in place (stay1 and stay2) and then moves to three different locations (go1, go2, go3). After this nested sequence, the robot proceeds to execute \"go2\" and \"go3\" in order.\n\nAdditionally, there are other available actions such as \"dumpRun\", \"goClosestR\", \"isFull\", \"mineResources\", and \"waitFrames\" which can be utilized within the behavior tree.\n\nOverall, the behavior tree outlines a series of actions that the robot will follow in a sequential manner, including movement, decision-making, and task execution based on certain conditions.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Action ID=\"go1\"/>\n            <Sequence name=\"Sequence2\">\n                <Action ID=\"stay1\"/>\n                <Action ID=\"stay2\"/>\n                <Sequence name=\"Sequence3\">\n                    <Action ID=\"go1\"/>\n                    <Action ID=\"go2\"/>\n                    <Action ID=\"go3\"/>\n                </Sequence>\n            </Sequence>\n            <Action ID=\"go2\"/>\n            <Action ID=\"go3\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"goClosestR\"/>\n        <Condition ID=\"isFull\"/>\n        <Action ID=\"mineResources\"/>\n        <Action ID=\"moveBaseToGoal\">\n            <inout_port name=\"key_name\">goal</inout_port>\n        </Action>\n        <Action ID=\"stay1\"/>\n        <Action ID=\"stay2\"/>\n        <Action ID=\"waitFrames\">\n            <output_port name=\"barout\"/>\n            <inout_port name=\"baz\"/>\n            <input_port name=\"fooin\"/>\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a sequence of actions, where the robot will first execute \"go1\". If \"go1\" fails, it will then attempt to execute \"go2\", and if that fails, it will proceed to execute \"go3\". The tree also includes additional actions such as \"alwaysTrue\", \"dumpRun\", \"goClosestR\", \"guardAiMovement\", \"isFull\", \"mineResource\", and \"waitFrames\".\n\nOverall, the behavior tree represents a decision-making process for the robot's actions. It starts with attempting to perform \"go1\" and has fallback sequences for alternative actions in case of failure. This structure allows the robot to adapt its behavior based on the success or failure of each action, ensuring progress towards its objectives.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"go1\"/>\n            <Fallback>\n                <Sequence>\n                    <Action ID=\"go2\"/>\n                </Sequence>\n                <Sequence>\n                    <Action ID=\"go3\"/>\n                </Sequence>\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"alwaysTrue\"/>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"goClosestR\"/>\n        <Action ID=\"guardAiMovement\"/>\n        <Action ID=\"isFull\"/>\n        <Action ID=\"mineResource\"/>\n        <Action ID=\"waitFrames\">\n            <input_port name=\"_in_0\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions to be performed. The actions involve input and output ports, where some actions have default values for their ports. Specifically, the sequence includes actions with various configurations such as providing input values, setting output values, and using default values for ports. Additionally, the TreeNodesModel section specifies the details of each action, including their IDs and the names of their input and output ports.\n\nOverall, the behavior tree seems to be focused on defining a sequence of actions with specific input and output port configurations, possibly related to a larger system or process. However, without further context or understanding of the specific domain or system, it is challenging to provide a more detailed summary of the exact purpose or functionality of these actions.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Action ID=\"inOnlyA\" in0=\"\"/>\n            <Action ID=\"inOnlyB\" in0=\"ice\"/>\n            <Action ID=\"inOnlyB\" in0=\"\"/>\n            <Action ID=\"inOnlyA\" in0=\"  ${foo.baz}\"/>\n            <Action ID=\"outOnlyA\" out0=\"\"/>\n            <Action ID=\"outOnlyB\" out0=\"baz\"/>\n            <Action ID=\"outOnlyC\" out0=\"${baz}\"/>\n            <Action ID=\"outOnlyD\" out0=\"${foo.goo}\" outB=\"${foo.outB}\" outC=\"${foo.outC}\"/>\n            <Action ID=\"outOnlyE\" out0=\"${fan}\"/>\n            <Action ID=\"outOnlyF\" out0=\"${long.untraveled.path}\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"inOnlyA\">\n            <input_port name=\"in0\"/>\n        </Action>\n        <Action ID=\"inOnlyB\">\n            <input_port default=\"foo\" name=\"in0\"/>\n        </Action>\n        <Action ID=\"outOnlyA\">\n            <output_port name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyB\">\n            <output_port default=\"${baz}\" name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyC\">\n            <output_port name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyD\">\n            <output_port name=\"out0\"/>\n            <output_port name=\"outB\"/>\n            <output_port name=\"outC\"/>\n        </Action>\n        <Action ID=\"outOnlyE\">\n            <output_port name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyF\">\n            <output_port name=\"out0\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions for a resource-gathering robot. The robot is programmed to perform the following actions in sequence: \n1. Move towards the closest available resource.\n2. Wait for 30 frames.\n3. Perform resource mining based on specific parameters.\n4. Mine the identified resource.\n\nAdditionally, the tree includes various other potential actions and conditions such as \"dumpRun\", \"go1\", \"go2\", \"go3\", \"isFull\", \"mineResources\", \"moveBaseToGoal\", \"stay1\", \"stay2\", and different types of \"waitFrames\" actions with varying parameters.\n\nOverall, the behavior tree outlines the decision-making process and actions for the robot to efficiently gather resources while considering factors like resource availability and operational pauses.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Action ID=\"goClosestR\"/>\n            <Action ID=\"waitFrames2\" frames=\"30\"/>\n            <Action ID=\"waitFrames3\" d_one=\"4\" d_zero=\"\" frames=\"{pauseAtMine}\" stagger=\"{sight}\"/>\n            <Action ID=\"mineResource\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"goClosestR\"/>\n        <Condition ID=\"isFull\"/>\n        <Action ID=\"mineResource\"/>\n        <Action ID=\"mineResources\"/>\n        <Action ID=\"moveBaseToGoal\">\n            <input_port name=\"key_name\">goal</input_port>\n        </Action>\n        <Action ID=\"stay1\"/>\n        <Action ID=\"stay2\"/>\n        <Action ID=\"waitFrames\">\n            <output_port name=\"barout\"/>\n            <input_port name=\"baz\"/>\n            <input_port name=\"fooin\"/>\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n        <Action ID=\"waitFrames2\">\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n        <Action ID=\"waitFrames3\">\n            <inout_port default=\"4\" name=\"d_one\">has default</inout_port>\n            <inout_port name=\"d_zero\">d1</inout_port>\n            <input_port default=\"2\" name=\"frames\"/>\n            <input_port name=\"stagger\">not a real argument, the other has a default</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an environment with periodic global path replanning at 1 Hz and includes recovery actions. The robot will attempt to navigate to a goal pose, using a grid-based planner, and clear the global costmap. If this fails, it will follow a predefined path and clear the local costmap. In case of further failures, it will execute recovery actions such as clearing both the global and local costmaps, spinning, and waiting.\n\nOverall, the behavior tree ensures that the robot continuously attempts navigation while handling potential failures by reattempting navigation, following a predefined path, and executing recovery actions. This robust approach allows the robot to adapt to changing environments and recover from unexpected obstacles or errors in its navigation process.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree provided is a simple one. It consists of a sequence with two actions: printing the value of \"role\" and then printing the value of \"behavior_tree\". This behavior tree is designed to execute these two actions in sequence, without any conditional logic or branching. The purpose seems to be to output the values of \"role\" and \"behavior_tree\" for diagnostic or logging purposes.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"Sequence\">\n    \t<Print message=\"{role}\"/>\n    \t<Print message=\"{behavior_tree}\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement towards three different goals (Goal_a, Goal_b, Goal_c) in a repeated sequence for 3 cycles. \nFor each cycle, the robot sets the blackboard with the coordinates of the three goals and then moves towards each goal sequentially using the \"MoveRobot\" behavior tree. After reaching each goal, it takes a snapshot using the SnapshotClient.\nThis process is repeated for the specified number of cycles. The \"MoveRobot\" behavior tree itself involves setting a goal for the robot using Nav2Client.\n\nOverall, the behavior tree controls the robot's navigation by repeatedly moving it to predefined locations while capturing snapshots at each location.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"3\">\n            <Sequence>\n                <SetBlackboard output_key=\"Goal_a\" value=\"-0.579;-1.341;0.0;1.0\" />\n                <SetBlackboard output_key=\"Goal_b\" value=\"5.214;-1.533;0.0;1.0\" />\n                <SetBlackboard output_key=\"Goal_c\" value=\"-1.588;1.253;0.0;1.0\" />\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                    <SnapshotClient/>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                    <SnapshotClient/>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                    <SnapshotClient/>\n                </Sequence>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an array of poses, continuously replanning its global path at 1 Hz. It includes recovery actions specific to planning/control and general system issues. The main sequence involves the robot navigating with periodic replanning, using a rate controller to manage the frequency of path computation and following the path. If there are failures during navigation, it retries a limited number of times before executing recovery actions such as clearing the costmaps, spinning, waiting, and backing up.\n\nIn summary, the behavior tree orchestrates the robot's navigation by continuously updating its path through poses, handling potential failures in path computation and execution, and incorporating recovery strategies to address various issues that may arise during navigation.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz through an array of poses continuously\n   and it also has recovery actions specific to planning / control as well as general system issues.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"0.333\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathThroughPoses\">\n            <ReactiveSequence>\n              <RemovePassedGoals input_goals=\"{goals}\" output_goals=\"{goals}\" radius=\"0.5\"/>\n              <ComputePathThroughPoses goals=\"{goals}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            </ReactiveSequence>\n            <ReactiveFallback name=\"ComputePathThroughPosesRecoveryFallback\">\n              <GoalUpdated/>\n              <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n            </ReactiveFallback>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ReactiveFallback name=\"FollowPathRecoveryFallback\">\n            <GoalUpdated/>\n            <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          </ReactiveFallback>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <RoundRobin name=\"RecoveryActions\">\n          <Sequence name=\"ClearingActions\">\n            <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </Sequence>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n          <BackUp backup_dist=\"0.15\" backup_speed=\"0.025\"/>\n        </RoundRobin>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot's navigation system, focusing on continuous global path replanning at 1 Hz and incorporating recovery actions for planning, control, and general system issues. The main sequence involves navigating with periodic replanning, where the robot computes a path to a specified goal using a grid-based planner, follows the computed path using a specific controller, and handles recovery in case of failures during planning or execution.\n\nThe recovery mechanism includes retrying failed navigation tasks, reacting to updated goals, clearing costmaps (both local and global), spinning to reorient, waiting for a duration, and backing up if necessary. These recovery actions are organized into a structured fallback approach, ensuring that the robot can handle various types of issues that may arise during navigation.\n\nOverall, the behavior tree provides a robust framework for the robot's navigation system, enabling it to continuously plan and execute paths while handling potential failures and system issues effectively.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions specific to planning / control as well as general system issues.\n  This will be continuous if a kinematically valid planner is selected.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ReactiveFallback name=\"ComputePathToPoseRecoveryFallback\">\n              <GoalUpdated/>\n              <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n            </ReactiveFallback>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ReactiveFallback name=\"FollowPathRecoveryFallback\">\n            <GoalUpdated/>\n            <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          </ReactiveFallback>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <RoundRobin name=\"RecoveryActions\">\n          <Sequence name=\"ClearingActions\">\n            <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </Sequence>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n          <BackUp backup_dist=\"0.15\" backup_speed=\"0.025\"/>\n        </RoundRobin>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate a global path with periodic replanning at 1 Hz and includes recovery actions. It uses a pipeline sequence to manage the navigation process, with recovery nodes for handling potential failures.\n\nThe \"NavigateWithReplanning\" sequence incorporates a rate controller to ensure the replanning occurs at the specified frequency. Within this sequence, there are recovery nodes for computing the path to a pose and following the path. These recovery nodes contain fallback behaviors such as clearing costmaps and waiting in case of issues.\n\nIf any of the recovery nodes fail, the \"RecoveryFallback\" handles the situation by waiting for a set duration before attempting recovery again. This structure ensures that the robot can continuously navigate its environment, recompute paths when necessary, and recover from unexpected obstacles or errors.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"2\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"4\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ReactiveFallback name=\"PathToPoseFallback\">\n              <GoalUpdated/>\n              <RoundRobin name=\"GlobalPlannerRecoveryActions\">\n                <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n                <Wait wait_duration=\"2\"/>\n              </RoundRobin>\n            </ReactiveFallback>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"4\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ReactiveFallback name=\"FollowPathFallback\">\n            <GoalUpdated/>\n            <RoundRobin name=\"PlannerRecoveryActions\">\n              <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n              <Spin spin_dist=\"1.57\"/>\n            </RoundRobin>\n          </ReactiveFallback>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <Wait wait_duration=\"5\"/>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate while periodically replanning its global path at a frequency of 1 Hz. It uses a pipeline sequence consisting of two tasks: \n1. The \"ComputePathToPose\" task, which calculates the path to a specified goal using a planner with the ID \"GridBased\". This task is controlled by a rate controller set to 1 Hz.\n2. The \"FollowPath\" task, which instructs the robot to follow the calculated path using a specific controller.\n\nOverall, the behavior tree ensures that the robot continuously updates its path based on changing environmental conditions or new obstacles, allowing it to navigate effectively in dynamic environments.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </RateController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a complex sequence of actions for controlling a robotic system. It involves multiple sub-trees, each responsible for specific tasks such as planning paths, moving manipulators, handling objects, and navigating the vehicle. The overall task can be summarized as follows:\n\nThe \"TestNav\" behavior tree orchestrates a series of actions for the robotic system. It begins with opening the gripper, navigating the vehicle, and then executing a sequence of manipulator movements to search specific frames, carry an object, and return to a designated drive position. Additionally, it includes error handling and recovery mechanisms, such as dealing with failure scenarios when handling objects or finding empty frames.\n\nThe behavior tree is designed to handle various scenarios in a structured manner, ensuring that the robot performs the necessary actions to accomplish its objectives while also addressing potential failures during the process.",
        "output": "\n<root main_tree_to_execute=\"TestNav\">\n\n    <BehaviorTree ID=\"Test2\">\n        <Sequence name=\"main_sequence\">\n            <PlanManipulatorPath plan_to_frame=\"driveposition\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <PlanManipulatorPath plan_to_frame=\"search1\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <PlanManipulatorPath plan_to_frame=\"search2\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <PlanManipulatorPath plan_to_frame=\"search3\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <PlanManipulatorPath plan_to_frame=\"carryarea1\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <PlanManipulatorPath plan_to_frame=\"driveposition\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"Test3\">\n        <Sequence name=\"main_sequence\">\n            <PlanManipulatorPath plan_to_frame=\"search3\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <PlanManipulatorPath plan_to_frame=\"object\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n        </Sequence>\n    </BehaviorTree> \n\n    <BehaviorTree ID=\"TestNav\">\n        <Sequence name=\"main_sequence\">\n            <MoveGripper action=\"open\"/>\n            <NavigateVehicle/>\n            <Sequence name=\"main_manipulator_sequence\">\n                <Fallback name=\"find_object\">\n                    <ForceFailure name=\"force_failure11\">\n                        <Sequence name=\"search1\">\n                            <PlanManipulatorPath plan_to_frame=\"search1\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                        </Sequence>\n                    </ForceFailure>\n                    <Sequence name=\"search_frame3\">\n                        <Sequence name=\"search2\">\n                            <PlanManipulatorPath plan_to_frame=\"search2\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                        </Sequence>\n                        <ObjectSearch object_pose=\"{object_pose}\"/>\n                    </Sequence>\n                    <ForceFailure name=\"force_failure1\">\n                        <Sequence name=\"gotodrive\">\n                            <PlanManipulatorPath plan_to_frame=\"driveposition\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                        </Sequence>\n                    </ForceFailure>\n                </Fallback>\n                <Sequence name=\"handle_object\">\n                    <Fallback name=\"handle_not_able_to_close\">\n                        <Sequence name=\"pick_object\">\n                            <Sequence name=\"main_move_to_object\">\n                                <PlanManipulatorPath plan_to_frame=\"object\" object_pose=\"{object_pose}\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                                <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                            </Sequence>\n                            <MoveGripper action=\"close\"/>\n                        </Sequence>\n                        <ForceFailure name=\"force_failure1\">\n                            <Sequence name=\"movetodrive\">\n                                <PlanManipulatorPath plan_to_frame=\"driveposition\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                                <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                            </Sequence>\n                        </ForceFailure>\n                    </Fallback>\n                    <Sequence name=\"leave_object\">\n                        <Fallback name=\"find_empty_frame\">\n                            <Fallback name=\"check_empty_frame\">\n                                <EmptyFrame check_frame=\"carryarea1\" empty_frame=\"{empty_frame}\"/>\n                                <EmptyFrame check_frame=\"carryarea2\" empty_frame=\"{empty_frame}\"/>\n                                <EmptyFrame check_frame=\"carryarea3\" empty_frame=\"{empty_frame}\"/>\n                            </Fallback>\n                            <ForceFailure name=\"force_failure2\">\n                                <MoveGripper action=\"open\"/>\n                            </ForceFailure>\n                        </Fallback>\n                        <Sequence name=\"emptyframe\">\n                            <PlanManipulatorPath plan_to_frame=\"{empty_frame}\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                        </Sequence>\n                        <MoveGripper action=\"open\"/>\n                        <Sequence name=\"drive\">\n                            <PlanManipulatorPath plan_to_frame=\"driveposition\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                        </Sequence>\n                    </Sequence>\n                </Sequence>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree> \n\n    <BehaviorTree ID=\"TestTree\">\n        <Sequence name=\"main_sequence\">\n            <MoveGripper action=\"open\"/>\n            <PlanManipulatorPath plan_to_frame=\"search1\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <PlanManipulatorPath plan_to_frame=\"search2\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n            <Fallback name=\"object_search\">\n                <ObjectSearch object_pose=\"{object_pose}\"/>\n                <ForceFailure name=\"force_failure1\">\n                    <Sequence name=\"gotodrive\">\n                        <PlanManipulatorPath plan_to_frame=\"driveposition\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                        <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                    </Sequence>\n                </ForceFailure>\n            </Fallback>\n            <Sequence name=\"handle_object\">\n                <Fallback name=\"handle_not_able_to_close\">\n                    <Sequence name=\"pick_object\">\n                        <Sequence name=\"main_move_to_object\">\n                            <PlanManipulatorPath plan_to_frame=\"object\" object_pose=\"{object_pose}\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                        </Sequence>\n                        <MoveGripper action=\"close\"/>\n                    </Sequence>\n                    <ForceFailure name=\"force_failure1\">\n                        <Sequence name=\"movetodrive\">\n                            <PlanManipulatorPath plan_to_frame=\"driveposition\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                            <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                        </Sequence>\n                    </ForceFailure>\n                </Fallback>\n                <Sequence name=\"leave_object\">\n                    <Fallback name=\"find_empty_frame\">\n                        <Fallback name=\"check_empty_frame\">\n                            <EmptyFrame check_frame=\"carryarea1\" empty_frame=\"{empty_frame}\"/>\n                            <EmptyFrame check_frame=\"carryarea2\" empty_frame=\"{empty_frame}\"/>\n                            <EmptyFrame check_frame=\"carryarea3\" empty_frame=\"{empty_frame}\"/>\n                        </Fallback>\n                        <ForceFailure name=\"force_failure2\">\n                            <MoveGripper action=\"open\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Sequence name=\"emptyframe\">\n                        <PlanManipulatorPath plan_to_frame=\"{empty_frame}\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                        <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                    </Sequence>\n                    <MoveGripper action=\"open\"/>\n                    <Sequence name=\"drive\">\n                        <PlanManipulatorPath plan_to_frame=\"driveposition\" manipulator_path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                        <MoveManipulator path=\"{manipulator_path}\" move_to_frame=\"{move_to_frame}\"/>\n                    </Sequence>\n                </Sequence>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree> \n\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the process of generating grasping candidates for a robot. It begins by segmenting the tabletop from the scene, attempting this operation up to three times if unsuccessful. Following this, it checks if the desired object is present on the blackboard and extracts its point cloud if available; otherwise, it proceeds with tabletop clustering. Finally, it generates grasping candidates based on the extracted object cloud and table height. The behavior tree ensures that the robot can effectively identify and generate viable grasping options for objects in its environment.",
        "output": "<root main_tree_to_execute=\"GPDGraspGeneration\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"GPDGraspGeneration\">\n        <Sequence>\n            <RetryUntilSuccesful num_attempts=\"3\">\n                <TableTopSegmentation original_cloud=\"{original_cloud}\" image_scene=\"{image_scene}\" table_height=\"{table_height}\" original_cloud_transformed=\"{original_cloud_transformed}\" tabletop_cloud=\"{tabletop_cloud}\" plane_cloud=\"{plane_cloud}\" nonplane_cloud=\"{nonplane_cloud}\"/>\n            </RetryUntilSuccesful>\n            <ConditionalSequence condition=\"False\">\n                <Decorator entry=\"{desired_object}\" ID=\"BlackboardEntryCheck\" name=\"DesiredObjectEntryCheck\">\n                    <ObjectCloudExtraction original_cloud=\"{original_cloud}\" image_scene=\"{image_scene}\" object_cloud=\"{object_cloud}\" tabletop_cloud=\"{tabletop_cloud}\" desired_object=\"{desired_object}\"/>\n                </Decorator>\n                <TableTopClustering object_cloud=\"{object_cloud}\" tabletop_cloud=\"{tabletop_cloud}\"/>\n            </ConditionalSequence>\n            <GenerateGraspingCandidates object_cloud=\"{object_cloud}\" table_height=\"{table_height}\" grasp_candidates=\"{grasp_candidates}\" original_cloud_transformed=\"{original_cloud_transformed}\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Decorator ID=\"BlackboardEntryCheck\">\n            <input_port name=\"entry\"/>\n        </Decorator>\n        <Condition ID=\"foo\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a simple task for a robot to follow a path to a specified goal. It first computes a path to the given goal using a \"GridBased\" planner, and then instructs the robot to follow the computed path using a \"FollowPath\" controller. This behavior tree is focused on guiding the robot through a predefined path to reach its designated goal.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence>\n      <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a series of actions and conditions for controlling a robot or an autonomous system. The main sequence involves the robot waiting for a specified duration, then repeatedly moving to a specific goal position. This movement is repeated 10 times before another wait action is executed.\n\nAdditionally, the behavior tree includes various utility nodes such as logging messages, performing mathematical operations, subscribing to ROS topics, and interacting with Actionlib action servers. These utility nodes enable the robot to handle diverse tasks such as fire detection, extinguishing fires, window detection, takeoff, landing, and more.\n\nThe tree also incorporates decorators and control nodes like ForceSuccess, OnlyOnce, Interruptible, Loop, WhileSuccess, and Cooldown, which modify the behavior of child nodes within the tree.\n\nOverall, the behavior tree orchestrates the robot's actions, decision-making, and interactions with its environment in a structured and repeatable manner, enabling it to perform complex tasks autonomously.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action name=\"Stage1WaitSeconds1\" ID=\"WaitSeconds\" duration=\"2\"/>\n            <ForceSuccess>\n                <Repeat num_cycles=\"10\">\n                    <Action name=\"Stage1GoToGoal\" ID=\"UPOGoToGoalByName\" goal_name=\"stage_1_pos_final_5\" action=\"/Make_Plan\" state=\"gpf5\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" duration=\"3\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CallEmptyService\">\n            <input_port name=\"service\" type=\"std::string\">ROS service name</input_port>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"input\" type=\"bool\">Input boolean value</input_port>\n        </Condition>\n        <Action ID=\"CheckKey\">\n            <input_port name=\"no_key\" type=\"std::string\">Key to determine if key to say 'no' has benn pressed</input_port>\n            <input_port name=\"yes_key\" type=\"std::string\">Key to determine if key to say 'yes' has been pressed</input_port>\n        </Action>\n        <Condition ID=\"CompareNumbers\">\n            <input_port name=\"comparison_op\" type=\"std::string\">Comparison operator. Valid operators are &lt;, >, &lt;=, >=, == and !=</input_port>\n            <input_port name=\"first\" type=\"double\">First operand</input_port>\n            <input_port name=\"second\" type=\"double\">Second operand</input_port>\n        </Condition>\n        <Condition ID=\"CompareStrings\">\n            <input_port name=\"comparison_op\" type=\"std::string\">Comparison operator. Valid operators are &lt;, >, &lt;=, >=, == and !=</input_port>\n            <input_port name=\"first\" type=\"std::string\">First operand</input_port>\n            <input_port name=\"second\" type=\"std::string\">Second operand</input_port>\n        </Condition>\n        <Action ID=\"ConcatenateStrings\">\n            <input_port name=\"first\" type=\"std::string\">First string</input_port>\n            <output_port name=\"output\" type=\"std::string\">Concatenated result string</output_port>\n            <input_port name=\"second\" type=\"std::string\">Second string</input_port>\n        </Action>\n        <Action ID=\"ConvertJsonToDouble\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"double\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToInt64\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"long\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToString\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"std::string\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToUint64\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"unsigned long\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertMessageField\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"void\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertRandomMessageField\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"void\">Output variable</output_port>\n        </Action>\n        <Decorator ID=\"CooldownMilliseconds\">\n            <input_port name=\"cooldown\" type=\"unsigned int\" default=\"0\">Cooldown time</input_port>\n        </Decorator>\n        <Decorator ID=\"CooldownSeconds\">\n            <input_port name=\"cooldown\" type=\"unsigned int\" default=\"0\">Cooldown time</input_port>\n        </Decorator>\n        <Action ID=\"CopyJson\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Input variable</input_port>\n            <output_port name=\"output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Output variable to copy to</output_port>\n        </Action>\n        <Action ID=\"DebugLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Action ID=\"ErrorLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Action ID=\"FatalLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Action ID=\"FindByFieldValue\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"void\">Output variable</output_port>\n            <input_port name=\"value\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Value to search for</input_port>\n        </Action>\n        <Action ID=\"FindSubstrings\">\n            <input_port name=\"input\" type=\"std::string\">String to look into</input_port>\n            <input_port name=\"substrings\" type=\"std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> > > >\">Substrings to look for</input_port>\n        </Action>\n        <Decorator ID=\"ForEachLoop\">\n            <input_port name=\"break_on_child_failure\" type=\"bool\">Break loop on child failure?</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Input sequence</input_port>\n            <output_port name=\"output_element\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Output element variable</output_port>\n            <output_port name=\"output_index\" type=\"unsigned long\">Output index variable</output_port>\n        </Decorator>\n        <Action ID=\"GetJsonSize\">\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Input sequence</input_port>\n            <output_port name=\"output\" type=\"unsigned long\">Sequence size output</output_port>\n        </Action>\n        <Action ID=\"GetKeyboard\">\n            <output_port name=\"output\" type=\"std::string\">String received from keyboard</output_port>\n        </Action>\n        <Action ID=\"GetMessageField\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Output variable</output_port>\n        </Action>\n        <Action ID=\"GetRandomMessageField\">\n            <input_port name=\"field\" type=\"std::string\">Field to fetch</input_port>\n            <input_port name=\"input\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message</input_port>\n            <output_port name=\"output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Output variable</output_port>\n        </Action>\n        <Action ID=\"GetTransformDistance\">\n            <input_port name=\"input\" type=\"tf::StampedTransform\">TF transform</input_port>\n            <output_port name=\"output\" type=\"double\">Distance form transform origin</output_port>\n        </Action>\n        <Action ID=\"GetTransformHorizontalDistance\">\n            <input_port name=\"input\" type=\"tf::StampedTransform\">TF transform</input_port>\n            <output_port name=\"output\" type=\"double\">2D distance from TF transform origin</output_port>\n        </Action>\n        <Action ID=\"GetTransformOrigin\">\n            <input_port name=\"input\" type=\"tf::StampedTransform\">TF transform</input_port>\n            <output_port name=\"x\" type=\"double\">Origin x coordinate</output_port>\n            <output_port name=\"y\" type=\"double\">Origin y coordinate</output_port>\n            <output_port name=\"z\" type=\"double\">Origin z coordinate</output_port>\n        </Action>\n        <Action ID=\"InfoLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Action ID=\"InitializeJson\">\n            <output_port name=\"output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Output variable to initialize</output_port>\n        </Action>\n        <Action ID=\"InterpolateFloat\">\n            <input_port name=\"input_range\" type=\"std::vector&lt;double, std::allocator&lt;double> >\">Input value range.</input_port>\n            <input_port name=\"input_value\" type=\"double\">Value to interpolate.</input_port>\n            <input_port name=\"output_range\" type=\"std::vector&lt;double, std::allocator&lt;double> >\">Output value range.</input_port>\n            <output_port name=\"output_value\" type=\"double\">Interpolated value.</output_port>\n        </Action>\n        <Control ID=\"Interruptible\"/>\n        <Action ID=\"LookupTransform\">\n            <output_port name=\"output\" type=\"tf::StampedTransform\">Result transform</output_port>\n            <input_port name=\"source_frame\" type=\"std::string\">Origin TF frame</input_port>\n            <input_port name=\"target_frame\" type=\"std::string\">Target TF frame</input_port>\n            <input_port name=\"use_last_available\" type=\"bool\" default=\"0\">Use last available transform?</input_port>\n        </Action>\n        <Decorator ID=\"Loop\"/>\n        <Action ID=\"MathOperationFloat\">\n            <input_port name=\"first\" type=\"double\">First operand</input_port>\n            <input_port name=\"operator\" type=\"std::string\">Math operation. Valid operatores are: +, -, / and *</input_port>\n            <output_port name=\"output\" type=\"double\">Operation result</output_port>\n            <input_port name=\"second\" type=\"double\">Second operand</input_port>\n        </Action>\n        <Action ID=\"MathOperationInt\">\n            <input_port name=\"first\" type=\"int\">First operand</input_port>\n            <input_port name=\"operator\" type=\"std::string\">Math operation. Valid operatores are: +, -, / and *</input_port>\n            <output_port name=\"output\" type=\"int\">Operation result</output_port>\n            <input_port name=\"second\" type=\"int\">Second operand</input_port>\n        </Action>\n        <Action ID=\"MonitorStdBool\">\n            <input_port name=\"consume_msgs\" type=\"bool\" default=\"0\">Should messages be consumed?</input_port>\n            <input_port name=\"queue_size\" type=\"unsigned int\" default=\"1\">Subscriber callback queue size</input_port>\n            <output_port name=\"serialized_output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message [std_msgs::Bool_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"MonitorStdFloat64\">\n            <input_port name=\"consume_msgs\" type=\"bool\" default=\"0\">Should messages be consumed?</input_port>\n            <input_port name=\"queue_size\" type=\"unsigned int\" default=\"1\">Subscriber callback queue size</input_port>\n            <output_port name=\"serialized_output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message [std_msgs::Float64_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"MonitorStdInt32\">\n            <input_port name=\"consume_msgs\" type=\"bool\" default=\"0\">Should messages be consumed?</input_port>\n            <input_port name=\"queue_size\" type=\"unsigned int\" default=\"1\">Subscriber callback queue size</input_port>\n            <output_port name=\"serialized_output\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message [std_msgs::Int32_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"OStreamNode\">\n            <input_port name=\"message\" type=\"std::string\">String to print</input_port>\n        </Action>\n        <Decorator ID=\"OnlyOnce\"/>\n        <Action ID=\"PublishBool\">\n            <input_port name=\"data\" type=\"bool\">Auto-generated field from std_msgs::Bool_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"latch\" type=\"bool\" default=\"0\">Latch messages?</input_port>\n            <input_port name=\"queue_size\" type=\"unsigned int\" default=\"1\">Internal publisher queue size</input_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to publish to</input_port>\n        </Action>\n        <Action ID=\"PublishStdString\">\n            <input_port name=\"data\" type=\"std::string\">Auto-generated field from std_msgs::String_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"latch\" type=\"bool\" default=\"0\">Latch messages?</input_port>\n            <input_port name=\"queue_size\" type=\"unsigned int\" default=\"1\">Internal publisher queue size</input_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to publish to</input_port>\n        </Action>\n        <Action ID=\"RandomFloat\">\n            <input_port name=\"max\" type=\"double\">Max range value</input_port>\n            <input_port name=\"min\" type=\"double\">Minimum range value</input_port>\n            <output_port name=\"result\" type=\"double\">Random result value</output_port>\n        </Action>\n        <Action ID=\"RandomInteger\">\n            <input_port name=\"max\" type=\"int\">Max range value</input_port>\n            <input_port name=\"min\" type=\"int\">Minimum range value</input_port>\n            <output_port name=\"result\" type=\"int\">Random result value</output_port>\n        </Action>\n        <Action ID=\"RandomSequenceValue\">\n            <input_port name=\"delimiter\" type=\"std::string\" default=\";\">Sequence entries delimiter</input_port>\n            <output_port name=\"output\" type=\"std::string\">Result random sequence entry</output_port>\n            <input_port name=\"sequence\" type=\"std::string\">Sequence to randomize</input_port>\n        </Action>\n        <Action ID=\"SubscribeUPOGoal\">\n            <input_port name=\"consume_msgs\" type=\"bool\" default=\"0\">Should messages be consumed?</input_port>\n            <output_port name=\"output\" type=\"upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >\">Received ROS message [upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port name=\"queue_size\" type=\"unsigned int\" default=\"1\">Subscriber callback queue size</input_port>\n            <input_port name=\"topic\" type=\"std::string\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"UPOFireDetection3D\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"duration\" type=\"int\">Duration</input_port>\n            <output_port name=\"fire_found\" type=\"bool\">Fire Found</output_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n            <output_port name=\"x\" type=\"double\">Fire x</output_port>\n            <output_port name=\"y\" type=\"double\">Fire x</output_port>\n            <output_port name=\"z\" type=\"double\">Fire x</output_port>\n        </Action>\n        <Action ID=\"UPOFireExtinguish\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"detect_fire\" type=\"bool\">Detect Fire</input_port>\n            <output_port name=\"serialized_feedback\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message [upo_actions::FireExtinguishFeedback_&lt;std::allocator&lt;void> >]</output_port>\n            <output_port name=\"serialized_result\" type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\">Serialized ROS message [upo_actions::FireExtinguishResult_&lt;std::allocator&lt;void> >]</output_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOGoToGoal\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"global_goal.header.frame_id\" type=\"std::string\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.header.seq\" type=\"unsigned int\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.orientation.w\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.orientation.x\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.orientation.y\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.orientation.z\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.position.x\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.position.y\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port name=\"global_goal.pose.position.z\" type=\"double\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOGoToGoalByName\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"goal_name\" type=\"std::string\">Name of goal</input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOLanding\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"land\" type=\"bool\">Auto-generated field from upo_actions::LandingGoal_&lt;std::allocator&lt;void> ></input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOTakeOff\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n            <input_port name=\"takeoff_height.data\" type=\"float\">Auto-generated field from upo_actions::TakeOffGoal_&lt;std::allocator&lt;void> ></input_port>\n        </Action>\n        <Action ID=\"UPOWindowDetection\">\n            <input_port name=\"action\" type=\"std::string\">Actionlib action server name</input_port>\n            <input_port name=\"duration\" type=\"int\">Duration</input_port>\n            <output_port name=\"state\" type=\"actionlib::SimpleClientGoalState\">Actionlib reported state</output_port>\n            <output_port name=\"window_present\" type=\"bool\">Window Present</output_port>\n            <output_port name=\"x\" type=\"double\">Window x</output_port>\n            <output_port name=\"y\" type=\"double\">Window y</output_port>\n            <output_port name=\"z\" type=\"double\">Window z</output_port>\n        </Action>\n        <Action ID=\"WaitMilliseconds\">\n            <input_port name=\"duration\" type=\"unsigned int\" default=\"0\">Time to wait</input_port>\n        </Action>\n        <Action ID=\"WaitSeconds\">\n            <input_port name=\"duration\" type=\"unsigned int\" default=\"0\">Time to wait</input_port>\n        </Action>\n        <Action ID=\"WarnLog\">\n            <input_port name=\"message\" type=\"std::string\">Message to log</input_port>\n        </Action>\n        <Decorator ID=\"WhileSuccess\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the decision-making process for an animal, with different actions based on various conditions. The \"MainTree\" initially attempts a random big move as its fallback action. The \"ShedTree\" encompasses multiple scenarios: if the animal is on pasture during the day and in the shed, it will leave the shed, find a random pasture field, and move there. If it's on pasture at night but not in the shed, it will find the shed, move towards it, and enter. During the day, if not in the shed, it will make a random move.\n\nThe conditions include checking the animal's life stage, gender, hunger, location, and other attributes to determine the appropriate action. Actions range from finding prey, giving birth, laying eggs, moving, sleeping, and attempting reproduction. The tree also includes sub-trees for specific behaviors related to being in or leaving the shed.\n\nOverall, the tree models the complex decision-making process of an animal, considering its environment",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <FallbackStar name=\"AnimalStandard\">\n            <Action ID=\"RandomMoveBig\"/>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"ShedTree\">\n        <FallbackStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsDay\"/>\n                <Condition ID=\"IsInShed\"/>\n                <Action ID=\"LeaveShed\"/>\n                <Action ID=\"FindRandomPastureField\"/>\n                <Action ID=\"Move\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsNight\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"FindShed\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"EnterShed\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsDay\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"RandomMove\"/>\n            </SequenceStar>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Condition ID=\"CanHaveSex\"/>\n        <Action ID=\"EatPrey\"/>\n        <Action ID=\"EnterShed\"/>\n        <Action ID=\"FindPrey\"/>\n        <Action ID=\"FindRandomPastureField\"/>\n        <Action ID=\"FindRetreat\"/>\n        <Action ID=\"FindShed\"/>\n        <Action ID=\"GiveBirth\"/>\n        <Condition ID=\"IsAdult\"/>\n        <Condition ID=\"IsCarnivore\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsEgg\"/>\n        <Condition ID=\"IsEggLayer\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHerbivore\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInShed\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Condition ID=\"IsOnPasture\"/>\n        <Condition ID=\"IsPregnant\"/>\n        <Condition ID=\"IsProducer\"/>\n        <Condition ID=\"IsReadyToGiveBirth\"/>\n        <Condition ID=\"IsWoodVermin\"/>\n        <Condition ID=\"IsYoung\"/>\n        <Action ID=\"KillPrey\"/>\n        <Action ID=\"LayEgg\"/>\n        <Action ID=\"LeaveShed\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"Produce\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"RandomMoveBig\"/>\n        <SubTree ID=\"ShedTree\"/>\n        <Action ID=\"Sleep\"/>\n        <Action ID=\"TryHaveSex\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the decision-making process for an animal in a simulated environment. The tree's structure is based on various conditions and actions that the animal can perform.\n\nThe tree begins with a FallbackStar node, which contains three SequenceStar nodes. Each SequenceStar represents a set of conditions and actions to be executed based on the state of the environment and the animal itself.\n\nThe first SequenceStar deals with the animal's movement during the day, either leaving the shed and finding a random pasture field or moving if it's already on the pasture.\n\nThe second SequenceStar handles the animal's behavior at night, focusing on finding shelter if not in the shed and entering it, or continuing to move if already on the pasture.\n\nThe third SequenceStar addresses daytime activities when not in the shed, involving random movement.\n\nThe TreeNodesModel provides a list of all possible conditions and actions that the animal can evaluate and execute within the behavior tree, such as eating prey, laying eggs, and finding retreats.\n\nIn",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <FallbackStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsDay\"/>\n                <Condition ID=\"IsInShed\"/>\n                <Action ID=\"LeaveShed\"/>\n                <Action ID=\"FindRandomPastureField\"/>\n                <Action ID=\"Move\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsNight\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"FindShed\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"EnterShed\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsDay\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"RandomMove\"/>\n            </SequenceStar>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Condition ID=\"CanHaveSex\"/>\n        <Action ID=\"EatPrey\"/>\n        <Action ID=\"EnterShed\"/>\n        <Action ID=\"FindPrey\"/>\n        <Action ID=\"FindRandomPastureField\"/>\n        <Action ID=\"FindRetreat\"/>\n        <Action ID=\"FindShed\"/>\n        <Action ID=\"GiveBirth\"/>\n        <Condition ID=\"IsAdult\"/>\n        <Condition ID=\"IsCarnivore\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsEgg\"/>\n        <Condition ID=\"IsEggLayer\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHerbivore\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInShed\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Condition ID=\"IsOnPasture\"/>\n        <Condition ID=\"IsPregnant\"/>\n        <Condition ID=\"IsProducer\"/>\n        <Condition ID=\"IsReadyToGiveBirth\"/>\n        <Condition ID=\"IsWoodVermin\"/>\n        <Condition ID=\"IsYoung\"/>\n        <Action ID=\"KillPrey\"/>\n        <Action ID=\"LayEgg\"/>\n        <Action ID=\"LeaveShed\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"Produce\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"Sleep\"/>\n        <Action ID=\"TryHaveSex\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's navigation and interaction with humans. The robot is tasked to clear the global cost map, seek multiple predefined search poses, and then continuously navigate to each pose until a failure occurs. Upon reaching each pose, it communicates a speech message associated with the goal, moves towards the next goal using the \"MoveRobot\" subtree, and speaks the goal speech. \n\nAdditionally, the robot employs a decision-making process when encountering humans. It first attempts to detect a person and if successful, it communicates \"Hi there! I found you!\". If no person is detected, it performs a spin action and says \"I didn't see anyone.\".\n\nOverall, the behavior tree coordinates the robot's autonomous navigation to predetermined locations, human interaction through speech communication, and adaptive responses based on detecting human presence.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n\t\t\t<Nav2ClearGlobalCostMap />\n\t\t\t<!-- RobotSeekInitAction\n\t\t\t\tsearch_poses=\"-4.3,-4,180.0;-4.7,-6.6,270.0;-6.0,-4.2,206.0\" /--->\n      <!-- RobotSeekInitAction\n        search_poses=\"-4.3,-4,180.0;0.75,-3.7,206.0;0.71,-6.0,206.0;-4.7,-6.6,270.0;-6.0,-4.2,206.0;-6.4,-1.9,0.0;-8.0,1.5,90.0;-4.4,0.95,218.0\" /-->\n      <RobotSeekInitAction\n        search_poses=\"-4.3,-4,180.0;-4.7,-6.6,270.0;-6.0,-4.2,206.0;-6.4,-1.9,0.0;-8.0,1.5,90.0;-4.4,0.95,218.0\" />\n\n\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t<Sequence>\n\t\t\t\t\t<RobotSeekNextSearchPose next_goal=\"{next_goal}\" goal_speech=\"{goal_speech}\" />\n\t\t\t\t\t<SubTree ID=\"MoveRobot\" target=\"next_goal\" />\n\t\t\t\t\t<TextToSpeechActionClient msg=\"{goal_speech}\" />\n\t\t\t\t\t<Sequence>\n             <Fallback>\n               <Sequence>\n\t\t\t\t\t\t\t\t<ReactiveSequence>\n\t\t\t\t\t\t\t\t\t<Inverter>\n\t\t\t\t\t\t\t\t\t\t<HumanPoseDetect pose_lr_check=\"presence\" expected_pose_left=\"\" expected_pose_right=\"\"\n\t\t\t\t\t\t\t\t\t\t\tdetected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\"\n\t\t\t\t\t\t\t\t\t\t\tpose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t\t</Inverter>\n\t\t\t\t\t\t\t\t\t<RobotSpin angle=\"340\" velocity=\"0.5\" />\n\t\t\t\t\t\t\t\t</ReactiveSequence>\n\t\t\t\t\t\t\t\t<Sequence>\n                   <TextToSpeechActionClient msg=\"I didn't see anyone.\" />\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t<HumanPoseDetect pose_lr_check=\"presence\" expected_pose_left=\"\" expected_pose_right=\"\"\n\t\t\t\t\t\t\t\t\tdetected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\"\n\t\t\t\t\t\t\t\t\tpose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Hi there! I found you!\" />\n\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t</Sequence>\n\t\t\t\t</Sequence>\n\t\t\t</KeepRunningUntilFailure>\n\t\t</Sequence>\n\t</BehaviorTree>\n\n\t<BehaviorTree ID=\"MoveRobot\">\n\t\t<Sequence name=\"SetGoal\">\n\t\t\t<Nav2Client goal=\"{target}\" />\n\t\t</Sequence>\n\t</BehaviorTree>\n</root>\n\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to continuously listen for a wake word. Once the wake word is detected, it will perform a sequence of actions: tilt its head by 10 degrees and then speak \"Hey there.\" The tree structure ensures that the robot keeps running these actions until a failure occurs, allowing it to constantly respond to the wake word. This behavior enables the robot to engage in an interactive conversation or respond to specific commands upon detecting the wake word.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<KeepRunningUntilFailure>\n\t\t\t<ForceSuccess>\n\t\t\t\t<Sequence>\n\t\t\t\t\t<WakeWordDetected since_sec=\"3.0\" />\n\t\t\t\t\t<HeadTiltAction angle=\"10\" dwell_ms=\"1500\" />\n\t\t\t\t\t<TextToSpeechActionClient msg=\"Hey there.\" />\n\t\t\t\t</Sequence>\n\t\t\t</ForceSuccess>\n\t\t</KeepRunningUntilFailure>\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to manage its energy levels and navigate to specific locations. It first checks if the battery level is low and not charging, then it attempts to go to a charging station. If that fails or the conditions are not met, it waits. If the battery is charged or charging, it proceeds to check if it has reached its destination and navigates accordingly.\n\nOverall, the behavior tree orchestrates the robot's actions based on reactive decision-making, ensuring it prioritizes energy management and navigation tasks. The tree employs YARP (Yet Another Robot Platform) conditions and actions to interact with the robot's skills and ports, allowing it to make informed decisions and execute appropriate actions in real-time.",
        "output": "<?xml version=\"1.0\"?>\n<!--\n Copyright (C) 2020 Fondazione Istituto Italiano di Tecnologia (IIT)\n All Rights Reserved.\n-->\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <ReactiveSequence>\n            <ReactiveFallback>\n                <ReactiveSequence>\n<!--                     <Condition ID=\"YARPCondition\" name=\"BatteryLevel\" port_name=\"BatteryLevelSkill\" carrier=\"tcp\" /> -->\n                    <Condition ID=\"YARPCondition\" name=\"BatteryLevel\" port_name=\"BatteryLevelSkill\" carrier=\"tcp+send.portmonitor2+file.Skill_request+type.dll\" />\n<!--                    <Condition ID=\"YARPCondition\" name=\"BatteryLevel\" port_name=\"BatteryLevelSkill\" carrier=\"tcp+send.portmonitor2+recv.portmonitor2+file.Skill_request+type.dll\" />-->\n                    <Condition ID=\"YARPCondition\" name=\"BatteryNotCharging\" port_name=\"BatteryNotChargingSkill\"/>\n                </ReactiveSequence>\n                <ReactiveSequence>\n                  <ReactiveFallback>\n                      <Condition ID=\"YARPCondition\" name=\"IsAtChargingStation\" port_name=\"\"/>\n                       <Action ID=\"YARPAction\" name=\"GoToChargingStation\" carrier=\"tcp+send.portmonitor2+file.Skill_request+type.dll\"/>\n                  </ReactiveFallback>\n                    <Action ID=\"AlwaysRunning\" name=\"Wait\"/>\n                </ReactiveSequence>\n            </ReactiveFallback>\n            <ReactiveFallback>\n                <Condition ID=\"YARPCondition\" name=\"IsAtDestination\" port_name=\"\"/>\n                 <Action ID=\"YARPAction\" name=\"GoToDestination\" port_name=\"goTo\" carrier=\"tcp+send.portmonitor2+file.Skill_request+type.dll\"/>\n            </ReactiveFallback>\n        </ReactiveSequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AlwaysRunning\"/>\n        <Condition ID=\"FlipFlopCondition\"/>\n        <Action ID=\"YARPAction\">\n            <input_port name=\"port_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"YARPCondition\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through a series of waypoints using the NavigateToPose behavior. It follows a reactive fallback approach, where it continuously attempts to achieve the next goal until all goals are achieved or a failure occurs. The process involves getting the next goal, navigating to the pose, loading a pallet at the goal location, and then marking the goal as achieved in the blackboard. This cycle continues until all goals are completed or an error arises. Overall, the behavior tree orchestrates the robot's movement and task execution, ensuring that it efficiently navigates through the given waypoints while handling any potential interruptions or failures.",
        "output": "\n<!--\n  This Behavior Tree processes each of the given waypoints with NavigateToPose.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <ReactiveFallback name=\"FollowTargets\">\n      <AllGoalsAchieved goal_achieved=\"{goal_achieved}\"/>\n      <KeepRunningUntilFailure>\n        <ReactiveSequence>\n          <GetNextGoal goals=\"{goals}\" goal=\"{goal}\" goal_achieved=\"{goal_achieved}\"/>\n          <NavigateToPose goal=\"{goal}\"/>\n          <LoadPallet goal=\"{goal}\"/>\n          <SetBlackboard output_key=\"goal_achieved\" value=\"true\"/>\n        </ReactiveSequence>\n      </KeepRunningUntilFailure>\n    </ReactiveFallback>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the movement of a robot to three different goals, Goal_a, Goal_b, and Goal_c. The robot is initially directed to move to Goal_a, followed by Goal_b, with each movement being separated by a waiting period. This sequence is set to repeat indefinitely until interrupted by the \"gohome\" event. Upon interruption or completion of the repeated sequence, the robot will then proceed to Goal_c.\n\nThe MoveRobot behavior tree defines the sequence for setting the goal and instructing the robot to move to the specified target location.\n\nIn summary, the behavior tree outlines a repetitive task for the robot to navigate between multiple goals, incorporating waiting periods and the ability to interrupt the sequence to return home.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SetBlackboard output_key=\"Goal_a\" value=\"1.17;-1.65;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_b\" value=\"1.1;1.51;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_c\" value=\"-1.25;0.324;0.0;1.0\" />\n            <SetBlackboard output_key=\"Waiting_time\" value=\"2\"/>\n            <Fallback>\n                <ReactiveSequence>\n                    <InterruptEvent event=\"gohome\"/>\n                    <Repeat num_cycles=\"-1\">\n                        <Sequence>\n                            <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                            <WaitingEvent name=\"waiting_event\" waiting_time=\"{Waiting_time}\"/>\n                            <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                            <WaitingEvent name=\"waiting_event\" waiting_time=\"{Waiting_time}\"/>\n                        </Sequence>\n                    </Repeat>\n                </ReactiveSequence>\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                </Sequence>\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <MoveBase goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the movement of three robots towards specific goals. Each robot is assigned a set of goals (Goal_a, Goal_b, Goal_c) and a backup goal (Goal_backup). The robots operate in parallel, attempting to reach their respective goals while allowing for retries upon failure.\n\nThe sequence begins with setting the goals and assigning each robot a unique identifier. Then, a retry mechanism is employed to ensure that the robots persistently attempt to achieve their goals, even if they initially fail. \n\nEach robot follows a pattern where it repeatedly attempts to reach its designated goals in a specific order. If unsuccessful, it falls back to the backup goal. This process continues indefinitely until the goals are reached or the maximum number of attempts is exhausted.\n\nOverall, the behavior tree coordinates the concurrent movement of multiple robots towards their individual goals, ensuring resilience through retries and fallback mechanisms.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence>\n      <!-- Set goal -->\n      <SetBlackboard output_key=\"Goal_a\" value=\"-6.432;3.35;0.000\" />\n      <SetBlackboard output_key=\"Goal_b\" value=\"-0.95;0.6;0.0\" />\n      <SetBlackboard output_key=\"Goal_c\" value=\"-1.488;3.7;0.00\" />\n      <SetBlackboard output_key=\"Goal_backup\" value=\"-1.0;1.0;0.00\" />\n\n      <!-- Set joined robot name -->\n      <SetBlackboard output_key=\"robot1\" value=\"\" />\n      <SetBlackboard output_key=\"robot2\" value=\"nb2_1\" />\n      <SetBlackboard output_key=\"robot3\" value=\"nb2_2\" />\n\n      <RetryUntilSuccesful num_attempts=\"3\">  <!-- Retry once fail -->\n        <Parallel threshold=\"3\">    <!-- threshold = number of robot -->\n          \n          <!-- robot1 -->\n          <Repeat num_cycles=\"-1\">    <!-- repeat infinitely -->\n            <RetryUntilSuccesful num_attempts=\"3\">\n              <Fallback>    <!-- set goal to Goal_backup once the Sequence below fails -->\n                <Sequence>\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot1\" target=\"Goal_a\" />\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot1\" target=\"Goal_b\" />\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot1\" target=\"Goal_c\" />\n                </Sequence>\n                <SubTree ID=\"MoveRobot\" robot_num=\"robot1\" target=\"Goal_backup\" />\n              </Fallback>\n            </RetryUntilSuccesful>\n          </Repeat>\n          \n          <!-- robot2 -->\n          <Repeat num_cycles=\"-1\">\n            <RetryUntilSuccesful num_attempts=\"3\">\n              <Fallback>\n                <Sequence>\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot2\" target=\"Goal_b\" />\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot2\" target=\"Goal_c\" />\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot2\" target=\"Goal_a\" />\n                </Sequence>\n                <SubTree ID=\"MoveRobot\" robot_num=\"robot2\" target=\"Goal_backup\" />\n              </Fallback>\n            </RetryUntilSuccesful>\n          </Repeat>\n          \n          <!-- robot3 -->\n          <Repeat num_cycles=\"-1\">\n            <RetryUntilSuccesful num_attempts=\"3\">\n              <Fallback>\n                <Sequence>\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot3\" target=\"Goal_c\" />\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot3\" target=\"Goal_a\" />\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot3\" target=\"Goal_b\" />\n                </Sequence>\n                <SubTree ID=\"MoveRobot\" robot_num=\"robot3\" target=\"Goal_backup\" />\n              </Fallback>\n            </RetryUntilSuccesful>\n          </Repeat>\n\n        </Parallel>\n      </RetryUntilSuccesful>\n    </Sequence>\n  </BehaviorTree>\n\n\n  <BehaviorTree ID=\"MoveRobot\">\n    <Sequence name=\"SetGoal\">\n      <MoveBase robot=\"{robot_num}\" goal=\"{target}\" />\n    </Sequence>\n  </BehaviorTree>\n\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's navigation system. It attempts to navigate to a specified location by computing a path and then following it. If the navigation fails, it will retry up to 7 times. In case of repeated failures, it will attempt recovery by clearing the local and global costmaps and then spinning in place to reassess the environment before retrying the navigation. This behavior tree is designed to ensure robust navigation even in challenging or dynamic environments.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n  <BehaviorTree ID=\"BehaviorTree\">\n    <RetryUntilSuccesful name=\"retry_navigate\" num_attempts=\"7\">\n      <FallbackStar>\n        <SequenceStar name=\"navigate\">\n          <ComputePathToPose endpoints=\"${endpoints}\" path=\"${path}\"/>\n\t  <FollowPath path=\"${path}\"/>\n        </SequenceStar>\n        <ForceFailure>\n          <SequenceStar name=\"recovery\">\n            <clearEntirelyCostmapServiceRequest service_name=\"/local_costmap/clear_entirely_local_costmap\"/>\n            <clearEntirelyCostmapServiceRequest service_name=\"/global_costmap/clear_entirely_global_costmap\"/>\n            <Spin/>\n          </SequenceStar>\n        </ForceFailure>\n      </FallbackStar>\n    </RetryUntilSuccesful>\n  </BehaviorTree>\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate with periodic global path replanning at 1 Hz and includes recovery actions. The main sequence \"NavigateWithReplanning\" utilizes a rate controller to ensure the frequency of path planning, followed by executing the path using \"FollowPath\". If the robot encounters difficulties or failures, it will attempt recovery actions such as clearing the local and global costmaps and performing a spin maneuver. Additionally, the tree allows for up to 6 retries before considering the navigation task as failed. This behavior tree ensures that the robot can continuously navigate its environment while handling potential obstacles or disruptions through periodic replanning and recovery mechanisms.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\">\n      <Sequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <Fallback>\n            <GoalReached/>\n             <ComputePathToPose goal=\"${goal}\" path=\"${path}\"/>\n          </Fallback>\n        </RateController>\n        <FollowPath path=\"${path}\"/>\n      </Sequence>\n      <SequenceStar name=\"RecoveryActions\">\n        <clearEntirelyCostmapServiceRequest service_name=\"/local_costmap/clear_entirely_local_costmap\"/>\n        <clearEntirelyCostmapServiceRequest service_name=\"/global_costmap/clear_entirely_global_costmap\"/>\n        <Spin/>\n      </SequenceStar>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's path planning and execution. It first computes a path using the global planner, then runs two sub-branches in parallel. The first sub-branch involves executing the local planner to follow the computed path, while the second sub-branch controls the rate at which new paths are computed by the global planner and updates the path for the local planner. The goal for the global planner and the resulting path are stored in the blackboard.\n\nThe behavior tree ensures that the path computation and execution happen concurrently, with the ability to control the frequency of path computations through the \"hz\" parameter. The ParallelNode returns the result of the FollowPath operation, and the ComputePathToPose operation is continuously invoked at a controlled rate.\n\nIn summary, this behavior tree manages the continuous path planning and execution for the robot, ensuring that it can adapt to changing environments and goals in real-time.",
        "output": "<!--\n  This Behavior Tree first computes a path using the global planner (ComputePathToPose).\n  Then, it runs two sub-branches in parallel. The first sub-branch is a FollowPath\n  operation (the local planner). In parallel, there is a rate controlled execution of\n  FollowPath (the global planner). Each time a new path is computed, the path update\n  is sent to the local planner. The right branch, which is the rate controlled\n  ComputePathToPose, always returns RUNNING. Because the Parallel node uses a\n  threshold of 1, whenever the FollowPath returns SUCCESS or FAILURE, the parallel\n  node will return this result.\n\n  The goal (input to the global planner) and the resulting path (output of the global\n  planner and input to the local planner) are passed on the blackboard.\n\n  The rate at which the ComputePathToPose operation is invoked can be controlled with\n  the hz parameter to the RateController node.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <SequenceStar name=\"root\">\n      <ComputePathToPose goal=\"${goal}\" path=\"${path}\"/>\n      <ParallelNode threshold=\"1\">\n        <FollowPath path=\"${path}\"/>\n        <Sequence>\n          <RateController hz=\"1.0\">\n            <ComputePathToPose goal=\"${goal}\" path=\"${path}\"/>\n          </RateController>\n          <UpdatePath/>\n        </Sequence>\n      </ParallelNode>\n    </SequenceStar>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robot. Initially, it checks if the battery component requires attention. If so, it triggers a sequence to conserve energy by reconfiguring and navigating to a recharge station for recharging.\n\nIf the battery is not an issue, the robot switches to normal mode and starts patrolling by navigating through multiple waypoints in a sequence. The patrolling sequence utilizes a \"SequenceStar\" node, allowing the robot to navigate through different waypoints efficiently.\n\nThe tree's structure ensures that the robot prioritizes recharging when necessary and then transitions to its routine patrolling behavior when the battery is functioning optimally. This behavior tree effectively manages the robot's energy needs while ensuring consistent coverage of its designated area through waypoint navigation.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <Fallback>\n                <Action ID=\"CheckComponent\" component=\"battery\"/>\n                <Sequence name=\"recharging\">\n                    <Action ID=\"Reconfigure\" mode=\"f_energy_saving_mode\"/>\n                    <Action ID=\"NavigateToWp\" goal=\"recharge_station\" name=\"navigate_to_wp\"/>\n                    <Action ID=\"Recharge\"/>\n                </Sequence>\n            </Fallback>\n            <Sequence name=\"\">\n                <Action ID=\"Reconfigure\" mode=\"f_normal_mode\"/>\n                <SequenceStar name=\"patrolling\">\n                    <Action ID=\"NavigateToWp\" goal=\"wp_1\" name=\"navigate_to_wp\"/>\n                    <Action ID=\"NavigateToWp\" goal=\"wp_2\" name=\"navigate_to_wp\"/>\n                    <Action ID=\"NavigateToWp\" goal=\"wp_3\" name=\"navigate_to_wp\"/>\n                    <Action ID=\"NavigateToWp\" goal=\"wp_4\" name=\"navigate_to_wp\"/>\n                    <Action ID=\"NavigateToWp\" goal=\"wp_5\" name=\"navigate_to_wp\"/>\n                    <Action ID=\"NavigateToWp\" goal=\"wp_6\" name=\"navigate_to_wp\"/>\n                    <Action ID=\"NavigateToWp\" goal=\"wp_7\" name=\"navigate_to_wp\"/>\n                </SequenceStar>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CheckComponent\">\n            <input_port name=\"component\"/>\n        </Action>\n        <Action ID=\"NavigateToWp\">\n            <input_port name=\"goal\"/>\n        </Action>\n        <Action ID=\"Recharge\"/>\n        <Action ID=\"Reconfigure\">\n            <input_port name=\"mode\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robotic system to execute a series of actions based on certain conditions and inputs. The tree consists of a main sequence that repeats a specified number of times, with each repetition containing multiple sub-actions.\n\nThe main sequence includes:\n1. A fallback node that checks and performs actions based on certain conditions related to the robot's state and desired sequence.\n2. A reactive sequence that handles different action types such as moving, staying, guiding, or transitioning, based on the current action type and robot's state.\n3. An update action that modifies the action sequence and executed sequence based on the current action type and desired sequence.\n\nThe tree also includes various action nodes such as locomotion start, pick action, recovery stand, replanning requests, and more, each with specific input and output ports for communication with other nodes.\n\nOverall, the behavior tree orchestrates the robot's behavior by repeating sequences of actions while reacting to its environment and updating its internal state based on the performed actions and",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Condition ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <Condition ID=\"ReactiveLTLStateCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Switch4 case_1=\"move\" case_2=\"stay\" case_3=\"start_training\" case_4=\"terminate_training\" variable=\"{bt_action_type}\">\n                            <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                            <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"GuideAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"BackNormalAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <AlwaysFailure/>\n                        </Switch4>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"BackNormalAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"DropAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"GuideAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Condition>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Condition ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Condition>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"PickAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"ReactiveLTLStateCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Condition>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel1\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a navigation system for a robot. It uses a pipeline sequence to guide the robot through a series of steps. First, it employs a distance controller to compute a path to a specified goal using a grid-based planner. Once the path is computed, the robot follows this path using a designated path-following controller. This behavior tree essentially orchestrates the process of navigating the robot to a specific location while allowing for replanning if necessary.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <DistanceController distance=\"0.1\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </DistanceController>\n      <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's navigation system that periodically updates its global path at a frequency of 1 Hz. The robot uses a pipeline sequence to control its speed and compute the path to a specific goal using the \"GridBased\" planner. Once the path is computed, the robot follows it using a specified controller. The speed controller ensures that the robot's speed stays within defined limits while following the path. This behavior tree essentially orchestrates the process of navigating towards a goal with periodic replanning to ensure efficient and safe movement.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <SpeedController min_rate=\"0.1\" max_rate=\"1.0\" min_speed=\"0.0\" max_speed=\"0.26\" filter_duration=\"0.3\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </SpeedController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a series of actions for a robot. It begins by checking the status, then proceeds to open and close the gripper in sequence. Finally, it executes a \"SayStuff\" action. The included files \"Check.xml\" and \"Talk.xml\" likely contain additional details or subroutines related to checking status and verbal communication respectively. This behavior tree seems to represent a simple task flow for a robotic system, involving basic checks, manipulation of the gripper, and verbal output.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\t\n    <include path=\"Check.xml\" />\n    <include path=\"subtrees/Talk.xml\" />\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <CheckStatus/>\n            <OpenGripper/>\n            <CloseGripper/>\n            <SayStuff/>\n        </Sequence>\n    </BehaviorTree>\n\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate while periodically replanning its global path at a frequency of 1 Hz. It uses a pipeline sequence where the first step involves computing the path to a specific goal using a planner called \"GridBased\" and storing the computed path. The second step involves the robot following the computed path using a controller identified as \"FollowPath\". This process repeats continuously, ensuring that the robot dynamically adjusts its path based on changing environmental conditions or new obstacles.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </RateController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an environment with periodic global path replanning at 1 Hz and includes recovery actions. The robot will attempt navigation recovery up to 6 times.\n\nThe main sequence involves navigating with replanning, which includes computing the path to a specific goal using a grid-based planner and clearing the entire global costmap context. It also involves following the computed path and clearing the local costmap context.\n\nIn case of failure, the recovery fallback mechanism is triggered. This includes reacting to updated goals, executing a series of recovery actions such as clearing the local and global costmaps, spinning, and waiting before attempting navigation again.\n\nOverall, the behavior tree ensures that the robot can continuously navigate its environment by periodically updating its global path and recovering from any navigation failures.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robotic pick-and-place operation. It begins by selecting an object to pick, retrieving its pose, and then initiating parallel processes to track the object's pose and approach it. After a 3-second wait period, the object's pose is retrieved again, followed by another parallel process to track the pose and execute the pick action on the specified object.\n\nIn summary, the robot first identifies an object to pick, tracks and approaches its location in parallel, waits for a specified duration, re-evaluates the object's pose, and then executes the pick action on the object.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"pick\">\n            <SelectPick  name=\"select_pick\"/>\n            <GetPickObject  name=\"get_pick_object\" object_id=\"{object_id}\"/>\n            <GetPoseFromObject  name=\"get_pose_from_object\" object_id=\"{object_id}\" wp_pose=\"{pose}\"/>\n            <Parallel success_threshold=\"1\" failure_threshold=\"1\">\n                <Track name=\"pick\" pose=\"{pose}\" />\n                <ApproachObject name=\"approach_object\" object_pose=\"{pose}\"/>\n            </Parallel>\n            <Wait seconds=\"3\"/>\n            <GetPoseFromObject  name=\"get_pose_from_object\" object_id=\"{object_id}\" wp_pose=\"{pose}\"/>\n            <Parallel success_threshold=\"1\" failure_threshold=\"1\">\n                <Track name=\"pick\" pose=\"{pose}\" />\n                <Pick name=\"pick\" object_id=\"{object_id}\" object_pose=\"{pose}\"/>\n            </Parallel>\n       </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's navigation by periodically replanning its global path at a frequency of 1 Hz. It uses a pipeline sequence where the first step involves computing a path to a specified goal using the \"GridBased\" planner. This computation is rate-controlled to ensure it occurs at the specified frequency. Once the path is computed, the robot follows this path using a designated controller. The behavior tree effectively ensures that the robot continuously updates and follows its path to reach its destination while considering any dynamic changes in the environment.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </RateController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate while periodically replanning its global path at a frequency of 1 Hz. It utilizes a pipeline sequence with two main components: speed control and path following. The speed controller manages the robot's speed within specified limits and filters the speed changes over a duration. Additionally, it computes a path to a given goal using a planner identified as \"GridBased\". The computed path is then followed by the robot using a designated path-following controller. This behavior tree enables the robot to navigate dynamically in an environment, adjusting its path as necessary to reach its goal effectively.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <SpeedController min_rate=\"0.1\" max_rate=\"1.0\" min_speed=\"0.0\" max_speed=\"0.26\" filter_duration=\"0.3\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </SpeedController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for a robotic arm. It starts by retrieving the joint positions for a specific pose called \"UPTRAY\" and then sets the left and right arm joints to these positions. This process is repeated for poses \"EXTENDED\", \"GRIPPING\", and \"REST\". \n\nIn summary, the behavior tree orchestrates the movement of the robotic arm through a predefined set of poses, ensuring that both the left and right arm joints are correctly positioned for each pose in a sequential manner.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <GetArmJointsForPose pose=\"UPTRAY\" joints_pose=\"{joints_pose}\" />\n            <SetArmJointsLeft joints_pose=\"{joints_pose}\" />\n            <SetArmJointsRight joints_pose=\"{joints_pose}\" />\n            <GetArmJointsForPose pose=\"EXTENDED\" joints_pose=\"{joints_pose}\" />\n            <SetArmJointsLeft joints_pose=\"{joints_pose}\" />\n            <SetArmJointsRight joints_pose=\"{joints_pose}\" />\n            <GetArmJointsForPose pose=\"GRIPPING\" joints_pose=\"{joints_pose}\" />\n            <SetArmJointsLeft joints_pose=\"{joints_pose}\" />\n            <SetArmJointsRight joints_pose=\"{joints_pose}\" />\n            <GetArmJointsForPose pose=\"REST\" joints_pose=\"{joints_pose}\" />\n            <SetArmJointsLeft joints_pose=\"{joints_pose}\" />\n            <SetArmJointsRight joints_pose=\"{joints_pose}\" />\n        </Sequence>\n    </BehaviorTree>\n\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions to be executed by an agent. Initially, the agent performs \"go1\" action, followed by setting a value in the blackboard with the key \"valueA\" to 3. Then, it repeats the \"go2\" action a specified number of times based on the value of \"valueA\". After completing the repetitions, the agent executes the \"go3\" action.\n\nAdditionally, there is a separate section defining the available actions (\"go1\", \"go2\", \"go3\") within the tree.\n\nOverall, this behavior tree orchestrates a series of actions for the agent, incorporating conditional repetition and blackboard interaction.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"go1\"/>\n            <SetBlackboard output_key=\"${valueA:s}\" value=\"3\"/>\n            <Repeat num_cycles=\"${valueA:f}\">\n                <Action ID=\"go2\"/>\n            </Repeat>\n            <Action ID=\"go3\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single sequence that prints the value of the 'role' variable and then prints \"default_bt\". This suggests that the behavior tree is designed to perform some form of role-based action or decision-making, where the 'role' variable likely determines the specific behavior or task to be executed. The sequence implies a step-by-step execution of these actions, with the printing serving as a representation of the current role and the default behavior tree being utilized.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"Sequence\">\n    \t<Print message=\"{role}\"/>\n    \t<Print message=\"default_bt\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a series of actions for a robot to perform in a household environment. The robot is programmed to execute a set of tasks in a hierarchical manner, with fallbacks and sequences guiding its decision-making process.\n\nInitially, the robot attempts to go to the kitchen. If successful, it then tries to find a bottle. If the bottle is found, it proceeds to grasp it. Subsequently, it computes an inverse pose and validates it before moving towards the computed pose. If the bottle's location is confidently identified, the robot locates and grasps the bottle; otherwise, it marks the inverse pose as invalid and continues running.\n\nIf at any point the robot fails to complete a task, it resorts to asking for help. Additionally, there are conditions such as \"Robot_in_kitchen,\" \"Bottle_found,\" \"Bottle_grasped,\" etc., along with corresponding actions defined in the TreeNodesModel section, which guide the robot's decision-making process based on its environment and internal",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\t\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Root>\n            <Fallback name=\"FB1\">\n                <Sequence name=\"S1\">\n                    <Fallback name=\"FB2\">\n                        <Condition ID=\"Robot_in_kitchen\"/>\n                        <Action ID=\"Go_to_kitchen\"/>\n                    </Fallback>\n                    <Sequence name=\"S2\">\n                        <Fallback name=\"FB3\">\n                            <Condition ID=\"Bottle_found\"/>\n                            <Action ID=\"Find_bottle\"/>\n                        </Fallback>\n                        <Fallback name=\"FB4\">\n                            <Condition ID=\"Bottle_grasped\"/>\n                            <Fallback name=\"FB5\">\n                                <Sequence name=\"S3\">\n                                    <Fallback name=\"FB7\">\n                                        <Sequence name=\"S6\">\n                                            <Condition ID=\"Inv_pose_computed\"/>\n                                            <Condition ID=\"Inv_pose_valid\"/>\n                                        </Sequence>\n                                        <Action ID=\"Compute_inv_pose\"/>\n                                    </Fallback>\n                                    <Sequence name=\"S4\">\n                                        <Fallback name=\"FB8\">\n                                            <Condition ID=\"Robot_at_inv_pose\"/>\n                                            <Action ID=\"Go_to_inv_pose\"/>\n                                        </Fallback>\n                                        <Sequence name=\"S5\">\n                                            <Fallback name=\"FB9\">\n                                                <Condition ID=\"Bottle_located_with_confidence_x\"/>\n                                                <Action ID=\"Locate_bottle\"/>\n                                            </Fallback>\n                                            <Action ID=\"Grasp_bottle\"/>\n                                        </Sequence>\n                                    </Sequence>\n                                </Sequence>\n                                <Fallback name=\"FB6\">\n                                    <Action ID=\"Set_inv_pose_not_valid\"/>\n                                    <Action ID=\"Keep_running\"/>\n                                </Fallback>\n                            </Fallback>\n                        </Fallback>\n                    </Sequence>\n                </Sequence>\n                <Action ID=\"Ask_for_help\"/>\n            </Fallback>\n        </Root>\n    </BehaviorTree>\n    \n    <TreeNodesModel>\n        <Action ID=\"Ask_for_help\"/>\n        <Condition ID=\"Bottle_found\"/>\n        <Condition ID=\"Bottle_grasped\"/>\n        <Condition ID=\"Bottle_located_with_confidence_x\"/>\n        <Action ID=\"Compute_inv_pose\"/>\n        <Action ID=\"Find_bottle\"/>\n        <Action ID=\"Go_to_inv_pose\"/>\n        <Action ID=\"Go_to_kitchen\"/>\n        <Action ID=\"Grasp_bottle\"/>\n        <Condition ID=\"Inv_pose_computed\"/>\n        <Condition ID=\"Inv_pose_valid\"/>\n        <Action ID=\"Keep_running\"/>\n        <Action ID=\"Locate_bottle\"/>\n        <Condition ID=\"Robot_at_inv_pose\"/>\n        <Condition ID=\"Robot_in_kitchen\"/>\n        <Action ID=\"Set_inv_pose_not_valid\"/>\n    </TreeNodesModel>\n    \n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a battery charging system. It prompts the user to input the desired charge level for the battery, ranging from 0 (empty) to 1 (full). Once the user provides the input, the system initiates the battery charging process to reach the specified goal percentage. This behavior tree ensures that the battery charging operation follows a sequence: first, it requests the target charge level from the user, and then it proceeds to charge the battery to the specified percentage.",
        "output": " <root main_tree_to_execute = \"BatteryChargingWithRequest\" >\n    <BehaviorTree ID=\"BatteryChargingWithRequest\">\n        <Sequence>\n            <FloatParameterRequest title=\"Bitte geben Sie die Zielladung an von 0 [empty] bis 1 [full]\"\n                                   value=\"{goal_percentage}\" key=\"goal_percentage\" min=\"0\" max=\"1\"/>\n            <BatteryCharging goal_percentage=\"{goal_percentage}\"/>\n        </Sequence>\n    </BehaviorTree>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robot in a task-oriented manner. The robot is programmed to perform a series of tasks, including pushing a puck, retrieving an object labeled \"G,\" weighing the object, and performing a snowplow maneuver. Each task is represented by a sub-tree within the main behavior tree.\n\nThe \"PushPuck\" sub-tree instructs the robot to move forward, turn left, push a puck, and then move backward. The \"GetG\" sub-tree involves opening the clamp, moving forward to reach a specific location, closing the clamp, and repositioning the clamp. The \"WeightG\" sub-tree directs the robot to move backward, turn left, move forward to a waiting point, proceed to a scale, manipulate the clamp, and open it before closing it again. Finally, the \"ChasseNeige\" sub-tree commands the robot to move backward, turn left, and move forward.\n\nOverall, the behavior tree coordinates the robot's movements",
        "output": "<!-- Evitement\n<ReactiveSequence>\n<Fallback>\n    <Condition ID=\"NoObstacle\"/>\n    <Avoid/>\n</Fallback>\n<Move pos= positions['P2'] />\n</ReactiveSequence>\n-->\n\n<!-- AX1 : Open/Close clamp\n    AX2 : Move clamp forward/backwards\n    AX3 : Moe clamp left/right\n    AX4 :  Turn clamp\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n\n    <BehaviorTree ID=\"PushPuck\">\n        <Sequence>\n            <MoveAhead moveForward=\"true\"\n                       distance = \"\"\n            />\n            <Turn name = \"turn_90_left\"\n                  angle = \"\"\n            />\n            <MoveAhead moveForward=\"true\"\n                       distance = \"\"\n            />\n            <MoveAX_4 name=\"turn_clamp_90_right\"\n                      pos=\"\"\n                      mode=\"joint\"\n            />\n            <MoveAX_3 name=\"move_clamp_forward\"\n                      pos=\"\"\n                      mode=\"joint\"\n            />\n            <MoveAhead name = \"psuh_pcuk\"\n                        moveForward=\"true\"\n                       distance = \"\"\n            />\n            <MoveAX_3 name=\"move_clamp_backward\"\n                      pos=\"\"\n                      mode=\"joint\"\n            />\n        </Sequence>\n    </BehaviorTree>\n\n\n    <BehaviorTree ID=\"GetG\">\n        <Sequence>\n        <MoveAX_1 name=\"open_clamp\"\n                  pos=\"\"\n                  mode=\"joint\"\n        />\n        <MoveAhead name = \"reach_goldonium\"\n                   moveForward=\"true\"\n                   distance = \"\"\n        />\n        <MoveAX_1 name=\"close_clamp\"\n                  pos=\"\"\n                  mode=\"joint\"\n        />\n        <MoveAX_3 name=\"move_clamp_backward\"\n                  pos=\"\"\n                  mode=\"joint\"\n        />\n        <MoveAX_4 name=\"turn_clamp_90_right\"\n                  pos=\"\"\n                  mode=\"joint\"\n        />\n        <Sequence/>\n    </BehaviorTree>\n\n\n    <BehaviorTree ID=\"WeightG\">\n        <Sequence>\n            <MoveAhead name = \"move_backwards\"\n                       moveForward=\"false\"\n                       distance = \"\"\n            />\n            <Turn name = \"turn_90_left\"\n                  angle = \"\"\n            />\n            <MoveAhead name = \"reach_waiting_point\"\n                       moveForward=\"true\"\n                       distance = \"\"\n            />\n            <!-- The small robot stops there and waits until the big robot turns left to face the place\n            where he will drop the 6th puck. Then the way is clear and the small robot can move towards the scale.\n            -->\n            <MoveAhead name = \"reach_scale\"\n                       moveForward=\"true\"\n                       distance = \"\"\n            />\n            <MoveAX_2 name=\"move_clamp_forward\"\n                      pos=\"\"\n                      mode=\"joint\"\n            />\n            <OpenClamp/>\n            <MoveAX_2 name=\"move_clamp_backward\"\n                      pos=\"\"\n                      mode=\"joint\"\n            />\n        </Sequence>\n    </BehaviorTree>\n\n\n    <BehaviorTree ID=\"ChasseNeige\">\n        <MoveAhead name = \"move_backward\"\n                   moveForward=\"false\"\n                   distance = \"\"\n        />\n        <!-- Turn left to face the red area ? -->\n        <Turn name = \"turn_left\"\n              angle = \"\"\n        />\n        <MoveAhead name = \"move_forward\"\n                   moveForward=\"false\"\n                   distance = \"\"\n        />\n    </BehaviorTree>\n\n\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SubTree ID=\"PushPuck\"/>\n            <SubTree ID=\"GetG\"/>\n            <SubTree ID=\"WeightG\"/>\n            <SubTree ID=\"ChasseNeige\"/>\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions to be executed. The actions involve input and output ports, with some actions having default values for their ports. The sequence includes actions such as \"inOnlyA\", \"inOnlyB\", \"outOnlyA\", \"outOnlyB\", \"outOnlyC\", \"outOnlyD\", \"outOnlyE\", and \"outOnlyF\". These actions manipulate data through their input and output ports, potentially using default values if no input is provided. \n\nThe behavior tree seems to be focused on handling data flow and manipulation within the system. It sets up a series of actions that take inputs, process them, and produce outputs. The specific details of what the inputs and outputs represent are not explicitly mentioned in the provided XML, but it's clear that the behavior tree is designed to manage data flow and transformation within the system.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Action ID=\"inOnlyA\" in0=\"\"/>\n            <Action ID=\"inOnlyB\" in0=\"ice\"/>\n            <Action ID=\"inOnlyB\" in0=\"\"/>\n            <Action ID=\"inOnlyA\" in0=\"  ${foo.baz}\"/>\n            <Action ID=\"outOnlyA\" out0=\"\"/>\n            <Action ID=\"outOnlyB\" out0=\"baz\"/>\n            <Action ID=\"outOnlyC\" out0=\"${baz}\"/>\n            <Action ID=\"outOnlyD\" out0=\"${foo.goo}\"/>\n            <Action ID=\"outOnlyE\" out0=\"${fan}\"/>\n            <Action ID=\"outOnlyF\" out0=\"${long.untraveled.path}\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"inOnlyA\">\n            <input_port name=\"in0\"/>\n        </Action>\n        <Action ID=\"inOnlyB\">\n            <input_port default=\"foo\" name=\"in0\"/>\n        </Action>\n        <Action ID=\"outOnlyA\">\n            <output_port name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyB\">\n            <output_port default=\"${baz}\" name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyC\">\n            <output_port name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyD\">\n            <output_port name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyE\">\n            <output_port name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyF\">\n            <output_port name=\"out0\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the decision-making process for a robot. It first checks if it needs to stop, then assesses its battery level and diagnostic status. Following this, it evaluates the patient's condition. After these checks, it selects an action based on the current situation. If the selected action is not suitable for the current state, it falls back to alternative actions until a suitable one is found. The available actions include device pairing, base movement, arm movement, battery charging, and confirming a dialog.\n\nOverall, the behavior tree orchestrates the robot's decision-making process, ensuring that it responds appropriately to various conditions and executes the most suitable action based on the given circumstances.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n        <ReactiveSequence>\n            <CheckStop/>\n            <CheckBattery/>\n            <CheckDiagnosticStatus/>\n            <CheckPatientCondition/>\n            <Sequence>\n                <Action ID=\"SkillSelection\" selected_action=\"{selected_action}\" />\n                <Fallback>\n                    <BlackboardCheckString value_A=\"{selected_action}\" value_B=\"DevicePairing\" return_on_mismatch=\"FAILURE\" />\n                        <Action ID=\"DevicePairing\"/>\n                    <BlackboardCheckString value_A=\"{selected_action}\" value_B=\"BaseMovement\" return_on_mismatch=\"FAILURE\" />\n                        <Action ID=\"BaseMovement\"/>\n                    <BlackboardCheckString value_A=\"{selected_action}\" value_B=\"ArmMovement\" return_on_mismatch=\"FAILURE\" />\n                        <Action ID=\"ArmMovement\"/>\n                    <BlackboardCheckString value_A=\"{selected_action}\" value_B=\"BatteryCharging\" return_on_mismatch=\"FAILURE\" />\n                        <Action ID=\"BatteryCharging\"/>\n                    <BlackboardCheckString value_A=\"{selected_action}\" value_B=\"ConfirmDialog\" return_on_mismatch=\"FAILURE\" />\n                        <Action ID=\"ConfirmDialog\"/>\n                </Fallback>\n            </Sequence>\n        </ReactiveSequence>\n    </BehaviorTree>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an environment, periodically replanning its global path at a rate of 1 Hz and incorporating recovery actions. The main sequence involves navigating with replanning, where it computes a path to a specific pose using a grid-based planner and then follows the computed path while clearing the costmaps. If there are issues during navigation, it allows for recovery by retrying a set number of times and executing recovery actions such as clearing the costmaps, spinning, and waiting. This setup ensures that the robot can adapt to changing environments and recover from unexpected obstacles or disruptions in its path.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <SequenceStar name=\"RecoveryActions\">\n        <ClearEntireCostmap service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        <ClearEntireCostmap service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n        <Spin spin_dist=\"1.57\"/>\n        <Wait wait_duration=\"5\"/>\n      </SequenceStar>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's continuous task execution. The robot is programmed to repeatedly pursue goals, with no limit on the number of cycles. Within this pursuit, it follows a priority sequence: first attempting to place an item if it is holding one, and then trying to remove an item by picking it up if it sees one. This cycle continues indefinitely.\n\nAdditionally, the behavior tree includes specific nodes for conditions and actions such as \"HoldingItem,\" \"Pick,\" \"Place,\" and \"SeeItem,\" which are utilized within the main tree for decision-making and task execution.\n\nIn summary, the behavior tree outlines a perpetual loop where the robot prioritizes placing or removing items based on its current state, ensuring continuous task execution without a set endpoint.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"-1\">\n            <Fallback name=\"Pursue Goals\">\n                <Sequence name=\"Place Item\">\n                    <Condition ID=\"HoldingItem\" name=\"Holding an Item\"/>\n                    <Action ID=\"Place\" name=\"Place it\"/>\n                </Sequence>\n                <Sequence name=\"Remove Item\">\n                    <Condition ID=\"SeeItem\" name=\"See an Item\"/>\n                    <Action ID=\"Pick\" name=\"Pick it up\"/>\n                </Sequence>\n            </Fallback>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Condition ID=\"HoldingItem\"/>\n        <Action ID=\"Pick\"/>\n        <Action ID=\"Place\"/>\n        <Condition ID=\"SeeItem\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's actions. It begins by initializing, then repeatedly attempts to pursue goals. If the robot is holding an item, it tries to place it; if not, it looks for an item to pick up. This cycle continues until successful.\n\nThe \"Init\" subtree initializes the robot. The main behavior tree consists of a sequence that first initializes and then repeatedly attempts to pursue goals. Within this sequence, there are two possible paths: placing an item and picking up an item. Each path involves checking a condition and performing an action. The process continues until successful.\n\nOverall, the behavior tree ensures the robot is continuously active, attempting to achieve its goals of either placing or picking up items. If one action fails, it retries until successful, ensuring the robot remains productive in its environment.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <SubTree ID=\"Init\"/>\n            <RetryUntilSuccesful num_attempts=\"-1\">\n                <Fallback name=\"Pursue Goals\">\n                    <ForceFailure name=\"No Item to Place\">\n                        <Sequence name=\"Place Item\">\n                            <Condition ID=\"HoldingItem\" name=\"Holding an Item\"/>\n                            <Action ID=\"Place\" name=\"Place it\"/>\n                        </Sequence>\n                    </ForceFailure>\n                    <ForceFailure name=\"No Item to Pick\">\n                        <Sequence name=\"Remove Item\">\n                            <Condition ID=\"SeeItem\" name=\"See an Item\"/>\n                            <Action ID=\"Pick\" name=\"Pick it up\"/>\n                        </Sequence>\n                    </ForceFailure>\n                </Fallback>\n            </RetryUntilSuccesful>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Init\">\n        <Action message=\"Initialize\" ID=\"Print\"/>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AlwaysRunning\"/>\n        <Condition ID=\"HoldingItem\"/>\n        <SubTree ID=\"Init\"/>\n        <Action ID=\"Pick\"/>\n        <Action ID=\"Place\"/>\n        <Action ID=\"Print\">\n            <input_port name=\"message\"/>\n        </Action>\n        <Condition ID=\"SeeItem\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is a simple structure where the robot is instructed to execute a single task: moving to a specified location. The \"MainTree\" contains a sequence with one task, \"MoveF\", which directs the robot to move to a goal location provided as an argument. This behavior tree lacks complexity and does not involve any conditional logic or decision-making processes. Its primary function is to initiate the movement of the robot towards a designated position.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <MoveF    name=\"move\" goal=\"${arg2}\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to dynamically navigate to a specified pose while continuously updating its path. The robot's movement is controlled by a rate controller that ensures the navigation frequency. It first updates the goal pose and computes a path using a grid-based planner. The computed path is then truncated to a certain distance to prevent over-planning. The robot follows the truncated path using a specific controller until it reaches the goal or encounters a failure. This behavior allows the robot to adaptively plan and navigate towards a dynamic pose, ensuring continuous and efficient movement.",
        "output": "<!--\n  This Behavior Tree follows a dynamic pose to a certain distance\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n         <TruncatePath distance=\"1.0\" input_path=\"{path}\" output_path=\"{truncated_path}\"/>\n        </Sequence>\n      </RateController>\n      <KeepRunningUntilFailure>\n        <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\"/>\n      </KeepRunningUntilFailure>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the actions for a robot or an autonomous agent. It begins with \"go1\" and then proceeds to execute \"stay1\" and \"stay2\" concurrently. After this, it continues with \"go2\" and \"go3\" in sequence. The tree also includes various other actions such as \"dumpRun\", \"goClosestR\", \"isFull\", \"mineResources\", \"moveBaseToGoal\", and \"waitFrames\", which can be utilized within the behavior tree.\n\nIn summary, the behavior tree orchestrates a series of actions for the robot, including movement (\"go1\", \"go2\", \"go3\"), resource management (\"dumpRun\", \"isFull\", \"mineResources\"), and task execution control (\"stay1\", \"stay2\", \"waitFrames\"). These actions are organized into sequences and can be further customized and expanded by incorporating additional actions from the provided TreeNodesModel.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Action ID=\"go1\"/>\n            <Sequence name=\"Sequence2\">\n                <Action ID=\"stay1\"/>\n                <Action ID=\"stay2\"/>\n            </Sequence>\n            <Action ID=\"go2\"/>\n            <Action ID=\"go3\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"goClosestR\"/>\n        <Condition ID=\"isFull\"/>\n        <Action ID=\"mineResources\"/>\n        <Action ID=\"moveBaseToGoal\">\n            <inout_port name=\"key_name\">goal</inout_port>\n        </Action>\n        <Action ID=\"stay1\"/>\n        <Action ID=\"stay2\"/>\n        <Action ID=\"waitFrames\">\n            <output_port name=\"barout\"/>\n            <inout_port name=\"baz\"/>\n            <input_port name=\"fooin\"/>\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's free walking task. The robot is directed to move sequentially to three locations: room1, room2, and the waiting area. At each location, it prompts for confirmation before proceeding to the next destination. If the confirmation is positive, the robot moves to the next location; otherwise, it waits at the current location. The locations are specified by their coordinates (room1 = (2,2), room2 = (5,5), waiting_area = (0,0)). This behavior ensures that the robot navigates to specific points while allowing for human intervention at key stages of the journey.",
        "output": "<root main_tree_to_execute = \"FreeWalking\" >\n    <BehaviorTree ID=\"FreeWalking\">\n        <Sequence>\n            <!--room1 = (2,2)-->\n            <BaseMovement x=\"2\" y=\"2\"/>\n            <StringParameterRequest title=\"Start walking to destination?\" \n                                    msg=\"type [y] or [n]\"\n                                    value=\"{confirm}\"/>\n            <CheckBlackboard input=\"{confirm}\" compare_to=\"y\" />\n            <!--room2 = (5,5)-->\n            <BaseMovement x=\"5\" y=\"5\"/>\n            <StringParameterRequest title=\"Patient arrived?\" \n                                    msg=\"type [y] or [n]\"\n                                    value=\"{confirm}\"/>\n            <CheckBlackboard input=\"{confirm}\" compare_to=\"y\" />\n            <!--waiting_area = (0,0)-->\n            <BaseMovement x=\"0\" y=\"0\"/>\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the decision-making process for a robot. It first checks various conditions such as stopping, battery status, diagnostic status, and patient condition. Then it selects an action based on the current context. If the selected action is \"FreeWalking,\" it initiates the FreeWalking behavior. If not, it checks for other possible actions like DevicePairing, BaseMovement, ArmMovement, BatteryCharging, and ConfirmDialog in a fallback manner, executing the first available action. This structure allows the robot to dynamically adapt its behavior based on the environmental and contextual inputs. The tree is designed to ensure that the robot can perform a wide range of tasks while prioritizing critical conditions such as stopping and patient well-being.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n\n    <include path=\"FreeWalking.xml\"/>\n\n    <BehaviorTree ID=\"MainTree\">\n        <ReactiveSequence>\n            <CheckStop/>\n            <CheckBattery/>\n            <CheckDiagnosticStatus/>\n            <CheckPatientCondition/>\n            <Sequence>\n                <Action ID=\"SkillSelection\" selected_action=\"{selected_action}\" />\n                <Fallback>\n                    <Sequence>\n                        <CheckBlackboard input=\"{selected_action}\" compare_to=\"FreeWalking\"/>\n                        <FreeWalking/>\n                    </Sequence>\n                    <Sequence>\n                        <CheckBlackboard input=\"{selected_action}\" compare_to=\"DevicePairing\"/>\n                        <Action ID=\"DevicePairing\"/>\n                    </Sequence>\n                    <Sequence>\n                        <CheckBlackboard input=\"{selected_action}\" compare_to=\"BaseMovement\"/>\n                        <Action ID=\"BaseMovement\"/>\n                    </Sequence>\n                    <Sequence>\n                        <CheckBlackboard input=\"{selected_action}\" compare_to=\"ArmMovement\"/>\n                        <Action ID=\"ArmMovement\"/>\n                    </Sequence>\n                    <Sequence>\n                        <CheckBlackboard input=\"{selected_action}\" compare_to=\"BatteryCharging\"/>\n                        <Action ID=\"BatteryCharging\"/>\n                    </Sequence>\n                    <Sequence>\n                        <CheckBlackboard input=\"{selected_action}\" compare_to=\"ConfirmDialog\"/>\n                        <Action ID=\"ConfirmDialog\"/>\n                    </Sequence>\n                </Fallback>\n            </Sequence>\n        </ReactiveSequence>\n    </BehaviorTree>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement towards three different goals (Goal_a, Goal_b, Goal_c) in a repeated sequence for 3 cycles. The robot is directed to move to each goal sequentially using the \"MoveRobot\" behavior tree. Each goal is specified with its position and orientation. Once the robot reaches all three goals or completes the specified number of cycles, the task is considered complete.\n\nIn summary, the behavior tree outlines a repetitive task for the robot: move to Goal_a, then Goal_b, then Goal_c, and repeat this sequence for 3 cycles. This allows the robot to efficiently navigate through the specified locations multiple times.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"3\">\n            <Sequence>\n                <!-- The goal value=\"position-x;position-y;orientaion-z;orientation-w\" -->\n                <SetBlackboard output_key=\"Goal_a\" value=\"-0.579;-1.341;0.0;1.0\" />\n                <SetBlackboard output_key=\"Goal_b\" value=\"5.214;-1.533;0.0;1.0\" />\n                <SetBlackboard output_key=\"Goal_c\" value=\"-1.588;1.253;0.0;1.0\" />\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                </Sequence>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a Parallel node with a threshold of 2, containing two Decorator nodes with the ID \"AbsoluteProgressSync\" wrapping an Action node with the ID \"SmoothAction\". Additionally, there is a TreeNodesModel defining various Decorator and Action nodes.\n\nOverall, this behavior tree seems to be orchestrating parallel execution of two instances of the \"SmoothAction\" with synchronization based on absolute progress. The use of the Parallel node indicates that both instances of \"SmoothAction\" will run concurrently, and the threshold of 2 suggests that at least two child nodes need to succeed for the Parallel node to return success.\n\nIn summary, the behavior tree appears to be managing concurrent execution of specific actions with a synchronization mechanism based on absolute progress.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Parallel threshold=\"2\">\n            <Decorator ID=\"AbsoluteProgressSync\">\n                <Action ID=\"SmoothAction\"/>\n            </Decorator>\n            <Decorator ID=\"AbsoluteProgressSync\">\n                <Action ID=\"SmoothAction\"/>\n            </Decorator>\n        </Parallel>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Decorator ID=\"AbsoluteProgressSync\">\n        </Decorator>\n        <Decorator ID=\"RelativeProgressSync\">\n        </Decorator>\n        <Decorator ID=\"ResourceSync\">\n        </Decorator>\n        <Action ID=\"SmoothAction\">\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robot, focusing on object placement and movement. The main task is divided into two parallel processes: \n1. The first process involves repeating a variant action indefinitely and simultaneously moving to a specific location, placing an object, and then dropping it.\n2. The second process entails navigating to a designated location using a sequence of path planning and waypoint execution.\n\nThe \"GoTo\" behavior tree handles the navigation process, including path planning, checking conditions, and executing movements to reach waypoints. The main behavior tree coordinates these navigation tasks with other actions such as object manipulation and variant actions.\n\nOverall, the behavior tree enables the robot to perform complex tasks involving navigation, object manipulation, and repetitive actions in a coordinated and efficient manner.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Parallel failure_threshold=\"1\" success_threshold=\"1\">\n            <Repeat num_cycles=\"-1\">\n                <Action ID=\"VariantAction\" value=\"{variant}\"/>\n            </Repeat>\n            <Sequence>\n                <Action ID=\"objectplacement\" query=\"WOODENBOX_0.1_0.3_0.3_0.3\"/>\n                <SubTreePlus ID=\"GoTo\" __shared_blackboard=\"false\" x_input=\"1.61\" y_input=\"7.76\"/>\n                <Action ID=\"objectdrop\" obj_index=\"-1\"/>\n            </Sequence>\n        </Parallel>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"GoTo\">\n        <Sequence name=\"GoTo\">\n            <Action ID=\"pathPlanner\" number_of_waypoints=\"{number_of_waypoints_}\" waypoints=\"{waypoints_}\" x=\"{x_input}\" y=\"{y_input}\"/>\n            <Condition ID=\"CheckPositiveCondition\" value=\"{number_of_waypoints_}\"/>\n            <Repeat num_cycles=\"{number_of_waypoints_}\">\n                <Sequence>\n                    <Action ID=\"ExecutePathAction\" w_x=\"{_w_x}\" w_y=\"{_w_y}\" waypoints=\"{waypoints_}\"/>\n                    <Action ID=\"moveRoboterPosition\" approachRadius=\"100\" x=\"{_w_x}\" y=\"{_w_y}\"/>\n                </Sequence>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Condition ID=\"CheckPositiveCondition\">\n            <input_port default=\"{number_of_waypoints}\" name=\"value\"/>\n        </Condition>\n        <Action ID=\"ExecutePathAction\">\n            <output_port default=\"{_w_x}\" name=\"w_x\"/>\n            <output_port default=\"{_w_y}\" name=\"w_y\"/>\n            <input_port default=\"{waypoints_}\" name=\"waypoints\"/>\n        </Action>\n        <SubTreePlus ID=\"GoTo\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n            <input_port default=\"1.61\" name=\"x_input\"/>\n            <input_port default=\"7.76\" name=\"y_input\"/>\n        </SubTreePlus>\n        <Action ID=\"VariantAction\">\n            <output_port default=\"{variant}\" name=\"value\"/>\n        </Action>\n        <Action ID=\"activateLocalization\"/>\n        <Action ID=\"approachLocation\">\n            <input_port default=\"1\" name=\"locationId\"/>\n        </Action>\n        <Action ID=\"approachWall\"/>\n        <Action ID=\"deactivateLocalization\"/>\n        <Action ID=\"getBaseCharging\">\n            <output_port default=\"{charging}\" name=\"charging\"/>\n        </Action>\n        <Action ID=\"getPersonPose\">\n            <input_port default=\"MARIA\" name=\"personname\"/>\n            <output_port default=\"{x_}\" name=\"x\"/>\n            <output_port default=\"{y_}\" name=\"y\"/>\n            <output_port default=\"{z_}\" name=\"z\"/>\n        </Action>\n        <Action ID=\"initNavigation\"/>\n        <Action ID=\"loadMap\"/>\n        <Action ID=\"loadNavigationMap\">\n            <input_port default=\"navigation-map\" name=\"mapname\"/>\n        </Action>\n        <Action ID=\"moveRoboterBackwardsLocation\"/>\n        <Action ID=\"moveRoboterBackwardsRelative\"/>\n        <Action ID=\"moveRoboterOrientateRobotAbs\"/>\n        <Action ID=\"moveRoboterOrientateRobotRel\"/>\n        <Action ID=\"moveRoboterPosition\">\n            <input_port default=\"50\" name=\"approachRadius\"/>\n            <input_port default=\"0\" name=\"x\"/>\n            <input_port default=\"0\" name=\"y\"/>\n        </Action>\n        <Action ID=\"objectdrop\">\n            <input_port name=\"obj_index\"/>\n        </Action>\n        <Action ID=\"objectplacement\">\n            <input_port name=\"query\"/>\n        </Action>\n        <Action ID=\"pathPlanner\">\n            <output_port default=\"{number_of_waypoints_}\" name=\"number_of_waypoints\"/>\n            <output_port default=\"{waypoints_}\" name=\"waypoints\"/>\n            <input_port default=\"0\" name=\"x\"/>\n            <input_port default=\"0\" name=\"y\"/>\n        </Action>\n        <Action ID=\"peoplerecognition\"/>\n        <Action ID=\"setRobotPose\">\n            <input_port default=\"0\" name=\"x\"/>\n            <input_port default=\"0\" name=\"y\"/>\n            <input_port default=\"0\" name=\"yaw\"/>\n        </Action>\n        <Action ID=\"startJoystickNavigation\"/>\n        <Action ID=\"startReactiveNavigation\"/>\n        <Action ID=\"stopJoystickNavigation\"/>\n        <Action ID=\"stopReactiveNavigation\"/>\n        <Action ID=\"triggerGlobalLocalization\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a character in a simulated environment. The character is programmed to perform various tasks based on its needs and job assignments. It includes behaviors such as combat, obtaining a uniform, addressing hunger and thirst, performing specific jobs like butchering animals or hauling items, sleeping, training, and supervising training.\n\nThe character's behavior is governed by conditions such as being in combat, hungry, thirsty, sleepy, or assigned to a particular job type. For each task, there are sequences of actions to be executed, including finding specific locations, moving, picking up or dropping items, and completing the assigned job. Additionally, the character can abort a job if necessary.\n\nOverall, the behavior tree outlines a comprehensive set of behaviors for the character, ensuring that it responds to its needs and fulfills its designated responsibilities within the simulated environment.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Combat\">\n        <SequenceStar>\n            <Condition ID=\"IsInCombat\"/>\n            <Action ID=\"AbortJob\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"GetTarget\"/>\n                    <Action ID=\"Move\"/>\n                    <Sequence>\n                        <Condition ID=\"TargetAdjacent\"/>\n                        <Action ID=\"AttackTarget\"/>\n                    </Sequence>\n                </SequenceStar>\n            </ForceSuccess>\n            <Condition ID=\"IsInCombat\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"GetUniform\">\n        <SequenceStar name=\"GetUniform\">\n            <Action ID=\"CheckUniform\"/>\n            <Fallback>\n                <Action ID=\"Move\"/>\n                <Action ID=\"UniformCleanUp\"/>\n            </Fallback>\n            <Action ID=\"EquipUniform\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Hunger\">\n        <SequenceStar>\n            <Condition ID=\"IsHungry\"/>\n            <Sequence>\n                <SequenceStar name=\"Hunger\">\n                    <Action ID=\"FindFood\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"PickUpItem\"/>\n                    <ForceSuccess>\n                        <SequenceStar>\n                            <Action ID=\"FindDining\"/>\n                            <Action ID=\"Move\"/>\n                        </SequenceStar>\n                    </ForceSuccess>\n                    <Action ID=\"Eat\"/>\n                </SequenceStar>\n                <Condition ID=\"IsFull\"/>\n            </Sequence>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobButcherAnimal\">\n        <BB_Precondition expected=\"ButcherAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ButcherAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobDyeAnimal\">\n        <BB_Precondition expected=\"DyeAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitJob\"/>\n                    <Action ID=\"ClaimItems\"/>\n                    <SubTree ID=\"MoveAllItemsToJob\"/>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"DyeAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobHarvestAnimal\">\n        <BB_Precondition expected=\"HarvestAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"HarvestAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobHaulMultiple\">\n        <BB_Precondition expected=\"HauleMultipleItems\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitJob\"/>\n                    <Action ID=\"FindTool\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"EquipTool\"/>\n                    <Inverter>\n                        <Sequence>\n                            <Inverter>\n                                <Condition ID=\"AllPickedUp\"/>\n                            </Inverter>\n                            <Sequence>\n                                <Action ID=\"Move\"/>\n                                <Action ID=\"PickUpItem\"/>\n                            </Sequence>\n                            <Action ID=\"ReturnAlwaysRunning\"/>\n                        </Sequence>\n                    </Inverter>\n                    <Condition ID=\"AllPickedUp\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"DropAllItems\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobLeadAnimalToPasture\">\n        <BB_Precondition expected=\"LeadAnimalToPasture\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobStandard\">\n        <Fallback>\n            <SequenceStar name=\"StandardJobs\">\n                <Action ID=\"InitJob\"/>\n                <Action ID=\"ClaimItems\"/>\n                <Action ID=\"FindTool\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"EquipTool\"/>\n                <SubTree ID=\"MoveAllItemsToJob\"/>\n                <Action ID=\"GetWorkPosition\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"Work\"/>\n                <Action ID=\"FinishJob\"/>\n            </SequenceStar>\n            <Action ID=\"AbortJob\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobTameAnimal\">\n        <BB_Precondition expected=\"TameAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"TameAnimal\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Jobs\">\n        <SequenceStar>\n            <Action ID=\"GetJob\"/>\n            <FallbackStar>\n                <SubTree ID=\"JobButcherAnimal\"/>\n                <SubTree ID=\"JobDyeAnimal\"/>\n                <SubTree ID=\"JobLeadAnimalToPasture\"/>\n                <SubTree ID=\"JobHarvestAnimal\"/>\n                <SubTree ID=\"JobTameAnimal\"/>\n                <SubTree ID=\"JobHaulMultiple\"/>\n                <SubTree ID=\"JobStandard\"/>\n            </FallbackStar>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <SubTree ID=\"Jobs\"/>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MoveAllItemsToJob\">\n        <Sequence>\n            <Inverter>\n                <Sequence>\n                    <Inverter>\n                        <Condition ID=\"AllItemsInPlaceForJob\"/>\n                    </Inverter>\n                    <SequenceStar>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"PickUpItem\"/>\n                        <Action ID=\"GetItemDropPosition\"/>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"DropItem\"/>\n                    </SequenceStar>\n                    <Action ID=\"ReturnAlwaysRunning\"/>\n                </Sequence>\n            </Inverter>\n            <Condition ID=\"AllItemsInPlaceForJob\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"OldMoveAllItemsToJob\">\n        <FallbackStar>\n            <Condition ID=\"AllItemsInPlaceForJob\"/>\n            <RetryUntilSuccesful num_attempts=\"20\">\n                <Sequence>\n                    <SequenceStar>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"PickUpItem\"/>\n                        <Fallback>\n                            <Action ID=\"GetItemDropPosition\"/>\n                            <Action ID=\"DropItem\"/>\n                        </Fallback>\n                        <Fallback>\n                            <Action ID=\"Move\"/>\n                            <Action ID=\"DropItem\"/>\n                        </Fallback>\n                        <Action ID=\"DropItem\"/>\n                    </SequenceStar>\n                    <Condition ID=\"AllItemsInPlaceForJob\"/>\n                </Sequence>\n            </RetryUntilSuccesful>\n            <ForceFailure>\n                <Action ID=\"AbortJob\"/>\n            </ForceFailure>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Sleepy\">\n        <SequenceStar name=\"Sleep\">\n            <Condition ID=\"IsSleepy\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"FindBed\"/>\n                    <Action ID=\"Move\"/>\n                </SequenceStar>\n            </ForceSuccess>\n            <Action ID=\"Sleep\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Thirst\">\n        <SequenceStar>\n            <Condition ID=\"IsThirsty\"/>\n            <Sequence>\n                <SequenceStar name=\"Thirst\">\n                    <Action ID=\"FindDrink\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"PickUpItem\"/>\n                    <ForceSuccess>\n                        <SequenceStar>\n                            <Action ID=\"FindDining\"/>\n                            <Action ID=\"Move\"/>\n                        </SequenceStar>\n                    </ForceSuccess>\n                    <Action ID=\"Drink\"/>\n                </SequenceStar>\n                <Condition ID=\"IsDrinkFull\"/>\n            </Sequence>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Trainer\">\n        <SequenceStar name=\"Trainer\">\n            <Condition ID=\"IsTrainer\"/>\n            <Action ID=\"FindTrainerPosition\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"SuperviseTraining\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Training\">\n        <SequenceStar name=\"Training\">\n            <Condition ID=\"IsTrainingTime\"/>\n            <Action ID=\"FindTrainingGround\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"Train\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AbortJob\"/>\n        <Condition ID=\"AllItemsInPlaceForJob\"/>\n        <Condition ID=\"AllPickedUp\"/>\n        <Action ID=\"AttackTarget\"/>\n        <Action ID=\"ButcherAnimal\"/>\n        <Action ID=\"CheckUniform\"/>\n        <Action ID=\"ClaimItems\"/>\n        <SubTree ID=\"Combat\"/>\n        <Action ID=\"Drink\"/>\n        <Action ID=\"DropAllItems\"/>\n        <Action ID=\"DropItem\"/>\n        <Action ID=\"DyeAnimal\"/>\n        <Action ID=\"Eat\"/>\n        <Action ID=\"EquipTool\"/>\n        <Action ID=\"EquipUniform\"/>\n        <Action ID=\"FinalMoveAnimal\"/>\n        <Action ID=\"FindBed\"/>\n        <Action ID=\"FindDining\"/>\n        <Action ID=\"FindDrink\"/>\n        <Action ID=\"FindFood\"/>\n        <Action ID=\"FindTool\"/>\n        <Action ID=\"FindTrainerPosition\"/>\n        <Action ID=\"FindTrainingGround\"/>\n        <Action ID=\"FinishJob\"/>\n        <Action ID=\"GetItemDropPosition\"/>\n        <Action ID=\"GetJob\"/>\n        <Action ID=\"GetTarget\"/>\n        <SubTree ID=\"GetUniform\"/>\n        <Action ID=\"GetWorkPosition\"/>\n        <Action ID=\"GrabAnimal\"/>\n        <Action ID=\"HarvestAnimal\"/>\n        <SubTree ID=\"Hunger\"/>\n        <Action ID=\"InitAnimalJob\"/>\n        <Action ID=\"InitButcherJob\"/>\n        <Action ID=\"InitJob\"/>\n        <Condition ID=\"IsButcherJob\"/>\n        <Condition ID=\"IsDrinkFull\"/>\n        <Condition ID=\"IsFull\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInCombat\"/>\n        <Condition ID=\"IsSleepy\"/>\n        <Condition ID=\"IsThirsty\"/>\n        <Condition ID=\"IsTrainer\"/>\n        <Condition ID=\"IsTrainingTime\"/>\n        <Condition ID=\"IsVeryHungry\"/>\n        <Condition ID=\"IsVeryThirsty\"/>\n        <SubTree ID=\"JobButcherAnimal\"/>\n        <SubTree ID=\"JobDyeAnimal\"/>\n        <SubTree ID=\"JobHarvestAnimal\"/>\n        <SubTree ID=\"JobHaulMultiple\"/>\n        <SubTree ID=\"JobLeadAnimalToPasture\"/>\n        <SubTree ID=\"JobStandard\"/>\n        <SubTree ID=\"JobTameAnimal\"/>\n        <SubTree ID=\"Jobs\"/>\n        <Action ID=\"Move\"/>\n        <SubTree ID=\"MoveAllItemsToJob\"/>\n        <SubTree ID=\"OldMoveAllItemsToJob\"/>\n        <Action ID=\"PickUpItem\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"ReleaseAnimal\"/>\n        <Action ID=\"ReturnAlwaysRunning\"/>\n        <Action ID=\"Sleep\"/>\n        <SubTree ID=\"Sleepy\"/>\n        <Action ID=\"SuperviseTraining\"/>\n        <Action ID=\"TameAnimal\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n        <SubTree ID=\"Thirst\"/>\n        <Action ID=\"Train\"/>\n        <SubTree ID=\"Trainer\"/>\n        <SubTree ID=\"Training\"/>\n        <Action ID=\"UniformCleanUp\"/>\n        <Action ID=\"Work\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot's navigation and recovery process. It begins by checking if the robot is stuck, and if so, it attempts to recover by stopping, backing up, and spinning. If the robot is not stuck, it proceeds with the navigation branch, which involves computing a path to a specific pose based on provided endpoints and then following that path. The tree is structured to ensure that the robot can recover from being stuck and continue with its navigation tasks effectively.",
        "output": "<!--\n  This Behavior Tree first goes into a branch where it will check if the robot is stuck.\n  If that is the case, it will attempt to recover. Otherwise it will continue with\n  the navigation branch. In this case the navigation branch is based on `simple_sequential.xml`.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"root\">\n      <FallbackStar name=\"check_motion\">\n        <Inverter name=\"is_not_stuck\">\n          <IsStuck/>\n        </Inverter>\n        <SequenceStar name=\"stuck_recovery\">\n          <Stop/>\n          <BackUp/>\n          <Spin/>\n        </SequenceStar>\n      </FallbackStar>\n      <SequenceStar name=\"navigate\">\n        <ComputePathToPose endpoints=\"${endpoints}\" path=\"${path}\"/>\n        <FollowPath path=\"${path}\"/>\n      </SequenceStar>\n    </Sequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot's navigation system. It periodically replans the global path at 1 Hz and incorporates recovery actions in case of failures. The recovery node allows for a maximum of 6 retries before proceeding to the next action.\n\nThe main sequence involves navigating with replanning, where the robot computes a path to a specific goal using a grid-based planner. If this process fails, it clears the global costmap and waits for a brief period before retrying. Once a valid path is computed, the robot follows the path while also clearing the local costmap as it moves.\n\nIn case of any recovery triggers such as an updated goal, the robot performs recovery actions including clearing both the local and global costmaps, spinning to reassess the environment, and waiting for a specified duration.\n\nOverall, the behavior tree ensures that the robot can navigate effectively by continuously replanning its path and executing recovery actions when necessary to handle unexpected situations during navigation.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          <!--  <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>-->\n            <!--<Wait wait_duration=\"3\"/>-->\n            <SequenceStar name=\"ResetGlobalPath\">\n              <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n              <Wait wait_duration=\"1\"/>\n            </SequenceStar>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through a series of waypoints using the NavigateToPose action. It starts by checking if all goals have been achieved, and if not, it proceeds to navigate to the next goal. If the navigation fails, it moves on to the next waypoint without getting stuck. The process continues until all waypoints are reached.\n\nOverall, the behavior tree ensures that the robot efficiently navigates through multiple waypoints, handling any navigation failures along the way. It utilizes reactive sequences and fallbacks to manage the navigation process effectively, ensuring that the robot can adapt to changing conditions and successfully reach its intended destinations.",
        "output": "\n<!--\n  This Behavior Tree processes each of the given waypoints with NavigateToPose and skip to next waypoint if NavigateToPose is failed.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <ReactiveFallback name=\"FollowWaypoints\">\n      <AllGoalsAchieved goal_achieved=\"{goal_achieved}\"/>\n      <KeepRunningUntilFailure>\n        <ReactiveSequence>\n          <GetNextGoal goals=\"{goals}\" goal=\"{goal}\" goal_achieved=\"{goal_achieved}\"/>\n          <ForceSuccess>\n            <NavigateToPose goal=\"{goal}\"/>\n          </ForceSuccess>\n          <SetBlackboard output_key=\"goal_achieved\" value=\"true\"/>\n        </ReactiveSequence>\n      </KeepRunningUntilFailure>\n    </ReactiveFallback>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a task for a robot to repeatedly move through a sequence of four goals (Goal_a, Goal_b, Goal_c, Goal_d) in a specific order. The robot is programmed to repeat this sequence three times. Each cycle involves setting the values for the goals and then moving towards each goal sequentially using the \"MoveRobot\" behavior.\n\nIf we break down the steps:\n1. Set the values for Goal_a, Goal_b, Goal_c, and Goal_d.\n2. Move towards Goal_a, then Goal_b, then Goal_c, and finally Goal_d.\n3. Repeat the above step two more times.\n\nThis behavior tree essentially orchestrates the robot's movement through a predefined set of locations in a repeated manner, ensuring that it visits all the specified goals in the given order for a total of three cycles.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"3\">\n            <Sequence>\n                <SetBlackboard output_key=\"Goal_a\" value=\"-0.579;-1.341;0.0\" />\n                <SetBlackboard output_key=\"Goal_b\" value=\"1.214;-1.533;0.0\" />\n                <SetBlackboard output_key=\"Goal_c\" value=\"-1.588;1.253;0.0\" />\n\t\t<SetBlackboard output_key=\"Goal_d\" value=\"1.214;1.533;0.0\" />\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n\t\t    <SubTree ID=\"MoveRobot\" target=\"Goal_d\" />\n                </Sequence>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <MoveBase goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a task for a robot to transport a passenger. The robot is first instructed to pick up the passenger by navigating to their location and then performing the pick-up action. Once the passenger is on board, the robot proceeds to drop off the passenger at their destination by navigating to the specified location and then completing the drop-off action.\n\nThe \"go deliver passenger\" sequence in the main tree orchestrates the sub-trees for picking up and dropping off the passenger in a sequential manner. Each sub-tree contains sequences of actions for navigation and performing the pick-up or drop-off tasks.\n\nOverall, the behavior tree outlines the process for the robot to execute the transportation task efficiently and safely, ensuring that it navigates to the correct locations and performs the necessary actions to pick up and drop off the passenger.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"go deliver passenger\">\n            <SubTree ID=\"go pick up passenger\" name=\"\" />\n            <SubTree ID=\"go drop off passenger\" name=\"\" />\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"go pick up passenger\">\n        <Sequence name=\"go pick up passenger\">\n            <Sequence name=\"navigate to passenger\">\n                <Action ID=\"move right\" name=\"\" />\n                <Action ID=\"move right\" name=\"\" />\n                <Action ID=\"move right\" name=\"\" />\n                <Action ID=\"move up\" name=\"\" />\n                <Action ID=\"move up\" name=\"\" />\n                <Action ID=\"move left\" name=\"\" />\n            </Sequence>\n            <Action ID=\"pick up\" name=\"pick up passenger\" />\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"go drop off passenger\">\n        <Sequence name=\"go drop off passenger\">\n            <Sequence name=\"navigate to destination\">\n                <Action ID=\"move right\" name=\"\" />\n                <Action ID=\"move down\" name=\"\" />\n                <Action ID=\"move down\" name=\"\" />\n                <Action ID=\"move left\" name=\"\" />\n                <Action ID=\"move left\" name=\"\" />\n                <Action ID=\"move left\" name=\"\" />\n            </Sequence>\n            <Action ID=\"drop off\" name=\"drop off passenger\" />\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's task execution. It involves repeating a sequence of actions for a specified number of cycles. Within each cycle, the robot performs several subtasks:\n\n1. LTLPreCheck: Checks the current state against the desired sequence.\n2. ReactiveSequence:\n   - LocomotionStatusCheck: Verifies locomotion status.\n   - If locomotion is not in an expected state, it attempts recovery by standing and then initiating locomotion after a delay.\n   - If locomotion is normal, it proceeds with MoveAction.\n\n3. MoveAction: Executes a specific movement action based on the provided parameters.\n\n4. UpdateLTL: Updates the action sequence, desired state sequence, and navigation goal.\n\nThe tree allows for dynamic adjustments to the robot's behavior based on its environment and internal state. The robot continuously repeats this sequence for a defined number of cycles, adapting its actions based on real-time conditions and goals.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Action ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                <ReactiveSequence>\n                    <Fallback>\n                        <Action ID=\"LocomotionStatusCheck\" locomotion_status=\"{locomotion_status}\"/>\n                        <Sequence>\n                            <Action ID=\"RecoveryStand\" locomotion_status=\"{locomotion_status}\"/>\n                            <Delay delay_msec=\"2000\">\n                                <Action ID=\"LocomotionStart\" locomotion_status=\"{locomotion_status}\"/>\n                            </Delay>\n                        </Sequence>\n                    </Fallback>\n                    <Fallback>\n                        <Action ID=\"MoveAction\" action=\"{action}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\" nav_goal=\"{nav_goal}\"/>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" nav_goal=\"{nav_goal}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"MoveAction\">\n            <output_port name=\"action\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n            <input_port name=\"nav_goal\"/>\n        </Action>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"Replanning2\"/>\n        <Action ID=\"Replanning3\"/>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n            <output_port name=\"nav_goal\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a complex decision-making process for a robotic system. It involves multiple actions and conditions that are executed in a repeated sequence. The tree includes various levels of reactive sequences, fallbacks, and conditional checks to handle different scenarios and inputs.\n\nThe robot's behavior is governed by a series of actions such as moving, staying, guiding, and performing fake detections, along with conditions like checking the locomotion status and LTL (Linear Temporal Logic) state. These actions and conditions are organized within a repeat cycle, allowing the robot to execute them multiple times.\n\nAdditionally, the tree incorporates a mechanism for replanning requests at different levels based on the current LTL state and executed sequences. The overall structure suggests a sophisticated decision-making process that enables the robot to adapt its actions based on dynamic environmental changes and internal states.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Condition ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <Action ID=\"FakeDetectionLevel1\" replanning_fake_input=\"{replanning_fake_input}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel1\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Condition ID=\"ReactiveLTLStateCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Action ID=\"FakeDetectionLevel3\" replanning_fake_input=\"{replanning_fake_input}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Switch4 case_1=\"move\" case_2=\"stay\" case_3=\"start_training\" case_4=\"terminate_training\" variable=\"{bt_action_type}\">\n                            <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                            <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"GuideAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"BackNormalAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <AlwaysFailure/>\n                        </Switch4>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"BackNormalAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"DropAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel1\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel2\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel3\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"GuideAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Condition>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Condition ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Condition>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"PickAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"ReactiveLTLStateCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Condition>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel1\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's path planning and execution. It first computes a path using the global planner, then runs two sub-branches in parallel. The first sub-branch involves executing the local planner to follow the computed path, while the second sub-branch controls the rate at which new paths are computed by the global planner. The goal for the global planner and the resulting path are stored on the blackboard for communication between different components.\n\nThe RateController node regulates the frequency of invoking the ComputePathToPose operation. The Parallel node uses a threshold of 1 to return the result of FollowPath whenever it returns SUCCESS or FAILURE. This ensures that the overall task status reflects the success or failure of the path following operation.\n\nIn summary, the behavior tree manages the coordination of global and local path planning and execution for the robot, ensuring continuous path updates and adaptive control based on the robot's progress.",
        "output": "<!--\n  This Behavior Tree first computes a path using the global planner (ComputePathToPose).\n  Then, it runs two sub-branches in parallel. The first sub-branch is a FollowPath\n  operation (the local planner). In parallel, there is a rate controlled execution of\n  FollowPath (the global planner). Each time a new path is computed, the path update\n  is sent to the local planner. The right branch, which is the rate controlled\n  ComputePathToPose, always returns RUNNING. Because the Parallel node uses a\n  threshold of 1, whenever the FollowPath returns SUCCESS or FAILURE, the parallel\n  node will return this result.\n\n  The goal (input to the global planner) and the resulting path (output of the global\n  planner and input to the local planner) are passed on the blackboard.\n\n  The rate at which the ComputePathToPose operation is invoked can be controlled with\n  the hz parameter to the RateController node.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"root\">\n      <RateController hz=\"1.0\">\n        <Fallback>\n          <GoalReached/>\n          <ComputePathToPose goal=\"${goal}\"/>\n        </Fallback>\n      </RateController>\n      <FollowPath path=\"${path}\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for a task. Initially, the action \"go1\" is executed, followed by the action \"go2\" repeated three times. Subsequently, the action \"go3\" is performed. The behavior tree structure ensures that these actions are carried out in the specified order.\n\nIn summary, the robot first executes \"go1\", then repeats \"go2\" three times, and finally performs \"go3\". This behavior is designed to achieve a specific task or objective through a predefined sequence of actions.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"go1\"/>\n            <Repeat num_cycles=\"3\">\n                <Action ID=\"go2\"/>\n            </Repeat>\n            <Action ID=\"go3\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the navigation and recovery strategy for a robot, specifically an Orca3. The robot is programmed to navigate towards a goal while replanning at a frequency of 1Hz using a grid-based planner. If the navigation encounters issues, it will attempt recovery by retrying up to 6 times. During recovery, it will wait for a few seconds before resuming navigation. The recovery strategy also includes reacting to any updates in the goal.\n\nOverall, the behavior tree orchestrates the robot's navigation process, ensuring that it can adapt to changing environments or unforeseen obstacles by incorporating a recovery mechanism.",
        "output": "<!--\n  A simple behavior tree that replans at 1Hz. Recovery consists of waiting (drifting while hovering)\n  for a few seconds. Orca3 doesn't use costmaps, so there's no need to clear them.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n        </RateController>\n        <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <Wait wait_duration=\"5\"/>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a task-oriented system, possibly related to a game or simulation. The sequence \"Sequence1\" consists of three actions: checking if a condition \"isFull\" is met, then executing the action \"goClosestR,\" and finally waiting for 15 frames.\n\nThe available actions in the tree include \"dumpRun,\" \"goClosestR,\" \"mineResources,\" \"moveBaseToGoal,\" and \"waitFrames.\" These actions likely correspond to specific behaviors or tasks that the system can perform.\n\nOverall, the behavior tree seems to represent a decision-making process where the system checks a condition, performs an action based on the result, and then waits for a specified duration before proceeding with further actions.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Condition ID=\"isFull\"/>\n            <Action ID=\"goClosestR\"/>\n            <Action ID=\"waitFrames\" barout=\"\" baz=\"\" fooin=\"\" frames=\"15\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"goClosestR\"/>\n        <Condition ID=\"isFull\"/>\n        <Action ID=\"mineResources\"/>\n        <Action ID=\"moveBaseToGoal\">\n            <inout_port name=\"key_name\">goal</inout_port>\n        </Action>\n        <Action ID=\"waitFrames\">\n            <output_port name=\"barout\"/>\n            <inout_port name=\"baz\"/>\n            <input_port name=\"fooin\"/>\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's actions in a social navigation scenario. The robot is programmed to repeat a sequence of actions 100 times. Within each repetition, it executes three tasks simultaneously: engaging in dialog, performing a social navigation action towards a goal labeled \"hri,\" and interacting with another agent identified as \"agent_3.\" The overall success of the parallel tasks is determined by the successful completion of at least one task, while failure occurs if all tasks fail. Additionally, there is a stop condition that has been commented out, which suggests the ability to halt the entire sequence based on an external signal.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <Repeat num_cycles=\"100\">\n                <Parallel success_threshold=\"1\" failure_threshold=\"1\">\n                    <Dialog name=\"dialog\"/>\n                    <SocialNav2Action \n                            name=\"social_nav2_action\" \n                            goal=\"hri\" \n                            agent_id=\"agent_3\"/>\n                    <!--<StopCondition stop_topic=\"/social_nav2_bt_action/stop\"/>-->\n                </Parallel>\n            </Repeat>\n        </Sequence>\n     </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate while continuously replanning its global path after every 1 meter of movement. It uses a pipeline sequence consisting of two steps: \n1. DistanceController: This step computes the path to the next goal pose using the \"GridBased\" planner and sets the distance to 1.0, indicating that the path should be recomputed after covering 1 meter.\n2. FollowPath: Once the new path is computed, the robot follows this path using the specified controller.\n\nThis behavior tree ensures that the robot can dynamically adjust its path based on its continuous movement, allowing it to adapt to changes in the environment or obstacles encountered during navigation.",
        "output": "<!--\n  This Behavior Tree replans the global path after every 1m.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <DistanceController distance=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </DistanceController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement in a simulated environment. It first instructs the robot to move to a specific location (2.2, 0) while facing a particular direction (1.57 radians). After reaching this position, it then directs the robot to backtrack by a distance of 0.2 meters. Subsequently, the robot is commanded to move to another location (2.1, 0.2) and then backtrack again by 0.2 meters.\n\nIn summary, the behavior tree coordinates a sequence of movements for the robot, involving both forward and backward motions at specific locations within the environment.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <MoveBase goal=\"2.2;0;1.57\"/>\n            <Backtrack target_distance_m=\"0.2\"/>\n            <MoveBase goal=\"2.1;0.2;0\"/>\n            <Backtrack target_distance_m=\"0.2\"/>\n        </Sequence>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a sequence containing a fallback node, which in turn contains a sequence with an action \"go1\". This suggests that the system will attempt to perform \"go1\" action and if it fails, it may try alternative actions specified elsewhere. The available actions include \"alwaysTrue\", \"dumpRun\", \"go2\", \"go3\", \"goClosestR\", \"guardAiMovement\", \"isFull\", \"mineResource\", and \"waitFrames\".\n\nOverall, the behavior tree seems to be a simple decision-making structure where the system attempts to execute \"go1\" action and has backup options in case of failure. If more detailed functionality is required, the specific conditions and outcomes of each action would need to be examined.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Fallback>\n                <Sequence>\n                    <Action ID=\"go1\"/>\n                </Sequence>\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"alwaysTrue\"/>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"goClosestR\"/>\n        <Action ID=\"guardAiMovement\"/>\n        <Action ID=\"isFull\"/>\n        <Action ID=\"mineResource\"/>\n        <Action ID=\"waitFrames\">\n            <input_port name=\"_in_0\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree specifies a sequence of actions for a robot or an AI agent. It begins by checking if a certain condition \"isFull\" is met. If the condition is true, it will execute the action \"goClosestR\", and then wait for 15 frames before proceeding further. The specific details of some actions like \"dumpRun\", \"go1\", \"go2\", \"go3\", \"mineResources\", and \"moveBaseToGoal\" are mentioned in the TreeNodesModel but are not directly used in the main BehaviorTree.\n\nIn summary, this behavior tree represents a decision-making process for an agent to perform tasks based on certain conditions, such as resource availability or proximity to a target. The sequence of actions includes movement, waiting, and potentially other unspecified actions, which are determined by the fulfillment of the specified condition.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Condition ID=\"isFull\"/>\n            <Action ID=\"goClosestR\"/>\n            <Action ID=\"waitFrames\" barout=\"\" baz=\"\" fooin=\"\" frames=\"15\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"goClosestR\"/>\n        <Condition ID=\"isFull\"/>\n        <Action ID=\"mineResources\"/>\n        <Action ID=\"moveBaseToGoal\">\n            <input_port name=\"key_name\">goal</input_port>\n        </Action>\n        <Action ID=\"waitFrames\">\n            <output_port name=\"barout\"/>\n            <input_port name=\"baz\"/>\n            <input_port name=\"fooin\"/>\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions to be executed. The first action \"addObjOut\" takes input values 1 and 2, performs an addition operation, and stores the result in the variable ${foo}. The second action \"add\" takes input values 3 and 4, performs an addition operation, and stores the result in the variable ${zaz}. However, it seems that the behavior tree is incomplete as it does not specify what should be done with the results stored in ${foo} and ${zaz}.\n\nAdditionally, the XML includes a TreeNodesModel section which defines the input and output ports for the \"add\" and \"addObjOut\" actions, providing a clear structure for how these actions are expected to be used within the behavior tree.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"addObjOut\" _in_0=\"1\" _in_1=\"2\" out=\"${foo}\"/>\n            <Action ID=\"add\" _in_0=\"3\" _in_1=\"4\" _out_0=\"${zaz}\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"add\">\n            <input_port name=\"_in_0\"/>\n            <input_port name=\"_in_1\"/>\n            <output_port name=\"_out_0\"/>\n        </Action>\n        <Action ID=\"addObjOut\">\n            <input_port name=\"_in_0\"/>\n            <input_port name=\"_in_1\"/>\n            <output_port name=\"out\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for a robot or an autonomous agent. The sequence includes various actions such as moving to specific locations (go1, go2, go3, etc.), making decisions based on conditions (isFull), and handling fallback scenarios.\n\nThe tree starts with the robot executing \"go1\" followed by a fallback that involves either staying in place (\"stay1\") or performing a series of movements including \"go1\", \"go5\", and another sequence involving \"go1\", \"go2\", checking a condition \"isFull\", and then \"go3\". If the fallback fails, the robot will execute \"go6\", \"go1\", \"go2\", and \"go3\" in sequence before proceeding to \"stay2\".\n\nAfter these initial steps, the robot executes \"go2\" and \"go3\" consecutively. Finally, it performs a sequence involving \"go1\", \"go2\", and a fallback scenario where it may perform \"go2",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Action ID=\"go1\"/>\n            <Fallback>\n                <Action ID=\"stay1\"/>\n                <Sequence>\n                    <Action ID=\"go1\"/>\n                    <Action ID=\"go5\"/>\n                    <Sequence name=\"Sequence3\">\n                        <Action ID=\"go1\"/>\n                        <Action ID=\"go2\"/>\n                        <Condition ID=\"isFull\"/>\n                        <Action ID=\"go3\"/>\n                    </Sequence>\n                </Sequence>\n                <Sequence>\n                    <Action ID=\"go6\"/>\n                    <Action ID=\"go1\"/>\n                    <Action ID=\"go2\"/>\n                    <Action ID=\"go3\"/>\n                </Sequence>\n                <Action ID=\"stay2\"/>\n            </Fallback>\n            <Action ID=\"go2\"/>\n            <Action ID=\"go3\"/>\n            <Sequence name=\"Sequence4\">\n                <Action ID=\"go1\"/>\n                <Action ID=\"go2\"/>\n                <Fallback>\n                    <Inverter>\n                        <Action ID=\"go4\"/>\n                    </Inverter>\n                    <ForceSuccess>\n                        <Action ID=\"go2\"/>\n                    </ForceSuccess>\n                    <Action ID=\"cIName\"/>\n                </Fallback>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"cIName\"/>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"go4\"/>\n        <Action ID=\"go5\"/>\n        <Action ID=\"go6\"/>\n        <Action ID=\"goClosestR\"/>\n        <Condition ID=\"isFull\"/>\n        <Action ID=\"mineResources\"/>\n        <Action ID=\"moveBaseToGoal\">\n            <input_port name=\"key_name\">goal</input_port>\n        </Action>\n        <Action ID=\"stay1\"/>\n        <Action ID=\"stay2\"/>\n        <Action ID=\"waitFrames\">\n            <output_port name=\"barout\"/>\n            <input_port name=\"baz\"/>\n            <input_port name=\"fooin\"/>\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a system that involves periodic global path replanning at a frequency of 1 Hz, with built-in recovery actions. The main task involves navigating while periodically replanning the path. If the goal is reached or if there is a need to compute a new path, it will do so within the specified frequency. In case of failures or issues during navigation, the system has recovery actions in place, such as spinning in this particular scenario. The RecoveryNode allows for a limited number of retries (6 in this case) before potentially triggering further recovery procedures. Overall, the behavior tree ensures robust navigation by incorporating path replanning and recovery strategies to handle unexpected situations.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\">\n      <Sequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <Fallback>\n            <GoalReached/>\n            <ComputePathToPose goal=\"${goal}\" path=\"${path}\"/>\n          </Fallback>\n        </RateController>\n        <FollowPath path=\"${path}\"/>\n      </Sequence>\n      <SequenceStar name=\"RecoveryActions\">\n        <Spin/>\n      </SequenceStar>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a navigation system for a robot that continuously plans and follows a global path. The \"NavigateWithReplanning\" sequence utilizes a rate controller to replan the path at a frequency of 1 Hz using the \"GridBased\" planner. Once the path is computed, the robot follows the path using the specified controller.\n\nOverall, this behavior tree ensures that the robot can navigate its environment while periodically updating its planned path to accommodate any changes in the environment or to optimize its trajectory.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </RateController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the movement of a robot by computing a path using a global planner and then executing two sub-branches in parallel. The first sub-branch involves following the computed path using a local planner, while the second sub-branch controls the rate at which the path is recomputed by the global planner. The goal for the global planner and the resulting path are stored in the blackboard for reference.\n\nThe RateController node regulates the frequency at which the ComputePathToPose operation is invoked. The overall sequence ensures that the robot continuously follows the path while also updating it as necessary based on the global planner's computations. If the FollowPath operation returns SUCCESS or FAILURE, the parallel node will return this result. The behavior tree effectively manages the robot's navigation by coordinating the global and local planning processes to ensure smooth and efficient movement towards the specified goal.",
        "output": "<!--\n  This Behavior Tree first computes a path using the global planner (ComputePathToPose).\n  Then, it runs two sub-branches in parallel. The first sub-branch is a FollowPath\n  operation (the local planner). In parallel, there is a rate controlled execution of\n  FollowPath (the global planner). Each time a new path is computed, the path update\n  is sent to the local planner. The right branch, which is the rate controlled\n  ComputePathToPose, always returns RUNNING. Because the Parallel node uses a\n  threshold of 1, whenever the FollowPath returns SUCCESS or FAILURE, the parallel\n  node will return this result.\n\n  The goal (input to the global planner) and the resulting path (output of the global\n  planner and input to the local planner) are passed on the blackboard.\n\n  The rate at which the ComputePathToPose operation is invoked can be controlled with\n  the hz parameter to the RateController node.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"root\">\n      <RateController hz=\"1.0\">\n        <Fallback>\n          <GoalReached/>\n          <ComputePathToPose goal=\"${goal}\"/>\n        </Fallback>\n      </RateController>\n      <FollowPath path=\"${path}\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a navigation system for a robot that involves periodic global path replanning at a frequency of 1 Hz. The robot is programmed to follow a pipeline sequence, where it first computes a path to a specified goal using the \"GridBased\" planner. This computation is controlled by a rate controller set at 1 Hz. Once the path is computed, the robot follows this path using a specified path-following controller (\"FollowPath\"). This process ensures that the robot continuously updates its global path based on changing environmental conditions while navigating towards its goal.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </RateController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot's base movement control. It prompts the user to input x and y coordinates in meters within the range of -10 to 10. Once the user provides these coordinates, the robot will execute the base movement to reach the specified (x, y) location. This behavior tree allows for interactive control of the robot's movement by taking user input for the destination coordinates and then directing the robot to move to that location.",
        "output": " <root main_tree_to_execute = \"BaseMovementWithRequest\" >\n    <BehaviorTree ID=\"BaseMovementWithRequest\">\n        <Sequence>\n            <FloatParameterRequest title=\"Bitte geben Sie x und y in [m] an\"\n                                   value=\"{x}\" key=\"x\" min=\"-10\" max=\"10\"/>\n            <FloatParameterRequest value=\"{y}\" key=\"y\" min=\"-10\" max=\"10\"/>\n            <BaseMovement x=\"{x}\" y=\"{y}\"/>\n        </Sequence>\n    </BehaviorTree>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of movements for a robot. It starts by moving ahead 50 units, then turns 90 degrees, moves ahead 120 units, turns -90 degrees, moves ahead 800 units, turns -90 degrees, moves ahead 450 units, and turns -90 degrees. Finally, it moves forward 600 units, then back 600 units, and again forward 600 units.\n\nIn summary, the behavior tree instructs the robot to follow a specific path consisting of straight-line movements and turns at specified distances and angles. This sequence of actions likely represents a predefined path or maneuver that the robot needs to execute as part of its task.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root\">\n\n            <MoveAhead name=\"move\"\n                       distance=\"50\"/>\n\n            <Turn name=\"turn\"\n                  angle=\"90\"/>\n\n            <MoveAhead name=\"move\"\n                       distance=\"120\"/>\n\n            <Turn name=\"turn\"\n                  angle=\"-90\"/>\n\n            <MoveAhead name=\"move\"\n                       distance=\"800\"/>\n\n            <Turn name=\"turn\"\n                  angle=\"-90\"/>\n\n            <MoveAhead name=\"move\"\n                       distance=\"450\"/>\n\n            <Turn name=\"turn\"\n                  angle=\"-90\"/>\n\n            <MoveAhead name=\"move forward\"\n                       distance=\"600\"/>\n            <MoveAhead name=\"move back\"\n                       distance=\"-600\"/>\n            <MoveAhead name=\"move forward\"\n                       distance=\"600\"/>\n\n        </Sequence>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for a robot. The robot is programmed to perform various tasks based on different conditions and actions. \n\nInitially, it checks if the room is known, and if so, decides whether to follow a predefined sequence to reach the room or to autonomously follow a human. If a bottle is found, it will execute the \"FindBottle\" action. If the bottle is grasped, it will go through a sequence of steps such as computing inverse pose, moving to the inverse pose, locating the bottle, and finally grasping the bottle. If any of these steps fail, it will set the inverse pose as invalid and continue running.\n\nIf none of the above conditions are met, the robot will resort to asking for help. The behavior tree encompasses a range of actions including movement, perception, and decision-making, allowing the robot to adapt its behavior based on the environment and task requirements.",
        "output": "<root main_tree_to_execute=\"bt0008\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"bt0008\">\n        <Fallback name=\"Main\">\n            <Sequence name=\"Autonomus\">\n                <Fallback name=\"ReachRoom\">\n                    <Sequence name=\"ShouldFollow\">\n                        <Condition ID=\"RoomKnown\"/>\n                        <Fallback name=\"GoToRoom_Fal\">\n                            <Condition ID=\"RobotInRoom\"/>\n                            <Action ID=\"GoToRoom\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Action ID=\"FollowHuman\"/>\n                </Fallback>\n                <Fallback name=\"BottleFound\">\n                    <Condition ID=\"BottleFound\"/>\n                    <Action ID=\"FindBottle\"/>\n                </Fallback>\n                <Fallback name=\"Fetch\">\n                    <Condition ID=\"BottleGrasped\"/>\n                    <Sequence name=\"Grasp\">\n                        <Fallback name=\"InvPoseCompute\">\n                            <Sequence name=\"SeqInvPose\">\n                                <Condition ID=\"InvPoseComputed\"/>\n                                <Condition ID=\"InvPoseValid\"/>\n                            </Sequence>\n                            <Action ID=\"ComputeInvPose\"/>\n                        </Fallback>\n                        <Fallback name=\"GoInvPose\">\n                            <Condition ID=\"RobotAtInvPose\"/>\n                            <Sequence name=\"prepare\">\n                                <Action ID=\"KeepArmsForGrasp\"/>\n                                <Action ID=\"GoToInvPose\"/>\n                            </Sequence>\n                        </Fallback>\n                        <Fallback name=\"Locate\">\n                            <Condition ID=\"BottleLocated\"/>\n                            <Action ID=\"LocateBottle\"/>\n                        </Fallback>\n                        <Action ID=\"GraspBottle\"/>\n                    </Sequence>\n                    <Action ID=\"SetInvPoseInvaild\"/>\n                    <Action ID=\"KeepRunning\"/>\n                </Fallback>\n            </Sequence>\n            <Action ID=\"AskForHelp\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AskForHelp\"/>\n        <Condition ID=\"BottleFound\"/>\n        <Condition ID=\"BottleGrasped\"/>\n        <Condition ID=\"BottleLocated\"/>\n        <Action ID=\"ComputeInvPose\"/>\n        <Action ID=\"FindBottle\"/>\n        <Action ID=\"FollowHuman\"/>\n        <Action ID=\"GoToInvPose\"/>\n        <Action ID=\"GoToRoom\"/>\n        <Action ID=\"GraspBottle\"/>\n        <Condition ID=\"InvPoseComputed\"/>\n        <Condition ID=\"InvPoseValid\"/>\n        <Action ID=\"KeepArmsForGrasp\"/>\n        <Action ID=\"KeepRunning\"/>\n        <Action ID=\"LocateBottle\"/>\n        <Condition ID=\"RobotAtInvPose\"/>\n        <Condition ID=\"RobotInRoom\"/>\n        <Condition ID=\"RoomKnown\"/>\n        <Action ID=\"SetInvPoseInvaild\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic task sequence. It begins by opening the robot's gripper, then it approaches an object, closes the gripper to grasp the object, moves to a specified location, and finally opens the gripper again. This sequence outlines the steps for the robot to perform a pick-and-place operation or a similar manipulation task.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <OpenGripper    name=\"open_gripper\"/>\n           <ApproachObject name=\"approach_object\"/>\n           <CloseGripper   name=\"close_gripper\"/>\n           <MoveF    name=\"move\" goal=\"${arg3}\"/>\n           <OpenGripper    name=\"open_gripper\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for a robot. The robot is programmed to perform various actions based on sensor inputs and conditions. \n\nThe sequence begins with a reactive fallback, where the robot either waits for a certain condition to be false or performs an action if the condition is true. Following this, there are sequences of actions that are executed based on specific conditions being met. These actions include manipulating valves, setting scores, controlling robot movement, displaying scores, and checking various sensors.\n\nThere is also a sub-tree called \"TestSensors\" which contains a sequence of conditions related to different sensors. This sub-tree is used within the main behavior tree to check the status of various sensors.\n\nOverall, the behavior tree outlines the decision-making logic for the robot, incorporating reactive behaviors, conditional actions, and sensor checks to accomplish tasks in a dynamic environment.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <ReactiveFallback>\n                <ReactiveSequence>\n                    <Inverter>\n                        <Condition ID=\"IsVentouseGauche\"/>\n                    </Inverter>\n                    <Action ID=\"Attendre\" ms=\"3000\"/>\n                </ReactiveSequence>\n                <Action ID=\"Pince\" left_valve=\"false\" middle_valve=\"false\" right_valve=\"false\"/>\n            </ReactiveFallback>\n            <ForceSuccess>\n                <Sequence>\n                    <ForceSuccess>\n                        <Sequence>\n                            <Condition ID=\"IsVentouseGauche\"/>\n                            <Action ID=\"Pince\" left_valve=\"true\" middle_valve=\"false\" right_valve=\"false\"/>\n                            <Condition ID=\"IsVentouseCentre\"/>\n                            <Action ID=\"Pince\" left_valve=\"false\" middle_valve=\"true\" right_valve=\"false\"/>\n                            <Condition ID=\"IsVentouseDroite\"/>\n                            <Action ID=\"Pince\" left_valve=\"false\" middle_valve=\"false\" right_valve=\"true\"/>\n                        </Sequence>\n                    </ForceSuccess>\n                    <ForceSuccess>\n                        <Sequence>\n                            <Condition ID=\"ScoreInferieurA\" score=\"2\"/>\n                            <Action ID=\"DefinirLeScore\" score=\"5\"/>\n                            <Action ID=\"VitesseConstante\" linear_x=\"0.1\" angular_z=\"0\" linear_y=\"0\"/>\n                            <Action ID=\"Attendre\" ms=\"1000\"/>\n                            <Action ID=\"VitesseConstante\" linear_x=\"0\" angular_z=\"1\" linear_y=\"0\"/>\n                            <Action ID=\"Attendre\" ms=\"1000\"/>\n                            <Action ID=\"VitesseConstante\" linear_x=\"0\" angular_z=\"0\" linear_y=\"0\"/>\n                            <Action ID=\"LancerLaMinuterie\" seconds=\"5\"/>\n                            <Action ID=\"Aller\" y=\"0\" theta=\"0\" x=\"0\"/>\n                        </Sequence>\n                    </ForceSuccess>\n                    <Action ID=\"Bras\" angle_base=\"100\" angle_pince=\"50\"/>\n                    <Action ID=\"Bras\" angle_base=\"100\" angle_pince=\"150\"/>\n                    <ForceSuccess>\n                        <ReactiveSequence>\n                            <Condition ID=\"MinuterieNonEcoulee\"/>\n                            <Fallback>\n                                <Sequence>\n                                    <Condition ID=\"ScoreInferieurA\" score=\"100\"/>\n                                    <Action ID=\"AjouterAuScore\" score=\"10\"/>\n                                </Sequence>\n                                <Sequence>\n                                    <Condition ID=\"ScoreSuperieurA\" score=\"100\"/>\n                                    <Action ID=\"Attendre\" ms=\"1000\"/>\n                                    <Action ID=\"AjouterAuScore\" score=\"1\"/>\n                                </Sequence>\n                            </Fallback>\n                        </ReactiveSequence>\n                    </ForceSuccess>\n                    <Action ID=\"AfficherLeScore\"/>\n                    <SubTree ID=\"TestSensors\"/>\n                </Sequence>\n            </ForceSuccess>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"TestSensors\">\n        <Sequence>\n            <Inverter>\n                <Condition ID=\"MinuterieNonEcoulee\"/>\n            </Inverter>\n            <ForceSuccess>\n                <Condition ID=\"IsCampViolet\"/>\n            </ForceSuccess>\n            <ForceSuccess>\n                <Condition ID=\"IsArretUrgence\"/>\n            </ForceSuccess>\n            <ForceSuccess>\n                <Condition ID=\"IsTirettePresente\"/>\n            </ForceSuccess>\n            <ForceSuccess>\n                <Condition ID=\"IsPaletCentre\"/>\n            </ForceSuccess>\n            <ForceSuccess>\n                <Condition ID=\"IsPaletDroit\"/>\n            </ForceSuccess>\n            <ForceSuccess>\n                <Condition ID=\"IsPaletGauche\"/>\n            </ForceSuccess>\n            <ForceSuccess>\n                <Condition ID=\"IsVentouseCentre\"/>\n            </ForceSuccess>\n            <ForceSuccess>\n                <Condition ID=\"IsVentouseDroite\"/>\n            </ForceSuccess>\n            <ForceSuccess>\n                <Condition ID=\"IsVentouseGauche\"/>\n            </ForceSuccess>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AfficherLeScore\"/>\n        <Action ID=\"AjouterAuScore\">\n            <input_port default=\"1\" name=\"score\">Valeur à ajouter au score</input_port>\n        </Action>\n        <Action ID=\"Aller\">\n            <input_port default=\"0\" name=\"theta\">Angle du robot (en degree)</input_port>\n            <input_port default=\"0\" name=\"x\">Position absolue en X (en metre)</input_port>\n            <input_port default=\"0\" name=\"y\">Position absolue en Y (en metre)</input_port>\n        </Action>\n        <Action ID=\"Attendre\">\n            <input_port default=\"1000\" name=\"ms\">Temps en millisecondes</input_port>\n        </Action>\n        <Action ID=\"Bras\">\n            <input_port default=\"0\" name=\"angle_base\">Angle moteur au plus pres de la base</input_port>\n            <input_port default=\"0\" name=\"angle_pince\">Angle moteur au plus pres de la pince</input_port>\n        </Action>\n        <Action ID=\"DefinirLeScore\">\n            <input_port default=\"0\" name=\"score\">Valeur du score</input_port>\n        </Action>\n        <Action ID=\"DefinirTempsMinuterie\">\n            <input_port default=\"1398\" name=\"seconds\">Temps de la minuterie en secondes</input_port>\n        </Action>\n        <Condition ID=\"IsArretUrgence\"/>\n        <Condition ID=\"IsCampViolet\"/>\n        <Condition ID=\"IsPaletCentre\"/>\n        <Condition ID=\"IsPaletDroit\"/>\n        <Condition ID=\"IsPaletGauche\"/>\n        <Condition ID=\"IsTirettePresente\"/>\n        <Condition ID=\"IsVentouseCentre\"/>\n        <Condition ID=\"IsVentouseDroite\"/>\n        <Condition ID=\"IsVentouseGauche\"/>\n        <Action ID=\"LancerLaMinuterie\">\n            <inout_port name=\"seconds\"/>\n        </Action>\n        <Condition ID=\"MinuterieNonEcoulee\"/>\n        <Action ID=\"Pince\">\n            <input_port default=\"false\" name=\"left_valve\"/>\n            <input_port default=\"false\" name=\"middle_valve\"/>\n            <input_port default=\"false\" name=\"right_valve\"/>\n        </Action>\n        <Condition ID=\"ScoreInferieurA\">\n            <input_port default=\"1\" name=\"score\">Score</input_port>\n        </Condition>\n        <Condition ID=\"ScoreSuperieurA\">\n            <input_port default=\"0\" name=\"score\">Score</input_port>\n        </Condition>\n        <SubTree ID=\"TestSensors\"/>\n        <Action ID=\"VitesseConstante\">\n            <input_port default=\"0\" name=\"angular_z\">Vitesse de rotation en rad/s</input_port>\n            <input_port default=\"0\" name=\"linear_x\">Vitesse dans le sens avant/arriere en m/s</input_port>\n            <input_port default=\"0\" name=\"linear_y\">Vitesse dans le sens droite/gauche en m/s</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the decision-making process for an entity, likely an animal or a simulated creature. The entity is programmed to perform various actions based on its current state and environment. \n\nThe tree follows a hierarchical structure with fallback and sequence nodes to determine the next course of action. If the entity has a target, it will attempt to move towards it and attack if adjacent. If there is no immediate target, it will prioritize hunting for prey when hungry, followed by killing and eating the prey.\n\nAdditionally, the entity's reproductive behavior is also included in the tree, as it can give birth, lay eggs, and engage in mating behaviors under specific conditions such as being adult, pregnant, or ready to give birth.\n\nOverall, the behavior tree encapsulates the decision-making process for the entity, encompassing movement, hunting, feeding, and reproductive activities based on its internal states and external stimuli.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback>\n            <SequenceStar>\n                <Action ID=\"GetTarget\"/>\n                <Action ID=\"Move\"/>\n                <Sequence>\n                    <Condition ID=\"TargetAdjacent\"/>\n                    <Action ID=\"AttackTarget\"/>\n                </Sequence>\n            </SequenceStar>\n            <FallbackStar name=\"AnimalHunter\">\n                <SequenceStar name=\"Hunt\">\n                    <Condition ID=\"IsHungry\"/>\n                    <Action ID=\"FindPrey\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"KillPrey\"/>\n                    <Action ID=\"EatPrey\"/>\n                </SequenceStar>\n                <Action ID=\"RandomMove\"/>\n            </FallbackStar>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Condition ID=\"\"/>\n        <Action ID=\"AttackTarget\"/>\n        <Condition ID=\"CanHaveSex\"/>\n        <Action ID=\"EatPrey\"/>\n        <Action ID=\"FindPrey\"/>\n        <Action ID=\"GetTarget\"/>\n        <Action ID=\"GiveBirth\"/>\n        <Condition ID=\"IsAdult\"/>\n        <Condition ID=\"IsCarnivore\"/>\n        <Condition ID=\"IsEgg\"/>\n        <Condition ID=\"IsEggLayer\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHerbivore\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsPregnant\"/>\n        <Condition ID=\"IsProducer\"/>\n        <Condition ID=\"IsReadyToGiveBirth\"/>\n        <Condition ID=\"IsWoodVermin\"/>\n        <Condition ID=\"IsYoung\"/>\n        <Action ID=\"KillPrey\"/>\n        <Action ID=\"LayEgg\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"Produce\"/>\n        <Action ID=\"RandomMove\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n        <Action ID=\"TryHaveSex\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to dynamically navigate to a specific location while continuously replanning its path. The robot updates its goal pose and computes a new path using the GridBased planner. It then truncates the computed path to a certain distance. The robot follows this truncated path using the FollowPath controller until it reaches the goal or encounters a failure.\n\nOverall, the behavior tree orchestrates the process of dynamic navigation with continuous replanning, ensuring that the robot can adapt to changes in the environment while moving towards its goal pose.",
        "output": "<!--\n  This Behavior Tree follows a dynamic pose to a certain distance\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n         <TruncatePath distance=\"1.0\" input_path=\"{path}\" output_path=\"{truncated_path}\"/>\n        </Sequence>\n      </RateController>\n      <KeepRunningUntilFailure>\n        <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\"/>\n      </KeepRunningUntilFailure>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot's navigation system. It periodically replans the global path at 1 Hz and includes recovery actions to handle potential failures. The main sequence involves navigating with replanning, where it computes a path to a specific goal using a grid-based planner and clears the global costmap context. Then, it follows the computed path and clears the local costmap context. If there are recovery situations such as a goal update, it performs recovery actions including clearing both local and global costmaps, spinning, and waiting.\n\nOverall, this behavior tree ensures that the robot's navigation system can handle unexpected events or changes in the environment by incorporating periodic replanning and recovery actions to maintain smooth and reliable navigation.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for monitoring and reconfiguring a system based on various conditions. It first configures the monitoring parameters, resetting certain values if needed. Then it checks if the system is charging or operating, and reconfigures the monitoring accordingly. If charging, it sets specific actions like speaking a message and changing facial expression, while if operating, it performs different actions. The behavior tree also handles processing status information, categorizing it as info, warning, or error, and taking corresponding actions.\n\nAdditionally, it includes a subtree for handling RTABMap (Real-Time Appearance-Based Mapping) related issues such as checking status, resetting strikes, and taking appropriate actions based on the status. There's another subtree for restarting nodes, which involves killing and relaunching nodes based on the system's status.\n\nOverall, the behavior tree orchestrates the monitoring, reconfiguration, and management of system components based on dynamic conditions and status updates.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"Monitoring\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"ConfigureMonitoring\">\n        <Sequence>\n            <Fallback>\n                <Condition ID=\"MonitoringReconfigured\"/>\n                <Sequence>\n                    <SetBlackboard name=\"ResetParameter\" output_key=\"parameter_set\" value=\"NOT_SET\"/>\n                    <SetBlackboard name=\"ResetRTABMAP\" output_key=\"rtabmap_strike\" value=\"0\"/>\n                </Sequence>\n            </Fallback>\n            <IfThenElse>\n                <Condition ID=\"Charging\"/>\n                <Fallback>\n                    <BlackboardCheckString return_on_mismatch=\"FAILURE\" value_A=\"{parameter_set}\" value_B=\"CHARGING\">\n                        <AlwaysSuccess/>\n                    </BlackboardCheckString>\n                    <Sequence>\n                        <Action ID=\"ReconfigureMonitoring\" parameter_set=\"CHARGING\" parameter_set_out=\"{parameter_set}\"/>\n                        <ForceSuccess>\n                            <Sequence>\n                                <Action ID=\"Speak\" text=\"Gute Nacht!\"/>\n                                <Action ID=\"FacialExpression\" duration=\"100000\" expression=\"SLEEP\"/>\n                            </Sequence>\n                        </ForceSuccess>\n                        <SubTree ID=\"KillRemainingNodes\" __shared_blackboard=\"false\" parameter_set=\"parameter_set\"/>\n                    </Sequence>\n                </Fallback>\n                <Fallback>\n                    <BlackboardCheckString return_on_mismatch=\"FAILURE\" value_A=\"{parameter_set}\" value_B=\"OPERATING\">\n                        <AlwaysSuccess/>\n                    </BlackboardCheckString>\n                    <Sequence>\n                        <Action ID=\"ReconfigureMonitoring\" parameter_set=\"OPERATING\" parameter_set_out=\"{parameter_set}\"/>\n                        <ForceSuccess>\n                            <Sequence>\n                                <Action ID=\"Speak\" text=\"Guten Morgen!\"/>\n                                <Action ID=\"FacialExpression\" duration=\"5.0\" expression=\"NEUTRAL\"/>\n                            </Sequence>\n                        </ForceSuccess>\n                        <SubTree ID=\"KillRemainingNodes\" __shared_blackboard=\"false\" parameter_set=\"parameter_set\"/>\n                    </Sequence>\n                </Fallback>\n            </IfThenElse>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"KillRemainingNodes\">\n        <KeepRunningUntilFailure>\n            <Sequence>\n                <Action ID=\"SetKillGroups\" curr_kill_group=\"{curr_group}\" parameter_set=\"{parameter_set}\"/>\n                <ForceSuccess>\n                    <Sequence>\n                        <Action ID=\"KillNodeFromGroup\" group=\"{curr_group}\" kill_node=\"{curr_node}\"/>\n                        <Action ID=\"KillROSNode\" node=\"{curr_node}\"/>\n                    </Sequence>\n                </ForceSuccess>\n            </Sequence>\n        </KeepRunningUntilFailure>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Monitoring\">\n        <Sequence>\n            <SubTree ID=\"ConfigureMonitoring\" __shared_blackboard=\"false\" rtabmap_strike=\"rtabmap_strike\"/>\n            <Action ID=\"Monitoring\" blocked_groups=\"{blocked_groups}\" description=\"{desc}\" error_level=\"{err}\" key=\"{key}\"/>\n            <SubTree ID=\"ProcessStatus\" __shared_blackboard=\"false\" desc=\"desc\" err=\"err\" key=\"key\" status=\"status\"/>\n            <Fallback name=\"ErrorType\">\n                <Sequence>\n                    <Condition ID=\"RTABMapMonitor\" description=\"{desc}\"/>\n                    <SubTree ID=\"RTABMapHandling\" __shared_blackboard=\"false\" key=\"key\" rtabmap_strike=\"rtabmap_strike\" status=\"status\"/>\n                </Sequence>\n                <Sequence>\n                    <Condition ID=\"MoveBaseMonitor\" description=\"{desc}\"/>\n                    <SetBlackboard output_key=\"key\" value=\"/move_base\"/>\n                    <SubTree ID=\"RestartNode\" __shared_blackboard=\"false\" blocked_groups=\"blocked_groups\" desc=\"desc\" key=\"key\" status=\"status\"/>\n                </Sequence>\n                <Sequence>\n                    <Condition ID=\"NodeMonitor\" description=\"{desc}\"/>\n                    <SubTree ID=\"RestartNode\" __shared_blackboard=\"false\" blocked_groups=\"blocked_groups\" desc=\"desc\" key=\"key\" status=\"status\"/>\n                </Sequence>\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"ProcessStatus\">\n        <Fallback>\n            <Sequence>\n                <Condition ID=\"StatusInfo\" description=\"{desc}\" error_level=\"{err}\" key=\"{key}\"/>\n                <Action ID=\"StatusToParamServer\" description=\"{desc}\" key=\"{key}\" rewrite_stamp=\"true\"/>\n                <SetBlackboard output_key=\"status\" value=\"INFO\"/>\n                <Action ID=\"ROSOut\" level=\"INFO\" msg=\"Everything ok!\" throttle_period=\"120\"/>\n            </Sequence>\n            <Sequence>\n                <Condition ID=\"StatusWarn\" description=\"{desc}\" error_level=\"{err}\" key=\"{key}\"/>\n                <Action ID=\"StatusToParamServer\" description=\"{desc}\" key=\"{key}\" rewrite_stamp=\"true\"/>\n                <SetBlackboard output_key=\"status\" value=\"WARN\"/>\n            </Sequence>\n            <Sequence>\n                <Condition ID=\"StatusError\" description=\"{desc}\" error_level=\"{err}\" key=\"{key}\"/>\n                <Action ID=\"StatusToParamServer\" description=\"{desc}\" key=\"{key}\" rewrite_stamp=\"false\"/>\n                <SetBlackboard output_key=\"status\" value=\"ERROR\"/>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"RTABMapHandling\">\n        <Fallback>\n            <BlackboardCheckString return_on_mismatch=\"FAILURE\" value_A=\"INFO\" value_B=\"{status}\">\n                <SetBlackboard name=\"ResetStrike\" output_key=\"rtabmap_strike\" value=\"0\"/>\n            </BlackboardCheckString>\n            <BlackboardCheckString return_on_mismatch=\"FAILURE\" value_A=\"ERROR\" value_B=\"{status}\">\n                <Switch4 case_1=\"0\" case_2=\"1\" case_3=\"2\" case_4=\"3\" name=\"SwitchStrikeCase\" variable=\"{rtabmap_strike}\">\n                    <Sequence>\n                        <Action ID=\"RotateToRelocalize\"/>\n                        <Action ID=\"SaveTimestamp\" timestamp=\"{timestamp}\"/>\n                        <SetBlackboard name=\"SetFirstStrike\" output_key=\"rtabmap_strike\" value=\"1\"/>\n                    </Sequence>\n                    <ForceSuccess>\n                        <Sequence>\n                            <Fallback>\n                                <Condition ID=\"TimePassed\" duration=\"60\" timestamp=\"{timestamp}\"/>\n                                <ForceFailure>\n                                    <Action ID=\"RotateToRelocalize\"/>\n                                </ForceFailure>\n                            </Fallback>\n                            <ForceSuccess>\n                                <Sequence>\n                                    <SetBlackboard output_key=\"key\" value=\"/rtabmap/rtabmap\"/>\n                                    <Sequence name=\"KillRTABMAP\">\n                                        <Action ID=\"GroupFromKey\" group=\"{group}\" key=\"{key}\"/>\n                                        <Action ID=\"KillNodeFromGroup\" group=\"{group}\" kill_node=\"{kill_node}\"/>\n                                        <Action ID=\"KillROSNode\" node=\"{kill_node}\"/>\n                                    </Sequence>\n                                    <SetBlackboard output_key=\"key\" value=\"/move_base\"/>\n                                    <Sequence name=\"KillMoveBase\">\n                                        <Action ID=\"GroupFromKey\" group=\"{group}\" key=\"{key}\"/>\n                                        <Action ID=\"KillNodeFromGroup\" group=\"{group}\" kill_node=\"{kill_node}\"/>\n                                        <Action ID=\"KillROSNode\" node=\"{kill_node}\"/>\n                                    </Sequence>\n                                </Sequence>\n                            </ForceSuccess>\n                            <Action ID=\"SaveTimestamp\" timestamp=\"{timestamp}\"/>\n                            <SetBlackboard name=\"SetSecondStrike\" output_key=\"rtabmap_strike\" value=\"2\"/>\n                        </Sequence>\n                    </ForceSuccess>\n                    <Sequence>\n                        <Action ID=\"RotateToRelocalize\"/>\n                        <Action ID=\"SaveTimestamp\" timestamp=\"{timestamp}\"/>\n                        <SetBlackboard name=\"SetThirdStrike\" output_key=\"rtabmap_strike\" value=\"3\"/>\n                    </Sequence>\n                    <Sequence>\n                        <Fallback>\n                            <Condition ID=\"TimePassed\" duration=\"60\" timestamp=\"{timestamp}\"/>\n                            <ForceFailure>\n                                <Action ID=\"RotateToRelocalize\"/>\n                            </ForceFailure>\n                        </Fallback>\n                        <Action ID=\"ROSParamToBlackboard\" entry=\"{localization_msg}\" param=\"localization_lost\"/>\n                        <IfThenElse name=\"IfSuccesfulReset\">\n                            <Action ID=\"CallSupervisor\" message=\"{localization_msg}\"/>\n                            <SetBlackboard name=\"ResetStrike\" output_key=\"rtabmap_strike\" value=\"0\"/>\n                            <SetBlackboard name=\"SetFourthStrike\" output_key=\"rtabmap_strike\" value=\"0\"/>\n                        </IfThenElse>\n                    </Sequence>\n                    <AlwaysSuccess/>\n                </Switch4>\n            </BlackboardCheckString>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"RestartNode\">\n        <BlackboardCheckString name=\"CheckIfError\" return_on_mismatch=\"FAILURE\" value_A=\"{status}\" value_B=\"ERROR\">\n            <Sequence>\n                <Action ID=\"GroupFromKey\" group=\"{group}\" key=\"{key}\"/>\n                <Fallback>\n                    <Condition ID=\"GroupNotBlocked\" blocked_groups=\"{blocked_groups}\" group=\"{group}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ROSOut\" level=\"INFO\" msg=\"Group still blocked. Restart process skipped.\" throttle_period=\"0\"/>\n                    </ForceFailure>\n                </Fallback>\n                <Fallback>\n                    <Sequence name=\"KilllSequence\">\n                        <Action ID=\"KillNodeFromGroup\" group=\"{group}\" kill_node=\"{kill_node}\"/>\n                        <Action ID=\"KillROSNode\" node=\"{kill_node}\"/>\n                    </Sequence>\n                    <Sequence name=\"LaunchSequence\">\n                        <Action ID=\"LaunchFileFromGroup\" group=\"{group}\" launch_file=\"{launch_file}\" pkg=\"{pkg}\"/>\n                        <Action ID=\"StartLaunchFile\" blocked_groups=\"{blocked_groups}\" group_block=\"{group}\" launch_file=\"{launch_file}\" pkg=\"{pkg}\"/>\n                        <Delay delay_msec=\"500\">\n                            <AlwaysSuccess/>\n                        </Delay>\n                        <Action ID=\"ROSOut\" level=\"INFO\" msg=\"Launch file started\" throttle_period=\"0\"/>\n                    </Sequence>\n                </Fallback>\n            </Sequence>\n        </BlackboardCheckString>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CallSupervisor\">\n            <input_port name=\"message\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"Charging\"/>\n        <SubTree ID=\"ConfigureMonitoring\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n            <input_port default=\"rtabmap_strike\" name=\"rtabmap_strike\"/>\n        </SubTree>\n        <Condition ID=\"CpuMonitor\">\n            <input_port name=\"description\"/>\n        </Condition>\n        <Action ID=\"DeleteStatus\">\n            <input_port name=\"key\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"ErrorIsNew\">\n            <input_port name=\"description\" type=\"std::string\"/>\n            <input_port name=\"key\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"FacialExpression\">\n            <input_port name=\"duration\" type=\"double\"/>\n            <input_port name=\"expression\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"GroupFromKey\">\n            <output_port name=\"group\" type=\"std::string\"/>\n            <input_port name=\"key\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"GroupFromTopic\">\n            <output_port name=\"group\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Condition ID=\"GroupNotBlocked\">\n            <input_port name=\"blocked_groups\" type=\"std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, ros::Time, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, ros::Time&gt; &gt; &gt;\"/>\n            <input_port name=\"group\" type=\"std::string\"/>\n        </Condition>\n        <Action ID=\"KillNodeFromGroup\">\n            <input_port name=\"group\" type=\"std::string\"/>\n            <output_port name=\"kill_node\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"KillROSNode\">\n            <input_port name=\"node\" type=\"std::string\"/>\n        </Action>\n        <SubTree ID=\"KillRemainingNodes\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n            <input_port name=\"parameter_set\"/>\n        </SubTree>\n        <Action ID=\"LaunchFileFromGroup\">\n            <input_port name=\"group\" type=\"std::string\"/>\n            <output_port name=\"launch_file\" type=\"std::string\"/>\n            <output_port name=\"pkg\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"Monitoring\">\n            <inout_port name=\"blocked_groups\" type=\"std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, ros::Time, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, ros::Time&gt; &gt; &gt;\"/>\n            <output_port name=\"description\" type=\"std::string\"/>\n            <output_port name=\"error_level\" type=\"double\"/>\n            <output_port name=\"key\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"MonitoringReconfigured\"/>\n        <Condition ID=\"MoveBaseMonitor\">\n            <input_port name=\"description\" type=\"std::string\"/>\n        </Condition>\n        <Condition ID=\"NTPMonitor\">\n            <input_port name=\"description\"/>\n        </Condition>\n        <Condition ID=\"NodeMonitor\">\n            <input_port name=\"description\" type=\"std::string\"/>\n        </Condition>\n        <Condition ID=\"NwMonitor\">\n            <input_port name=\"description\"/>\n        </Condition>\n        <SubTree ID=\"ProcessStatus\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n            <input_port default=\"desc\" name=\"desc\"/>\n            <input_port default=\"err\" name=\"err\"/>\n            <input_port default=\"key\" name=\"key\"/>\n            <output_port default=\"status\" name=\"status\"/>\n        </SubTree>\n        <Action ID=\"ROSOut\">\n            <input_port name=\"level\" type=\"std::string\"/>\n            <input_port name=\"msg\" type=\"std::string\"/>\n            <input_port name=\"throttle_period\" type=\"int\"/>\n        </Action>\n        <Action ID=\"ROSParamToBlackboard\">\n            <output_port name=\"entry\" type=\"std::string\"/>\n            <input_port name=\"param\" type=\"std::string\"/>\n        </Action>\n        <SubTree ID=\"RTABMapHandling\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n            <input_port default=\"key\" name=\"key\"/>\n            <input_port default=\"rtabmap_strike\" name=\"rtabmap_strike\"/>\n            <input_port default=\"status\" name=\"status\"/>\n        </SubTree>\n        <Condition ID=\"RTABMapMonitor\">\n            <input_port name=\"description\" type=\"std::string\"/>\n        </Condition>\n        <Condition ID=\"RamMonitor\">\n            <input_port name=\"description\"/>\n        </Condition>\n        <Action ID=\"ReconfigureMonitoring\">\n            <input_port name=\"parameter_set\" type=\"std::string\"/>\n            <output_port name=\"parameter_set_out\" type=\"std::string\"/>\n        </Action>\n        <SubTree ID=\"RestartNode\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n            <input_port default=\"blocked_groups\" name=\"blocked_groups\"/>\n            <input_port default=\"desc\" name=\"desc\"/>\n            <input_port default=\"key\" name=\"key\"/>\n            <input_port default=\"status\" name=\"status\"/>\n        </SubTree>\n        <Action ID=\"RotateToRelocalize\"/>\n        <Action ID=\"SaveTimestamp\">\n            <output_port name=\"timestamp\" type=\"double\"/>\n        </Action>\n        <Action ID=\"SendMessage\">\n            <input_port name=\"message\">Message to send</input_port>\n            <input_port default=\"TELEGRAM\" name=\"service\">Service to use. Can be {EMAIL, TELEGRAM}</input_port>\n        </Action>\n        <Action ID=\"SetDelayAfterLaunch\">\n            <output_port default=\"{delay}\" name=\"delay\"/>\n            <input_port default=\"{launch_file}\" name=\"launch_file\"/>\n        </Action>\n        <Action ID=\"SetKillGroups\">\n            <output_port name=\"curr_kill_group\" type=\"std::string\"/>\n            <input_port name=\"parameter_set\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"text\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"StartLaunchFile\">\n            <inout_port name=\"blocked_groups\" type=\"std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, ros::Time, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, ros::Time&gt; &gt; &gt;\"/>\n            <input_port name=\"group_block\" type=\"std::string\"/>\n            <input_port name=\"launch_file\" type=\"std::string\"/>\n            <input_port name=\"pkg\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"StartLaunchFiles\">\n            <output_port name=\"launch_file\"/>\n            <output_port name=\"pkg\"/>\n        </Action>\n        <Condition ID=\"StatMonitor\">\n            <input_port name=\"description\"/>\n        </Condition>\n        <Condition ID=\"StatusError\">\n            <input_port name=\"description\" type=\"std::string\"/>\n            <input_port name=\"error_level\" type=\"double\"/>\n            <input_port name=\"key\" type=\"std::string\"/>\n        </Condition>\n        <Condition ID=\"StatusInfo\">\n            <input_port name=\"description\" type=\"std::string\"/>\n            <input_port name=\"error_level\" type=\"double\"/>\n            <input_port name=\"key\" type=\"std::string\"/>\n        </Condition>\n        <Action ID=\"StatusToParamServer\">\n            <input_port name=\"description\" type=\"std::string\"/>\n            <input_port name=\"key\" type=\"std::string\"/>\n            <input_port name=\"rewrite_stamp\" type=\"bool\"/>\n        </Action>\n        <Condition ID=\"StatusWarn\">\n            <input_port name=\"description\" type=\"std::string\"/>\n            <input_port name=\"error_level\" type=\"double\"/>\n            <input_port name=\"key\" type=\"std::string\"/>\n        </Condition>\n        <Condition ID=\"TimePassed\">\n            <input_port name=\"duration\" type=\"double\"/>\n            <input_port name=\"timestamp\" type=\"double\"/>\n        </Condition>\n        <Condition ID=\"TopicMonitor\">\n            <input_port name=\"description\"/>\n        </Condition>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic peg insertion task. The robot is programmed to perform a series of actions based on sensory input and predefined conditions. \n\nThe main sequence involves checking the position of the end effector (EE) in relation to a threshold, followed by a series of conditional checks for goal positions and motion configurations. If the initial peg insertion check fails, the robot performs a search motion. If successful, it proceeds with the peg insertion process.\n\nAdditionally, there are sequences for traversing and configuring the motion of the robot's manipulator arm based on various thresholds and goal positions. These sequences involve setting sinusoidal motion parameters and defining goals for the manipulator arm.\n\nOverall, the behavior tree orchestrates the robotic peg insertion task by coordinating the robot's movements, sensor-based decision-making, and manipulation of the peg based on predefined criteria and environmental feedback.",
        "output": "<root main_tree_to_execute = \"PegTree\" >\n    <BehaviorTree ID=\"PegTree\">\n    <ReactiveFallback name=\"root_sequence\">\n        <ReactiveSequence name=\"peg_insertion_check\">\n            <EEYThreshold   name=\"ee_y_threshold\" threshold=\"{y_threshold}\" ee_y=\"{ee_y}\" above=\"false\"/>\n            <ReactiveFallback name=\"peg_insertion\">\n                <ReactiveSequence name=\"goal_condition\">\n                    <EEPositionDistance name=\"goal_check\"\n                        threshold=\"0.05\"\n                        target_x=\"-0.6\"\n                        target_y=\"0.0\"\n                        target_z=\"0.64\"\n                        ee_x=\"{ee_x}\"\n                        ee_y=\"{ee_y}\"\n                        ee_z=\"{ee_z}\"/>\n                    <Parallel name=\"mg_config_goal_and_check\" success_threshold=\"1\" failure_threshold=\"1\">\n                        <SetMGSin   name=\"mg_sinus\"\n                            mp_ampl=\"0\"\n                            mp_freq=\"0\"\n                            mg_ampl=\"{mg_ampl}\"\n                            mg_freq=\"{mg_freq}\"/>\n                        <SetMGGoal   name=\"mg_goal1\"\n                            mp_param_x=\"-0.6\"\n                            mp_param_y=\"0.0\"\n                            mp_param_z=\"0.73\"\n                            mg_trans_x=\"{mg_trans_x}\"\n                            mg_trans_y=\"{mg_trans_y}\"\n                            mg_trans_z=\"{mg_trans_z}\"/>\n                        <EEPositionDistance name=\"goal_check\"\n                            threshold=\"0.05\"\n                            target_x=\"-0.6\"\n                            target_y=\"0.0\"\n                            target_z=\"0.64\"\n                            ee_x=\"{ee_x}\"\n                            ee_y=\"{ee_y}\"\n                            ee_z=\"{ee_z}\"/>\n                    </Parallel>\n                </ReactiveSequence>\n                <ReactiveSequence name=\"search_motion\">\n                    <EEZThreshold   name=\"ee_z_threshold\" threshold=\"{z_peg_threshold}\" ee_z=\"{ee_z}\" above=\"false\"/>\n                        <SetMGSin   name=\"mg_sinus\"\n                            mp_ampl=\"{mp_ampl}\"\n                            mp_freq=\"{mp_freq}\"\n                            mg_ampl=\"{mg_ampl}\"\n                            mg_freq=\"{mg_freq}\"/>\n                </ReactiveSequence>\n                <Parallel name=\"mg_config\" success_threshold=\"1\" failure_threshold=\"1\">\n                    <SetMGSin   name=\"mg_sinus\"\n                        mp_ampl=\"0\"\n                        mp_freq=\"0\"\n                        mg_ampl=\"{mg_ampl}\"\n                        mg_freq=\"{mg_freq}\"/>\n                    <SetMGGoal   name=\"mg_goal1\"\n                        mp_param_x=\"{mp_3_x}\"\n                        mp_param_y=\"{mp_3_y}\"\n                        mp_param_z=\"{mp_3_z}\"\n                        mg_trans_x=\"{mg_trans_x}\"\n                        mg_trans_y=\"{mg_trans_y}\"\n                        mg_trans_z=\"{mg_trans_z}\"/>\n                </Parallel>\n            </ReactiveFallback>\n        </ReactiveSequence>\n        <ReactiveSequence name=\"2-traverse\">\n            <EEZThreshold   name=\"ee_z_threshold\" threshold=\"{z_threshold}\" ee_z=\"{ee_z}\" above=\"true\"/>\n            <Parallel name=\"mg_config\" success_threshold=\"1\" failure_threshold=\"1\">\n                <SetMGSin   name=\"mg_sinus\"\n                        mp_ampl=\"0\"\n                        mp_freq=\"0\"\n                        mg_ampl=\"{mg_ampl}\"\n                        mg_freq=\"{mg_freq}\"/>\n                <SetMGGoal   name=\"mg_goal2\"\n                    mp_param_x=\"{mp_2_x}\"\n                    mp_param_y=\"{mp_2_y}\"\n                    mp_param_z=\"{mp_2_z}\"\n                    mg_trans_x=\"{mg_trans_x}\"\n                    mg_trans_y=\"{mg_trans_y}\"\n                    mg_trans_z=\"{mg_trans_z}\"/>\n            </Parallel>\n        </ReactiveSequence>\n        <Parallel name=\"mg_config\" success_threshold=\"1\" failure_threshold=\"1\">\n                <SetMGSin   name=\"mg_sinus\"\n                    mp_ampl=\"0\"\n                    mp_freq=\"0\"\n                    mg_ampl=\"{mg_ampl}\"\n                    mg_freq=\"{mg_freq}\"/>\n                <SetMGGoal   name=\"mg_goal1\"\n                    mp_param_x=\"{mp_1_x}\"\n                    mp_param_y=\"{mp_1_y}\"\n                    mp_param_z=\"{mp_1_z}\"\n                    mg_trans_x=\"{mg_trans_x}\"\n                    mg_trans_y=\"{mg_trans_y}\"\n                    mg_trans_z=\"{mg_trans_z}\"/>\n            </Parallel>\n    </ReactiveFallback>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's task of visiting multiple mineral samples. For each sample in the list, it logs the movement, resets the mineral deposit tracker, retrieves the sample's pose, and then navigates towards the sample using a path planning algorithm. While moving, it blinks a light to indicate activity. Once at the sample, it blinks the light again before moving on to the next sample. After visiting all samples, it blinks the light once more.\n\nIn summary, the behavior tree coordinates the robot's movement between mineral samples, ensuring it blinks a light during navigation and upon reaching each sample. This allows for efficient and organized exploration of the mineral samples.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <BehaviorTree ID=\"BlinkLight\">\n        <Sequence>\n            <SetLightState state=\"true\" />\n            <Delay delay_msec=\"500\">\n                <SetLightState state=\"false\" />\n            </Delay>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <ForEachMineralSample samples_list=\"{mineral_samples}\" current_sample=\"{current_sample}\">\n                <Sequence>\n                    <Log message=\"Moving to next sample...\" />\n                    <ResetMineralDepositTracker sample=\"{current_sample}\" service_name=\"/mineral_deposit_tracker/reset\" />\n                    <GetSamplePose sample=\"{current_sample}\" pose=\"{sample_pose}\" />\n                    <PipelineSequence>\n                        <RateController hz=\"1.0\">\n                            <Sequence>\n                                <GoalUpdater input_goal=\"{sample_pose}\" output_goal=\"{updated_goal}\">\n                                    <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\" />\n                                </GoalUpdater>\n                                <TruncatePath distance=\"1.0\" input_path=\"{path}\" output_path=\"{truncated_path}\" />\n                            </Sequence>\n                        </RateController>\n                        <WhileDoElse>\n                            <GoalReached goal=\"{updated_goal}\" />\n                            <AlwaysSuccess />\n                            <KeepRunningUntilFailure>\n                                <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\" />\n                            </KeepRunningUntilFailure>\n                        </WhileDoElse>\n                    </PipelineSequence>\n                    <Log message=\"At sample!\" />\n                    <SubTree ID=\"BlinkLight\" __shared_blackboard=\"true\" />\n                </Sequence>\n            </ForEachMineralSample>\n            <Log message=\"All samples complete\" />\n            <SubTree ID=\"BlinkLight\" __shared_blackboard=\"true\" />\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a virtual character, managing its needs and tasks. The main tree \"MainTree\" prioritizes addressing the character's basic needs like hunger, thirst, and sleep before assigning it various jobs.\n\nWhen the character is hungry, thirsty, or sleepy, it will execute the corresponding sub-tree to find food, drink, or rest. If none of these needs are pressing, it will proceed to perform assigned jobs such as working at a market stall or leaving the map.\n\nEach specific need or job is represented by a separate behavior tree, with sequences of actions tailored to address the particular requirement. For example, the \"Hunger\" tree includes finding food, moving, picking up items, and eating, while the \"JobStandard\" tree encompasses initializing the job, claiming items, finding tools, and performing work tasks.\n\nOverall, the behavior tree ensures that the character attends to its essential needs first before fulfilling its designated responsibilities, creating a balanced and efficient decision-making process for the",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Hunger\">\n        <SequenceStar name=\"Hunger\">\n            <FallbackStar>\n                <Sequence>\n                    <Condition ID=\"IsHungry\"/>\n                    <Action ID=\"FindFood\"/>\n                </Sequence>\n            </FallbackStar>\n            <Action ID=\"Move\"/>\n            <Action ID=\"PickUpItem\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"FindDining\"/>\n                    <Action ID=\"Move\"/>\n                </SequenceStar>\n            </ForceSuccess>\n            <Action ID=\"Eat\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobStandard\">\n        <SequenceStar name=\"StandardJobs\">\n            <Action ID=\"InitJob\"/>\n            <Action ID=\"ClaimItems\"/>\n            <Action ID=\"FindTool\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"EquipTool\"/>\n            <RetryUntilSuccesful num_attempts=\"20\">\n                <Inverter>\n                    <SequenceStar>\n                        <Inverter>\n                            <Condition ID=\"AllItemsInPlaceForJob\"/>\n                        </Inverter>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"PickUpItem\"/>\n                        <Action ID=\"GetItemDropPosition\"/>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"DropItem\"/>\n                    </SequenceStar>\n                </Inverter>\n            </RetryUntilSuccesful>\n            <Action ID=\"GetWorkPosition\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"Work\"/>\n            <Action ID=\"FinishJob\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Jobs\">\n        <FallbackStar>\n            <SequenceStar name=\"Leave\">\n                <Condition ID=\"IsTimeToLeave\"/>\n                <Action ID=\"GetExitPosition\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"LeaveMap\"/>\n            </SequenceStar>\n            <SequenceStar name=\"WorkAtMarketStall\">\n                <Action ID=\"GetMarketStallPosition\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"Trade\"/>\n            </SequenceStar>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <FallbackStar name=\"GnomeTrader\">\n            <FallbackStar name=\"Needs\">\n                <SubTree ID=\"Hunger\"/>\n                <SubTree ID=\"Thirst\"/>\n                <SubTree ID=\"Sleepy\"/>\n            </FallbackStar>\n            <SubTree ID=\"Jobs\"/>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Sleepy\">\n        <SequenceStar name=\"Sleep\">\n            <Condition ID=\"IsSleepy\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"FindBed\"/>\n                    <Action ID=\"Move\"/>\n                </SequenceStar>\n            </ForceSuccess>\n            <Action ID=\"Sleep\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Thirst\">\n        <SequenceStar name=\"Thirst\">\n            <FallbackStar>\n                <Sequence>\n                    <Condition ID=\"IsThirsty\"/>\n                    <Action ID=\"FindDrink\"/>\n                </Sequence>\n            </FallbackStar>\n            <Action ID=\"Move\"/>\n            <Action ID=\"PickUpItem\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"FindDining\"/>\n                    <Action ID=\"Move\"/>\n                </SequenceStar>\n            </ForceSuccess>\n            <Action ID=\"Drink\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Condition ID=\"AllItemsInPlaceForJob\"/>\n        <Action ID=\"ButcherAnimal\"/>\n        <Action ID=\"ClaimItems\"/>\n        <Action ID=\"Drink\"/>\n        <Action ID=\"DropItem\"/>\n        <Action ID=\"Eat\"/>\n        <Action ID=\"EquipTool\"/>\n        <Action ID=\"FindBed\"/>\n        <Action ID=\"FindDrink\"/>\n        <Action ID=\"FindFood\"/>\n        <Action ID=\"FindDining\"/>\n        <Action ID=\"FindTool\"/>\n        <Action ID=\"FinishJob\"/>\n        <Action ID=\"GetExitPosition\"/>\n        <Action ID=\"GetItemDropPosition\"/>\n        <Action ID=\"GetJob\"/>\n        <Action ID=\"GetMarketStallPosition\"/>\n        <Action ID=\"GetWorkPosition\"/>\n        <Action ID=\"GrabAnimal\"/>\n        <Action ID=\"HarvestAnimal\"/>\n        <SubTree ID=\"Hunger\"/>\n        <Action ID=\"InitAnimalJob\"/>\n        <Action ID=\"InitButcherJob\"/>\n        <Action ID=\"InitJob\"/>\n        <Condition ID=\"IsButcherJob\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsSleepy\"/>\n        <Condition ID=\"IsThirsty\"/>\n        <Condition ID=\"IsTimeToLeave\"/>\n        <Condition ID=\"IsVeryHungry\"/>\n        <Condition ID=\"IsVeryThirsty\"/>\n        <SubTree ID=\"JobStandard\"/>\n        <SubTree ID=\"Jobs\"/>\n        <Action ID=\"LeaveMap\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"PickUpItem\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"ReleaseAnimal\"/>\n        <Action ID=\"Sleep\"/>\n        <SubTree ID=\"Sleepy\"/>\n        <SubTree ID=\"Thirst\"/>\n        <Action ID=\"Trade\"/>\n        <Action ID=\"Work\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's interactions with a human player, offering various games and responding to the player's actions. It begins by initializing variables and then continuously monitors for the presence of a person or the wake word \"Hey Elsa bot.\" Upon detection, it greets the person and presents a menu of games to play.\n\nThe available games include \"Robot Hide and Seek,\" \"Robot Find numbers/shapes game,\" and \"Robot Says game.\" The robot interacts with the player through speech, gestures, and pose tracking, adapting its behavior based on the player's responses and movements.\n\nThe behavior tree also handles game setup, such as initializing search locations for hide and seek, setting up game configurations, and prompting the player for challenging modes. Additionally, it manages the termination of interactions, including bidding farewell and stopping game sessions upon the player's request.\n\nOverall, the behavior tree enables the robot to engage in interactive and entertaining activities with the player, enhancing the user experience through responsive and adaptive behaviors.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\n\t<BehaviorTree ID=\"Init\">\n\t\t<Sequence>\n\t\t\t<SetBlackboard output_key=\"exit_key\" value=\"0\" />\n\t\t\t<SetBlackboard output_key=\"stop_key\" value=\"0\" />\n\t\t\t<SetBlackboard output_key=\"do_greeting\" value=\"0\" />\n\t\t\t<SetBlackboard output_key=\"do_menu\" value=\"0\" />\n\t\t\t<SetBlackboard output_key=\"person_detected\" value=\"0\" />\n\t\t</Sequence>\n\t</BehaviorTree>\n\n\t<BehaviorTree ID=\"Terminate\">\n\t\t<Sequence>\n\t\t\t<TextToSpeechActionClient msg=\"Goodbye (player)\" />\n\t\t</Sequence>\n\t</BehaviorTree>\n\n\t<BehaviorTree ID=\"Greet\">\n\t\t<Sequence>\n\t\t\t<TextToSpeechActionClient msg=\"Hi there (player)\" />\n\t\t\t<Delay delay_msec=\"500\">\n\t\t\t\t<SmileAction level=\"3\" duration_ms=\"2000\" />\n\t\t\t</Delay>\n\t\t\t<Delay delay_msec=\"1000\">\n\t\t\t\t<SmileAction level=\"0\" duration_ms=\"1\" />\n\t\t\t</Delay>\n\t\t</Sequence>\n\t</BehaviorTree>\n\n  <!--  Robot Find numbers/shapes game -->\n\t<BehaviorTree ID=\"RobotFind\">\n\t\t<Sequence>\n\t\t\t<PoseDetectionControlAction enable=\"true\" />\n\t\t\t<AntennaAction rate=\"5\" intensity=\"10\" left_blink_pattern=\"1100\" right_blink_pattern=\"0011\" />\n      \t\t<!-- Only use head tracking -->\n\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t<!-- Set challenging mode which just randomly orders the numbers/shapes -->\n\t\t\t<SetBlackboard output_key=\"challenging\" value=\"1\" />\n\n\t\t\t<!-- Or Prompt for challenging mode -->\n\t\t\t<!--\n\t\t\t<TextToSpeechActionClient msg=\"Do you want to play the more challenging version?\" />\n\t\t\t<SpeechToTextActionClient text=\"{said}\" />\n\t\t\t<ForceSuccess>\n\t\t\t\t<Sequence>\n\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*(yes|yeah|okay|ok|sure).*\" />\n\t\t\t\t<TextToSpeechActionClient msg=\"Ok, we will play the challenging version.\" />\n\t\t\t\t<SetBlackboard output_key=\"challenging\" value=\"1\" />\n\t\t\t\t</Sequence>\n\t\t\t</ForceSuccess>\n\t\t\t-->\n\n\t\t\t<!-- Spin a bit to get better localized in the case the initial pose was just set -->\n\t\t\t<TextToSpeechActionClient\n\t\t\t\tmsg=\"Hold on while I check my location.\" />\n\t\t\t<RobotSpin angle=\"-180\" velocity=\"0.4\" />\n\t\t\t<RobotSpin angle=\"180\" velocity=\"0.4\" />\n\n      \t\t<!-- Read the json setup for this game -->\n\t\t\t<RobotFindInitAction game_file=\"robot_find.json\" object_type=\"shapes\" random_order=\"{challenging}\"\n\t\t\t\tneeds_init=\"{needs_init}\" robot_pose=\"{robot_pose}\" />\n\n\t\t\t<!-- Prompt for game setup if already setup -->\n\t\t\t<!-- <ForceSuccess> <Sequence> <BlackboardCheckInt value_A=\"{needs_init}\" value_B=\"0\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t<Sequence> <TextToSpeechActionClient msg=\"Do you want to setup the game?\" /> <SpeechToTextActionClient text=\"{said}\" /> <TextCompareAction\n\t\t\t\ttext=\"{said}\" ck_for=\".*(yes|yeah|okay|ok|sure).*\" /> <SetBlackboard output_key=\"needs_init\" value=\"1\" /> </Sequence>\n\t\t\t\t</BlackboardCheckInt> </Sequence> </ForceSuccess> -->\n\n\t\t\t<Fallback>\n\t\t\t\t<!-- Perform initialization of the number locations if not already specified. After this finishes you will need to start\n\t\t\t\t\tthe game again, and it will use the initialized game values. -->\n\t\t\t\t<BlackboardCheckInt value_A=\"{needs_init}\" value_B=\"1\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"1\" />\n\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\tmsg=\"Game setup. I will ask you to stand at each of the locations.  Put both hands on your hips when you arrive at each location to continue.\" />\n\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\tmsg=\"Please send in the middle of the game. After the robot aligns to you, put both hands on your hips.\" />\n\t\t\t\t\t\t\t\t<RetryUntilSuccesful num_attempts=\"20\">\n\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2000\">\n\t\t\t\t\t\t\t\t\t\t<HumanPoseDetect expected_pose_left=\"OnHip\" expected_pose_right=\"OnHip\" pose_lr_check=\"both\"\n\t\t\t\t\t\t\t\t\t\t\tdetected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\"\n\t\t\t\t\t\t\t\t\t\t\tpose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t</RetryUntilSuccesful>\n\t\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t</ForceSuccess>\n\n\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<RobotFindNextStepAction item_name=\"{item_name}\" />\n\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Please stand on \" msg2=\"{item_name}\" />\n\t\t\t\t\t\t\t\t\t<RetryUntilSuccesful num_attempts=\"20\">\n\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2000\">\n\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t<HumanPoseDetect expected_pose_left=\"OnHip\" expected_pose_right=\"OnHip\" pose_lr_check=\"both\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tdetected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tpose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<ObjectLocationStatusAction x=\"{x}\" y=\"{y}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<RobotFindSetPositionAction x=\"{x}\" y=\"{y}\" />\n\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t</RetryUntilSuccesful>\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</KeepRunningUntilFailure>\n\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Finished setting up\" />\n\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t</Sequence>\n\t\t\t\t</BlackboardCheckInt>\n\n        \t\t<!-- Main game sequence -->\n\t\t\t\t<Sequence>\n\t\t\t\t  \t<!-- Move the saved location that faces the playing field -->\n          \t\t\t<Nav2Client goal=\"{robot_pose}\" />\n\t\t\t\t\t<TextToSpeechActionClient msg=\"I'm ready, let's play!\" />\n\n\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t  <!-- Get the next item to ask to stand on, prompt for that, and then keep checking for\n\t\t\t\t\t\t\t       the player to be close enough. Repeat for each item. -->\n\t\t\t\t\t\t\t\t<RobotFindNextStepAction item_name=\"{item_name}\" />\n\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Please stand on the \" msg2=\"{item_name}\" />\n\t\t\t\t\t\t\t\t<RetryUntilSuccesful num_attempts=\"200\">\n\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"1000\">\n\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t<ObjectLocationStatusAction x=\"{x}\" y=\"{y}\" />\n\t\t\t\t\t\t\t\t\t\t\t<RobotFindCheckStepAction x=\"{x}\" y=\"{y}\" />\n\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"0\" intensity=\"10\" left_blink_pattern=\"10\" right_blink_pattern=\"01\" />\n\t\t\t\t\t\t\t\t\t\t\t<GetRandomSelectionAction\n\t\t\t\t\t\t\t\t\t\t\t\toptions=\"Fabulous!|Good!|Nice!|Cool!|Super!|Great!|That's Great|Wonderful!|Fantastic!|Nice going!|Groovy baby|Splendid\"\n\t\t\t\t\t\t\t\t\t\t\t\tselected=\"{to_say}\" />\n\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"{to_say}\" />\n\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"5\" intensity=\"10\" left_blink_pattern=\"1100\" right_blink_pattern=\"0011\" />\n\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t</RetryUntilSuccesful>\n\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t</KeepRunningUntilFailure>\n\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t<TextToSpeechActionClient msg=\"Great Job! You finished the game!\" />\n\t\t\t\t\t<SmileAction level=\"3\" duration_ms=\"2000\" />\n\t\t\t\t\t<Delay delay_msec=\"2500\">\n\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t</Delay>\n\t\t\t\t</Sequence>\n\t\t\t</Fallback>\n\t\t</Sequence>\n\t</BehaviorTree>\n\n  \t<!-- Robot Say game -->\n\t<BehaviorTree ID=\"RobotSays\">\n\t\t<Sequence>\n\t\t\t<TextToSpeechActionClient\n\t\t\t\tmsg=\"Here's how to play robot says. I'll tell you where to put your hands and arms and then you try to do that. If you want to stop, just say hey Elsa bot.\" />\n\t\t\t<Delay delay_msec=\"3000\">\n\t\t\t\t<SetBlackboard output_key=\"break\" value=\"0\" />\n\t\t\t</Delay>\n\t\t\t<SetBlackboard output_key=\"say_fun_msg\" value=\"0\" />\n\t\t\t<RobotSaysInitAction easy=\"1\" level_start=\"0\" level_end=\"3\" />\n\t\t\t<ForceSuccess>\n\t\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t\t<BlackboardCheckInt value_A=\"{break}\" value_B=\"0\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t<Fallback>\n\n\t\t\t\t\t\t\t<!-- Main Game sequence -->\n\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t\t\t<!-- Get the next pose, blink the antenna LED corresponding to l/r and speak the pose request -->\n\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t<RobotSaysNextStepAction pose_name_l=\"{pose_name_l}\" pose_name_r=\"{pose_name_r}\"\n\t\t\t\t\t\t\t\t\t\t\tpose_lr_check=\"{pose_lr_check}\" pose_speech=\"{pose_speech}\" step_index=\"{step_index}\" />\n\n\t\t\t\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{pose_lr_check}\" ck_for=\"left\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"5\" intensity=\"10\" left_blink_pattern=\"110\" right_blink_pattern=\"00\" />\n\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{pose_lr_check}\" ck_for=\"right\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"5\" intensity=\"10\" left_blink_pattern=\"000\" right_blink_pattern=\"110\" />\n\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{pose_lr_check}\" ck_for=\"any\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"5\" intensity=\"10\" left_blink_pattern=\"1100\" right_blink_pattern=\"0011\" />\n\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t</ForceSuccess>\n\n\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"{pose_speech}\" />\n\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"pose_detected\" value=\"0\" />\n\n                    \t\t\t\t\t<!-- Give the player time to make the pose. -->\n\t\t\t\t\t\t\t\t\t\t<Timeout msec=\"60000\">\n\t\t\t\t\t\t\t\t\t\t\t<RetryUntilSuccesful num_attempts=\"60\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2000\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<!-- Check for the pose and react accordingly -->\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<!-- Check for wake word and if detected speak the game menu and get the response -->\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<WakeWordDetected since_sec=\"3.0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<HeadTiltAction angle=\"10\" dwell_ms=\"1500\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"Hey there. Say stop to end, say continue to keep playing, say next to go to the next pose. To change the level say level easy, level left, level right, level challenging, or level all.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SpeechToTextActionClient text=\"{said}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*stop.*\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Ok, let's stop playing this game.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"break\" value=\"1\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*easy.*\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Ok, let's play the easy level.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<RobotSaysInitAction level_start=\"0\" level_end=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*left.*\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Ok, let's play the left-hand level.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<RobotSaysInitAction level_start=\"1\" level_end=\"1\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*right.*\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Ok, let's play the right-hand level.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<RobotSaysInitAction level_start=\"2\" level_end=\"2\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*chal.*\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Ok, let's play the most challenging level.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<RobotSaysInitAction level_start=\"3\" level_end=\"3\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*all.*\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Ok, let's play all levels.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<RobotSaysInitAction level_start=\"0\" level_end=\"3\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*next.*\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Ok, let's continue with the next pose.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<!-- If pose detected, then voice praise and blink the LEDs excitedly -->\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<HumanPoseDetect expected_pose_left=\"{pose_name_l}\" expected_pose_right=\"{pose_name_r}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpose_lr_check=\"{pose_lr_check}\" detected_person=\"{detected_person}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpose_left_speech=\"{pose_left_speech}\" pose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"0\" intensity=\"10\" left_blink_pattern=\"10\" right_blink_pattern=\"01\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<GetRandomSelectionAction\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions=\"Fabulous!|Good!|Nice!|Cool!|Super!|Great!|That's Great|Wonderful!|Fantastic!|Nice going!|Groovy baby|Splendid\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselected=\"{to_say}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"{to_say}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"pose_detected\" value=\"1\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<!-- Check for a person still in view. Quit game if the player leaves. -->\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{detected_person}\" ck_for=\"no\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<HeadTiltAction angle=\"20\" dwell_ms=\"1500\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"5\" intensity=\"10\" left_blink_pattern=\"11110\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tright_blink_pattern=\"11110\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"Hey there! Where did you go?  I'll wait a while for you to come back.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<RetryUntilSuccesful num_attempts=\"10\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"3000\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<HumanPoseDetect expected_pose_left=\"{pose_name_l}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texpected_pose_right=\"{pose_name_r}\" pose_lr_check=\"presence\" detected_person=\"{detected_person}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpose_left_speech=\"{pose_left_speech}\" pose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Great, you're back.  Let's keep playing!\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</RetryUntilSuccesful>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{detected_person}\" ck_for=\"no\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"break\" value=\"1\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"stop_key\" value=\"1\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmsg=\"Oh well...maybe you will come back later.  Stopping game.\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<!-- Check for both hands above head which means to skip this pose -->\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<HumanPoseDetect expected_pose_left=\"Abovehead\" expected_pose_right=\"Abovehead\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpose_lr_check=\"both\" detected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Ok, let's continue with the next pose\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t</RetryUntilSuccesful>\n\t\t\t\t\t\t\t\t\t\t</Timeout>\n\n\t\t\t\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{pose_detected}\" value_B=\"0\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"0\" intensity=\"10\" left_blink_pattern=\"0\" right_blink_pattern=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t\t\t\t\t\t</ForceSuccess>\n\n\t\t\t\t\t\t\t\t\t\t<!-- Say a friendly \"I'm having fun message\" at most once per round -->\n\t\t\t\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t  \t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t  \t<!-- Enable after 4th step -->\n\t\t\t\t\t\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{step_index}\" value_B=\"3\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"say_fun_msg\" value=\"1\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t\t\t\t\t\t\t\t</ForceSuccess>\n\n\t\t\t\t\t\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{say_fun_msg}\" value_B=\"1\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<GetRandomSelectionAction\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toptions=\"I'm having fun playing with you (player)! I hope you're having fun too.|You're doing great!|nothing|nothing\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselected=\"{to_say}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2000\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Inverter>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{to_say}\" ck_for=\"nothing\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Inverter>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"1500\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<HeadTiltAction angle=\"20\" dwell_ms=\"1500\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"{to_say}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"1000\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"say_fun_msg\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t</BlackboardCheckInt>\n                      \t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t</ForceSuccess>\n\n\t\t\t\t\t\t\t\t\t</Sequence>\n\n\t\t\t\t\t\t\t\t\t<!-- This fallback is run if no more poses left for the current game round. In that case, try to get the next round\n\t\t\t\t\t\t\t\t\t\tif more left. If no more, voice the end-of-game message and exit game. -->\n\t\t\t\t\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"5\" intensity=\"10\" left_blink_pattern=\"1100\" right_blink_pattern=\"0011\" />\n\t\t\t\t\t\t\t\t\t\t\t<RobotSaysNextPassAction level_desc=\"{level_desc}\" />\n\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Let's play the next level, \" msg2=\"{level_desc}\" />\n\t\t\t\t\t\t\t\t\t\t\t<SmileAction level=\"3\" duration_ms=\"2000\" />\n\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2500\">\n\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t</Sequence>\n\n\t\t\t\t\t\t\t\t\t\t<!-- No more game passes, end of game. -->\n\t\t\t\t\t\t\t\t\t\t<ForceFailure>\n\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"You finished playing the game. Great job (player)!\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<SmileAction level=\"3\" duration_ms=\"2000\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2500\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t</ForceFailure>\n\t\t\t\t\t\t\t\t\t</Fallback>\n\n\t\t\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t</KeepRunningUntilFailure>\n\t\t\t</ForceSuccess>\n\t\t</Sequence>\n\t</BehaviorTree>\n\n  <!--  Robot Hide and Seek game -->\n\t<BehaviorTree ID=\"RobotSeek\">\n\t\t<KeepRunningUntilFailure>\n\t\t\t<Sequence>\n\t\t\t\t<TextToSpeechActionClient msg=\"Hold on while I get ready. \" />\n\t\t\t\t<PoseDetectionControlAction enable=\"1\" />\n\t\t\t\t<Nav2ClearGlobalCostMap />\n\t\t\t\t<!-- Load the search positions from the config json file.  This will calculate a path\n\t\t\t\t     to each location and determine the closet one to try first. -->\n\t\t\t\t<RobotSeekInitAction game_file=\"robot_seek_for_video.json\" />\n\t\t\t\t<TrackAction mode=\"None\" rate=\"2\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t<TextToSpeechActionClient msg=\"Let's play!\" />\n\t\t\t\t<TextToSpeechActionClient msg=\"I'll count to 10 while you go and hide.\" />\n\t\t\t\t<!-- Turn around and count to 10 -->\n\t\t\t\t<RobotSpin angle=\"180\" velocity=\"0.8\" />\n\t\t\t\t<TrackAction mode=\"LookDown\" rate=\"2\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t<AntennaAction rate=\"5\" intensity=\"10\" left_blink_pattern=\"10\" right_blink_pattern=\"10\" />\n\t\t\t\t<TextToSpeechActionClient msg=\"1,2,3,4,5,6,7,8,9,10! Ready or not here I come (player)!\" />\n\t\t\t\t<AntennaAction rate=\"5\" intensity=\"10\" left_blink_pattern=\"10\" right_blink_pattern=\"01\" />\n\t\t\t\t<TrackAction mode=\"Scan\" rate=\"2\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t<RobotSpin angle=\"-180\" velocity=\"0.8\" />\n\t\t\t\t<SetBlackboard output_key=\"found\" value=\"0\" />\n\t\t\t\t<ForceSuccess>\n\t\t\t\t\t<Fallback>\n\t\t\t\t\t  <!-- Go to each search location.  Search while moving and at the position -->\n\t\t\t\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t\t\t\t<ReactiveSequence>\n\t\t\t\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t\t\t<Inverter>\n\t\t\t\t\t\t\t\t\t  <!-- Both object detection and pose detection are used for best detection results.  -->\n\t\t\t\t\t\t\t\t\t\t<Fallback ID=\"Detection\">\n\t\t\t\t\t\t\t\t\t\t\t<ObjectDetectionAction class=\"person\" pose=\"detected_Pose\" min_confidence=\"0.85\" />\n\t\t\t\t\t\t\t\t\t\t\t<HumanPoseDetect pose_lr_check=\"presence\" min_points=\"12\" expected_pose_left=\"\"\n\t\t\t\t\t\t\t\t\t\t\t\texpected_pose_right=\"\" detected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\"\n\t\t\t\t\t\t\t\t\t\t\t\tpose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t\t\t\t</Inverter>\n\t\t\t\t\t\t\t\t\t<ForceFailure>\n\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"found\" value=\"1\" />\n\t\t\t\t\t\t\t\t\t</ForceFailure>\n\t\t\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<RobotSeekNextSearchPose next_goal=\"{next_goal}\" goal_speech=\"{goal_speech}\"\n\t\t\t\t\t\t\t\t\t\tspin_at_goal=\"{spin_at_goal}\" scan_at_goal=\"{scan_at_goal}\" />\n\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Scan\" rate=\"1\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t\t\t\t<SubTree ID=\"MoveRobot\" target=\"next_goal\" />\n\t\t\t\t\t\t\t\t\t<!-- TextToSpeechActionClient msg=\"{goal_speech}\" / -->\n\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Are you over here?\" />\n\n\t\t\t\t\t\t\t\t\t<!-- The config for each location specifies whether to turn around to search\n\t\t\t\t\t\t\t\t\t     or just move the head back and forth -->\n\t\t\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{spin_at_goal}\" value_B=\"1\" return_on_mismatch=\"SUCCESS\">\n\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Off\" rate=\"0\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t<RobotSpin angle=\"359\" velocity=\"0.5\" />\n\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{scan_at_goal}\" value_B=\"1\" return_on_mismatch=\"SUCCESS\">\n\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Scan\" rate=\"1\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t\t\t\t\t\t<!-- ScanWaitAction uses a BT Co routine which needs Boost but is not\n\t\t\t\t\t\t\t\t\t\t\t     build for ROS2 galactive.  Fix later if needed. -->\n\t\t\t\t\t\t\t\t\t\t\t<!-- ScanWaitAction / -->\n\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"I'm still looking for you, (player).\" />\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</ReactiveSequence>\n\t\t\t\t\t\t</KeepRunningUntilFailure>\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t  <!-- Say a message if player found -->\n\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{found}\" value_B=\"1\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"1\" turn_base=\"1\" />\n\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"0\" intensity=\"10\" left_blink_pattern=\"01\" right_blink_pattern=\"10\" />\n\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Yay, I found you (player)!\" />\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t</Fallback>\n\t\t\t\t</ForceSuccess>\n\t\t\t\t<!-- Say a message if player not found after search all locations -->\n\t\t\t\t<BlackboardCheckInt value_A=\"{found}\" value_B=\"0\" return_on_mismatch=\"SUCCESS\">\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"1\" turn_base=\"1\" />\n\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Come out come out where ever you are (player)!\" />\n\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t<Timeout msec=\"20000\">\n\t\t\t\t\t\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t\t\t\t\t\t<Inverter>\n\t\t\t\t\t\t\t\t\t\t<Fallback ID=\"Detection\">\n\t\t\t\t\t\t\t\t\t\t\t<ObjectDetectionAction class=\"person\" pose=\"detected_Pose\" min_confidence=\"0.85\" />\n\t\t\t\t\t\t\t\t\t\t\t<HumanPoseDetect pose_lr_check=\"presence\" min_points=\"12\" expected_pose_left=\"\"\n\t\t\t\t\t\t\t\t\t\t\t\texpected_pose_right=\"\" detected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\"\n\t\t\t\t\t\t\t\t\t\t\t\tpose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t\t\t\t</Inverter>\n\t\t\t\t\t\t\t\t</KeepRunningUntilFailure>\n\t\t\t\t\t\t\t</Timeout>\n\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t</Sequence>\n\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t<Sequence>\n\t\t\t\t\t<TextToSpeechActionClient msg=\"Would you like to play again?\" />\n\t\t\t\t\t<SpeechToTextActionClient text=\"{said}\" />\n\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*(yes|yeah|okay|ok|sure).*\" />\n\t\t\t\t</Sequence>\n\t\t\t</Sequence>\n\t\t</KeepRunningUntilFailure>\n\t</BehaviorTree>\n\n\t<BehaviorTree ID=\"MoveRobot\">\n\t\t<Sequence name=\"SetGoal\">\n\t\t\t<Nav2Client goal=\"{target}\" />\n\t\t</Sequence>\n\t</BehaviorTree>\n\n  <!-- Tree that asks player whether they want to play a certain game -->\n\t<BehaviorTree ID=\"AskGame\">\n\t\t<Sequence>\n\t\t\t<SetBlackboard output_key=\"result\" value=\"0\" />\n\t\t\t<RetryUntilSuccesful num_attempts=\"2\">\n\t\t\t\t<Sequence>\n\t\t\t\t\t<TextToSpeechActionClient msg=\"{game_name}\" />\n\t\t\t\t\t<SpeechToTextActionClient text=\"{said}\" />\n\t\t\t\t\t<Inverter>\n\t\t\t\t\t\t<ReactiveSequence>\n\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\"\" />\n\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"I'm sorry, but I didn't understand you.\" />\n\t\t\t\t\t\t</ReactiveSequence>\n\t\t\t\t\t</Inverter>\n\n\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t<ReactiveSequence>\n\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*(yes|yeah|okay|ok|sure).*\" />\n\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"result\" value=\"1\" />\n\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Great! Let's play!\" />\n\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t</ReactiveSequence>\n\t\t\t\t\t\t<ReactiveSequence>\n\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*(no|nope|nah).*\" />\n\t\t\t\t\t\t\t<!-- Will return success and end cause loop to finish -->\n\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t</ReactiveSequence>\n\t\t\t\t\t\t<ForceFailure>\n\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"I'm sorry, but I didn't understand you.\" />\n\t\t\t\t\t\t</ForceFailure>\n\t\t\t\t\t</Fallback>\n\t\t\t\t</Sequence>\n\t\t\t</RetryUntilSuccesful>\n\t\t\t<BlackboardCheckInt value_A=\"{result}\" value_B=\"1\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t</BlackboardCheckInt>\n\t\t</Sequence>\n\t</BehaviorTree>\n\n  <!-- Menu for selecting the game to play -->\n\t<BehaviorTree ID=\"ChooseAndPlayGame\">\n\t\t<Sequence>\n\t\t\t<SetBlackboard output_key=\"break\" value=\"0\" />\n\t\t\t<SetBlackboard output_key=\"first\" value=\"1\" />\n\t\t\t<RetryUntilSuccesful num_attempts=\"2\">\n\t\t\t\t<BlackboardCheckInt value_A=\"{break}\" value_B=\"0\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t<SetBlackboard output_key=\"game_name\" value=\"Do you want to play Robot Hide and Seek\" />\n\t\t\t\t\t\t\t<SubTree ID=\"AskGame\" game_name=\"game_name\" />\n\t\t\t\t\t\t\t<SubTree ID=\"RobotSeek\" stop_key=\"stop_key\" />\n\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"1\" />\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t<SetBlackboard output_key=\"game_name\" value=\"How about Robot Find\" />\n\t\t\t\t\t\t\t<SubTree ID=\"AskGame\" game_name=\"game_name\" />\n\t\t\t\t\t\t\t<SubTree ID=\"RobotFind\" stop_key=\"stop_key\" />\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t<SetBlackboard output_key=\"game_name\" value=\"How about Robot Says?\" />\n\t\t\t\t\t\t\t<SubTree ID=\"AskGame\" game_name=\"game_name\" />\n\t\t\t\t\t\t\t<SubTree ID=\"RobotSays\" stop_key=\"stop_key\" />\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{first}\" value_B=\"1\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"first\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Would you like to hear the list again (player)?\" />\n\t\t\t\t\t\t\t\t\t<SpeechToTextActionClient text=\"{said}\" />\n\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*(no|nope|nah).*\" />\n\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"break\" value=\"1\" />\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t</Fallback>\n\t\t\t\t</BlackboardCheckInt>\n\t\t\t</RetryUntilSuccesful>\n\t\t</Sequence>\n\t</BehaviorTree>\n\n  <!-- Main game menu asking whether to play a game -->\n\t<BehaviorTree ID=\"GameMenu\">\n\t\t<Sequence>\n\t\t\t<SetBlackboard output_key=\"stop_key\" value=\"0\" />\n\t\t\t<Repeat num_cycles=\"3\">\n\t\t\t\t<BlackboardCheckInt value_A=\"{stop_key}\" value_B=\"0\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<Fallback name=\"get_answer\">\n\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t<AntennaAction rate=\"5\" intensity=\"10\" left_blink_pattern=\"10\" right_blink_pattern=\"01\" />\n\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Would you like to play a game?\" />\n\t\t\t\t\t\t\t\t<SpeechToTextActionClient text=\"{said}\" />\n\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t</Fallback>\n\n\t\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\"\" />\n\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"I'm sorry, but I didn't hear you\" />\n\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*(yes|yeah|okay|ok|sure).*\" />\n\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Ok!\" />\n\t\t\t\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t\t<SubTree ID=\"ChooseAndPlayGame\" stop_key=\"stop_key\" />\n\t\t\t\t\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*(no|nope|nah).*\" />\n\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Ok, maybe we can play later.\" />\n\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"stop_key\" value=\"1\" />\n\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t<HeadTiltAction angle=\"20\" dwell_ms=\"1500\" />\n\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"I'm sorry, I didn't understand.\" />\n\t\t\t\t\t\t\t\t\t</Sequence>\n\n\t\t\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t</Sequence>\n\t\t\t\t</BlackboardCheckInt>\n\t\t\t</Repeat>\n\t\t</Sequence>\n\t</BehaviorTree>\n\n  <!-- Top level tree.  If person detected or the wakeword is spoken, say hi and do the game menu. -->\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n\t\t\t<SetBlackboard output_key=\"exit_key\" value=\"0\" />\n\t\t\t<SetBlackboard output_key=\"stop_key\" value=\"0\" />\n\t\t\t<SetBlackboard output_key=\"do_greeting\" value=\"0\" />\n\t\t\t<SetBlackboard output_key=\"do_menu\" value=\"0\" />\n\t\t\t<SetBlackboard output_key=\"person_detected\" value=\"0\" />\n\t\t\t<PoseDetectionControlAction enable=\"1\" />\n\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"1\" turn_base=\"1\" />\n\t\t\t<AntennaAction rate=\"5\" intensity=\"10\" left_blink_pattern=\"11110\" right_blink_pattern=\"11110\" />\n\n\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t<BlackboardCheckInt value_A=\"{exit_key}\" value_B=\"0\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t<Sequence>\n\n\t\t\t\t\t\t\t<!-- Update person detection status and enable greeting and menu if person now detected. Apply some hysteresis... -->\n\t\t\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{person_detected}\" value_B=\"0\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t<ObjectTrackerStatusAction ck_state=\"1\" min_duration=\"2\" />\n\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"person_detected\" value=\"1\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"do_greeting\" value=\"1\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"do_menu\" value=\"1\" />\n\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t<ObjectTrackerStatusAction ck_state=\"0\" min_duration=\"4\" />\n\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"person_detected\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t\t</Fallback>\n\n\t\t\t\t\t\t\t<!-- Update wake word detection and enable greeting and menu if heard -->\n\t\t\t\t\t\t\t<IfThenElse>\n\t\t\t\t\t\t\t\t<WakeWordDetected since_sec=\"4.0\" />\n\t\t\t\t\t\t\t\t<!-- Detected -->\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<AntennaAction rate=\"0\" intensity=\"10\" left_blink_pattern=\"01\" right_blink_pattern=\"10\" />\n\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"do_greeting\" value=\"1\" />\n\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"do_menu\" value=\"1\" />\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"1\" />\n\t\t\t\t\t\t\t</IfThenElse>\n\n\t\t\t\t\t\t\t<!-- Do the greeting and menu if a newly detected person, or the wake word heard -->\n\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{do_greeting}\" value_B=\"1\" return_on_mismatch=\"SUCCESS\">\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<SubTree ID=\"Greet\" />\n\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"do_greeting\" value=\"0\" />\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</BlackboardCheckInt>\n\n\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{do_menu}\" value_B=\"1\" return_on_mismatch=\"SUCCESS\">\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t\t\t<SubTree ID=\"GameMenu\" stop_key=\"stop_key\" />\n\t\t\t\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"do_menu\" value=\"0\" />\n\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"1\" turn_base=\"1\" />\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</BlackboardCheckInt>\n\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t</ForceSuccess>\n\t\t\t\t</BlackboardCheckInt>\n\t\t\t</KeepRunningUntilFailure>\n\t\t\t<SubTree ID=\"Terminate\" />\n\t\t</Sequence>\n\t</BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a scenario where a robot is directed to move towards three different goals (Goal_a, Goal_b, Goal_c) in a repeated sequence of 3 cycles. After setting the values for the goals, the robot sequentially moves towards each goal while capturing snapshots at each step. The \"MoveRobot\" behavior tree defines the movement action using the Nav2Client to reach the specified target.\n\nIn summary, the robot will execute the following steps:\n1. Set the values for Goal_a, Goal_b, and Goal_c.\n2. Repeat the following sequence 3 times:\n    a. Move towards Goal_a and capture a snapshot.\n    b. Move towards Goal_b and capture a snapshot.\n    c. Move towards Goal_c and capture a snapshot.\n\nThis behavior tree essentially orchestrates the robot's movement towards multiple goals in a predefined sequence, ensuring that it captures snapshots at each stage of the process.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"3\">\n            <Sequence>\n                <SetBlackboard output_key=\"Goal_a\" value=\"-0.579;-1.341;0.0;1.0\" />\n                <SetBlackboard output_key=\"Goal_b\" value=\"5.214;-1.533;0.0;1.0\" />\n                <SetBlackboard output_key=\"Goal_c\" value=\"-1.588;1.253;0.0;1.0\" />\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                    <SnapshotClient/>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                    <SnapshotClient/>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                    <SnapshotClient/>\n                </Sequence>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement in an environment. Initially, it clears the global cost map for navigation and initializes the robot's seeking action with multiple search poses. The robot then continuously seeks the next search pose until failure, where it moves to the next goal position, communicates the goal verbally, and repeats this process.\n\nIf we break down the sequence:\n1. Clearing the global cost map ensures that the robot has updated information about its surroundings for navigation.\n2. The robot is initialized to seek specific search poses in the environment.\n3. The robot continuously seeks the next search pose until unsuccessful, at which point it moves to the next goal position, communicates the goal verbally, and repeats the process.\n\nThis behavior tree essentially guides the robot through a series of predefined locations, ensuring it navigates to each location and communicates its actions effectively.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n\t\t\t<Nav2ClearGlobalCostMap />\n\t\t\t<RobotSeekInitAction\n\t\t\t\tsearch_poses=\"-4.3,-4,180.0;0.75,-3.7,206.0;0.71,-6.0,206.0;-4.7,-6.6,270.0;-6.0,-4.2,206.0;-6.4,-1.9,0.0;-8.0,1.5,90.0;-4.4,0.95,218.0\" />\n\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t<Sequence>\n\t\t\t\t\t<RobotSeekNextSearchPose next_goal=\"{next_goal}\" goal_speech=\"{goal_speech}\" />\n\t\t\t\t\t<SubTree ID=\"MoveRobot\" target=\"next_goal\" />\n\t\t\t\t\t<TextToSpeechActionClient msg=\"{goal_speech}\" />\n\t\t\t\t</Sequence>\n\t\t\t</KeepRunningUntilFailure>\n\t\t</Sequence>\n\t</BehaviorTree>\n\n\t<BehaviorTree ID=\"MoveRobot\">\n\t\t<Sequence name=\"SetGoal\">\n\t\t\t<Nav2Client goal=\"{target}\" />\n\t\t</Sequence>\n\t</BehaviorTree>\n</root>\n\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the task for a robot to perform specific actions in response to human poses. Initially, it sets the values for various pose-related parameters and then performs an action using the Antenna. Following this, it enters a loop where it continuously detects human poses until failure.\n\nWithin this loop, it first checks for a specific human pose and if successful, it executes a sequence of actions including adjusting the antenna, saving an image, providing speech output, and resetting the antenna. If unsuccessful, it waits for a brief period before reattempting the detection.\n\nIn summary, the behavior tree orchestrates the robot's responses to human poses by setting up pose-related parameters, performing actions based on detected poses, and handling the flow of the detection process.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n\t\t\t<Sequence>\n\t\t\t\t<SetBlackboard output_key=\"pose_name_l\" value=\"TouchingNeck\" />\n\t\t\t\t<SetBlackboard output_key=\"pose_name_r\" value=\"TouchingNeck\" />\n\t\t\t\t<SetBlackboard output_key=\"pose_lr_check\" value=\"any\" />\n\t\t\t\t<AntennaAction rate=\"0\" intensity=\"0\" left_blink_pattern=\"0\" right_blink_pattern=\"0\" />\n\t\t\t</Sequence>\n\n\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t<Sequence>\n\n\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t<HumanPoseDetect expected_pose_left=\"{pose_name_l}\" expected_pose_right=\"{pose_name_r}\" pose_lr_check=\"{pose_lr_check}\" detected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\" pose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t<AntennaAction rate=\"0\" intensity=\"10\" left_blink_pattern=\"10\" right_blink_pattern=\"10\" />\n\t\t\t\t\t\t\t<SaveImageAction filename=\"image#.jpg\" directory=\"/home/ubuntu/saved_images\" />\n\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Saved\" />\n\t\t\t\t\t\t\t<AntennaAction rate=\"0\" intensity=\"0\" left_blink_pattern=\"0\" right_blink_pattern=\"0\" />\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t</ForceSuccess>\n\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<Delay delay_msec=\"1000\">\n\t\t\t\t\t\t\t<SetBlackboard output_key=\"dummy\" value=\"0\" />\n\t\t\t\t\t\t</Delay>\n\t\t\t\t\t</Sequence>\n\t\t\t\t</Sequence>\n\n\t\t\t</KeepRunningUntilFailure>\n\t\t</Sequence>\n\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is a simple sequence of tasks for a robot. First, it calculates a goal position based on the input \"GoalPosition\" and then prints this target position. Next, it sets another goal position labeled as \"OtherGoal\" with the value \"-1;3\" and prints this new target position. This behavior tree essentially involves calculating, printing, and setting different goal positions for the robot to achieve.",
        "output": " <root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root\">\n            <CalculateGoal   goal=\"{GoalPosition}\" />\n            <PrintTarget     target=\"{GoalPosition}\" />\n            <SetBlackboard   output_key=\"OtherGoal\" value=\"-1;3\" />\n            <PrintTarget     target=\"{OtherGoal}\" />\n        </Sequence>\n     </BehaviorTree>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree instructs a robot to execute a sequence of actions. First, it is directed to approach object A and then proceed to approach object B. The tree does not include any handling for potential interruptions or alternative actions in case of failure. Therefore, the robot will simply follow the sequential order of approaching object A and then object B without deviation.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <ApproachObject name=\"action_A\" />\n            <ApproachObject name=\"action_B\" />\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robot's navigation by continuously replanning its global path after every 1 meter of movement. It utilizes a PipelineSequence consisting of two steps: DistanceController and FollowPath. The DistanceController triggers the computation of a new path to the goal pose using the GridBased planner whenever the robot has moved 1 meter, and then passes this path to the FollowPath step, which guides the robot along the newly computed path. This approach ensures that the robot dynamically adjusts its path as it progresses towards its goal, enabling it to adapt to changes in the environment or obstacles encountered during navigation.",
        "output": "<!--\n  This Behavior Tree replans the global path after every 1m.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <DistanceController distance=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </DistanceController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a decision-making process for an autonomous vehicle. The vehicle is programmed to perform various maneuvers based on environmental conditions and external commands.\n\nThe main behavior tree consists of multiple reactive sequences, each handling different driving scenarios such as pulling over, pulling out, side shifting, lane change, and avoidance. These sequences are executed based on the readiness and approval checks for each maneuver. If a specific condition is met, the corresponding action plan is executed.\n\nAdditionally, there are two sub-trees labeled \"a\" and \"b\", which handle specific aspects of the decision-making process related to lane changes and avoidance maneuvers. These sub-trees contain conditional checks and action plans for potential lane changes or avoidance actions based on approval and readiness criteria.\n\nOverall, the behavior tree orchestrates the vehicle's decision-making process by evaluating conditions and executing appropriate action plans for safe and efficient navigation in dynamic environments.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback>\n            <ReactiveSequence>\n                <Condition ID=\"PullOver_Request\"/>\n                <Condition ID=\"PullOver_Ready\"/>\n                <Action ID=\"PullOver_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"PullOut_Request\"/>\n                <Condition ID=\"PullOut_Ready\"/>\n                <Action ID=\"PullOut_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"SideShift_Request\"/>\n                <Condition ID=\"SideShift_Ready\"/>\n                <Action ID=\"SideShift_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"LaneChange_Request\"/>\n                <Fallback>\n                    <Condition ID=\"LaneChange_Ready\"/>\n                    <Condition ID=\"ForceLaneChange_ForceApproval\"/>\n                </Fallback>\n                <Action ID=\"LaneChange_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"Avoidance_Request\"/>\n                <Condition ID=\"Avoidance_Ready\"/>\n                <Action ID=\"Avoidance_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <Action ID=\"LaneFollowing_Plan\" output=\"{output}\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"a\">\n        <ReactiveFallback>\n            <Condition ID=\"LaneChange_CheckApproval\"/>\n            <KeepRunningUntilFailure>\n                <Action ID=\"LaneChange_PlanCandidate\" output=\"{output}\"/>\n            </KeepRunningUntilFailure>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"b\">\n        <ReactiveFallback>\n            <Condition ID=\"Avoidance_CheckApproval\"/>\n            <KeepRunningUntilFailure>\n                <Action ID=\"Avoidance_PlanCandidate\" output=\"{output}\"/>\n            </KeepRunningUntilFailure>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Condition ID=\"Avoidance_CheckApproval\"/>\n        <Action ID=\"Avoidance_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"Avoidance_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"Avoidance_Ready\"/>\n        <Condition ID=\"Avoidance_Request\"/>\n        <Condition ID=\"ExternalApproval\"/>\n        <Condition ID=\"ForceApproval\"/>\n        <Condition ID=\"ForceLaneChange_ForceApproval\"/>\n        <Condition ID=\"LaneChange_CheckApproval\"/>\n        <Action ID=\"LaneChange_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"LaneChange_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"LaneChange_Ready\"/>\n        <Condition ID=\"LaneChange_Request\"/>\n        <Action ID=\"LaneFollowing_Plan\">\n            <output_port name=\"output\" type=\"boost::optional&lt;autoware_planning_msgs::PathWithLaneId_&lt;std::allocator&lt;void&gt; &gt; &gt;\">desc</output_port>\n        </Action>\n        <Action ID=\"LaneFollowing_PlanCandidate\">\n            <output_port name=\"output_candidate\" type=\"boost::optional&lt;autoware_planning_msgs::PathWithLaneId_&lt;std::allocator&lt;void&gt; &gt; &gt;\">desc</output_port>\n        </Action>\n        <Condition ID=\"LaneFollowing_Ready\"/>\n        <Condition ID=\"LaneFollowing_Request\"/>\n        <Action ID=\"PullOut_Plan\">\n            <output_port name=\"output\"/>\n        </Action>\n        <Condition ID=\"PullOut_Ready\"/>\n        <Condition ID=\"PullOut_Request\"/>\n        <Action ID=\"PullOver_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"PullOver_Ready\"/>\n        <Condition ID=\"PullOver_Request\"/>\n        <Condition ID=\"SideShift_CheckApproval\"/>\n        <Action ID=\"SideShift_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"SideShift_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"SideShift_Ready\"/>\n        <Condition ID=\"SideShift_Request\"/>\n        <SubTree ID=\"SubTree\"/>\n        <SubTree ID=\"a\"/>\n        <SubTree ID=\"b\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the actions for a robot. Initially, it sets its initial pose and three goals (Goal_a, Goal_b, Goal_c). The robot then attempts to move towards each goal sequentially. If successful, it proceeds to the next goal. However, if it encounters an obstacle or cannot reach a goal, an alarm event LED is activated.\n\nIn summary, the robot's main task involves moving through a sequence of predefined locations. If any movement fails, an alarm is triggered.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SetBlackboard output_key=\"Initial_pose\" value=\"0.017;0.535;0.000\" />\n            <SetBlackboard output_key=\"Goal_a\" value=\"0.543;0.089;0.000\" />\n            <SetBlackboard output_key=\"Goal_b\" value=\"-0.898;-1.182;0.0\" />\n            <SetBlackboard output_key=\"Goal_c\" value=\"-1.364;-0.344;0.00\" />\n            <Fallback>\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Initial_pose\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                </Sequence>\n                <AlarmEventLED />\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <MoveBase goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robotic system. Initially, it retrieves a list of faces and selects the first face from the list. The robot then performs parallel tasks: it gazes at the selected face while also evaluating its position. If the face is within certain x and y thresholds, the robot moves its arms accordingly; otherwise, it defaults to a predefined arm position. After completing these actions, or if interrupted, the robot proceeds to a sequence called \"LowArms,\" which resets both arms to a home position.\n\nIn case of an error game state, another behavior tree is triggered. This involves the robot speaking in Portuguese, stating uncertainty about the game state, requesting assistance, and then waiting for 60 seconds.\n\nThe behavior tree is designed to handle complex interactions with the environment, including human interaction and error handling, while ensuring the robot's arms are appropriately positioned.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback>\n            <Sequence>\n                <Action ID=\"GetPoseArray\" name=\"GetFaceList\" pose_array=\"face_array\" topic=\"faces\"/>\n                <Action ID=\"SelectPose\" pose_array=\"{face_array}\" position_in_list=\"0\" pose_stamped=\"face\"/>\n                <Parallel threshold=\"2\">\n                    <Action action_name=\"gaze\" fixation_pose=\"{face}\" ID=\"GazeAtTarget\" frame_id=\"base_footprint\"/>\n                    <Fallback>\n                        <Sequence>\n                            <Action ID=\"SelectFieldFromPoseStamped\" output_val=\"x_thresh\" field=\"x\" pose_stamped=\"{face}\"/>\n                            <Condition ID=\"CompareDouble\" Condition=\"&lt;\" A=\"{x_thresh}\" B=\"1.0\"/>\n                            <ReactiveSequence>\n                                <Action ID=\"SelectFieldFromPoseStamped\" output_val=\"y_thresh\" field=\"y\" pose_stamped=\"{face}\"/>\n                                <Fallback>\n                                    <ReactiveSequence>\n                                        <Condition ID=\"CompareDouble\" Condition=\"&lt;\" A=\"{y_thresh}\" B=\"-0.05\"/>\n                                        <Action action_name=\"/vizzy/right_arm_cartesian_controller/cartesian_action\" ID=\"ArmCartesian\" type=\"CARTESIAN\" frame_id=\"base_footprint\" pose=\"{face}\"/>\n                                    </ReactiveSequence>\n                                    <ReactiveSequence>\n                                        <Condition ID=\"CompareDouble\" Condition=\">\" A=\"{y_thresh}\" B=\"0.05\"/>\n                                        <Action action_name=\"/vizzy/left_arm_cartesian_controller/cartesian_action\" ID=\"ArmCartesian\" type=\"CARTESIAN\" frame_id=\"base_footprint\" pose=\"{face}\"/>\n                                    </ReactiveSequence>\n                                </Fallback>\n                            </ReactiveSequence>\n                        </Sequence>\n                        <SubTree ID=\"LowArms\"/>\n                    </Fallback>\n                </Parallel>\n            </Sequence>\n            <SubTree ID=\"LowArms\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"ErrorGameState\">\n        <SequenceStar>\n            <Action action_name=\"nuance_speech_tts\" ID=\"Speak\" language=\"pt_PT\" utterance=\"Não sei o estado do jogo\" voice=\"Joaquim\"/>\n            <Action action_name=\"nuance_speech_tts\" ID=\"Speak\" language=\"pt_PT\" utterance=\"Chamem o assistente\" voice=\"Joaquim\"/>\n            <Action ID=\"WaitForXSeconds\" seconds=\"60\" result=\"SUCCESS\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"LowArms\">\n        <Sequence>\n            <Action action_name=\"/vizzy/left_arm_cartesian_controller/cartesian_action\" ID=\"ArmCartesian\" type=\"HOME\" frame_id=\"base_footprint\" pose=\"0;0;0;0;0;0;1\"/>\n            <Action action_name=\"/vizzy/right_arm_cartesian_controller/cartesian_action\" ID=\"ArmCartesian\" type=\"HOME\" frame_id=\"base_footprint\" pose=\"0;0;0;0;0;0;1\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <inout_port name=\"action_name\"/>\n            <inout_port name=\"frame_id\"/>\n            <inout_port name=\"pose\"/>\n            <inout_port name=\"type\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <inout_port name=\"A\"/>\n            <inout_port name=\"B\"/>\n            <inout_port name=\"Condition\"/>\n        </Condition>\n        <Action ID=\"GazeAtTarget\">\n            <inout_port name=\"action_name\"/>\n            <inout_port name=\"fixation_pose\"/>\n            <inout_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"GetPoseArray\">\n            <inout_port name=\"pose_array\"/>\n            <inout_port name=\"topic\"/>\n        </Action>\n        <SubTree ID=\"LowArms\"/>\n        <Action ID=\"SelectFieldFromPoseStamped\">\n            <inout_port name=\"field\"/>\n            <inout_port name=\"output_val\"/>\n            <inout_port name=\"pose_stamped\"/>\n        </Action>\n        <Action ID=\"SelectPose\">\n            <inout_port name=\"pose_array\"/>\n            <inout_port name=\"pose_stamped\"/>\n            <inout_port name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <inout_port name=\"action_name\"/>\n            <inout_port name=\"language\"/>\n            <inout_port name=\"utterance\"/>\n            <inout_port name=\"voice\"/>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <inout_port name=\"result\"/>\n            <inout_port name=\"seconds\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robotic system. The robot is programmed to perform a series of tasks in response to detecting faces. Upon detecting faces, it selects a face and then gazes at it. If the x-coordinate of the selected face is less than 1.0, it performs a sequence of actions involving torso movement; otherwise, it proceeds to another set of actions related to arm movement. Additionally, there are error handling behaviors for scenarios where the robot cannot determine the game state.\n\nFurthermore, the behavior tree includes various predefined actions such as moving the base, speaking, waiting for a specified time, and interacting with different components like blocks and poses. These actions are orchestrated within the behavior tree to achieve specific robotic behaviors based on the detected environmental stimuli.\n\nOverall, the behavior tree represents a complex decision-making and action execution framework for a robot, enabling it to interact with its environment, respond to stimuli, and handle potential error states.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback>\n            <Sequence>\n                <Action ID=\"GetPoseArray\" topic=\"faces\" name=\"GetFaceList\" pose_array=\"face_array\"/>\n                <Action ID=\"SelectPose\" position_in_list=\"0\" pose_array=\"{face_array}\" pose_stamped=\"face\"/>\n                <Parallel threshold=\"2\">\n                    <Action action_name=\"gaze\" fixation_pose=\"{face}\" ID=\"GazeAtTarget\" frame_id=\"base_footprint\"/>\n                    <Fallback>\n                        <Sequence>\n                            <Action output_val=\"x_thresh\" field=\"x\" ID=\"SelectFieldFromPoseStamped\" pose_stamped=\"{face}\"/>\n                            <Condition B=\"1.0\" ID=\"CompareDouble\" A=\"{x_thresh}\" Condition=\"&lt;\"/>\n                            <ReactiveSequence>\n                                <Action output_val=\"y_thresh\" field=\"y\" ID=\"SelectFieldFromPoseStamped\" pose_stamped=\"{face}\"/>\n                                <Action angle=\"-20\" ID=\"MoveTorso\" topic=\"/vizzy/torso_joint/cmd\"/>\n                            </ReactiveSequence>\n                        </Sequence>\n                        <SubTree ID=\"LowArms\"/>\n                    </Fallback>\n                </Parallel>\n            </Sequence>\n            <SubTree ID=\"LowArms\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"ErrorGameState\">\n        <SequenceStar>\n            <Action action_name=\"nuance_speech_tts\" ID=\"Speak\" language=\"pt_PT\" utterance=\"Não sei o estado do jogo\" voice=\"Joaquim\"/>\n            <Action action_name=\"nuance_speech_tts\" ID=\"Speak\" language=\"pt_PT\" utterance=\"Chamem o assistente\" voice=\"Joaquim\"/>\n            <Action ID=\"WaitForXSeconds\" seconds=\"60\" result=\"SUCCESS\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"LowArms\">\n        <Action angle=\"20\" ID=\"MoveTorso\" topic=\"/vizzy/torso_joint/cmd\"/>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\"/>\n            <input_port name=\"action_name\"/>\n        </Action>\n        <SubTree ID=\"ChargeST\"/>\n        <Action ID=\"CheckBattery\">\n            <output_port type=\"int\" name=\"battery_state\"/>\n            <output_port type=\"double\" name=\"percentage\"/>\n            <input_port type=\"std::string\" name=\"service_name\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port type=\"int\" name=\"charging_state\"/>\n            <input_port type=\"std::string\" name=\"service_name\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Action ID=\"DetectBlocks\">\n            <output_port type=\"social_cues::BlockList_&lt;std::allocator&lt;void> >\" name=\"block_list\"/>\n            <input_port type=\"std::string\" name=\"block_topic\"/>\n        </Action>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <SubTree ID=\"ErrorGameState\"/>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"GetInt16\">\n            <output_port name=\"number\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GetPoseArray\">\n            <output_port name=\"pose_array\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"goal_pose\"/>\n        </Action>\n        <Action ID=\"MoveTorso\">\n            <input_port name=\"angle\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"SelectBlock\">\n            <input_port type=\"social_cues::BlockList_&lt;std::allocator&lt;void> >\" name=\"block_list\"/>\n            <output_port type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void> >\" name=\"block_pose\"/>\n            <input_port type=\"std::string\" name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"SelectFieldFromPoseStamped\">\n            <input_port name=\"field\"/>\n            <output_port name=\"output_val\"/>\n            <input_port name=\"pose_stamped\"/>\n        </Action>\n        <Action ID=\"SelectPose\">\n            <input_port name=\"pose_array\"/>\n            <output_port name=\"pose_stamped\"/>\n            <input_port name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port type=\"std::string\" name=\"action_name\"/>\n            <input_port type=\"std::string\" name=\"language\"/>\n            <input_port type=\"std::string\" name=\"utterance\"/>\n            <input_port type=\"std::string\" name=\"voice\"/>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port default=\"SUCCESS\" name=\"result\">Result after specified time: SUCCESS or FAILURE</input_port>\n            <input_port default=\"5\" name=\"seconds\">Time in seconds</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic system that executes a sequence of actions in a loop for a specified number of cycles. The actions include checking the state and desired sequence, managing locomotion status, performing movement, and updating the action sequence and navigation goal.\n\nDuring each cycle, the robot first checks the LTL (Linear Temporal Logic) state, then performs a series of reactive actions based on locomotion status and movement. If necessary, it can also update the LTL state and navigation goal.\n\nThe tree is designed to handle complex robotic behaviors such as monitoring and adjusting the robot's state, ensuring proper locomotion, executing movements, and adapting to changes in the environment or task requirements. It provides a flexible and robust framework for controlling the robot's behavior while accommodating dynamic adjustments based on its operational context.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Action ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                <ReactiveSequence>\n                    <Fallback>\n                        <Action ID=\"LocomotionStatusCheck\" locomotion_status=\"{locomotion_status}\"/>\n                        <Sequence>\n                            <Action ID=\"RecoveryStand\" locomotion_status=\"{locomotion_status}\"/>\n                            <Delay delay_msec=\"2000\">\n                                <Action ID=\"LocomotionStart\" locomotion_status=\"{locomotion_status}\"/>\n                            </Delay>\n                        </Sequence>\n                    </Fallback>\n                    <Fallback>\n                        <Action ID=\"MoveAction\" action=\"{action}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\" nav_goal=\"{nav_goal}\"/>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" nav_goal=\"{nav_goal}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"MoveAction\">\n            <output_port name=\"action\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n            <input_port name=\"nav_goal\"/>\n        </Action>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"Replanning2\"/>\n        <Action ID=\"Replanning3\"/>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n            <output_port name=\"nav_goal\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's performance in a competition mode, where it repeatedly executes a sequence of actions. The robot first enters a rest pose and then performs a specific trick. This cycle continues indefinitely. The \"GetInRestPose\" behavior involves positioning the robot's arms and head, while \"DoYourTrick\" encompasses filling a tray and stocking shelves.\n\nAdditionally, the robot scans the table for objects and updates its environment map. It also moves to different locations such as tables and shelves, picking and placing items using its left and right arms. The process is repeated multiple times until certain conditions are met, such as trays being full or empty.\n\nOverall, the behavior tree outlines a complex set of tasks for the robot, involving arm and head control, navigation, scanning, object manipulation, and decision-making based on the state of trays and shelves.",
        "output": "<root main_tree_to_execute=\"root\">\n\n    <BehaviorTree ID=\"root\">\n        <Sequence>\n            <SubTree ID=\"FullCompetitionMode\" />\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"FullCompetitionMode\">\n        <Repeat num_cycles=\"-1\">\n            <Sequence>\n                <SubTree ID=\"GetInRestPose\" />\n                <SubTree ID=\"DoYourTrick\" />\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"GetInRestPose\">\n        <Sequence>\n            <GetArmJointsForPose pose=\"REST\" joints_pose=\"{joints_pose}\" />\n            <Parallel success_threshold=\"3\" failure_threshold=\"3\">\n                <Sequence>\n                    <HeadControl pitch=\"0\" yaw=\"90\" />\n                    <TorsoControl relative_height=\"0.05\" />\n                </Sequence>\n                <SetArmJointsLeft joints_pose=\"{joints_pose}\" />\n                <SetArmJointsRight joints_pose=\"{joints_pose}\" />\n            </Parallel>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"GetInUpTrayPose\">\n        <Sequence>\n            <GetArmJointsForPose pose=\"UPTRAY\" joints_pose=\"{joints_pose}\" />\n            <Parallel success_threshold=\"2\" failure_threshold=\"2\">\n                <SetArmJointsLeft joints_pose=\"{joints_pose}\" />\n                <SetArmJointsRight joints_pose=\"{joints_pose}\" />\n            </Parallel>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"ClearAllOctomaps\">\n        <ForceSuccess>\n            <Sequence>\n                <ClearOctomap side=\"left\" />\n                <ClearOctomap side=\"right\" />\n            </Sequence>\n        </ForceSuccess>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"UpdateOctomap\">\n        <ForceSuccess>\n            <Sequence>\n                <SubTree ID=\"ClearAllOctomaps\" />\n                <!-- <HeadControl pitch=\"-60.0\" yaw=\"60\" />\n                <HeadControl pitch=\"60.0\" yaw=\"60\" /> -->\n                <!-- <HeadControl pitch=\"-60.0\" yaw=\"90\" /> -->\n                <HeadControl pitch=\"60.0\" yaw=\"90\" />\n                <!-- <HeadControl pitch=\"-60.0\" yaw=\"135\" /> -->\n                <HeadControl pitch=\"60.0\" yaw=\"135\" />\n            </Sequence>\n        </ForceSuccess>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"UpdateOctomapLowerHalf\">\n        <ForceSuccess>\n            <Sequence>\n                <SubTree ID=\"ClearAllOctomaps\" />\n                <HeadControl pitch=\"-60.0\" yaw=\"90\" />\n                <HeadControl pitch=\"60.0\" yaw=\"90\" />\n                <HeadControl pitch=\"-60.0\" yaw=\"135\" />\n                <HeadControl pitch=\"60.0\" yaw=\"135\" />\n            </Sequence>\n        </ForceSuccess>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"DoYourTrick\">\n        <Repeat num_cycles=\"-1\">\n            <Sequence>\n                <ForceSuccess>\n                    <SubTree ID=\"FillYourTray\" />\n                </ForceSuccess>\n                <ForceSuccess>\n                    <SubTree ID=\"FillTheShelf\" />\n                </ForceSuccess>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"ScanTable\">\n        <!-- TODO if you query the ScanTable node too soon it crashes. No time to fix now -->\n        <RetryUntilSuccesful num_attempts=\"-1\">\n            <Sequence>\n                <TorsoControl relative_height=\"0.95\" />\n                <HeadControl pitch=\"0.0\" yaw=\"140.0\" />\n                <Pause time_limit_sec=\"3\" />\n                <ScanTableStartScanning />\n                <Pause time_limit_sec=\"3\" />\n                <SubTree ID=\"ClearAllOctomaps\" />\n                <ScanTableGetResults detected_tomato_cans=\"{detected_tomato_cans}\" />\n                <TraySetLoci tray_name=\"table\" locus_poses=\"{detected_tomato_cans}\" occupied=\"true\" />\n                <TrayUpdatePlanningScene />\n            </Sequence>\n        </RetryUntilSuccesful>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"ScanShelves\">\n        <Sequence>\n            <TorsoControl relative_height=\"0.1\" />\n            <HeadControl pitch=\"90.0\" yaw=\"90.0\" />\n            <Pause time_limit_sec=\"1\" />\n            <ScanShelves tomato_can_stocking_target_poses=\"{tomato_can_stocking_target_poses}\" />\n            <TraySetLoci tray_name=\"shelf\" locus_poses=\"{tomato_can_stocking_target_poses}\" occupied=\"false\" />\n            <TrayUpdatePlanningScene />\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"FillYourTray\">\n        <Sequence>\n            <SubTree ID=\"GoToTable\" />\n            <SubTree ID=\"ScanTable\" />\n            <TorsoControl relative_height=\"0.95\" />\n            <HeadControl pitch=\"0.0\" yaw=\"135.0\" />\n            <Repeat num_cycles=\"-1\">\n                <Sequence>\n                    <Sequence>\n                        <SetBlackboard output_key=\"tray\" value=\"table\" />\n                        <SetBlackboard output_key=\"side\" value=\"RIGHT\" />\n                        <SubTree ID=\"TrayIsEmpty\" tray=\"tray\" side=\"side\" />\n                    </Sequence>\n                    <Inverter>\n                        <Sequence>\n                            <SetBlackboard output_key=\"tray\" value=\"backtray\" />\n                            <SubTree ID=\"TrayIsFull\" tray=\"tray\" />\n                        </Sequence>\n                    </Inverter>\n                    <ForceSuccess>\n                        <Sequence>\n                            <SetBlackboard output_key=\"src_tray\" value=\"table\" />\n                            <SetBlackboard output_key=\"dst_tray\" value=\"backtray\" />\n                            <SubTree ID=\"RightArmFillYourTray\" src_tray=\"src_tray\" dst_tray=\"dst_tray\" />\n                        </Sequence>\n                    </ForceSuccess>\n                </Sequence>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n\n\n    <BehaviorTree ID=\"FillTheShelf\">\n        <Sequence>\n            <SubTree ID=\"GetInRestPose\" />\n            <SubTree ID=\"GoToShelves\" />\n            <SubTree ID=\"ScanShelves\" />\n            <SubTree ID=\"UpdateOctomap\" />\n            <TorsoControl relative_height=\"0.95\" />\n            <HeadControl pitch=\"60.0\" yaw=\"110.0\" />\n            <Repeat num_cycles=\"-1\">\n                <Sequence>\n                    <Sequence>\n                        <SetBlackboard output_key=\"tray\" value=\"backtray\" />\n                        <SetBlackboard output_key=\"side\" value=\"LEFT\" />\n                        <SubTree ID=\"TrayIsEmpty\" tray=\"tray\" side=\"side\" />\n                    </Sequence>\n                    <Inverter>\n                        <Sequence>\n                            <SetBlackboard output_key=\"tray\" value=\"shelf\" />\n                            <SubTree ID=\"TrayIsFull\" tray=\"tray\" />\n                        </Sequence>\n                    </Inverter>\n                    <ForceSuccess>\n                        <Sequence>\n                            <!-- <SubTree ID=\"ClearAllOctomaps\" /> -->\n                            <SetBlackboard output_key=\"src_tray\" value=\"backtray\" />\n                            <SetBlackboard output_key=\"dst_tray\" value=\"shelf\" />\n                            <SubTree ID=\"LeftArmFillYourTray\" src_tray=\"src_tray\" dst_tray=\"dst_tray\" />\n                        </Sequence>\n                    </ForceSuccess>\n                </Sequence>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"GoToTable\">\n        <Sequence>\n            <MoveBase goal=\"1.5;-0.1;0.0\" />\n            <MoveBase goal=\"2.2;-0.1;0.0\" />\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"GoToShelves\">\n        <Sequence>\n            <MoveBase goal=\"1.0;-0.3.0;0.0\" />\n            <MoveBase goal=\"2.0;-0.3;0.4\" />\n        </Sequence>\n    </BehaviorTree>\n\n\n    <BehaviorTree ID=\"MoveTomatoCans\">\n        <Repeat num_cycles=\"4\">\n            <ForceSuccess>\n                <KeepRunningUntilFailure>\n                    <Fallback>\n                        <Sequence>\n                            <SubTree ID=\"LeftArmFillYourTray\" src_tray=\"src_tray\" dst_tray=\"dst_tray\" />\n                            <SubTree ID=\"RightArmFillYourTray\" src_tray=\"src_tray\" dst_tray=\"dst_tray\" />\n                        </Sequence>\n                        <SubTree ID=\"RightArmFillYourTray\" src_tray=\"src_tray\" dst_tray=\"dst_tray\" />\n                    </Fallback>\n                </KeepRunningUntilFailure>\n            </ForceSuccess>\n        </Repeat>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"LeftArmFillYourTray\">\n        <Sequence>\n            <TrayPickOccupiedLocus tray_name=\"{src_tray}\" side=\"LEFT\" locus_id=\"{src_locus_id}\" />\n            <Fallback>\n                <Sequence>\n                    <TrayPickEmptyLocus tray_name=\"{dst_tray}\" side=\"LEFT\" locus_id=\"{dst_locus_id}\" locus_pose=\"{dst_locus_pose}\" />\n                    <Fallback>\n                        <Sequence>\n                            <TrayUpdatePlanningScene />\n                            <PickAndPlaceLeft object_id=\"{src_locus_id}\" target_pose=\"{dst_locus_pose}\" flat_hand_mode=\"true\" />\n                            <TraySetLocusState tray_name=\"{src_tray}\" locus_id=\"{src_locus_id}\" occupied=\"false\" />\n                            <TraySetLocusState tray_name=\"{dst_tray}\" locus_id=\"{dst_locus_id}\" occupied=\"true\" />\n                        </Sequence>\n                        <ForceFailure>\n                            <TrayReleaseLocus tray_name=\"{dst_tray}\" locus_id=\"{dst_locus_id}\" />\n                        </ForceFailure>\n                    </Fallback>\n                    <TrayReleaseLocus tray_name=\"{dst_tray}\" locus_id=\"{dst_locus_id}\" />\n                </Sequence>\n                <ForceFailure>\n                    <TrayReleaseLocus tray_name=\"{src_tray}\" locus_id=\"{src_locus_id}\" />\n                </ForceFailure>\n            </Fallback>\n            <TrayReleaseLocus tray_name=\"{src_tray}\" locus_id=\"{src_locus_id}\" />\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"RightArmFillYourTray\">\n        <Sequence>\n            <TrayPickOccupiedLocus tray_name=\"{src_tray}\" side=\"RIGHT\" locus_id=\"{src_locus_id}\" />\n            <Fallback>\n                <Sequence>\n                    <TrayPickEmptyLocus tray_name=\"{dst_tray}\" side=\"RIGHT\" locus_id=\"{dst_locus_id}\" locus_pose=\"{dst_locus_pose}\" />\n                    <Fallback>\n                        <Sequence>\n                            <TrayUpdatePlanningScene />\n                            <PickAndPlaceRight object_id=\"{src_locus_id}\" target_pose=\"{dst_locus_pose}\" flat_hand_mode=\"false\" />\n                            <TraySetLocusState tray_name=\"{src_tray}\" locus_id=\"{src_locus_id}\" occupied=\"false\" />\n                            <TraySetLocusState tray_name=\"{dst_tray}\" locus_id=\"{dst_locus_id}\" occupied=\"true\" />\n                        </Sequence>\n                        <ForceFailure>\n                            <TrayReleaseLocus tray_name=\"{dst_tray}\" locus_id=\"{dst_locus_id}\" />\n                        </ForceFailure>\n                    </Fallback>\n                    <TrayReleaseLocus tray_name=\"{dst_tray}\" locus_id=\"{dst_locus_id}\" />\n                </Sequence>\n                <ForceFailure>\n                    <TrayReleaseLocus tray_name=\"{src_tray}\" locus_id=\"{src_locus_id}\" />\n                </ForceFailure>\n            </Fallback>\n            <TrayReleaseLocus tray_name=\"{src_tray}\" locus_id=\"{src_locus_id}\" />\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"TrayIsFull\">\n        <Inverter>\n            <Sequence>\n                <Fallback>\n                    <TrayPickEmptyLocus tray_name=\"{tray}\" side=\"LEFT\" locus_id=\"{locus_id}\" locus_pose=\"{locus_pose}\" />\n                    <TrayPickEmptyLocus tray_name=\"{tray}\" side=\"RIGHT\" locus_id=\"{locus_id}\" locus_pose=\"{locus_pose}\" />\n                </Fallback>\n                <ForceSuccess>\n                    <TrayReleaseLocus tray_name=\"{tray}\" locus_id=\"{locus_id}\" />\n                </ForceSuccess>\n            </Sequence>\n        </Inverter>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"TrayIsEmpty\">\n        <Fallback>\n            <Sequence>\n                <TrayPickOccupiedLocus tray_name=\"{tray}\" side=\"{side}\" locus_id=\"{locus_id}\" />\n                <ForceSuccess>\n                    <TrayReleaseLocus tray_name=\"{tray}\" locus_id=\"{locus_id}\" />\n                </ForceSuccess>\n                <AlwaysSuccess />\n            </Sequence>\n            <AlwaysFailure />\n        </Fallback>\n    </BehaviorTree>\n\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions for a robot. It starts by moving towards a target point, then waits for a specified time before moving to the same or another target point. This sequence is repeated twice.\n\nThe \"MoveGoal\" action takes a target point as input and moves the robot to that location. The \"Wait\" action takes a wait time as input and pauses the robot's movement for the specified duration.\n\nOverall, this behavior tree orchestrates the robot's movement in a sequential manner, allowing it to navigate to specific points and pause at each point for a defined period before proceeding to the next action.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"MoveGoal\" TargetPoint=\"{target_point}\"/>\n            <ForceSuccess>\n                <Action ID=\"Wait\" WaitTime=\"{wait_time}\"/>\n            </ForceSuccess>\n            <Action ID=\"MoveGoal\" TargetPoint=\"{target_point}\"/>\n            <ForceSuccess>\n                <Action ID=\"Wait\" WaitTime=\"{wait_time}\"/>\n            </ForceSuccess>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"MoveGoal\">\n            <inout_port default=\"{target_point}\" name=\"TargetPoint\"/>\n        </Action>\n        <Action ID=\"Wait\">\n            <input_port default=\"{wait_time}\" name=\"WaitTime\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robotic system to navigate and interact with mineral samples. The robot is programmed to iterate through a list of mineral samples, moving towards each sample's location while updating its goal pose. Upon reaching each sample, the robot blinks a light as part of its interaction. Once all samples are visited, the robot logs completion and then initiates an action to park at a peak location before logging the action's completion.\n\nOverall, the behavior tree coordinates the robot's navigation to mineral samples, interaction with them, and subsequent actions, such as parking at a designated peak location. Additionally, it includes a sub-tree for blinking a light upon reaching each sample.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <BehaviorTree ID=\"BlinkLight\">\n        <Sequence>\n            <SetLightState state=\"true\" />\n            <Delay delay_msec=\"500\">\n                <SetLightState state=\"false\" />\n            </Delay>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <ForEachMineralSample samples_list=\"{mineral_samples}\" current_sample=\"{current_sample}\">\n                <Sequence>\n                    <Log message=\"Moving to next sample...\" />\n                    <ResetMineralDepositTracker sample=\"{current_sample}\" service_name=\"/mineral_deposit_tracker/reset\" />\n                    <GetSamplePose sample=\"{current_sample}\" pose=\"{sample_pose}\" />\n                    <PipelineSequence>\n                        <RateController hz=\"1.0\">\n                            <Sequence>\n                                <GoalUpdater input_goal=\"{sample_pose}\" output_goal=\"{updated_goal}\">\n                                    <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\" />\n                                </GoalUpdater>\n                            </Sequence>\n                        </RateController>\n                        <WhileDoElse>\n                            <GoalReached goal=\"{updated_goal}\" />\n                            <AlwaysSuccess />\n                            <KeepRunningUntilFailure>\n                                <FollowPath path=\"{path}\" controller_id=\"FollowPath\" />\n                            </KeepRunningUntilFailure>\n                        </WhileDoElse>\n                    </PipelineSequence>\n                    <Log message=\"At sample!\" />\n                    <SubTree ID=\"BlinkLight\" __shared_blackboard=\"true\" />\n                </Sequence>\n            </ForEachMineralSample>\n            <Log message=\"All samples complete\" />\n            <Log message=\"Calling /park_at_peak action...\" />\n            <ParkAtPeak />\n            <Log message=\"Action done!\" />\n            <SubTree ID=\"BlinkLight\" __shared_blackboard=\"true\" />\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is quite simple, consisting of a single node that executes the \"SnapshotClient\" action. This suggests that the task performed by this behavior tree involves capturing a snapshot or image using a client. The behavior tree does not contain any branching or complex decision-making logic, indicating that its primary purpose is to trigger the SnapshotClient action in a sequential manner.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SnapshotClient/>\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate its path with periodic global path replanning at 1 Hz and includes recovery actions. The main sequence involves the robot navigating with replanning, which consists of computing a path to a specific pose using a grid-based planner and then following that path using a designated controller. If there are issues or failures during this process, recovery actions are initiated, including clearing the entire local and global costmaps, spinning, and waiting.\n\nAdditionally, the behavior tree incorporates a recovery node with a specified number of retries, ensuring that if the robot encounters difficulties in navigation, it can attempt to recover and continue its path planning and execution. This setup allows the robot to maintain robustness in its navigation capabilities and handle unexpected situations effectively.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <SequenceStar name=\"RecoveryActions\">\n        <ClearEntireCostmap service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        <ClearEntireCostmap service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n        <Spin spin_dist=\"0.3\"/>\n        <Wait wait_duration=\"2\"/>\n      </SequenceStar>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for device pairing with a request. It prompts the user to input the pairing mode and device type, then proceeds to pair or unpair the specified device based on the provided inputs. The sequence ensures that the pairing process follows a specific order: first, it requests the pairing mode (pair or unpair) and then the device type (wheelchair, rollator, hospital bed, charging station). After obtaining these inputs, the behavior tree initiates the device pairing process using the specified pairing mode and device type.",
        "output": " <root main_tree_to_execute = \"DevicePairingWithRequest\" >\n    <BehaviorTree ID=\"DevicePairingWithRequest\">\n        <Sequence>\n            <!--pairing_mode und device_type müssen den Konstanten im .action file entsprechen-->\n            <IntParameterRequest title=\"Bitte geben Sie den Kopplungsmodus und das Gerät an\"\n                                   options=\"pair,unpair\"\n                                   value=\"{pairing_mode}\"/>\n            <IntParameterRequest options=\"wheelchair,rollator,hospitalbed,chargingstation\"\n                                   value=\"{device_type}\"/>\n            <DevicePairing pairing_mode=\"{pairing_mode}\" device_type=\"{device_type}\"/>\n        </Sequence>\n    </BehaviorTree>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement in a sequential manner. It begins by pausing for 3 seconds, then instructs the robot to move to the coordinates (5,-3,-2). After another 3-second pause, it commands the robot to move to the coordinates (-2,-3,-4), followed by another 3-second pause. Finally, the robot is directed to move to the coordinates (2,3,-6).\n\nThis behavior tree essentially sets up a sequence of movements and pauses for the robot to execute, ensuring that each movement is completed before moving on to the next one.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Pause       time_limit_sec=\"3\"/>\n            <MoveBase    goal=\"5;-3;-2\"/>\n            <Pause       time_limit_sec=\"3\"/>\n            <MoveBase    goal=\"-2;-3;-4\"/>\n            <Pause       time_limit_sec=\"3\"/>\n            <MoveBase    goal=\"2;3;-6\"/>\n        </Sequence>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an environment with periodic global path replanning at 1 Hz and includes recovery actions. The robot will attempt to navigate to a specified goal, utilizing a grid-based planner for computing the path. If the navigation encounters issues, it will clear the costmaps and retry the navigation a set number of times before resorting to recovery actions. The recovery actions include clearing both local and global costmaps, spinning to reorient itself, and waiting for a specific duration. Additionally, the recovery process is triggered by the \"GoalUpdated\" event. This behavior tree ensures that the robot can adapt to changing environments and recover from navigation failures during its operation.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the movement of a robot towards three different goals (Goal_a, Goal_b, and Goal_c). Initially, it sets these goals in the robot's memory. The robot then follows a specific sequence: first, it attempts to reach Goal_a and Goal_b in an iterative manner for 10 cycles unless interrupted by the \"gohome\" event. If the interruption occurs or after completing the iterations, the robot proceeds to move towards Goal_c.\n\nThe \"MoveRobot\" behavior tree specifies the sequence for setting the goal and navigating the robot to the specified target using the Nav2Client.\n\nIn summary, the behavior tree controls the robot's movement by prioritizing the sequential achievement of multiple goals, allowing for interruptions based on events, and ensuring the completion of the entire sequence before moving to the final goal.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SetBlackboard output_key=\"Goal_a\" value=\"-0.579;-1.341;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_b\" value=\"5.214;-1.533;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_c\" value=\"-1.588;1.253;0.0;1.0\" />\n            <Fallback>\n                <ReactiveSequence>\n                    <InterruptEvent event=\"gohome\"/>\n                    <Repeat num_cycles=\"10\">\n                        <Sequence>\n                            <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                            <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                        </Sequence>\n                    </Repeat>\n                </ReactiveSequence>\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                </Sequence>\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a set of actions and conditions for controlling a robot or an autonomous system. The main behavior tree \"BehaviorTree\" consists of a sequence of actions, including waiting for a specified duration and moving the robot to a specific global goal position using the UPOGoToGoal action. Additionally, there are various utility nodes such as monitoring ROS topics, logging messages, performing mathematical operations, and handling JSON data.\n\nThe tree also includes decorators like CooldownMilliseconds, CooldownSeconds, ForEachLoop, Loop, OnlyOnce, Interruptible, and WhileSuccess, which modify the behavior of their child nodes. These decorators enable functionalities such as cooldown periods between repeated executions, looping through a sequence, executing a node only once, interrupting a running task, and continuing while the child node succeeds.\n\nOverall, the behavior tree orchestrates the robot's actions, decision-making processes, and interactions with its environment, providing a framework for implementing complex behaviors in a modular and reusable manner.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"WaitSeconds\" duration=\"2\"/>\n            <Action global_goal.pose.orientation.x=\"0.0\" action=\"/Make_Plan\" global_goal.pose.orientation.z=\"0.0\" ID=\"UPOGoToGoal\" global_goal.pose.position.z=\"2.4\" global_goal.pose.position.y=\"-0.2\" global_goal.pose.orientation.w=\"1.0\" global_goal.pose.position.x=\"1.0\" global_goal.header.frame_id=\"uav_base_link\" global_goal.header.seq=\"1\" global_goal.pose.orientation.y=\"0.0\" state=\"g01\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CallEmptyService\">\n            <input_port type=\"std::string\" name=\"service\">ROS service name</input_port>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port type=\"bool\" name=\"input\">Input boolean value</input_port>\n        </Condition>\n        <Action ID=\"CheckKey\">\n            <input_port type=\"std::string\" name=\"no_key\">Key to determine if key to say 'no' has benn pressed</input_port>\n            <input_port type=\"std::string\" name=\"yes_key\">Key to determine if key to say 'yes' has been pressed</input_port>\n        </Action>\n        <Condition ID=\"CompareNumbers\">\n            <input_port type=\"std::string\" name=\"comparison_op\">Comparison operator. Valid operators are &lt;, >, &lt;=, >=, == and !=</input_port>\n            <input_port type=\"double\" name=\"first\">First operand</input_port>\n            <input_port type=\"double\" name=\"second\">Second operand</input_port>\n        </Condition>\n        <Condition ID=\"CompareStrings\">\n            <input_port type=\"std::string\" name=\"comparison_op\">Comparison operator. Valid operators are &lt;, >, &lt;=, >=, == and !=</input_port>\n            <input_port type=\"std::string\" name=\"first\">First operand</input_port>\n            <input_port type=\"std::string\" name=\"second\">Second operand</input_port>\n        </Condition>\n        <Action ID=\"ConcatenateStrings\">\n            <input_port type=\"std::string\" name=\"first\">First string</input_port>\n            <output_port type=\"std::string\" name=\"output\">Concatenated result string</output_port>\n            <input_port type=\"std::string\" name=\"second\">Second string</input_port>\n        </Action>\n        <Action ID=\"ConvertJsonToDouble\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"double\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToInt64\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"long\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToString\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"std::string\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToUint64\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"unsigned long\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertMessageField\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"void\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertRandomMessageField\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"void\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Decorator ID=\"CooldownMilliseconds\">\n            <input_port default=\"0\" type=\"unsigned int\" name=\"cooldown\">Cooldown time</input_port>\n        </Decorator>\n        <Decorator ID=\"CooldownSeconds\">\n            <input_port default=\"0\" type=\"unsigned int\" name=\"cooldown\">Cooldown time</input_port>\n        </Decorator>\n        <Action ID=\"CopyJson\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Input variable</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output\">Output variable to copy to</output_port>\n        </Action>\n        <Action ID=\"DebugLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Action ID=\"ErrorLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Action ID=\"FatalLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Action ID=\"FindByFieldValue\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"void\" name=\"output\">Output variable</output_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"value\">Value to search for</input_port>\n        </Action>\n        <Action ID=\"FindSubstrings\">\n            <input_port type=\"std::string\" name=\"input\">String to look into</input_port>\n            <input_port type=\"std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> > > >\" name=\"substrings\">Substrings to look for</input_port>\n        </Action>\n        <Decorator ID=\"ForEachLoop\">\n            <input_port type=\"bool\" name=\"break_on_child_failure\">Break loop on child failure?</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Input sequence</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output_element\">Output element variable</output_port>\n            <output_port type=\"unsigned long\" name=\"output_index\">Output index variable</output_port>\n        </Decorator>\n        <Action ID=\"GetJsonSize\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Input sequence</input_port>\n            <output_port type=\"unsigned long\" name=\"output\">Sequence size output</output_port>\n        </Action>\n        <Action ID=\"GetKeyboard\">\n            <output_port type=\"std::string\" name=\"output\">String received from keyboard</output_port>\n        </Action>\n        <Action ID=\"GetMessageField\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"GetRandomMessageField\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"GetTransformDistance\">\n            <input_port type=\"tf::StampedTransform\" name=\"input\">TF transform</input_port>\n            <output_port type=\"double\" name=\"output\">Distance form transform origin</output_port>\n        </Action>\n        <Action ID=\"GetTransformHorizontalDistance\">\n            <input_port type=\"tf::StampedTransform\" name=\"input\">TF transform</input_port>\n            <output_port type=\"double\" name=\"output\">2D distance from TF transform origin</output_port>\n        </Action>\n        <Action ID=\"GetTransformOrigin\">\n            <input_port type=\"tf::StampedTransform\" name=\"input\">TF transform</input_port>\n            <output_port type=\"double\" name=\"x\">Origin x coordinate</output_port>\n            <output_port type=\"double\" name=\"y\">Origin y coordinate</output_port>\n            <output_port type=\"double\" name=\"z\">Origin z coordinate</output_port>\n        </Action>\n        <Action ID=\"InfoLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Action ID=\"InitializeJson\">\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output\">Output variable to initialize</output_port>\n        </Action>\n        <Action ID=\"InterpolateFloat\">\n            <input_port type=\"std::vector&lt;double, std::allocator&lt;double> >\" name=\"input_range\">Input value range.</input_port>\n            <input_port type=\"double\" name=\"input_value\">Value to interpolate.</input_port>\n            <input_port type=\"std::vector&lt;double, std::allocator&lt;double> >\" name=\"output_range\">Output value range.</input_port>\n            <output_port type=\"double\" name=\"output_value\">Interpolated value.</output_port>\n        </Action>\n        <Control ID=\"Interruptible\"/>\n        <Action ID=\"LookupTransform\">\n            <output_port type=\"tf::StampedTransform\" name=\"output\">Result transform</output_port>\n            <input_port type=\"std::string\" name=\"source_frame\">Origin TF frame</input_port>\n            <input_port type=\"std::string\" name=\"target_frame\">Target TF frame</input_port>\n            <input_port default=\"0\" type=\"bool\" name=\"use_last_available\">Use last available transform?</input_port>\n        </Action>\n        <Decorator ID=\"Loop\"/>\n        <Action ID=\"MathOperationFloat\">\n            <input_port type=\"double\" name=\"first\">First operand</input_port>\n            <input_port type=\"std::string\" name=\"operator\">Math operation. Valid operatores are: +, -, / and *</input_port>\n            <output_port type=\"double\" name=\"output\">Operation result</output_port>\n            <input_port type=\"double\" name=\"second\">Second operand</input_port>\n        </Action>\n        <Action ID=\"MathOperationInt\">\n            <input_port type=\"int\" name=\"first\">First operand</input_port>\n            <input_port type=\"std::string\" name=\"operator\">Math operation. Valid operatores are: +, -, / and *</input_port>\n            <output_port type=\"int\" name=\"output\">Operation result</output_port>\n            <input_port type=\"int\" name=\"second\">Second operand</input_port>\n        </Action>\n        <Action ID=\"MonitorStdBool\">\n            <input_port default=\"0\" type=\"bool\" name=\"consume_msgs\">Should messages be consumed?</input_port>\n            <input_port default=\"1\" type=\"unsigned int\" name=\"queue_size\">Subscriber callback queue size</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_output\">Serialized ROS message [std_msgs::Bool_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"MonitorStdFloat64\">\n            <input_port default=\"0\" type=\"bool\" name=\"consume_msgs\">Should messages be consumed?</input_port>\n            <input_port default=\"1\" type=\"unsigned int\" name=\"queue_size\">Subscriber callback queue size</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_output\">Serialized ROS message [std_msgs::Float64_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"MonitorStdInt32\">\n            <input_port default=\"0\" type=\"bool\" name=\"consume_msgs\">Should messages be consumed?</input_port>\n            <input_port default=\"1\" type=\"unsigned int\" name=\"queue_size\">Subscriber callback queue size</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_output\">Serialized ROS message [std_msgs::Int32_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"OStreamNode\">\n            <input_port type=\"std::string\" name=\"message\">String to print</input_port>\n        </Action>\n        <Decorator ID=\"OnlyOnce\"/>\n        <Action ID=\"PublishBool\">\n            <input_port type=\"bool\" name=\"data\">Auto-generated field from std_msgs::Bool_&lt;std::allocator&lt;void> ></input_port>\n            <input_port default=\"0\" type=\"bool\" name=\"latch\">Latch messages?</input_port>\n            <input_port default=\"1\" type=\"unsigned int\" name=\"queue_size\">Internal publisher queue size</input_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to publish to</input_port>\n        </Action>\n        <Action ID=\"PublishStdString\">\n            <input_port type=\"std::string\" name=\"data\">Auto-generated field from std_msgs::String_&lt;std::allocator&lt;void> ></input_port>\n            <input_port default=\"0\" type=\"bool\" name=\"latch\">Latch messages?</input_port>\n            <input_port default=\"1\" type=\"unsigned int\" name=\"queue_size\">Internal publisher queue size</input_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to publish to</input_port>\n        </Action>\n        <Action ID=\"RandomFloat\">\n            <input_port type=\"double\" name=\"max\">Max range value</input_port>\n            <input_port type=\"double\" name=\"min\">Minimum range value</input_port>\n            <output_port type=\"double\" name=\"result\">Random result value</output_port>\n        </Action>\n        <Action ID=\"RandomInteger\">\n            <input_port type=\"int\" name=\"max\">Max range value</input_port>\n            <input_port type=\"int\" name=\"min\">Minimum range value</input_port>\n            <output_port type=\"int\" name=\"result\">Random result value</output_port>\n        </Action>\n        <Action ID=\"RandomSequenceValue\">\n            <input_port default=\";\" type=\"std::string\" name=\"delimiter\">Sequence entries delimiter</input_port>\n            <output_port type=\"std::string\" name=\"output\">Result random sequence entry</output_port>\n            <input_port type=\"std::string\" name=\"sequence\">Sequence to randomize</input_port>\n        </Action>\n        <Action ID=\"SubscribeUPOGoal\">\n            <input_port default=\"0\" type=\"bool\" name=\"consume_msgs\">Should messages be consumed?</input_port>\n            <output_port type=\"upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >\" name=\"output\">Received ROS message [upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port default=\"1\" type=\"unsigned int\" name=\"queue_size\">Subscriber callback queue size</input_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"UPOFireDetection3D\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"int\" name=\"duration\">Duration</input_port>\n            <output_port type=\"bool\" name=\"fire_found\">Fire Found</output_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n            <output_port type=\"double\" name=\"x\">Fire x</output_port>\n            <output_port type=\"double\" name=\"y\">Fire x</output_port>\n            <output_port type=\"double\" name=\"z\">Fire x</output_port>\n        </Action>\n        <Action ID=\"UPOFireExtinguish\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"bool\" name=\"detect_fire\">Detect Fire</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_feedback\">Serialized ROS message [upo_actions::FireExtinguishFeedback_&lt;std::allocator&lt;void> >]</output_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_result\">Serialized ROS message [upo_actions::FireExtinguishResult_&lt;std::allocator&lt;void> >]</output_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOGoToGoal\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"std::string\" name=\"global_goal.header.frame_id\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"unsigned int\" name=\"global_goal.header.seq\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.orientation.w\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.orientation.x\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.orientation.y\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.orientation.z\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.position.x\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.position.y\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.position.z\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOGoToGoalByName\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"std::string\" name=\"goal_name\">Name of goal</input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOLanding\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"bool\" name=\"land\">Auto-generated field from upo_actions::LandingGoal_&lt;std::allocator&lt;void> ></input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOTakeOff\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n            <input_port type=\"float\" name=\"takeoff_height.data\">Auto-generated field from upo_actions::TakeOffGoal_&lt;std::allocator&lt;void> ></input_port>\n        </Action>\n        <Action ID=\"UPOWindowDetection\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"int\" name=\"duration\">Duration</input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n            <output_port type=\"bool\" name=\"window_present\">Window Present</output_port>\n            <output_port type=\"double\" name=\"x\">Window x</output_port>\n            <output_port type=\"double\" name=\"y\">Window y</output_port>\n            <output_port type=\"double\" name=\"z\">Window z</output_port>\n        </Action>\n        <Action ID=\"WaitMilliseconds\">\n            <input_port default=\"0\" type=\"unsigned int\" name=\"duration\">Time to wait</input_port>\n        </Action>\n        <Action ID=\"WaitSeconds\">\n            <input_port default=\"0\" type=\"unsigned int\" name=\"duration\">Time to wait</input_port>\n        </Action>\n        <Action ID=\"WarnLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Decorator ID=\"WhileSuccess\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a complex set of tasks for an AI character. The main task involves the character performing various jobs and activities based on its needs and environment.\n\nThe character's behaviors include combat, obtaining a uniform, addressing hunger and thirst, performing specific job types such as butchering animals, dyeing animals, harvesting animals, hauling multiple items, leading animals to pasture, and standard jobs. Additionally, it includes actions related to sleeping, training, and supervising training.\n\nThe character's decision-making is influenced by conditions such as being in combat, hungry, thirsty, sleepy, or in need of training. It also considers whether certain items are in place for a job or if all items have been picked up.\n\nOverall, the behavior tree orchestrates a wide range of actions and decisions to simulate a dynamic and responsive AI character within a game or simulation environment.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Combat\">\n        <SequenceStar>\n            <Condition ID=\"IsInCombat\"/>\n            <Action ID=\"AbortJob\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"GetTarget\"/>\n                    <Action ID=\"Move\"/>\n                    <Sequence>\n                        <Condition ID=\"TargetAdjacent\"/>\n                        <Action ID=\"AttackTarget\"/>\n                    </Sequence>\n                </SequenceStar>\n            </ForceSuccess>\n            <Condition ID=\"IsInCombat\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"GetUniform\">\n        <SequenceStar name=\"GetUniform\">\n            <Action ID=\"CheckUniform\"/>\n            <Fallback>\n                <Action ID=\"Move\"/>\n                <Action ID=\"UniformCleanUp\"/>\n            </Fallback>\n            <Action ID=\"EquipUniform\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Hunger\">\n        <SequenceStar>\n            <Condition ID=\"IsHungry\"/>\n            <Sequence>\n                <SequenceStar name=\"Hunger\">\n                    <Action ID=\"FindFood\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"PickUpItem\"/>\n                    <ForceSuccess>\n                        <SequenceStar>\n                            <Action ID=\"FindDining\"/>\n                            <Action ID=\"Move\"/>\n                        </SequenceStar>\n                    </ForceSuccess>\n                    <Action ID=\"Eat\"/>\n                </SequenceStar>\n                <Condition ID=\"IsFull\"/>\n            </Sequence>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobButcherAnimal\">\n        <BB_Precondition expected=\"ButcherAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ButcherAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobDyeAnimal\">\n        <BB_Precondition expected=\"DyeAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitJob\"/>\n                    <Action ID=\"ClaimItems\"/>\n                    <SubTree ID=\"MoveAllItemsToJob\"/>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"DyeAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobHarvestAnimal\">\n        <BB_Precondition expected=\"HarvestAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"HarvestAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobHaulMultiple\">\n        <BB_Precondition expected=\"HauleMultipleItems\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitJob\"/>\n                    <Action ID=\"FindTool\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"EquipTool\"/>\n                    <Inverter>\n                        <Sequence>\n                            <Inverter>\n                                <Condition ID=\"AllPickedUp\"/>\n                            </Inverter>\n                            <Sequence>\n                                <Action ID=\"Move\"/>\n                                <Action ID=\"PickUpItem\"/>\n                            </Sequence>\n                            <Action ID=\"ReturnAlwaysRunning\"/>\n                        </Sequence>\n                    </Inverter>\n                    <Condition ID=\"AllPickedUp\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"DropAllItems\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobLeadAnimalToPasture\">\n        <BB_Precondition expected=\"LeadAnimalToPasture\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobStandard\">\n        <Fallback>\n            <SequenceStar name=\"StandardJobs\">\n                <Action ID=\"InitJob\"/>\n                <Action ID=\"ClaimItems\"/>\n                <Action ID=\"FindTool\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"EquipTool\"/>\n                <SubTree ID=\"MoveAllItemsToJob\"/>\n                <Action ID=\"GetWorkPosition\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"Work\"/>\n                <Action ID=\"FinishJob\"/>\n            </SequenceStar>\n            <Action ID=\"AbortJob\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobTameAnimal\">\n        <BB_Precondition expected=\"TameAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"TameAnimal\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Jobs\">\n        <SequenceStar>\n            <Action ID=\"GetJob\"/>\n            <FallbackStar>\n                <SubTree ID=\"JobButcherAnimal\"/>\n                <SubTree ID=\"JobDyeAnimal\"/>\n                <SubTree ID=\"JobLeadAnimalToPasture\"/>\n                <SubTree ID=\"JobHarvestAnimal\"/>\n                <SubTree ID=\"JobTameAnimal\"/>\n                <SubTree ID=\"JobHaulMultiple\"/>\n                <SubTree ID=\"JobStandard\"/>\n            </FallbackStar>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <SubTree ID=\"Jobs\"/>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MoveAllItemsToJob\">\n        <Sequence>\n            <Inverter>\n                <Sequence>\n                    <Inverter>\n                        <Condition ID=\"AllItemsInPlaceForJob\"/>\n                    </Inverter>\n                    <SequenceStar>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"PickUpItem\"/>\n                        <Action ID=\"GetItemDropPosition\"/>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"DropItem\"/>\n                    </SequenceStar>\n                    <Action ID=\"ReturnAlwaysRunning\"/>\n                </Sequence>\n            </Inverter>\n            <Condition ID=\"AllItemsInPlaceForJob\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"OldMoveAllItemsToJob\">\n        <FallbackStar>\n            <Condition ID=\"AllItemsInPlaceForJob\"/>\n            <RetryUntilSuccesful num_attempts=\"20\">\n                <Sequence>\n                    <SequenceStar>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"PickUpItem\"/>\n                        <Fallback>\n                            <Action ID=\"GetItemDropPosition\"/>\n                            <Action ID=\"DropItem\"/>\n                        </Fallback>\n                        <Fallback>\n                            <Action ID=\"Move\"/>\n                            <Action ID=\"DropItem\"/>\n                        </Fallback>\n                        <Action ID=\"DropItem\"/>\n                    </SequenceStar>\n                    <Condition ID=\"AllItemsInPlaceForJob\"/>\n                </Sequence>\n            </RetryUntilSuccesful>\n            <ForceFailure>\n                <Action ID=\"AbortJob\"/>\n            </ForceFailure>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Sleepy\">\n        <SequenceStar name=\"Sleep\">\n            <Condition ID=\"IsSleepy\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"FindBed\"/>\n                    <Action ID=\"Move\"/>\n                </SequenceStar>\n            </ForceSuccess>\n            <Action ID=\"Sleep\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Thirst\">\n        <SequenceStar>\n            <Condition ID=\"IsThirsty\"/>\n            <Sequence>\n                <SequenceStar name=\"Thirst\">\n                    <Action ID=\"FindDrink\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"PickUpItem\"/>\n                    <ForceSuccess>\n                        <SequenceStar>\n                            <Action ID=\"FindDining\"/>\n                            <Action ID=\"Move\"/>\n                        </SequenceStar>\n                    </ForceSuccess>\n                    <Action ID=\"Drink\"/>\n                </SequenceStar>\n                <Condition ID=\"IsDrinkFull\"/>\n            </Sequence>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Trainer\">\n        <SequenceStar name=\"Trainer\">\n            <Condition ID=\"IsTrainer\"/>\n            <Action ID=\"FindTrainerPosition\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"SuperviseTraining\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Training\">\n        <SequenceStar name=\"Training\">\n            <Condition ID=\"IsTrainingTime\"/>\n            <Action ID=\"FindTrainingGround\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"Train\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AbortJob\"/>\n        <Condition ID=\"AllItemsInPlaceForJob\"/>\n        <Condition ID=\"AllPickedUp\"/>\n        <Action ID=\"AttackTarget\"/>\n        <Action ID=\"ButcherAnimal\"/>\n        <Action ID=\"CheckUniform\"/>\n        <Action ID=\"ClaimItems\"/>\n        <SubTree ID=\"Combat\"/>\n        <Action ID=\"Drink\"/>\n        <Action ID=\"DropAllItems\"/>\n        <Action ID=\"DropItem\"/>\n        <Action ID=\"DyeAnimal\"/>\n        <Action ID=\"Eat\"/>\n        <Action ID=\"EquipTool\"/>\n        <Action ID=\"EquipUniform\"/>\n        <Action ID=\"FinalMoveAnimal\"/>\n        <Action ID=\"FindBed\"/>\n        <Action ID=\"FindDining\"/>\n        <Action ID=\"FindDrink\"/>\n        <Action ID=\"FindFood\"/>\n        <Action ID=\"FindTool\"/>\n        <Action ID=\"FindTrainerPosition\"/>\n        <Action ID=\"FindTrainingGround\"/>\n        <Action ID=\"FinishJob\"/>\n        <Action ID=\"GetItemDropPosition\"/>\n        <Action ID=\"GetJob\"/>\n        <Action ID=\"GetTarget\"/>\n        <SubTree ID=\"GetUniform\"/>\n        <Action ID=\"GetWorkPosition\"/>\n        <Action ID=\"GrabAnimal\"/>\n        <Action ID=\"HarvestAnimal\"/>\n        <SubTree ID=\"Hunger\"/>\n        <Action ID=\"InitAnimalJob\"/>\n        <Action ID=\"InitButcherJob\"/>\n        <Action ID=\"InitJob\"/>\n        <Condition ID=\"IsButcherJob\"/>\n        <Condition ID=\"IsDrinkFull\"/>\n        <Condition ID=\"IsFull\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInCombat\"/>\n        <Condition ID=\"IsSleepy\"/>\n        <Condition ID=\"IsThirsty\"/>\n        <Condition ID=\"IsTrainer\"/>\n        <Condition ID=\"IsTrainingTime\"/>\n        <Condition ID=\"IsVeryHungry\"/>\n        <Condition ID=\"IsVeryThirsty\"/>\n        <SubTree ID=\"JobButcherAnimal\"/>\n        <SubTree ID=\"JobDyeAnimal\"/>\n        <SubTree ID=\"JobHarvestAnimal\"/>\n        <SubTree ID=\"JobHaulMultiple\"/>\n        <SubTree ID=\"JobLeadAnimalToPasture\"/>\n        <SubTree ID=\"JobStandard\"/>\n        <SubTree ID=\"JobTameAnimal\"/>\n        <SubTree ID=\"Jobs\"/>\n        <Action ID=\"Move\"/>\n        <SubTree ID=\"MoveAllItemsToJob\"/>\n        <SubTree ID=\"OldMoveAllItemsToJob\"/>\n        <Action ID=\"PickUpItem\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"ReleaseAnimal\"/>\n        <Action ID=\"ReturnAlwaysRunning\"/>\n        <Action ID=\"Sleep\"/>\n        <SubTree ID=\"Sleepy\"/>\n        <Action ID=\"SuperviseTraining\"/>\n        <Action ID=\"TameAnimal\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n        <SubTree ID=\"Thirst\"/>\n        <Action ID=\"Train\"/>\n        <SubTree ID=\"Trainer\"/>\n        <SubTree ID=\"Training\"/>\n        <Action ID=\"UniformCleanUp\"/>\n        <Action ID=\"Work\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate its path with periodic replanning at 1 Hz and includes recovery actions. The robot will attempt navigation with replanning using a grid-based planner, and if it encounters difficulties, it will retry the navigation process up to 6 times. If the initial recovery fails, it will then follow a recovery fallback sequence that involves updating the goal, clearing the local and global costmaps, spinning, and waiting.\n\nOverall, the behavior tree ensures robust navigation by periodically replanning the path, attempting recovery in case of failures, and performing necessary recovery actions such as clearing costmaps and adjusting the goal.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"2.0\">        \n          <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>          \n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.0\"/>\n          <Wait wait_duration=\"1\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a series of actions for a robot. It begins by checking the status, then proceeds to open and close the gripper in sequence. Finally, it initiates a verbal communication, likely through speech synthesis or audio playback.\n\nAdditionally, the behavior tree includes external XML files \"Check.xml\" and \"Talk.xml\", suggesting that the CheckStatus and SayStuff behaviors are defined in separate files for modularity and reusability. This structure allows for easy modification and management of individual behaviors without impacting the main behavior tree.\n\nOverall, the behavior tree coordinates a set of sequential tasks for the robot, ensuring that it checks its status, manipulates its gripper, and engages in verbal communication as part of its operation.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\t\n    <include path=\"Check.xml\" />\n    <include path=\"subtrees/Talk.xml\" />\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <CheckStatus/>\n            <OpenGripper/>\n            <CloseGripper/>\n            <SayStuff/>\n        </Sequence>\n    </BehaviorTree>\n\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a navigation system for a robot. The robot is programmed to navigate towards a goal location while continuously updating its path and following the updated path using a rate controller. The process involves updating the goal based on input, computing a path to the updated goal using a specified planner, truncating the computed path, and then continuously following the truncated path until successful or failure. This behavior tree ensures that the robot navigates towards its goal with continuous replanning and path following, providing a robust and adaptive navigation behavior.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n         <TruncatePath distance=\"1.0\" input_path=\"{path}\" output_path=\"{truncated_path}\"/>\n        </Sequence>\n      </RateController>\n      <KeepRunningUntilFailure>\n        <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\"/>\n      </KeepRunningUntilFailure>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a recovery system for a robot's navigation in case of failures. The system includes multiple levels of recovery attempts and reactive fallbacks to ensure robustness.\n\nThe RecoveryNode \"NavigateRecovery\" is set to retry the entire sequence three times if it fails. Within this, the PipelineSequence \"NavigateWithReplanning\" manages the navigation process. It uses a RateController to limit the frequency of execution and contains recovery nodes for computing a path to a pose and following the path. Each of these recovery nodes has its own retry mechanism.\n\nIn case of failure, the ReactiveFallback \"RecoveryFallback\" is triggered, which includes reactive actions such as clearing the local and global costmaps, spinning the robot, and waiting for a specified duration.\n\nOverall, the behavior tree is designed to handle navigation failures by attempting recovery at multiple stages and incorporating reactive behaviors to address unexpected situations.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"3\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"2.0\">\n          <RecoveryNode number_of_retries=\"3\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"3\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.0\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for a robot or autonomous agent. Initially, it executes \"go1\", followed by \"stay1\" and \"stay2\". Then, it proceeds with \"go1\", \"go2\", and \"go3\" in a sub-sequence. After that, it performs \"go2\" and \"go3\" sequentially. If the previous sequences are completed, it will execute \"go1\" and \"go2\" together. The tree also includes various other actions such as \"dumpRun\", \"goClosestR\", \"isFull\", \"mineResources\", \"moveBaseToGoal\", \"waitFrames\" which can be utilized within the defined sequences.\n\nThis behavior tree seems to represent a set of tasks for an autonomous agent or robot to follow, including movement, decision-making, and resource management. The specific details of what each action entails are not provided in the given XML, but the structure of the tree and the names of the actions give an",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Action ID=\"go1\"/>\n            <Sequence name=\"Sequence2\">\n                <Action ID=\"stay1\"/>\n                <Action ID=\"stay2\"/>\n                <Sequence name=\"Sequence3\">\n                    <Action ID=\"go1\"/>\n                    <Action ID=\"go2\"/>\n                    <Action ID=\"go3\"/>\n                </Sequence>\n            </Sequence>\n            <Action ID=\"go2\"/>\n            <Action ID=\"go3\"/>\n            <Sequence name=\"Sequence4\">\n                <Action ID=\"go1\"/>\n                <Action ID=\"go2\"/>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"goClosestR\"/>\n        <Condition ID=\"isFull\"/>\n        <Action ID=\"mineResources\"/>\n        <Action ID=\"moveBaseToGoal\">\n            <inout_port name=\"key_name\">goal</inout_port>\n        </Action>\n        <Action ID=\"stay1\"/>\n        <Action ID=\"stay2\"/>\n        <Action ID=\"waitFrames\">\n            <output_port name=\"barout\"/>\n            <inout_port name=\"baz\"/>\n            <input_port name=\"fooin\"/>\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree describes a sequence of movements for a robot. It starts by moving ahead 50 units, then turns left by 90 degrees. After that, it moves ahead 120 units, turns right by 90 degrees, and continues to move ahead 800 units. Then it turns right again by 90 degrees, moves ahead 450 units, and repeats the process by turning right, moving forward 600 units, moving back 600 units, and finally moving forward again for 600 units.\n\nOverall, the behavior tree instructs the robot to follow a specific path involving straight movements and turns to navigate through its environment.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root\">\n\n            <MoveAhead name=\"move\"\n                       distance=\"50\"/>\n\n            <Turn name=\"turn\"\n                  angle=\"-90\"/>\n\n            <MoveAhead name=\"move\"\n                       distance=\"120\"/>\n\n            <Turn name=\"turn\"\n                  angle=\"90\"/>\n\n            <MoveAhead name=\"move\"\n                       distance=\"800\"/>\n\n            <Turn name=\"turn\"\n                  angle=\"90\"/>\n\n            <MoveAhead name=\"move\"\n                       distance=\"450\"/>\n\n            <Turn name=\"turn\"\n                  angle=\"90\"/>\n\n            <MoveAhead name=\"move forward\"\n                       distance=\"600\"/>\n            <MoveAhead name=\"move back\"\n                       distance=\"-600\"/>\n            <MoveAhead name=\"move forward\"\n                       distance=\"600\"/>\n\n        </Sequence>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for an entity, likely an animal or a character in a simulation. The entity goes through a sequence of actions based on certain conditions and events. \n\nInitially, it tries to get a target, and if unsuccessful, it resorts to guarding a specific area. If it successfully gets a target, it proceeds to move towards the target. Upon reaching the target, it checks if the target is adjacent; if so, it attacks the target.\n\nThe available actions include finding prey, eating prey, entering a shed, finding a retreat, giving birth, laying eggs, leaving a shed, moving randomly, producing, sleeping, and attempting to have sex. There are also various conditions such as being adult, carnivorous, hungry, pregnant, and male or female. \n\nOverall, the behavior tree models the decision-making process of an entity with a focus on hunting, survival, and reproduction within a simulated environment.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SequenceStar>\n                <Fallback>\n                    <Action ID=\"GuardDogGetTarget\"/>\n\t\t\t\t\t<Action ID=\"GetTarget\"/>\n                </Fallback>\n                <Action ID=\"Move\"/>\n                <Sequence>\n                    <Condition ID=\"TargetAdjacent\"/>\n                    <Action ID=\"AttackTarget\"/>\n                </Sequence>\n            </SequenceStar>\n        </Sequence>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AttackTarget\"/>\n        <Condition ID=\"CanHaveSex\"/>\n        <Action ID=\"EatPrey\"/>\n        <Action ID=\"EnterShed\"/>\n        <Action ID=\"FindPrey\"/>\n        <Action ID=\"FindRandomPastureField\"/>\n        <Action ID=\"FindRetreat\"/>\n        <Action ID=\"FindShed\"/>\n        <Action ID=\"GiveBirth\"/>\n\t\t<Action ID=\"GetTarget\"/>\n        <Action ID=\"GuardDogGetTarget\"/>\n        <Condition ID=\"IsAdult\"/>\n        <Condition ID=\"IsCarnivore\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsEgg\"/>\n        <Condition ID=\"IsEggLayer\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHerbivore\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInShed\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Condition ID=\"IsOnPasture\"/>\n        <Condition ID=\"IsPregnant\"/>\n        <Condition ID=\"IsProducer\"/>\n        <Condition ID=\"IsReadyToGiveBirth\"/>\n        <Condition ID=\"IsWoodVermin\"/>\n        <Condition ID=\"IsYoung\"/>\n        <Action ID=\"KillPrey\"/>\n        <Action ID=\"LayEgg\"/>\n        <Action ID=\"LeaveShed\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"Produce\"/>\n        <Action ID=\"RandomMove\"/>\n        <SubTree ID=\"ShedTree\"/>\n        <Action ID=\"Sleep\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n        <Action ID=\"TryHaveSex\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is structured in a complex nested sequence and fallback pattern, where the robot is programmed to perform a series of actions. It starts with \"go1\" and then progresses through \"go2\", \"go3\", and finally \"go4\". If at any point an action fails, it will move back up the sequence and attempt the next action. The structure of the tree suggests a linear progression through the actions, with a fallback mechanism to handle failures and continue the task. However, the excessive nesting and lack of clear conditions or triggers make the behavior tree difficult to interpret without further context.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Fallback>\n                <Sequence>\n                    <Sequence>\n                        <Sequence>\n                            <Fallback>\n                                <Sequence>\n                                    <Sequence>\n                                        <Sequence>\n                                            <Sequence>\n                                                <Fallback>\n                                                    <Fallback>\n                                                        <Action ID=\"go4\"/>\n                                                    </Fallback>\n                                                </Fallback>\n                                            </Sequence>\n                                        </Sequence>\n                                    </Sequence>\n                                </Sequence>\n                            </Fallback>\n                        </Sequence>\n                    </Sequence>\n                </Sequence>\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"go4\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's search and navigation task. The robot first obtains the search pose from a designated search area. It then performs two tasks in parallel: \n1. It simultaneously checks if any object is perceived and scans the nearby floor.\n2. It also moves towards the obtained search pose. \nThe overall goal is to efficiently search for an object while navigating through the environment. If both parallel tasks are successful, the overall sequence succeeds.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n   <BehaviorTree ID=\"MainTree\">\n      <Sequence name=\"search\">\n        <GetSearchPose  name=\"get_search_pose\" location=\"search_area\" wp_pose=\"{pose}\"/>\n        <Parallel success_threshold=\"2\" failure_threshold=\"1\">\n          <Parallel success_threshold=\"1\" failure_threshold=\"1\">\n            <isObjectPerceived name=\"is_object_perceived\" target=\"any\"/>\n            <Scan name=\"scan\" mode=\"floor_near\"/>\n          </Parallel>\n          <Move name=\"move\" goal=\"{pose}\"/>\n        </Parallel>\n      </Sequence>\n   </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for a vehicle's path planning and control system. The tree is designed to handle various driving scenarios such as lane changes, pull-over maneuvers, avoidance actions, and lane following.\n\nThe main behavior tree \"BehaviorTree\" consists of different sequences and fallbacks to manage reactive behaviors based on conditions and actions. It includes sub-trees for specific tasks like lane change, pull-out, and lane following.\n\nAdditionally, there are separate behavior trees \"a\" and \"b\" that handle specific reactive fallback scenarios for lane changes and avoidance maneuvers, respectively.\n\nThe tree uses conditions to check for readiness and approval before executing specific actions such as lane change, pull-over, side shift, and avoidance. It also includes sub-trees for modularity and reusability of certain behaviors.\n\nOverall, the behavior tree orchestrates the decision-making process for the vehicle's path planning and control, ensuring safe and efficient navigation in various driving situations.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback>\n            <ReactiveSequence>\n                <Condition ID=\"PullOver_Request\"/>\n                <Condition ID=\"PullOver_Ready\"/>\n                <Action ID=\"PullOver_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"PullOut_Request\"/>\n                <Condition ID=\"PullOut_Ready\"/>\n                <Action ID=\"PullOut_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"LaneChange_Request\"/>\n                <Fallback>\n                    <Condition ID=\"LaneChange_Ready\"/>\n                    <Condition ID=\"ForceLaneChange_ForceApproval\"/>\n                </Fallback>\n                <Action ID=\"LaneChange_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <Action ID=\"LaneFollowing_Plan\" output=\"{output}\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"a\">\n        <ReactiveFallback>\n            <Condition ID=\"LaneChange_CheckApproval\"/>\n            <KeepRunningUntilFailure>\n                <Action ID=\"LaneChange_PlanCandidate\" output=\"{output}\"/>\n            </KeepRunningUntilFailure>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"b\">\n        <ReactiveFallback>\n            <Condition ID=\"Avoidance_CheckApproval\"/>\n            <KeepRunningUntilFailure>\n                <Action ID=\"Avoidance_PlanCandidate\" output=\"{output}\"/>\n            </KeepRunningUntilFailure>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Condition ID=\"Avoidance_CheckApproval\"/>\n        <Action ID=\"Avoidance_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"Avoidance_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"Avoidance_Ready\"/>\n        <Condition ID=\"Avoidance_Request\"/>\n        <Condition ID=\"ExternalApproval\"/>\n        <Condition ID=\"ForceApproval\"/>\n        <Condition ID=\"ForceLaneChange_ForceApproval\"/>\n        <Condition ID=\"LaneChange_CheckApproval\"/>\n        <Action ID=\"LaneChange_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"LaneChange_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"LaneChange_Ready\"/>\n        <Condition ID=\"LaneChange_Request\"/>\n        <Action ID=\"LaneFollowing_Plan\">\n            <output_port name=\"output\" type=\"boost::optional&lt;tier4_planning_msgs::PathWithLaneId_&lt;std::allocator&lt;void&gt; &gt; &gt;\">desc</output_port>\n        </Action>\n        <Action ID=\"LaneFollowing_PlanCandidate\">\n            <output_port name=\"output_candidate\" type=\"boost::optional&lt;tier4_planning_msgs::PathWithLaneId_&lt;std::allocator&lt;void&gt; &gt; &gt;\">desc</output_port>\n        </Action>\n        <Condition ID=\"LaneFollowing_Ready\"/>\n        <Condition ID=\"LaneFollowing_Request\"/>\n        <Action ID=\"PullOut_Plan\">\n            <output_port name=\"output\"/>\n        </Action>\n        <Condition ID=\"PullOut_Ready\"/>\n        <Condition ID=\"PullOut_Request\"/>\n        <Action ID=\"PullOver_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"PullOver_Ready\"/>\n        <Condition ID=\"PullOver_Request\"/>\n        <Condition ID=\"SideShift_CheckApproval\"/>\n        <Action ID=\"SideShift_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"SideShift_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"SideShift_Ready\"/>\n        <Condition ID=\"SideShift_Request\"/>\n        <SubTree ID=\"SubTree\"/>\n        <SubTree ID=\"a\"/>\n        <SubTree ID=\"b\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a system to dynamically navigate towards a goal while continuously replanning its path. The system updates the goal pose and computes a new path using a planner. It then truncates the computed path to a certain distance. This process is controlled by a rate controller that ensures the sequence runs at a specific frequency.\n\nOnce the path is truncated, the system follows this path using a specified controller until it reaches the goal or encounters a failure. The behavior tree is structured in a way that allows for continuous replanning and navigation, ensuring the system can adapt to changing environments or obstacles.",
        "output": "<!--\n  This Behavior Tree follows a dynamic pose to a certain distance\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n         <TruncatePath distance=\"1.0\" input_path=\"{path}\" output_path=\"{truncated_path}\"/>\n        </Sequence>\n      </RateController>\n      <KeepRunningUntilFailure>\n        <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\"/>\n      </KeepRunningUntilFailure>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a sequence of actions for a system. It starts with \"go1\" action, and if that fails, it tries \"go2\". If \"go2\" also fails, it attempts \"go3\", and if that fails, it finally executes \"go4\". The structure suggests a hierarchical approach to problem-solving, where the system tries different actions based on the outcome of previous ones until it achieves success.\n\nThis behavior tree is designed to handle various failure scenarios by providing alternative actions at each level of the hierarchy. The system will continue to explore different options until it finds a successful course of action, as indicated by the execution of \"go1\", \"go2\", \"go3\", or \"go4\".",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"go1\"/>\n            <Fallback>\n                <Sequence>\n                    <Action ID=\"go2\"/>\n                </Sequence>\n                <Sequence>\n                    <Sequence>\n                        <Sequence>\n                            <Fallback>\n                                <Sequence>\n                                    <Sequence>\n                                        <Sequence>\n                                            <Sequence>\n                                                <Fallback>\n                                                    <Fallback>\n                                                        <Action ID=\"go4\"/>\n                                                    </Fallback>\n                                                </Fallback>\n                                            </Sequence>\n                                        </Sequence>\n                                    </Sequence>\n                                </Sequence>\n                                <Sequence>\n                                    <Action ID=\"go3\"/>\n                                </Sequence>\n                            </Fallback>\n                        </Sequence>\n                    </Sequence>\n                </Sequence>\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"go4\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the automated process for a coffee machine. It begins with checking if the cleaning process is finished and there is enough water. If not, it proceeds to handle the water tank by removing, filling, and placing it back in the coffee machine. Similarly, it manages the marro (coffee grounds) tank.\n\nOnce these tasks are completed, the sequence progresses to opening the coffee machine, ensuring a clean cup is ready, and then switching on the machine. Subsequently, it handles placing the coffee cup, selecting the type of coffee, brewing the coffee, and adding milk or sugar based on user preferences. Finally, it ensures the cup is removed and performs any necessary cleaning.\n\nThe behavior tree employs various conditions, timeouts, retries, and actions to automate the entire coffee-making process, including maintenance tasks like tank refilling and cleaning. This comprehensive automation allows for efficient and seamless operation of the coffee machine.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"AutoClean\">\n        <Fallback>\n            <Condition ID=\"IsCleanProcessFinished\"/>\n            <Fallback>\n                <Condition ID=\"IsThereEnoughWater\"/>\n                <Sequence>\n                    <Timeout msec=\"5000\">\n                        <Condition ID=\"IsWaterTankRemoved\"/>\n                    </Timeout>\n                    <Fallback>\n                        <Timeout msec=\"5000\">\n                            <Condition ID=\"IsWaterTankFull\"/>\n                        </Timeout>\n                        <Action ID=\"FillWaterTank\"/>\n                    </Fallback>\n                    <RetryUntilSuccesful num_attempts=\"100\">\n                        <Condition ID=\"IsWaterTankPlacedInCoffeMachine\"/>\n                    </RetryUntilSuccesful>\n                </Sequence>\n            </Fallback>\n            <Fallback>\n                <Inverter>\n                    <Condition ID=\"IsMarroTankFull\"/>\n                </Inverter>\n                <Sequence>\n                    <Timeout msec=\"5000\">\n                        <Condition ID=\"IsMarroTankRemoved\"/>\n                    </Timeout>\n                    <Fallback>\n                        <Timeout msec=\"5000\">\n                            <Condition ID=\"IsMarroTankEmpty\"/>\n                        </Timeout>\n                        <Action ID=\"EmptyMarroTank\"/>\n                    </Fallback>\n                    <RetryUntilSuccesful num_attempts=\"100\">\n                        <Condition ID=\"IsMarroTankPlacedInCoffeMachine\"/>\n                    </RetryUntilSuccesful>\n                </Sequence>\n            </Fallback>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <SubTree ID=\"OpenCoffeMachine\" __shared_blackboard=\"false\"/>\n            <SubTree ID=\"AutoClean\" __shared_blackboard=\"false\"/>\n            <SubTree ID=\"PutCoffeCup\" __shared_blackboard=\"false\"/>\n            <SubTree ID=\"CoffeType\" __shared_blackboard=\"false\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"CoffeType\">\n        <Sequence>\n            <Fallback>\n                <Timeout msec=\"5000\">\n                    <Condition ID=\"IsDesiredCoffeSelected\"/>\n                </Timeout>\n                <Action ID=\"PressDesiredCoffe\"/>\n            </Fallback>\n            <Timeout msec=\"5000\">\n                <Condition ID=\"IsCoffeFinished\"/>\n            </Timeout>\n            <Timeout msec=\"5000\">\n                <Condition ID=\"HasCupOffCoffeBeenRemoved\"/>\n            </Timeout>\n            <Timeout msec=\"5000\">\n                <Fallback>\n                    <Condition ID=\"HasHumanAddedCleaningCup\"/>\n                    <Sequence>\n                        <Action ID=\"PlaceCleanCup\"/>\n                        <Action ID=\"SwitchOffCoffeMachine\"/>\n                    </Sequence>\n                </Fallback>\n            </Timeout>\n            <Timeout msec=\"5000\">\n                <Fallback name=\"arallel\">\n                    <Condition ID=\"HasHumanAddedMilk\"/>\n                    <Sequence>\n                        <Fallback>\n                            <Inverter>\n                                <Condition ID=\"IsMilkDesired\"/>\n                            </Inverter>\n                            <Action ID=\"AddMilktoCoffe\"/>\n                        </Fallback>\n                        <Fallback>\n                            <Inverter>\n                                <Condition ID=\"IsSugarDesired\"/>\n                            </Inverter>\n                            <Action ID=\"AddSugarToCoffe\"/>\n                        </Fallback>\n                    </Sequence>\n                </Fallback>\n            </Timeout>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"OpenCoffeMachine\">\n        <Fallback>\n            <Condition ID=\"IsMachineOpen\"/>\n            <Sequence>\n                <RetryUntilSuccesful num_attempts=\"10\">\n                    <Condition ID=\"IsCleanCupReady\"/>\n                </RetryUntilSuccesful>\n                <Fallback>\n                    <Timeout msec=\"5000\">\n                        <Condition ID=\"IsMachineOpen\"/>\n                    </Timeout>\n                    <Action ID=\"SwitchOnCoffeMachine\"/>\n                </Fallback>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"PutCoffeCup\">\n        <Fallback>\n            <Timeout msec=\"5000\">\n                <Condition ID=\"IsCoffeCupReady\"/>\n            </Timeout>\n            <Action ID=\"PlaceCoffeCup\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AddMilktoCoffe\"/>\n        <Action ID=\"AddSugarToCoffe\"/>\n        <SubTree ID=\"AutoClean\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n        </SubTree>\n        <SubTree ID=\"CoffeType\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n        </SubTree>\n        <Action ID=\"EmptyMarroTank\"/>\n        <Action ID=\"FillWaterTank\"/>\n        <Condition ID=\"HasCupOffCoffeBeenRemoved\"/>\n        <Condition ID=\"HasHumanAddedCleaningCup\"/>\n        <Condition ID=\"HasHumanAddedMilk\"/>\n        <Condition ID=\"IsCleanCupReady\"/>\n        <Condition ID=\"IsCleanProcessFinished\"/>\n        <Condition ID=\"IsCoffeCupReady\"/>\n        <Condition ID=\"IsCoffeFinished\"/>\n        <Condition ID=\"IsDesiredCoffeSelected\"/>\n        <Condition ID=\"IsMachineOpen\"/>\n        <Condition ID=\"IsMarroTankEmpty\"/>\n        <Condition ID=\"IsMarroTankFull\"/>\n        <Condition ID=\"IsMarroTankPlacedInCoffeMachine\"/>\n        <Condition ID=\"IsMarroTankRemoved\"/>\n        <Condition ID=\"IsMilkDesired\"/>\n        <Condition ID=\"IsSugarDesired\"/>\n        <Condition ID=\"IsThereEnoughWater\"/>\n        <Condition ID=\"IsWaterTankFull\"/>\n        <Condition ID=\"IsWaterTankPlacedInCoffeMachine\"/>\n        <Condition ID=\"IsWaterTankRemoved\"/>\n        <SubTree ID=\"OpenCoffeMachine\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n        </SubTree>\n        <Action ID=\"PlaceCleanCup\"/>\n        <Action ID=\"PlaceCoffeCup\"/>\n        <Action ID=\"PressDesiredCoffe\"/>\n        <SubTree ID=\"PutCoffeCup\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n        </SubTree>\n        <Action ID=\"SwitchOffCoffeMachine\"/>\n        <Action ID=\"SwitchOnCoffeMachine\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for an animal or creature. The tree contains multiple sequences and conditions that dictate the actions of the entity based on its environment and internal state.\n\nThe main sequence involves three fallback options:\n1. If the entity is on a pasture during the day, it will leave the shed, find a random pasture field, and move there.\n2. If the entity is on a pasture at night and not in a shed, it will find a shed, move towards it, and enter the shed.\n3. If it's daytime and not in a shed, it will perform a random move.\n\nThe tree also includes various conditions and actions such as determining if the entity is adult, carnivorous, hungry, pregnant, etc., and performing corresponding actions like eating prey, giving birth, laying eggs, moving, sleeping, etc.\n\nOverall, the behavior tree orchestrates the entity's behaviors based on its surroundings and internal states, ensuring it acts appropriately in different situations.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <FallbackStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsDay\"/>\n                <Condition ID=\"IsInShed\"/>\n                <Action ID=\"LeaveShed\"/>\n                <Action ID=\"FindRandomPastureField\"/>\n                <Action ID=\"Move\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsNight\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"FindShed\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"EnterShed\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsDay\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"RandomMove\"/>\n            </SequenceStar>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Condition ID=\"CanHaveSex\"/>\n        <Action ID=\"EatPrey\"/>\n        <Action ID=\"EnterShed\"/>\n        <Action ID=\"FindPrey\"/>\n        <Action ID=\"FindRandomPastureField\"/>\n        <Action ID=\"FindRetreat\"/>\n        <Action ID=\"FindShed\"/>\n        <Action ID=\"GiveBirth\"/>\n        <Condition ID=\"IsAdult\"/>\n        <Condition ID=\"IsCarnivore\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsEgg\"/>\n        <Condition ID=\"IsEggLayer\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHerbivore\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInShed\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Condition ID=\"IsOnPasture\"/>\n        <Condition ID=\"IsPregnant\"/>\n        <Condition ID=\"IsProducer\"/>\n        <Condition ID=\"IsReadyToGiveBirth\"/>\n        <Condition ID=\"IsWoodVermin\"/>\n        <Condition ID=\"IsYoung\"/>\n        <Action ID=\"KillPrey\"/>\n        <Action ID=\"LayEgg\"/>\n        <Action ID=\"LeaveShed\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"Produce\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"Sleep\"/>\n        <Action ID=\"TryHaveSex\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's actions in a competition. The robot is initialized and then executes multiple tasks concurrently or sequentially, such as checking the presence of specific conditions, controlling its eyes' display, handling palets (small discs), and managing the timer.\n\nIt begins by checking if the robot is ready and then proceeds to perform several tasks simultaneously, including monitoring the presence of a lever, starting and stopping a timer, sorting palets based on their color, displaying various images through its eyes, and adding scores based on the completed tasks.\n\nIf certain conditions are met, it performs specific movements to handle the palets, adjust its position, and interact with different areas of the competition field. Additionally, it handles interruptions and failures gracefully, ensuring that critical tasks are completed and scores are updated accordingly.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Condition ID=\"RobotPret\" />\n            <RealParallel> \n                <SubTree ID=\"TiretteAndStop\" y_mul=\"y_mul\" theta_mul=\"theta_mul\" camp=\"camp\" tirette_presente_last_tick=\"tirette_presente_last_tick\" palets_depart=\"palets_depart\" palet_pente=\"palet_pente\" palet_chaos=\"palet_chaos\" />\n                <SubTree ID=\"MinuterieAndstartAndStopWhenTimeout\" palets_depart=\"palets_depart\" palet_pente=\"palet_pente\" palet_chaos=\"palet_chaos\" tirette_presente_last_tick=\"tirette_presente_last_tick\" />\n                <SubTree ID=\"Trier les palets\" camp=\"camp\" palets_depart=\"palets_depart\" palet_pente=\"palet_pente\" y_mul=\"y_mul\" theta_mul=\"theta_mul\" palet_chaos=\"palet_chaos\" />\n                <SubTree ID=\"Palets zone chaos\" camp=\"camp\" palet_chaos=\"palet_chaos\" y_mul=\"y_mul\" theta_mul=\"theta_mul\" />\n                <SubTree ID=\"Yeux\" camp=\"camp\"/>\n            </RealParallel>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"TiretteAndStop\">\n        <ForceSuccess>\n            <Fallback>\n                <Sequence>\n                    <Condition ID=\"TiretteLaserPresente\"/>\n                    <SetBlackboard value=\"true\" output_key=\"tirette_presente_last_tick\"/>\n                    <Action ID=\"Arreter le robot\" />\n                    <Action ID=\"VitesseConstante\" linear_x=\"0.0\" linear_y=\"0.0\" angular_z=\"0.0\" />\n                    <Action ID=\"DefinirLeScore\" score=\"40\"/>\n                    <Action ID=\"ArreterLaMinuterie\"/> \n                    <Action ID=\"RestartRosbags\" />\n                    <SetBlackboard value=\"0\" output_key=\"palets_depart\"/>\n                    <SetBlackboard value=\"0\" output_key=\"palet_pente\"/>\n                    <Fallback>\n                        <Sequence>\n                            <Condition ID=\"LaVoieEstLibre-Gauche\"/>\n                            <Action ID=\"DefinirPosition\" theta=\"0\" x=\"-0.18\" y=\"-1.18\"/>\n                            <SetBlackboard value=\"jaune\" output_key=\"camp\"/>\n                            <SetBlackboard value=\"1.0\" output_key=\"y_mul\"/>\n                            <SetBlackboard value=\"1.0\" output_key=\"sym_theta\"/>\n                            <Action ms=\"500\" ID=\"Attendre\"/>\n                        </Sequence>\n                        <Sequence>\n                            <Action ID=\"DefinirPosition\" theta=\"0\" x=\"-0.18\" y=\"1.18\"/>\n                            <SetBlackboard value=\"violet\" output_key=\"camp\"/>\n                            <SetBlackboard value=\"-1.0\" output_key=\"y_mul\"/>\n                            <SetBlackboard value=\"-1.0\" output_key=\"theta_mul\"/>\n                            <Action ms=\"500\" ID=\"Attendre\"/>\n                        </Sequence>\n                    </Fallback>\n                </Sequence>\n                <Sequence>\n                    <SetBlackboard value=\"false\" output_key=\"tirette_presente_last_tick\"/>\n                </Sequence>\n            </Fallback>\n        </ForceSuccess>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MinuterieAndstartAndStopWhenTimeout\">\n        <ForceSuccess>\n            <Fallback>\n                <BlackboardCheckString return_on_mismatch=\"FAILURE\" value_A=\"{tirette_presente_last_tick}\" value_B=\"true\">\n                    <Sequence>\n                        <Inverter>\n                            <Condition ID=\"TiretteLaserPresente\"/>\n                        </Inverter>\n                        <Action seconds=\"88\" ID=\"LancerLaMinuterie\"/>\n                        <SetBlackboard value=\"1\" output_key=\"palets_depart\"/>\n                    </Sequence>\n                </BlackboardCheckString>\n                <Sequence>\n                    <Inverter>\n                        <Condition ID=\"MinuterieNonEcoulee\"/>\n                    </Inverter>\n                    <SetBlackboard value=\"0\" output_key=\"palets_depart\"/>\n                    <SetBlackboard value=\"0\" output_key=\"palet_pente\"/>\n                    <SetBlackboard value=\"0\" output_key=\"palet_chaos\"/>\n                    <Action ID=\"Arreter le robot\"/>\n                    <!--Action ID=\"VitesseConstante\" linear_x=\"0.0\" linear_y=\"0.0\" angular_z=\"0.0\" /-->\n                </Sequence>\n            </Fallback>\n        </ForceSuccess>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Trier les palets\">\n        <ForceSuccess>\n            <Fallback>\n                <BlackboardCheckString return_on_mismatch=\"FAILURE\" value_A=\"{palets_depart}\" value_B=\"1\">\n                    <Fallback>\n                        <BlackboardCheckString return_on_mismatch=\"FAILURE\" value_A=\"{camp}\" value_B=\"jaune\">\n                            <Sequence>\n                                <ReactiveSequence>\n                                    <Condition ID=\"LaVoieEstLibre-Devant\"/>\n                                    <JouerUnRosbag nom=\"r2_jaune_13pts.bag\" topics=\"/r2/mobile_base_controller/cmd_vel\" />\n                                </ReactiveSequence>\n                                <Action ID=\"AjouterAuScore\" score=\"13\"/>\n                                <SetBlackboard value=\"0\" output_key=\"palets_depart\"/>\n                                <SetBlackboard value=\"0\" output_key=\"palet_chaos\"/>\n                            </Sequence>\n                        </BlackboardCheckString>\n                        <BlackboardCheckString return_on_mismatch=\"FAILURE\" value_A=\"{camp}\" value_B=\"violet\">\n                            <Sequence>\n                            <ReactiveSequence>\n                                <Condition ID=\"LaVoieEstLibre-Devant\"/>\n                                <JouerUnRosbag nom=\"r2_violet_13pts.bag\" topics=\"/r2/mobile_base_controller/cmd_vel\" />\n                            </ReactiveSequence>\n                            <Action ID=\"AjouterAuScore\" score=\"13\"/>\n                            <SetBlackboard value=\"0\" output_key=\"palets_depart\"/>\n                            <SetBlackboard value=\"0\" output_key=\"palet_chaos\"/>\n                            </Sequence>\n                        </BlackboardCheckString>\n                        <Action ID=\"VitesseConstante\" linear_x=\"0.0\" linear_y=\"0.0\" angular_z=\"0.0\" />\n                    </Fallback>\n                </BlackboardCheckString>\n                <BlackboardCheckString return_on_mismatch=\"FAILURE\" value_A=\"{palet_pente}\" value_B=\"1\">\n                    <Sequence>\n                        <Action ID=\"Aller\" theta=\"90\" x=\"0.8\" y=\"1.2\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"aller au pied de la balance\"/>\n                        <Action ID=\"AjouterAuScore\" score=\"12\"/>\n                        <SetBlackboard value=\"0\" output_key=\"palet_pente\"/>\n                    </Sequence>\n                </BlackboardCheckString>\n            </Fallback>\n        </ForceSuccess>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Yeux\">\n        <RealParallel>\n            <Sequence>\n                <Action message=\"content.gif\" repetition=\"1\" defaut=\"1\" ID=\"AfficheYeux\" fps=\"2\"/>\n                <Action ms=\"10000\" ID=\"Attendre\"/>\n                <Action message=\"carre.gif\" repetition=\"1\" defaut=\"1\" ID=\"AfficheYeux\" fps=\"10\"/>\n                <Action ms=\"10000\" ID=\"Attendre\"/>\n                <Action message=\"folie.gif\" repetition=\"1\" defaut=\"1\" ID=\"AfficheYeux\" fps=\"2\"/>\n                <Action ms=\"10000\" ID=\"Attendre\"/>\n                <Action message=\"perdu.gif\" repetition=\"1\" defaut=\"1\" ID=\"AfficheYeux\" fps=\"4\"/>\n                <Action ms=\"10000\" ID=\"Attendre\"/>\n                <Action message=\"stardust.gif\" repetition=\"1\" defaut=\"1\" ID=\"AfficheYeux\" fps=\"1\"/>\n                <Action ms=\"10000\" ID=\"Attendre\"/>\n            </Sequence>\n            <ForceSuccess>\n                <ReactiveFallback>\n                    <Sequence>\n                        <Inverter>\n                            <Condition ID=\"RobotEnBonneSante\"/>\n                        </Inverter>  \n                        <Inverter>\n                            <Condition ID=\"MinuterieNonEcoulee\"/>\n                        </Inverter>  \n                        <Action message=\"CPU !!!\" repetition=\"1\" defaut=\"0\" ID=\"AfficheYeux\" fps=\"40\"/>\n                    </Sequence>\n                    <Sequence>\n                        <Condition ID=\"TiretteLaserPresente\"/>\n                        <Action message=\"{camp}\" repetition=\"1\" defaut=\"0\" ID=\"AfficheYeux\" fps=\"30\"/>\n                    </Sequence>\n                    <Sequence>\n                        <Condition ID=\"MinuterieDemarree\"/>\n                        <Condition ID=\"MinuterieNonEcoulee\"/>\n                        <Action ms=\"10000\" ID=\"Attendre\"/>\n                        <Action ID=\"RecupererLeScore\" score=\"{score}\"/>\n                        <Action message=\"{score}\" repetition=\"1\" defaut=\"0\" ID=\"AfficheYeux\" fps=\"30\"/>\n                    </Sequence>\n                    <Sequence>\n                        <Inverter>\n                            <Condition ID=\"MinuterieNonEcoulee\"/>\n                        </Inverter>    \n                        <Action ms=\"5000\" ID=\"Attendre\"/>\n                        <Action ID=\"RecupererLeScore\" score=\"{score}\"/>\n                        <Action message=\"{score}\" repetition=\"1\" defaut=\"0\" ID=\"AfficheYeux\" fps=\"15\"/>\n                    </Sequence>\n                </ReactiveFallback>\n            </ForceSuccess>\n        </RealParallel>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Palets zone chaos\">\n        <ForceSuccess>\n            <BlackboardCheckString return_on_mismatch=\"FAILURE\" value_A=\"{palet_chaos}\" value_B=\"1\">\n                <Sequence>\n                    <!--RetryUntilSuccesful num_attempts=\"3\">\n                        <Action ID=\"Aller\" theta=\"90\"  x=\"-0.5\" y=\"0.0\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"contourner les palets par l'extérieur\"/>\n                    </RetryUntilSuccesful>\n                    <RetryUntilSuccesful num_attempts=\"3\">\n                        <Action ID=\"Aller\" theta=\"-90\"  x=\"0.0\" y=\"0.0\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"contourner les palets par l'extérieur\"/>\n                    </RetryUntilSuccesful>\n                    <RetryUntilSuccesful num_attempts=\"3\">\n                        <Action ID=\"Aller\" theta=\"-90\"  x=\"0.0\" y=\"-0.7\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"contourner les palets par l'extérieur\"/>\n                    </RetryUntilSuccesful>\n                    <RetryUntilSuccesful num_attempts=\"3\">\n                        <Action ID=\"Aller\" theta=\"-150\"  x=\"-0.55\" y=\"-1.2\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"contourner les palets par l'extérieur\"/>\n                    </RetryUntilSuccesful>\n                    <ReactiveSequence>\n                        <Condition ID=\"LaVoieEstLibre-Derriere\" />\n                        <VitesseConstante linear_x=\"-0.1\" linear_y=\"0.0\" angular_z=\"0.0\" />\n                        <Action ms=\"2000\" ID=\"Attendre\"/>\n                    </ReactiveSequence-->\n                    <Action ID=\"AjouterAuScore\" score=\"16\"/>\n                    <SetBlackboard value=\"0\" output_key=\"palet_chaos\"/>\n                </Sequence>\n            </BlackboardCheckString>\n        </ForceSuccess>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Control ID=\"RealParallel\" />\n        <Action ID=\"AfficheYeux\">\n            <input_port default=\"0\" name=\"defaut\">1 = message par défaut</input_port>\n            <input_port default=\"4\" name=\"fps\">Frame per second (image animée)</input_port>\n            <input_port name=\"message\">Message ou nom de l'image</input_port>\n            <input_port default=\"1\" name=\"repetition\">Nombre d'itération</input_port>\n        </Action>\n        <Action ID=\"AjouterAuScore\">\n            <input_port name=\"score\"/>\n        </Action>\n        <Action ID=\"VitesseConstante\">\n            <input_port name=\"linear_x\"/>\n            <input_port name=\"linear_y\"/>\n            <input_port name=\"angular_z\"/>\n        </Action>\n        <Action ID=\"RestartRosbags\" />\n        <Action ID=\"Aller\">\n            <input_port name=\"theta\"/>\n            <input_port name=\"x\"/>\n            <input_port name=\"y\"/>\n            <input_port name=\"y\"/>\n            <input_port name=\"x_mul\"/>\n            <input_port name=\"y_mul\"/>\n            <input_port name=\"theta_mul\"/>\n            <input_port name=\"comment\"/>\n        </Action>\n        <Action ID=\"ArreterLaMinuterie\"/>\n        <Action ID=\"Attendre\">\n            <input_port name=\"ms\"/>\n        </Action>\n        <Action ID=\"DefinirLeScore\">\n            <input_port name=\"score\"/>\n        </Action>\n        <Action ID=\"DefinirPosition\">\n            <input_port name=\"theta\"/>\n            <input_port name=\"x\"/>\n            <input_port name=\"y\"/>\n        </Action>\n        <Action ID=\"RecupererLeScore\">\n            <output_port name=\"score\"/>\n        </Action>\n        <SubTree ID=\"Initialisation\"/>\n        <Action ID=\"Arreter le robot\" />\n        <Condition ID=\"TiretteLaserPresente\"/>\n        <Condition ID=\"LaVoieEstLibre-Devant\"/>\n    <Condition ID=\"LaVoieEstLibre-Gauche\"/>\n   <Condition ID=\"LaVoieEstLibre-Droite\"/>\n    <Condition ID=\"LaVoieEstLibre-Derriere\"/>\n\n        <Action ID=\"LancerLaMinuterie\">\n            <input_port name=\"seconds\"/>\n        </Action>\n        <SubTree ID=\"Minuterie\"/>\n        <Condition ID=\"MinuterieDemarree\"/>\n        <Condition ID=\"MinuterieNonEcoulee\"/>\n        <Condition ID=\"RobotPret\"/>\n        <Condition ID=\"ScoreInferieurA\">\n            <input_port name=\"score\"/>\n        </Condition>\n        <SubTree ID=\"Trier les palets\"/>\n        <SubTree ID=\"Yeux\"/>\n        <Action ID=\"JouerUnRosbag\">\n            <input_port name=\"nom\"/>\n            <input_port name=\"topics\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n<!--Action ID=\"Aller\" theta=\"90\"  x=\"0.30\" y=\"1.15\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"contourner les palets par l'extérieur\"/>\n<Action ID=\"Aller\" theta=\"180\" x=\"0.30\" y=\"1.05\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"se placer face aux palets\"/>\n<Action ID=\"Aller\" theta=\"180\" x=\"0.05\" y=\"1.05\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"capturer le palet vert\"/>\n<Action ID=\"Aller\" theta=\"270\" x=\"0.05\" y=\"1.05\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"tourner en directin de la zone de tri\"/>\n<Action ID=\"Aller\" theta=\"270\" x=\"0.05\" y=\"1.25\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"avancer dans la zone de tri\"/>\n<Action ID=\"Aller\" theta=\"180\" x=\"0.05\" y=\"1.25\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"se tourner en direction de la case verte\"/>\n<Action ID=\"Aller\" theta=\"180\" x=\"-0.25\" y=\"1.25\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"déposer le palet dans la case verte\"/>\n<Action ID=\"Aller\" theta=\"180\" x=\"0.1\" y=\"1.25\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"reculer pour libérer le palet\"/-->\n\n    <!--Action ID=\"Aller\" theta=\"90\" x=\"0.1\" y=\"1.05\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"remonter sur la ligne des palets\"/>\n<Action ID=\"Aller\" theta=\"180\" x=\"0.1\" y=\"1.05\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"se tourner vers les palets rouges\"/>\n<Action ID=\"Aller\" theta=\"180\" x=\"-0.55\" y=\"1.05\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"capturer les deux palets\"/>\n<Action ID=\"Aller\" theta=\"270\" x=\"-0.55\" y=\"1.05\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"se tourner en direction de la case rouge\"/>\n<Action ID=\"Aller\" theta=\"270\" x=\"-0.55\" y=\"1.25\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"pousser les palets au fond de la case rouge\"/>\n<Action ID=\"Aller\" theta=\"270\" x=\"-0.55\" y=\"1.05\" y_mul=\"{y_mul}\" theta_mul=\"{theta_mul}\" comment=\"libérer les palets\"/-->\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a robot's navigation system with periodic global path replanning at 1 Hz and recovery actions. The RecoveryNode specifies that the robot will attempt to navigate with replanning for a maximum of 6 retries. Within this, the Sequence \"NavigateWithReplanning\" is controlled by a RateController set at 1 Hz and includes a Fallback node for handling goal reaching and computing paths to poses. Following this, the robot executes the \"FollowPath\" task.\n\nIn case of failure, the \"RecoveryActions\" sequence is triggered, which includes the action \"Spin\". This indicates that if the robot encounters difficulties in navigating or following the planned path, it will engage in spinning as a recovery strategy.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\">\n      <Sequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <Fallback>\n            <GoalReached/>\n            <ComputePathToPose goal=\"${goal}\" path=\"${path}\"/>\n          </Fallback>\n        </RateController>\n        <FollowPath path=\"${path}\"/>\n      </Sequence>\n      <SequenceStar name=\"RecoveryActions\">\n        <Spin/>\n      </SequenceStar>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single task that sets the value of \"test\" in the robot's memory to 1 and keeps running indefinitely. This means that once the value is set, the task will continue to run without failure, repeatedly setting the value of \"test\" to 1.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<KeepRunningUntilFailure>\n\t\t\t<Sequence>\n  \t\t\t<SetBlackboard output_key=\"test\" value=\"1\" />\n\n\t\t\t</Sequence>\n\t\t</KeepRunningUntilFailure>\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a task for a robot to perform. The robot is programmed to track an action, smile, and then move towards a specific goal location in a loop for three cycles. During each cycle, the robot will set a new goal location and navigate towards it using a predefined behavior tree file. If any step fails, it will be forced to succeed. This behavior tree essentially orchestrates the robot's actions, ensuring it tracks, smiles, and navigates towards the specified goal locations within the given parameters.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n          <TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\t        <Repeat num_cycles=\"3\">\n\t            <Sequence>\n\t                <SmileAction level=\"3\" duration_ms=\"2000\" />\n\t                <SetBlackboard output_key=\"Goal_a\" value=\"-5.40,-5.37,90.0\" />\n\t                <Sequence>\n\t                 <ForceSuccess>\n\t                    <Nav2Client goal=\"{Goal_a}\" behavior_tree=\"/home/ubuntu/robot_ws/follow_point_elsabot.xml\" />\n                   </ForceSuccess>\n\t                </Sequence>\n\n\t            </Sequence>\n\t        </Repeat>\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's repetitive task of detecting human poses and responding with speech. The robot will continuously repeat the sequence, which involves detecting a human pose (either left or right) and then speaking out the corresponding message. If the expected pose is not detected, it will fallback to speaking a default message.\n\nIn summary, the behavior tree enables the robot to repeatedly detect human poses, respond with appropriate speech, and handle fallback scenarios if the expected poses are not detected. This process continues indefinitely as indicated by the high number of cycles specified in the repeat node.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Repeat num_cycles=\"9999\">\n\t\t\t<Sequence>\n\t\t\t\t<Sequence>\n\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t<HumanPoseDetect expected_pose_left=\"\" expected_pose_right=\"\"\n\t\t\t\t\t\t\t\tpose_left_speech=\"{pose_left_speech}\" pose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Left, \" msg2=\"{pose_left_speech}\" />\n\t\t\t\t\t</Fallback>\n\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t<HumanPoseDetect expected_pose_left=\"\" expected_pose_right=\"\"\n\t\t\t\t\t\t\t\tpose_left_speech=\"{pose_left_speech}\" pose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Right, \" msg2=\"{pose_right_speech}\" />\n\t\t\t\t\t</Fallback>\n\t\t\t\t</Sequence>\n\t\t\t</Sequence>\n\t\t</Repeat>\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robotic system. It begins by attempting to detect faces and then selects a specific face from the detected ones. The robot then performs parallel tasks, gazing at the selected face while also checking if the face's x-coordinate is less than 1.0. If it is, the robot stretches its arm; otherwise, it moves its arms to a home position. After this, the robot repeats the process or moves its arms to a low position.\n\nIf an error state occurs, the robot speaks in Portuguese, waits for 60 seconds, and then repeats the process. Additionally, there are various predefined actions such as moving the robot's base, detecting blocks, speaking, and waiting for a specified amount of time.\n\nThe behavior tree indicates that the robot is designed to interact with its environment, perform specific actions based on detected stimuli, handle errors, and execute predefined behaviors.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback>\n            <Sequence>\n                <Action pose_array=\"face_array\" topic=\"faces\" ID=\"GetPoseArray\" name=\"GetFaceList\"/>\n                <Action pose_array=\"{face_array}\" ID=\"SelectPose\" pose_stamped=\"face\" position_in_list=\"0\"/>\n                <Parallel threshold=\"2\">\n                    <Action ID=\"GazeAtTarget\" fixation_pose=\"{face}\" frame_id=\"base_footprint\" action_name=\"gaze\"/>\n                    <Fallback>\n                        <Sequence>\n                            <Action output_val=\"x_thresh\" ID=\"SelectFieldFromPoseStamped\" field=\"x\" pose_stamped=\"{face}\"/>\n                            <Condition ID=\"CompareDouble\" A=\"{x_thresh}\" Condition=\"&lt;\" B=\"1.0\"/>\n                            <ReactiveSequence>\n                                <Action output_val=\"y_thresh\" ID=\"SelectFieldFromPoseStamped\" field=\"y\" pose_stamped=\"{face}\"/>\n                                <Action topic=\"/vizzyArmRoutines/command\" ID=\"ArmRoutines\" gesture=\"STRETCH\"/>\n                            </ReactiveSequence>\n                        </Sequence>\n                        <SubTree ID=\"LowArms\"/>\n                    </Fallback>\n                </Parallel>\n            </Sequence>\n            <SubTree ID=\"LowArms\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"ErrorGameState\">\n        <SequenceStar>\n            <Action ID=\"Speak\" language=\"pt_PT\" action_name=\"nuance_speech_tts\" voice=\"Joaquim\" utterance=\"Não sei o estado do jogo\"/>\n            <Action ID=\"Speak\" language=\"pt_PT\" action_name=\"nuance_speech_tts\" voice=\"Joaquim\" utterance=\"Chamem o assistente\"/>\n            <Action ID=\"WaitForXSeconds\" result=\"SUCCESS\" seconds=\"60\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"LowArms\">\n        <Action topic=\"/vizzyArmRoutines/command\" ID=\"ArmRoutines\" gesture=\"HOME\"/>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\"/>\n            <input_port name=\"action_name\"/>\n        </Action>\n        <SubTree ID=\"ChargeST\"/>\n        <Action ID=\"CheckBattery\">\n            <output_port name=\"battery_state\" type=\"int\"/>\n            <output_port name=\"percentage\" type=\"double\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port name=\"charging_state\" type=\"int\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Action ID=\"DetectBlocks\">\n            <output_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void> >\"/>\n            <input_port name=\"block_topic\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <SubTree ID=\"ErrorGameState\"/>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"GetInt16\">\n            <output_port name=\"number\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GetPoseArray\">\n            <output_port name=\"pose_array\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"goal_pose\"/>\n        </Action>\n        <Action ID=\"SelectBlock\">\n            <input_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void> >\"/>\n            <output_port name=\"block_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void> >\"/>\n            <input_port name=\"position_in_list\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"SelectFieldFromPoseStamped\">\n            <input_port name=\"field\"/>\n            <output_port name=\"output_val\"/>\n            <input_port name=\"pose_stamped\"/>\n        </Action>\n        <Action ID=\"SelectPose\">\n            <input_port name=\"pose_array\"/>\n            <output_port name=\"pose_stamped\"/>\n            <input_port name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"action_name\" type=\"std::string\"/>\n            <input_port name=\"language\" type=\"std::string\"/>\n            <input_port name=\"utterance\" type=\"std::string\"/>\n            <input_port name=\"voice\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port default=\"SUCCESS\" name=\"result\">Result after specified time: SUCCESS or FAILURE</input_port>\n            <input_port default=\"5\" name=\"seconds\">Time in seconds</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a complex decision-making process for a robotic system. It involves multiple actions and conditions to handle various scenarios. The tree structure includes repetitive sequences with fallback mechanisms, reactive sequences, and conditional checks.\n\nThe robot is designed to execute a series of actions based on the input parameters provided. These actions include movement (e.g., move, stay, pick, drop), detection, replanning requests, and updating logical transition language (LTL) states. The tree also incorporates error handling through force failure nodes and condition checks.\n\nThe overall goal appears to be orchestrating the robot's behavior in dynamic environments by reacting to events, performing tasks according to predefined logic, and managing state transitions. The tree seems to prioritize robustness and adaptability, ensuring that the robot can handle unexpected situations and adjust its actions accordingly.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Condition ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <Action ID=\"FakeDetectionLevel1\" replanning_fake_input=\"{replanning_fake_input}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel1\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Condition ID=\"ReactiveLTLStateCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Action ID=\"FakeDetectionLevel3\" replanning_fake_input=\"{replanning_fake_input}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Switch4 case_1=\"move\" case_2=\"stay\" case_3=\"pick\" case_4=\"drop\" variable=\"{bt_action_type}\">\n                            <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                            <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"PickAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"DropAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <AlwaysFailure/>\n                        </Switch4>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"BackNormalAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"DropAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel1\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel2\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel3\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"GuideAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Condition>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Condition ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Condition>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"PickAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"ReactiveLTLStateCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Condition>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel1\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions for a robot or an autonomous agent. The main task involves navigating through a series of predefined locations, with fallbacks and sequences to handle different scenarios.\n\nInitially, the agent attempts to execute \"go1\", followed by a sequence that includes \"go2\" and \"go6\". If any of these fail, it resorts to \"go3\", \"go4\", and \"go5\" in a fallback manner. After this, it proceeds with \"go7\" and \"go8\".\n\nThe behavior tree also includes various other actions such as resource management (\"mineResource\", \"mineResources\"), waiting (\"waitFrames\", \"waitFrames2\", \"waitFrames3\"), and movement (\"moveBaseToGoal\"). These actions likely support the primary navigation task or provide additional functionalities.\n\nOverall, the behavior tree orchestrates the agent's decision-making process, guiding it through a set of predefined actions and handling contingencies through fallbacks and sequences.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback>\n            <Action ID=\"go1\"/>\n            <Sequence name=\"Sequence2\">\n                <Action ID=\"go2\"/>\n                <Fallback>\n                    <Action ID=\"go3\"/>\n                    <Action ID=\"go4\"/>\n                    <Action ID=\"go5\"/>\n                </Fallback>\n                <Action ID=\"go6\"/>\n            </Sequence>\n            <Action ID=\"go7\"/>\n            <Action ID=\"go8\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"go4\"/>\n        <Action ID=\"go5\"/>\n        <Action ID=\"go6\"/>\n        <Action ID=\"go7\"/>\n        <Action ID=\"go8\"/>\n        <Action ID=\"goClosestR\"/>\n        <Condition ID=\"isFull\"/>\n        <Action ID=\"mineResource\"/>\n        <Action ID=\"mineResources\"/>\n        <Action ID=\"moveBaseToGoal\">\n            <input_port name=\"key_name\">goal</input_port>\n        </Action>\n        <Action ID=\"stay1\"/>\n        <Action ID=\"stay2\"/>\n        <Action ID=\"waitFrames\">\n            <output_port name=\"barout\"/>\n            <input_port name=\"baz\"/>\n            <input_port name=\"fooin\"/>\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n        <Action ID=\"waitFrames2\">\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n        <Action ID=\"waitFrames3\">\n            <inout_port default=\"4\" name=\"d_one\">has default</inout_port>\n            <inout_port name=\"d_zero\">d1</inout_port>\n            <input_port default=\"2\" name=\"frames\"/>\n            <input_port name=\"stagger\">not a real argument, the other has a default</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single task where the robot is instructed to get the pose from a specific waypoint. The \"GetPoseFromWp\" task takes an argument (wp_id) and retrieves the pose of the specified waypoint, storing it in the variable \"{pose}\". This behavior tree is designed for the robot to obtain the position information of a particular waypoint, likely as part of its navigation or mapping functionality.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n   <BehaviorTree ID=\"MainTree\">\n     <GetPoseFromWp  name=\"get_pose_from_wp\" wp_id=\"{arg0}\" wp_pose=\"{pose}\"/>\n   </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robot's navigation with periodic global path replanning at a frequency of 1 Hz. It utilizes a PipelineSequence consisting of two steps: SpeedController and FollowPath. The SpeedController component sets the speed limits and computes a path to a specified goal using the GridBased planner, while the FollowPath component guides the robot along the computed path using a designated controller. The overall objective is to ensure that the robot navigates effectively by continuously updating its path based on changing environmental conditions or new obstacles, thus enabling it to reach its destination efficiently.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <SpeedController min_rate=\"0.1\" max_rate=\"1.0\" min_speed=\"0.0\" max_speed=\"0.26\" filter_duration=\"0.3\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </SpeedController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an environment with periodic global path replanning at 1 Hz and includes recovery actions. The robot uses a pipeline sequence for navigation with replanning, allowing it to adjust its path as needed. If the initial path planning fails, it retries up to 4 times before moving on to following the path.\n\nThe \"NavigateRecovery\" node handles the overall recovery process, including retrying failed navigation actions and waiting for goal updates. Within this, the \"ComputePathToPose\" node plans the path to the goal using a grid-based planner and has recovery actions in case of failure. Similarly, the \"FollowPath\" node follows the planned path and has its own recovery actions.\n\nIn case of failures or interruptions during navigation, the recovery nodes handle clearing costmaps and performing other recovery actions to ensure smooth navigation. Overall, the behavior tree provides robust navigation capabilities with adaptive replanning and recovery mechanisms.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"2\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"4\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ReactiveFallback name=\"PathToPoseFallback\">\n              <GoalUpdated/>\n              <RoundRobin name=\"GlobalPlannerRecoveryActions\">\n                <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n                <Wait wait_duration=\"2\"/>\n              </RoundRobin>\n            </ReactiveFallback>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"4\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ReactiveFallback name=\"FollowPathFallback\">\n            <GoalUpdated/>\n            <RoundRobin name=\"PlannerRecoveryActions\">\n              <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n              <Spin spin_dist=\"1.57\"/>\n            </RoundRobin>\n          </ReactiveFallback>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <Wait wait_duration=\"5\"/>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a decision-making process for an autonomous vehicle. It consists of multiple sequences and fallbacks to handle various driving scenarios.\n\nThe main sequence includes reactive sequences for actions such as pulling over, pulling out, lane change, and lane following. Each reactive sequence contains conditions and actions related to the specific driving task. Additionally, there are sub-trees \"a\" and \"b\" representing further decision-making processes for lane change approval and avoidance maneuvers, respectively.\n\nThe tree nodes model defines various conditions and actions related to driving behaviors such as lane change, lane following, pull out, pull over, side shift, and avoidance maneuvers. These actions involve planning and outputting behavior module descriptions or candidate paths.\n\nOverall, the behavior tree orchestrates the decision-making and action planning for the autonomous vehicle's driving behaviors, including handling requests, readiness, approvals, and executing appropriate driving maneuvers based on the given conditions.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback>\n            <ReactiveSequence>\n                <Condition ID=\"PullOver_Request\"/>\n                <Condition ID=\"PullOver_Ready\"/>\n                <Action ID=\"PullOver_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"PullOut_Request\"/>\n                <Condition ID=\"PullOut_Ready\"/>\n                <Action ID=\"PullOut_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"LaneChange_Request\"/>\n                <Fallback>\n                    <Condition ID=\"LaneChange_Ready\"/>\n                    <Condition ID=\"ForceLaneChange_ForceApproval\"/>\n                </Fallback>\n                <Action ID=\"LaneChange_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <Action ID=\"LaneFollowing_Plan\" output=\"{output}\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"a\">\n        <ReactiveFallback>\n            <Condition ID=\"LaneChange_CheckApproval\"/>\n            <KeepRunningUntilFailure>\n                <Action ID=\"LaneChange_PlanCandidate\" output=\"{output}\"/>\n            </KeepRunningUntilFailure>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"b\">\n        <ReactiveFallback>\n            <Condition ID=\"Avoidance_CheckApproval\"/>\n            <KeepRunningUntilFailure>\n                <Action ID=\"Avoidance_PlanCandidate\" output=\"{output}\"/>\n            </KeepRunningUntilFailure>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Condition ID=\"Avoidance_CheckApproval\"/>\n        <Action ID=\"Avoidance_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"Avoidance_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"Avoidance_Ready\"/>\n        <Condition ID=\"Avoidance_Request\"/>\n        <Condition ID=\"ExternalApproval\"/>\n        <Condition ID=\"ForceApproval\"/>\n        <Condition ID=\"ForceLaneChange_ForceApproval\"/>\n        <Condition ID=\"LaneChange_CheckApproval\"/>\n        <Action ID=\"LaneChange_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"LaneChange_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"LaneChange_Ready\"/>\n        <Condition ID=\"LaneChange_Request\"/>\n        <Action ID=\"LaneFollowing_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"LaneFollowing_PlanCandidate\">\n            <output_port name=\"output_candidate\" type=\"boost::optional&lt;tier4_planning_msgs::PathWithLaneId_&lt;std::allocator&lt;void&gt; &gt; &gt;\">desc</output_port>\n        </Action>\n        <Condition ID=\"LaneFollowing_Ready\"/>\n        <Condition ID=\"LaneFollowing_Request\"/>\n        <Action ID=\"PullOut_Plan\">\n            <output_port name=\"output\"/>\n        </Action>\n        <Condition ID=\"PullOut_Ready\"/>\n        <Condition ID=\"PullOut_Request\"/>\n        <Action ID=\"PullOver_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"PullOver_Ready\"/>\n        <Condition ID=\"PullOver_Request\"/>\n        <Condition ID=\"SideShift_CheckApproval\"/>\n        <Action ID=\"SideShift_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"SideShift_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"SideShift_Ready\"/>\n        <Condition ID=\"SideShift_Request\"/>\n        <SubTree ID=\"SubTree\"/>\n        <SubTree ID=\"a\"/>\n        <SubTree ID=\"b\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for a robotic system. The robot is programmed to perform a sequence of actions, including moving to specific locations (go1, go2, go3), staying in place (stay1, stay2), and executing a dumpRun action. Additionally, it can check if a condition \"isFull\" is met and mine resources accordingly.\n\nThe sequence starts with go1, followed by staying at two different locations simultaneously (stay1 and stay2), then proceeding to go2 and go3 consecutively. If the condition \"isFull\" is satisfied, the robot will execute the mineResources action. Throughout these actions, the robot may also move its base to a specified goal location using the moveBaseToGoal action.\n\nFurthermore, the robot has the capability to wait for a certain number of frames before continuing with other actions, as indicated by the waitFrames action.\n\nOverall, the behavior tree outlines the decision flow and possible actions that the robot can take based on",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"go1\"/>\n            <Sequence>\n                <Action ID=\"stay1\"/>\n                <Action ID=\"stay2\"/>\n            </Sequence>\n            <Action ID=\"go2\"/>\n            <Action ID=\"go3\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"goClosestR\"/>\n        <Condition ID=\"isFull\"/>\n        <Action ID=\"mineResources\"/>\n        <Action ID=\"moveBaseToGoal\">\n            <input_port name=\"key_name\">goal</input_port>\n        </Action>\n        <Action ID=\"stay1\"/>\n        <Action ID=\"stay2\"/>\n        <Action ID=\"waitFrames\">\n            <output_port name=\"barout\"/>\n            <input_port name=\"baz\"/>\n            <input_port name=\"fooin\"/>\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a sequence of actions for a robot or an autonomous agent. The sequence involves the robot performing various tasks such as moving to specific locations, staying in place, and executing mining or resource gathering operations.\n\nThe main sequence includes sub-sequences where the robot is instructed to move to different locations (go1, go2, go3) and perform specific actions at each location. Additionally, there are conditions such as \"isFull\" and actions like \"mineResources\" indicating decision-making and resource management within the behavior tree.\n\nThe tree also contains nodes for waiting frames and dumping run, which might be related to timing and data processing.\n\nOverall, the behavior tree outlines a complex set of tasks and decision-making processes for the robot, involving movement, action execution, and resource management.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Action ID=\"go1\"/>\n            <Sequence name=\"Sequence2\">\n                <Action ID=\"stay1\"/>\n                <Action ID=\"stay2\"/>\n                <Sequence name=\"Sequence3\">\n                    <Action ID=\"go1\"/>\n                    <Action ID=\"go2\"/>\n                    <Action ID=\"go3\"/>\n                </Sequence>\n            </Sequence>\n            <Action ID=\"go2\"/>\n            <Action ID=\"go3\"/>\n            <Sequence name=\"Sequence4\">\n                <Action ID=\"go1\"/>\n                <Action ID=\"go2\"/>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"goClosestR\"/>\n        <Condition ID=\"isFull\"/>\n        <Action ID=\"mineResources\"/>\n        <Action ID=\"moveBaseToGoal\">\n            <inout_port name=\"key_name\">goal</inout_port>\n        </Action>\n        <Action ID=\"stay1\"/>\n        <Action ID=\"stay2\"/>\n        <Action ID=\"waitFrames\">\n            <output_port name=\"barout\"/>\n            <inout_port name=\"baz\"/>\n            <input_port name=\"fooin\"/>\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a series of actions for a robotic system. It begins by computing a path to a specific pose and then follows that path using a designated controller property. Following this, it checks if a certain flag is high and rearranges accordingly. The process then enters a repeating cycle where it retries until successful based on a charge threshold, and subsequently switches between two cases based on the value of a variable 'i', executing different actions in each case.\n\nAdditionally, the XML includes a model of various tree nodes such as computing a path to a pose, following a path, going to a cluster, going to a pose, checking if a flag is high, and rearranging. These nodes are utilized within the behavior tree to carry out the specified tasks.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Sequence name=\"\">\n                <Action ID=\"ComputePathToPose\" goal=\"${goal}\"/>\n                <Action ID=\"FollowPath\" path=\"${path}\" controller_property=\"FollowPath\"/>\n            </Sequence>\n            <Sequence>\n                <Condition ID=\"IsFlagHigh\"/>\n                <Action ID=\"Rearrange\"/>\n            </Sequence>\n            <Repeat num_cycles=\"\">\n                <Sequence>\n                    <RetryUntilSuccesful num_attempts=\"\">\n                        <Switch2 case_1=\"&gt;=Thresh\" case_2=\"&lt;Thresh\" variable=\"Charge\">\n                            <AlwaysSuccess/>\n                            <AlwaysFailure/>\n                        </Switch2>\n                    </RetryUntilSuccesful>\n                    <Switch2 case_1=\"=0\" case_2=\"&gt;0\" variable=\"i\">\n                        <Action I=\"n\" ID=\"GoToPose\"/>\n                        <Action I=\"i-1\" ID=\"GoToPose\"/>\n                    </Switch2>\n                </Sequence>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ComputePathToPose\">\n            <input_port name=\"goal\"/>\n        </Action>\n        <Action ID=\"FollowPath\">\n            <input_port name=\"path\"/>\n        </Action>\n        <Action ID=\"GoToCluster\">\n            <output_port name=\"Flag\"/>\n        </Action>\n        <Action ID=\"GoToPose\">\n            <input_port name=\"I\"/>\n        </Action>\n        <Condition ID=\"IsFlagHigh\"/>\n        <Action ID=\"Rearrange\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of an entity, possibly a character or an AI. The entity has several possible actions and conditions that determine its behavior. \n\nThe main task is organized as a fallback sequence, where the entity first attempts to execute a sequence of actions: getting a target, moving, and then attacking the target if it's adjacent. If any of these actions fail, the entity resorts to a random movement. \n\nThe available actions include \"AttackTarget\", \"GetTarget\", \"Move\", \"RandomMove\", and \"Sleep\". Additionally, there are conditions such as \"IsDay\", \"IsFemale\", \"IsHungry\", \"IsMale\", \"IsNight\", and \"TargetAdjacent\" which influence the decision-making process.\n\nOverall, the behavior tree governs the decision-making and actions of the entity based on various conditions and tasks, ensuring a dynamic and adaptive behavior in different scenarios.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback>\n            <SequenceStar name=\"Main\">\n                <Action ID=\"GetTarget\"/>\n                <Action ID=\"Move\"/>\n                <Sequence>\n                    <Condition ID=\"TargetAdjacent\"/>\n                    <Action ID=\"AttackTarget\"/>\n                </Sequence>\n            </SequenceStar>\n            <Action ID=\"RandomMove\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AttackTarget\"/>\n        <Action ID=\"GetTarget\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"Sleep\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a task for a robot to navigate through an environment. The robot is programmed to attempt to open a door and pass through it, but if unsuccessful, it will then try to pass through a window instead. \n\nThe \"EnsureOpened\" subtree handles the process of ensuring that the door is open before attempting to pass through it. It first checks if the door is already open, and if not, it retries opening the door up to 4 times until successful.\n\nOverall, the main tree follows a fallback structure where it first tries to ensure the door is opened and pass through it, and if that fails, it resorts to passing through a window directly.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback>\n            <Sequence>\n                <EnsureOpened/>\n                <PassThroughDoor/>\n            </Sequence>\n            <PassThroughWindow/>\n        </Fallback>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"EnsureOpened\">\n        <Fallback>\n            <IsDoorOpen/>\n            <RetryUntilSuccesful num_attempts=\"4\">\n                <OpenDoor/>\n            </RetryUntilSuccesful>\n        </Fallback>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robot's navigation with continuous replanning of the global path after every 1 meter of movement. It uses a PipelineSequence consisting of two steps: \n1. DistanceController: This step computes a new path to the goal pose using the \"GridBased\" planner whenever the robot has moved 1 meter.\n2. FollowPath: The robot then follows the computed path using the specified controller.\n\nThis behavior tree ensures that the robot dynamically adjusts its path to reach the goal, allowing for real-time adaptation to the environment and ensuring efficient and safe navigation.",
        "output": "<!--\n  This Behavior Tree replans the global path after every 1m.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <DistanceController distance=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </DistanceController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a robotic task sequence. First, it checks the battery level, then opens the gripper, proceeds to approach an object, and finally closes the gripper. This indicates a series of actions that a robot will perform in a specific order, ensuring that the battery is sufficient before attempting any physical interactions with objects.",
        "output": " <root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <CheckBattery   name=\"check_battery\"/>\n            <OpenGripper    name=\"open_gripper\"/>\n            <ApproachObject name=\"approach_object\"/>\n            <CloseGripper   name=\"close_gripper\"/>\n        </Sequence>\n     </BehaviorTree>\n </root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree describes a sequence of actions for a robot in a simulated environment. The robot is programmed to perform tasks such as adding collisions, moving objects, and executing pick-and-place operations using a suction device. The sequence involves adding various physical elements to the environment (e.g., walls, ground plane, conveyor), followed by a repetitive process of picking up an object from a surface, manipulating it, and placing it back multiple times.\n\nThe robot's actions are defined using specific services and parameters, including adding planes and boxes, sensing object poses, planning pick-and-place operations, executing group joint states, connecting waypoints, and enabling/disabling suction. These actions are performed iteratively within a repeat block, indicating a cyclical nature of the task.\n\nOverall, the behavior tree represents a complex robotic manipulation task involving environmental setup, object manipulation, and iterative execution of pick-and-place operations using predefined services and parameters.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Robot Minimal Demo\">\n            <Sequence name=\"add collisions\">\n                <Action ID=\"ExecuteAddPlane\" group_name=\"arm\" name=\"Add groud to scene\" plane_name=\"ground\" plane_normal=\"0 0 1\" plane_pose=\"0 0 0 0 0 0 1\" service_name=\"execute_add_plane\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"left_wall\" box_pose=\"2.76 1.2 1.35 0 0 0 1\" box_size=\"5.0 0.001 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"Add left wall\" service_name=\"execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"right_wall\" box_pose=\"2.76 -1.2 1.35 0 0 0 1\" box_size=\"5.0 0.001 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"Add right wall\" service_name=\"execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"top_wall\" box_pose=\"4 0 2.7 0 0 0 1\" box_size=\"2 2.4 0.001\" group_name=\"arm\" is_absolute=\"1\" name=\"Add top wall\" service_name=\"execute_add_box\"/>\n                <Action ID=\"ExecuteAddBox\" auto_subfix=\"1\" box_name=\"conveyor\" box_pose=\"-1.341 0 0.25 0 0 0 1\" box_size=\"2.56 0.56 0.5\" group_name=\"arm\" is_absolute=\"1\" name=\"Add conveyor\" service_name=\"execute_add_box\"/>\n            </Sequence>\n            <Action ID=\"ExecuteAddBox\" auto_subfix=\"0\" box_name=\"boxsur\" box_pose=\"0.901 0 1.35 0 0 0 1\" box_size=\"0.001 2.4 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"box_surface\" service_name=\"execute_add_box\"/>\n            <Repeat num_cycles=\"36\">\n                <Sequence name=\"left\">\n                    <Action ID=\"SenseObjectPose\" category=\"\" pose=\"{box_surface_pose}\" service_name=\"sense_object_pose\"/>\n                    <Action ID=\"ExecutePlanning\" category=\"\" pick_pose=\"{pick_pose}\" place_pose=\"{place_pose}\" pose=\"{box_surface_pose}\" post_middle_pose=\"{post_middle_pose}\" post_pick_pose=\"{post_pick_pose}\" post_pick_pose_edge=\"{post_pick_pose_edge}\" pre_middle_pose=\"{pre_middle_pose}\" pre_pick_pose=\"{pre_pick_pose}\" service_name=\"execute_planning\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"{pre_middle_pose}\" group_name=\"arm\" name=\"pre middle\" service_name=\"execute_group_joint_states\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteRemoveObject\" is_exact=\"1\" name=\"remove boxes_surface\" obj_name=\"boxsur\" service_name=\"execute_remove_object\"/>\n                    <Action ID=\"ConnectWaypoints\" connected_waypoints=\"{pick_motion}\" name=\"pick motion\" service_name=\"connect_waypoints\" waypoint1=\"{pre_pick_pose}\" waypoint2=\"{pick_pose}\" waypoint3=\"\" waypoint4=\"\" waypoint5=\"\"/>\n                    <Action ID=\"ExecuteGroupManyPoses\" constraint=\"\" eef_step=\"0.1\" goal_type=\"0\" goals=\"{pick_motion}\" group_name=\"arm\" name=\"pre pick and pick\" service_name=\"execute_group_many_poses\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteSuction\" enable=\"1\" service_name=\"execute_suction\"/>\n                    <Action ID=\"ConnectWaypoints\" connected_waypoints=\"{pull_out}\" name=\"pull out\" service_name=\"connect_waypoints\" waypoint1=\"{post_pick_pose}\" waypoint2=\"{post_pick_pose_edge}\" waypoint3=\"\" waypoint4=\"\" waypoint5=\"\"/>\n                    <Action ID=\"ExecuteGroupManyPoses\" constraint=\"\" eef_step=\"0.1\" goal_type=\"0\" goals=\"{pull_out}\" group_name=\"arm\" name=\"post pick\" service_name=\"execute_group_many_poses\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"{post_middle_pose}\" group_name=\"arm\" name=\"post middle\" service_name=\"execute_group_joint_states\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"{place_pose}\" group_name=\"arm\" name=\"place\" service_name=\"execute_group_joint_states\" tolerance=\"0.01\"/>\n                    <Action ID=\"ExecuteSuction\" enable=\"0\" service_name=\"execute_suction\"/>\n                    <Action ID=\"ExecuteAddBox\" auto_subfix=\"0\" box_name=\"boxsur\" box_pose=\"0.901 0 1.35 0 0 0 1\" box_size=\"0.001 2.4 2.7\" group_name=\"arm\" is_absolute=\"1\" name=\"box_surface\" service_name=\"execute_add_box\"/>\n                </Sequence>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ConnectWaypoints\">\n            <output_port name=\"connected_waypoints\">PoseArray</output_port>\n            <input_port default=\"connect_waypoints\" name=\"service_name\"/>\n            <input_port name=\"waypoint1\">Pose</input_port>\n            <input_port name=\"waypoint2\">Pose</input_port>\n            <input_port name=\"waypoint3\">Pose</input_port>\n            <input_port name=\"waypoint4\">Pose</input_port>\n            <input_port name=\"waypoint5\">Pose</input_port>\n        </Action>\n        <Action ID=\"ExecuteAddBox\">\n            <input_port default=\"1\" name=\"auto_subfix\"/>\n            <input_port default=\"box\" name=\"box_name\"/>\n            <input_port default=\"{place_pose}\" name=\"box_pose\"/>\n            <input_port default=\"0.2 0.2 0.2\" name=\"box_size\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"1\" name=\"is_absolute\"/>\n            <input_port default=\"execute_add_box\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteAddPlane\">\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"ground\" name=\"plane_name\"/>\n            <input_port default=\"0 0 1\" name=\"plane_normal\"/>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"plane_pose\">Pose</input_port>\n            <input_port default=\"execute_add_plane\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteAttachBox\">\n            <input_port name=\"box_name\"/>\n            <input_port name=\"box_pose\"/>\n            <input_port name=\"box_size\"/>\n            <input_port default=\"gripper\" name=\"eef_group_name\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"execute_attach_box\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteDetachObject\">\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port name=\"obj_name\"/>\n            <input_port default=\"execute_detach_object\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupAngularJointStates\">\n            <input_port default=\"0 0 0 0 0 0 0\" name=\"goal\"/>\n            <input_port default=\"panda_arm\" name=\"group_name\"/>\n            <input_port default=\"execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupLinearJointStates\">\n            <input_port default=\"0.04 0.04\" name=\"goal\"/>\n            <input_port default=\"hand\" name=\"group_name\"/>\n            <input_port default=\"execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupManyPoses\">\n            <input_port name=\"constraint\">If 'r', 'p', or 'y' is given, the eef_frame should not rotate about itself along x-, y-, or z-axis. You can combine them like 'rp', 'ry', 'py', and 'rpy'. Default ''</input_port>\n            <input_port default=\"0.1\" name=\"eef_step\"/>\n            <input_port default=\"0\" name=\"goal_type\">0: Pose wrt the global base frame (robot base); 1: Pose wrt the base frame transferred to current eef base position; 2: pose wrt the eef frame</input_port>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goals\">Goals for each waypoint to reach, seperate with ; </input_port>\n            <input_port default=\"arm\" name=\"group_name\">The group providing the reference frame</input_port>\n            <input_port default=\"execute_group_many_poses\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupPose\">\n            <input_port name=\"constraint\">If 'r', 'p', or 'y' is given, the eef_frame should not rotate about itself along x-, y-, or z-axis. You can combine them like 'rp', 'ry', 'py', and 'rpy'. Default ''</input_port>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goal\"/>\n            <input_port default=\"0\" name=\"goal_type\">0: Pose wrt the global base frame (robot base); 1: Pose wrt the base frame transferred to current eef base position; 2: pose wrt the eef frame</input_port>\n            <input_port default=\"arm\" name=\"group_name\">The group providing the reference frame</input_port>\n            <input_port default=\"execute_group_pose\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupShift\">\n            <input_port default=\"z\" name=\"axis\">Could be x y z roll pitch yaw</input_port>\n            <input_port default=\"0\" name=\"goal\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"execute_group_shift\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecutePlanning\">\n            <input_port name=\"category\">0 for large box, 1 for small box</input_port>\n            <output_port default=\"{pick_pose}\" name=\"pick_pose\">Pose</output_port>\n            <output_port default=\"{place_pose}\" name=\"place_pose\">Double Array</output_port>\n            <input_port default=\"{box_surface_pose}\" name=\"pose\">Pose</input_port>\n            <output_port default=\"{post_middle_pose}\" name=\"post_middle_pose\">Double Array</output_port>\n            <output_port default=\"{post_pick_pose}\" name=\"post_pick_pose\">Pose</output_port>\n            <output_port default=\"{post_pick_pose_edge}\" name=\"post_pick_pose_edge\">Pose</output_port>\n            <output_port default=\"{pre_middle_pose}\" name=\"pre_middle_pose\">Double Array</output_port>\n            <output_port default=\"{pre_pick_pose}\" name=\"pre_pick_pose\">Pose</output_port>\n            <input_port default=\"execute_planning\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteRemoveObject\">\n            <input_port default=\"1\" name=\"is_exact\"/>\n            <input_port name=\"obj_name\"/>\n            <input_port default=\"execute_remove_object\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteSuction\">\n            <input_port default=\"0\" name=\"enable\"/>\n            <input_port default=\"execute_suction\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"FetchDetectedInfo\">\n            <output_port name=\"category\">String, 0 for large box, 1 for small box</output_port>\n            <output_port name=\"pose\">Pose</output_port>\n            <input_port default=\"fetch_detected_info\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"SenseObjectPose\">\n            <output_port name=\"category\">String, 0 for large box, 1 for small box</output_port>\n            <output_port default=\"{box_surface_pose}\" name=\"pose\">Pose</output_port>\n            <input_port default=\"sense_object_pose\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"StoreDetectedInfo\">\n            <input_port name=\"category\">String, 0 for large box, 1 for small box</input_port>\n            <input_port name=\"pose\">Pose</input_port>\n            <input_port default=\"store_detected_info\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"TypeInPose\">\n            <output_port name=\"pose_on_blackboard\">Pose on blackboard</output_port>\n            <input_port default=\"type_in_pose\" name=\"service_name\"/>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"type_in_pose\">Pose to be typed in</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the decision-making process for an animal, covering various scenarios such as reproduction, shelter-seeking, and feeding. The tree first checks if the animal is capable of mating and then attempts to mate if conditions are met. If not, it evaluates whether the animal is ready to give birth and proceeds with the birthing process if so. If the animal is not in a reproductive state, it assesses if it's an egg layer or a producer and performs the corresponding action.\n\nAdditionally, there is a sub-tree called \"ShedTree\" that handles the animal's behavior related to seeking shelter. It includes different sequences for leaving and entering the shed based on the time of day and the animal's location. It also incorporates actions like grazing and random movement when appropriate.\n\nOverall, the behavior tree encapsulates the decision-making logic for the animal's reproductive, shelter-seeking, and feeding behaviors, providing a comprehensive framework for its actions in different circumstances.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <FallbackStar name=\"AnimalStandard\">\n            <SequenceStar name=\"Sex\">\n                <Condition ID=\"IsMale\"/>\n                <Condition ID=\"IsAdult\"/>\n                <Action ID=\"TryHaveSex\"/>\n            </SequenceStar>\n            <SequenceStar name=\"Birth\">\n                <Condition ID=\"IsFemale\"/>\n                <Condition ID=\"IsReadyToGiveBirth\"/>\n                <Action ID=\"GiveBirth\"/>\n            </SequenceStar>\n            <SequenceStar name=\"EggLayer\">\n                <Condition ID=\"IsEggLayer\"/>\n                <Action ID=\"LayEgg\"/>\n            </SequenceStar>\n            <SequenceStar name=\"Producer\">\n                <Condition ID=\"IsProducer\"/>\n                <Action ID=\"Produce\"/>\n            </SequenceStar>\n            <SubTree ID=\"ShedTree\"/>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"ShedTree\">\n        <FallbackStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsDay\"/>\n                <Condition ID=\"IsInShed\"/>\n                <Action ID=\"LeaveShed\"/>\n                <Action ID=\"FindRandomPastureField\"/>\n                <Action ID=\"Move\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsNight\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"FindShed\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"EnterShed\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsDay\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"RandomMove\"/>\n                <Action ID=\"Graze\"/>\n            </SequenceStar>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Condition ID=\"CanHaveSex\"/>\n        <Action ID=\"EatPrey\"/>\n        <Action ID=\"EnterShed\"/>\n        <Action ID=\"FindPrey\"/>\n        <Action ID=\"FindRandomPastureField\"/>\n        <Action ID=\"FindRetreat\"/>\n        <Action ID=\"FindShed\"/>\n        <Action ID=\"GiveBirth\"/>\n        <Action ID=\"Graze\"/>\n        <Condition ID=\"IsAdult\"/>\n        <Condition ID=\"IsCarnivore\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsEgg\"/>\n        <Condition ID=\"IsEggLayer\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHerbivore\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInShed\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Condition ID=\"IsOnPasture\"/>\n        <Condition ID=\"IsPregnant\"/>\n        <Condition ID=\"IsProducer\"/>\n        <Condition ID=\"IsReadyToGiveBirth\"/>\n        <Condition ID=\"IsWoodVermin\"/>\n        <Condition ID=\"IsYoung\"/>\n        <Action ID=\"KillPrey\"/>\n        <Action ID=\"LayEgg\"/>\n        <Action ID=\"LeaveShed\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"Produce\"/>\n        <Action ID=\"RandomMove\"/>\n        <SubTree ID=\"ShedTree\"/>\n        <Action ID=\"Sleep\"/>\n        <Action ID=\"TryHaveSex\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a decision-making process for an autonomous vehicle. The vehicle is programmed to navigate through traffic while adhering to various conditions and actions. It begins by checking if there is a need to wait for a mission, and if not, it stops. If there's no path available globally, it checks the lane-keeping state and potential lane changes, then initializes the path. Subsequently, it handles lane keeping, lane changes, traffic light conditions, unprotected turns, and mission states. Throughout these sequences, it continuously evaluates various conditions such as collision detection, proximity to objects, irregularities, and lane change feasibility.\n\nThe tree employs a range of actions including generating paths, setting states, calling global paths, handling traffic lights, publishing data, and stopping. Additionally, it utilizes numerous conditions to assess the vehicle's surroundings and make decisions accordingly. Overall, the behavior tree orchestrates the vehicle's navigation, ensuring it follows safety protocols, navigates efficiently, and responds appropriately to its environment.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback name=\"Core_seq\">\n            <Sequence name=\"\">\n                <Condition ID=\"checkMissionWait\"/>\n                <Action ID=\"stop\"/>\n            </Sequence>\n            <Sequence>\n                <Sequence name=\"init\">\n                    <Condition ID=\"checkExistPathGlobal\"/>\n                    <Fallback name=\"\">\n                        <Sequence name=\"\">\n                            <Condition ID=\"checkStateLaneKeeping\"/>\n                            <Condition ID=\"checkFailLaneChange\"/>\n                            <Action ID=\"callPathGlobal\"/>\n                        </Sequence>\n                        <AlwaysSuccess/>\n                    </Fallback>\n                    <Action ID=\"init\"/>\n                    <Sequence name=\"gen path\">\n                        <Fallback name=\"StateSelect\">\n                            <Sequence name=\"LaneKeeping\">\n                                <Condition ID=\"checkStateLaneKeeping\"/>\n                                <Action ID=\"genPathLaneKeeping\"/>\n                                <Sequence name=\"LaneKeeping\">\n                                    <Fallback name=\"\">\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkGlobalLaneChange\"/>\n                                            <Fallback name=\"\">\n                                                <Sequence name=\"\">\n                                                    <Condition ID=\"checkLeftChange\"/>\n                                                    <Fallback name=\"\">\n                                                        <Sequence name=\"\">\n                                                            <Condition ID=\"checkLaneChangeableLeft\"/>\n                                                            <Action ID=\"genPathLaneChangeLeft\"/>\n                                                            <Fallback name=\"\">\n                                                                <Sequence name=\"\">\n                                                                    <Fallback name=\"\">\n                                                                        <Condition ID=\"checkObjectStaticLeftLane\"/>\n                                                                        <Condition ID=\"checkCollisionBehindLeft\"/>\n                                                                    </Fallback>\n                                                                    <Action ID=\"setStateLaneKeeping\"/>\n                                                                </Sequence>\n                                                                <Action ID=\"setStateLaneChangeLeft\"/>\n                                                            </Fallback>\n                                                        </Sequence>\n                                                        <Action ID=\"setStateLaneKeeping\"/>\n                                                    </Fallback>\n                                                </Sequence>\n                                                <Sequence name=\"\">\n                                                    <Condition ID=\"checkLaneChangeableRight\"/>\n                                                    <Action ID=\"genPathLaneChangeRight\"/>\n                                                    <Fallback name=\"\">\n                                                        <Sequence name=\"\">\n                                                            <Fallback name=\"\">\n                                                                <Condition ID=\"checkObjectStaticRightLane\"/>\n                                                                <Condition ID=\"checkCollisionBehindRight\"/>\n                                                            </Fallback>\n                                                            <Action ID=\"setStateLaneKeeping\"/>\n                                                        </Sequence>\n                                                        <Action ID=\"setStateLaneChangeRight\"/>\n                                                    </Fallback>\n                                                </Sequence>\n                                                <Action ID=\"setStateLaneKeeping\"/>\n                                            </Fallback>\n                                        </Sequence>\n                                        <Sequence name=\"check Collision\">\n                                            <Condition ID=\"checkFrontObject\"/>\n                                            <Fallback name=\"\">\n                                                <Sequence name=\"lane_keeping\">\n                                                    <Inverter>\n                                                        <Condition ID=\"checkIrregularFront\"/>\n                                                    </Inverter>\n                                                    <Fallback name=\"lane_keeping\">\n                                                        <Condition ID=\"checkNearCorner\"/>\n                                                        <Condition ID=\"checkObjectNearGoal\"/>\n                                                        <Condition ID=\"checkMeNearGoal\"/>\n                                                    </Fallback>\n                                                    <Action ID=\"setStateLaneKeeping\"/>\n                                                </Sequence>\n                                                <Fallback name=\"lane_change\">\n                                                    <Sequence>\n                                                        <Condition ID=\"checkProfitLaneChangeLeft\"/>\n                                                        <Fallback>\n                                                            <Sequence name=\"\">\n                                                                <Fallback>\n                                                                    <Condition ID=\"checkObjectStaticLeftLane\"/>\n                                                                    <Condition ID=\"checkIrregularLeft\"/>\n                                                                </Fallback>\n                                                                <Action ID=\"setStateLaneKeeping\"/>\n                                                            </Sequence>\n                                                            <Sequence name=\"\">\n                                                                <Condition ID=\"checkLaneChangeableLeft\"/>\n                                                                <Action ID=\"genPathLaneChangeLeft\"/>\n                                                                <Fallback name=\"\">\n                                                                    <Sequence name=\"\">\n                                                                        <Fallback name=\"\">\n                                                                            <Condition ID=\"checkObjectStaticLeftLane\"/>\n                                                                            <Condition ID=\"checkCollisionBehindLeft\"/>\n                                                                        </Fallback>\n                                                                        <Action ID=\"setStateLaneKeeping\"/>\n                                                                    </Sequence>\n                                                                    <Action ID=\"setStateLaneChangeLeft\"/>\n                                                                </Fallback>\n                                                            </Sequence>\n                                                            <Action ID=\"setStateLaneKeeping\"/>\n                                                        </Fallback>\n                                                    </Sequence>\n                                                    <Sequence>\n                                                        <Condition ID=\"checkProfitLaneChangeRight\"/>\n                                                        <Fallback>\n                                                            <Sequence>\n                                                                <Fallback>\n                                                                    <Condition ID=\"checkObjectStaticRightLane\" name=\"checkObjectStaticRigtLane\"/>\n                                                                    <Condition ID=\"checkIrregularRight\"/>\n                                                                </Fallback>\n                                                                <Action ID=\"setStateLaneKeeping\"/>\n                                                            </Sequence>\n                                                            <Sequence>\n                                                                <Condition ID=\"checkLaneChangeableRight\"/>\n                                                                <Action ID=\"genPathLaneChangeRight\"/>\n                                                                <Fallback name=\"\">\n                                                                    <Sequence name=\"\">\n                                                                        <Fallback name=\"\">\n                                                                            <Condition ID=\"checkObjectStaticRightLane\"/>\n                                                                            <Condition ID=\"checkCollisionBehindRight\"/>\n                                                                        </Fallback>\n                                                                        <Action ID=\"setStateLaneKeeping\"/>\n                                                                    </Sequence>\n                                                                    <Action ID=\"setStateLaneChangeRight\"/>\n                                                                </Fallback>\n                                                            </Sequence>\n                                                            <Action ID=\"setStateLaneKeeping\"/>\n                                                        </Fallback>\n                                                    </Sequence>\n                                                </Fallback>\n                                            </Fallback>\n                                        </Sequence>\n                                        <Action ID=\"setStateLaneKeeping\"/>\n                                    </Fallback>\n                                    <Fallback name=\"\">\n                                        <Condition ID=\"checkMustLaneChange\"/>\n                                        <AlwaysSuccess/>\n                                    </Fallback>\n                                </Sequence>\n                            </Sequence>\n                            <Sequence name=\"LaneChangeLeft\">\n                                <Condition ID=\"checkStateLaneChangeLeft\"/>\n                                <Fallback name=\"\">\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkEndLaneChange\"/>\n                                        <Action ID=\"setStateLaneKeeping\"/>\n                                        <Action ID=\"callPathGlobal\"/>\n                                    </Sequence>\n                                    <Action ID=\"speedProfileLaneChange\"/>\n                                </Fallback>\n                            </Sequence>\n                            <Sequence name=\"LaneChangeRigth\">\n                                <Condition ID=\"checkStateLaneChangeRight\"/>\n                                <Fallback name=\"\">\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkEndLaneChange\"/>\n                                        <Action ID=\"setStateLaneKeeping\"/>\n                                        <Action ID=\"callPathGlobal\"/>\n                                    </Sequence>\n                                    <Action ID=\"speedProfileLaneChange\"/>\n                                </Fallback>\n                            </Sequence>\n                            <Sequence name=\"Recovery\">\n                                <Action ID=\"setStateLaneKeeping\"/>\n                            </Sequence>\n                        </Fallback>\n                        <Fallback name=\"traffic check\">\n                            <Condition ID=\"checkPassAbleTrafficLight\"/>\n                            <Action ID=\"stopTrafficLight\"/>\n                        </Fallback>\n                        <Fallback name=\"unprotectedTurn\">\n                            <Sequence>\n                                <Condition ID=\"checkUnprotected\"/>\n                                <Condition ID=\"checkImpassalbeUnprotected\"/>\n                                <Action ID=\"stop\"/>\n                            </Sequence>\n                            <AlwaysSuccess/>\n                        </Fallback>\n                    </Sequence>\n                </Sequence>\n                <Action ID=\"setPath\"/>\n                <Action ID=\"publishData\"/>\n                <Fallback name=\"mission state\">\n                    <Sequence>\n                        <Condition ID=\"checkArriveGoal\"/>\n                        <Action ID=\"setStateMissionArrive\"/>\n                        <Action ID=\"publishStateMission\"/>\n                    </Sequence>\n                    <Sequence>\n                        <Action ID=\"setStateMissionGoing\"/>\n                    </Sequence>\n                </Fallback>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"acc\"/>\n        <Action ID=\"callPathGlobal\"/>\n        <Action ID=\"callPathGlobalLeft\"/>\n        <Action ID=\"callPathGlobalRight\"/>\n        <Condition ID=\"checkAbleAstar\"/>\n        <Condition ID=\"checkArriveGoal\"/>\n        <Condition ID=\"checkCollision\"/>\n        <Condition ID=\"checkCollisionBehindLeft\"/>\n        <Condition ID=\"checkCollisionBehindRight\"/>\n        <Condition ID=\"checkEndLaneChange\"/>\n        <Condition ID=\"checkExistPathGlobal\"/>\n        <Condition ID=\"checkFailLaneChange\"/>\n        <Condition ID=\"checkFrontObject\"/>\n        <Condition ID=\"checkGlobalLaneChange\"/>\n        <Condition ID=\"checkImpassalbeUnprotected\"/>\n        <Condition ID=\"checkIrregularFront\"/>\n        <Condition ID=\"checkIrregularLeft\"/>\n        <Condition ID=\"checkIrregularRight\"/>\n        <Condition ID=\"checkLaneChange\"/>\n        <Condition ID=\"checkLaneChangeableLeft\"/>\n        <Condition ID=\"checkLaneChangeableRight\"/>\n        <Condition ID=\"checkLeftChange\"/>\n        <Condition ID=\"checkMeNearGoal\"/>\n        <Condition ID=\"checkMissionWait\"/>\n        <Condition ID=\"checkMustLaneChange\"/>\n        <Condition ID=\"checkNearCorner\"/>\n        <Condition ID=\"checkNearStopline\"/>\n        <Condition ID=\"checkObjectNearGoal\"/>\n        <Condition ID=\"checkObjectStaticLeftLane\"/>\n        <Condition ID=\"checkObjectStaticRightLane\"/>\n        <Condition ID=\"checkPassAbleTrafficLight\"/>\n        <Condition ID=\"checkProfitLaneChangeLeft\"/>\n        <Condition ID=\"checkProfitLaneChangeRight\"/>\n        <Condition ID=\"checkStateLaneChangeLeft\"/>\n        <Condition ID=\"checkStateLaneChangeRight\"/>\n        <Condition ID=\"checkStateLaneKeeping\"/>\n        <Condition ID=\"checkUnprotected\"/>\n        <Action ID=\"genPathLaneChangeLeft\"/>\n        <Action ID=\"genPathLaneChangeRight\"/>\n        <Action ID=\"genPathLaneKeeping\"/>\n        <Action ID=\"init\"/>\n        <Action ID=\"laneChangeLeft\"/>\n        <Action ID=\"laneChangeRight\"/>\n        <Action ID=\"publishData\"/>\n        <Action ID=\"publishStateMission\"/>\n        <Action ID=\"setPath\"/>\n        <Action ID=\"setStateLaneChangeLeft\"/>\n        <Action ID=\"setStateLaneChangeRight\"/>\n        <Action ID=\"setStateLaneKeeping\"/>\n        <Action ID=\"setStateMissionArrive\"/>\n        <Action ID=\"setStateMissionGoing\"/>\n        <Action ID=\"speedProfileLaneChange\"/>\n        <Action ID=\"stop\"/>\n        <Action ID=\"stopTrafficLight\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's navigation system with periodic global path replanning at 1 Hz and recovery actions in case of failures. The main tree, \"MainTree,\" includes a RecoveryNode that allows for a limited number of retries (2) before triggering recovery actions.\n\nWithin the MainTree, there is a PipelineSequence named \"NavigateWithReplanning\" which contains two RecoveryNodes: \"ComputePathToPose\" and \"FollowPath.\" The \"ComputePathToPose\" node plans the path to a specified goal using a grid-based planner and has its own set of recovery actions. Similarly, the \"FollowPath\" node follows the planned path using a specific controller and also has its own recovery actions.\n\nBoth \"ComputePathToPose\" and \"FollowPath\" nodes have ReactiveFallbacks to handle goal updates and RoundRobin nodes to execute recovery actions such as clearing costmaps and waiting or spinning to recover from failures.\n\nIf all retries are exhausted, the RecoveryFallback within the main RecoveryNode",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"2\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"4\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ReactiveFallback name=\"PathToPoseFallback\">\n              <GoalUpdated/>\n              <RoundRobin name=\"GlobalPlannerRecoveryActions\">\n                <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n                <Wait wait_duration=\"2\"/>\n              </RoundRobin>\n            </ReactiveFallback>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"4\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ReactiveFallback name=\"FollowPathFallback\">\n            <GoalUpdated/>\n            <RoundRobin name=\"PlannerRecoveryActions\">\n              <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n              <Spin spin_dist=\"1.57\"/>\n            </RoundRobin>\n          </ReactiveFallback>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <Wait wait_duration=\"5\"/>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree describes a sequence of actions for controlling a robotic arm. The robot is programmed to perform a series of tasks, including moving its joints and gripper to specific positions, executing a plan to draw a square trajectory, and performing various poses and movements. \n\nThe sequence starts with the robot going to a prepare pose, then opening the gripper, lowering the arm, drawing a square trajectory, and finally closing the gripper. Additionally, there are other actions defined in the TreeNodesModel section that allow for executing all plans, executing all poses, and setting angular and linear joint states for the robot's groups.\n\nOverall, the behavior tree outlines a set of coordinated actions for the robot to perform, involving precise control of its joints, gripper, and overall movement to achieve specific tasks and trajectories.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"RoPort Demo\">\n            <Action ID=\"ExecuteGroupAngularJointStates\" goal=\"0 -30 0 -120 0 90 45\" group_name=\"panda_arm\" name=\"Go to prepare pose\" service_name=\"execute_group_joint_states\" tolerance=\"0.01\"/>\n            <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"0.04 0.04\" group_name=\"hand\" name=\"Open gripper\" service_name=\"execute_group_joint_states\" tolerance=\"0.001\"/>\n            <Action ID=\"ExecuteGroupPose\" goal=\"0 0 0.1 0 0 0 1\" group_name=\"panda_arm\" is_absolute=\"0\" name=\"Lower\" service_name=\"execute_group_pose\" tolerance=\"0.01\"/>\n            <Action ID=\"ExecuteGroupPlan\" allow_collision=\"0\" group_name=\"panda_arm\" is_absolute=\"0\" name=\"Draw square\" poses=\"0.1 0.1 0 0 0 0 1;0 0 -0.2 0 0 0 1;-0.2 -0.2 0 0 0 0 1;0 0 0.2 0 0 0 1;0.1 0.1 0 0 0 0 1;0 0 -0.1 0 0 0 1\" service_name=\"execute_group_plan\" stamp=\"30\"/>\n            <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"0 0\" group_name=\"hand\" name=\"Close gripper\" service_name=\"execute_group_joint_states\" tolerance=\"0.001\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ExecuteAllPlans\">\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"all_poses\">Poses for each group to visit, seperate with | for different groups</input_port>\n            <input_port default=\"0\" name=\"allow_collision\"/>\n            <input_port default=\"panda_arm\" name=\"group_names\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"execute_all_plans\" name=\"service_name\"/>\n            <input_port default=\"1\" name=\"stamps\"/>\n        </Action>\n        <Action ID=\"ExecuteAllPoses\">\n            <input_port default=\"0\" name=\"allow_collision\"/>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goals\">Goals for each group to reach, seperate with ;</input_port>\n            <input_port default=\"panda_arm\" name=\"group_names\">Names of groups to control, seperate with space</input_port>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"execute_all_poses\" name=\"service_name\"/>\n            <input_port default=\"1\" name=\"stamps\">Time stamps for each group reaching the goal, seperate with space</input_port>\n        </Action>\n        <Action ID=\"ExecuteGroupAngularJointStates\">\n            <input_port default=\"0 0 0 0 0 0 0\" name=\"goal\"/>\n            <input_port default=\"panda_arm\" name=\"group_name\"/>\n            <input_port default=\"execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupLinearJointStates\">\n            <input_port default=\"0.04 0.04\" name=\"goal\"/>\n            <input_port default=\"hand\" name=\"group_name\"/>\n            <input_port default=\"execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.001\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupPlan\">\n            <input_port default=\"0\" name=\"allow_collision\"/>\n            <input_port default=\"panda_arm\" name=\"group_name\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"0 0 0.1 0 0 0 1;0 0 -0.1 0 0 0 1\" name=\"poses\">Trajectory poses in plan. Each pose is relevant to the last pose.</input_port>\n            <input_port default=\"execute_group_plan\" name=\"service_name\"/>\n            <input_port default=\"2\" name=\"stamp\">Time stamp of the last pose in plan</input_port>\n        </Action>\n        <Action ID=\"ExecuteGroupPose\">\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goal\"/>\n            <input_port default=\"panda_arm\" name=\"group_name\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"execute_group_pose\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions for a robot or an autonomous system. The robot is programmed to wait for a specific duration, then move to three different goal positions in succession. Each movement action is followed by a waiting period. The tree also includes various utility nodes for handling ROS messages, performing mathematical operations, logging information, and interacting with the environment.\n\nAdditionally, the behavior tree provides a set of generic actions such as subscribing to topics, publishing messages, generating random values, and interfacing with Actionlib action servers. It also includes decorators and control nodes to manage the flow of execution, handle loops, and ensure certain actions are performed only once.\n\nOverall, the behavior tree orchestrates a series of robotic behaviors, including navigation, perception, decision-making, and interaction with the environment, while providing utilities for communication and data processing within a ROS-based system.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"WaitSeconds\" duration=\"2\" name=\"WaitSeconds4\"/>\n            <ForceSuccess>\n                <Action goal_name=\"stage_2_pos_final_4\" ID=\"UPOGoToGoalByName\" state=\"gpf4\" action=\"/Make_Plan\" name=\"GoToGoa4\"/>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" duration=\"2\" name=\"WaitSeconds5\"/>\n            <ForceSuccess>\n                <Action goal_name=\"stage_2_pos_final_5\" ID=\"UPOGoToGoalByName\" state=\"gpf5\" action=\"/Make_Plan\" name=\"GoToGoal5\"/>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" duration=\"2\" name=\"WaitSeconds6\"/>\n            <ForceSuccess>\n                <Action goal_name=\"stage_2_pos_final_6\" ID=\"UPOGoToGoalByName\" state=\"gpf6\" action=\"/Make_Plan\" name=\"GoToGoal6\"/>\n            </ForceSuccess>\n            <Action ID=\"WaitSeconds\" duration=\"1\" name=\"WaitSecondsEnd\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CallEmptyService\">\n            <input_port type=\"std::string\" name=\"service\">ROS service name</input_port>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port type=\"bool\" name=\"input\">Input boolean value</input_port>\n        </Condition>\n        <Action ID=\"CheckKey\">\n            <input_port type=\"std::string\" name=\"no_key\">Key to determine if key to say 'no' has benn pressed</input_port>\n            <input_port type=\"std::string\" name=\"yes_key\">Key to determine if key to say 'yes' has been pressed</input_port>\n        </Action>\n        <Condition ID=\"CompareNumbers\">\n            <input_port type=\"std::string\" name=\"comparison_op\">Comparison operator. Valid operators are &lt;, >, &lt;=, >=, == and !=</input_port>\n            <input_port type=\"double\" name=\"first\">First operand</input_port>\n            <input_port type=\"double\" name=\"second\">Second operand</input_port>\n        </Condition>\n        <Condition ID=\"CompareStrings\">\n            <input_port type=\"std::string\" name=\"comparison_op\">Comparison operator. Valid operators are &lt;, >, &lt;=, >=, == and !=</input_port>\n            <input_port type=\"std::string\" name=\"first\">First operand</input_port>\n            <input_port type=\"std::string\" name=\"second\">Second operand</input_port>\n        </Condition>\n        <Action ID=\"ConcatenateStrings\">\n            <input_port type=\"std::string\" name=\"first\">First string</input_port>\n            <output_port type=\"std::string\" name=\"output\">Concatenated result string</output_port>\n            <input_port type=\"std::string\" name=\"second\">Second string</input_port>\n        </Action>\n        <Action ID=\"ConvertJsonToDouble\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"double\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToInt64\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"long\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToString\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"std::string\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToUint64\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"unsigned long\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertMessageField\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"void\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertRandomMessageField\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"void\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Decorator ID=\"CooldownMilliseconds\">\n            <input_port type=\"unsigned int\" default=\"0\" name=\"cooldown\">Cooldown time</input_port>\n        </Decorator>\n        <Decorator ID=\"CooldownSeconds\">\n            <input_port type=\"unsigned int\" default=\"0\" name=\"cooldown\">Cooldown time</input_port>\n        </Decorator>\n        <Action ID=\"CopyJson\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Input variable</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output\">Output variable to copy to</output_port>\n        </Action>\n        <Action ID=\"DebugLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Action ID=\"ErrorLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Action ID=\"FatalLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Action ID=\"FindByFieldValue\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"void\" name=\"output\">Output variable</output_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"value\">Value to search for</input_port>\n        </Action>\n        <Action ID=\"FindSubstrings\">\n            <input_port type=\"std::string\" name=\"input\">String to look into</input_port>\n            <input_port type=\"std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> > > >\" name=\"substrings\">Substrings to look for</input_port>\n        </Action>\n        <Decorator ID=\"ForEachLoop\">\n            <input_port type=\"bool\" name=\"break_on_child_failure\">Break loop on child failure?</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Input sequence</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output_element\">Output element variable</output_port>\n            <output_port type=\"unsigned long\" name=\"output_index\">Output index variable</output_port>\n        </Decorator>\n        <Action ID=\"GetJsonSize\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Input sequence</input_port>\n            <output_port type=\"unsigned long\" name=\"output\">Sequence size output</output_port>\n        </Action>\n        <Action ID=\"GetKeyboard\">\n            <output_port type=\"std::string\" name=\"output\">String received from keyboard</output_port>\n        </Action>\n        <Action ID=\"GetMessageField\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"GetRandomMessageField\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"GetTransformDistance\">\n            <input_port type=\"tf::StampedTransform\" name=\"input\">TF transform</input_port>\n            <output_port type=\"double\" name=\"output\">Distance form transform origin</output_port>\n        </Action>\n        <Action ID=\"GetTransformHorizontalDistance\">\n            <input_port type=\"tf::StampedTransform\" name=\"input\">TF transform</input_port>\n            <output_port type=\"double\" name=\"output\">2D distance from TF transform origin</output_port>\n        </Action>\n        <Action ID=\"GetTransformOrigin\">\n            <input_port type=\"tf::StampedTransform\" name=\"input\">TF transform</input_port>\n            <output_port type=\"double\" name=\"x\">Origin x coordinate</output_port>\n            <output_port type=\"double\" name=\"y\">Origin y coordinate</output_port>\n            <output_port type=\"double\" name=\"z\">Origin z coordinate</output_port>\n        </Action>\n        <Action ID=\"InfoLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Action ID=\"InitializeJson\">\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output\">Output variable to initialize</output_port>\n        </Action>\n        <Action ID=\"InterpolateFloat\">\n            <input_port type=\"std::vector&lt;double, std::allocator&lt;double> >\" name=\"input_range\">Input value range.</input_port>\n            <input_port type=\"double\" name=\"input_value\">Value to interpolate.</input_port>\n            <input_port type=\"std::vector&lt;double, std::allocator&lt;double> >\" name=\"output_range\">Output value range.</input_port>\n            <output_port type=\"double\" name=\"output_value\">Interpolated value.</output_port>\n        </Action>\n        <Control ID=\"Interruptible\"/>\n        <Action ID=\"LookupTransform\">\n            <output_port type=\"tf::StampedTransform\" name=\"output\">Result transform</output_port>\n            <input_port type=\"std::string\" name=\"source_frame\">Origin TF frame</input_port>\n            <input_port type=\"std::string\" name=\"target_frame\">Target TF frame</input_port>\n            <input_port type=\"bool\" default=\"0\" name=\"use_last_available\">Use last available transform?</input_port>\n        </Action>\n        <Decorator ID=\"Loop\"/>\n        <Action ID=\"MathOperationFloat\">\n            <input_port type=\"double\" name=\"first\">First operand</input_port>\n            <input_port type=\"std::string\" name=\"operator\">Math operation. Valid operatores are: +, -, / and *</input_port>\n            <output_port type=\"double\" name=\"output\">Operation result</output_port>\n            <input_port type=\"double\" name=\"second\">Second operand</input_port>\n        </Action>\n        <Action ID=\"MathOperationInt\">\n            <input_port type=\"int\" name=\"first\">First operand</input_port>\n            <input_port type=\"std::string\" name=\"operator\">Math operation. Valid operatores are: +, -, / and *</input_port>\n            <output_port type=\"int\" name=\"output\">Operation result</output_port>\n            <input_port type=\"int\" name=\"second\">Second operand</input_port>\n        </Action>\n        <Action ID=\"MonitorStdBool\">\n            <input_port type=\"bool\" default=\"0\" name=\"consume_msgs\">Should messages be consumed?</input_port>\n            <input_port type=\"unsigned int\" default=\"1\" name=\"queue_size\">Subscriber callback queue size</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_output\">Serialized ROS message [std_msgs::Bool_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"MonitorStdFloat64\">\n            <input_port type=\"bool\" default=\"0\" name=\"consume_msgs\">Should messages be consumed?</input_port>\n            <input_port type=\"unsigned int\" default=\"1\" name=\"queue_size\">Subscriber callback queue size</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_output\">Serialized ROS message [std_msgs::Float64_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"MonitorStdInt32\">\n            <input_port type=\"bool\" default=\"0\" name=\"consume_msgs\">Should messages be consumed?</input_port>\n            <input_port type=\"unsigned int\" default=\"1\" name=\"queue_size\">Subscriber callback queue size</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_output\">Serialized ROS message [std_msgs::Int32_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"OStreamNode\">\n            <input_port type=\"std::string\" name=\"message\">String to print</input_port>\n        </Action>\n        <Decorator ID=\"OnlyOnce\"/>\n        <Action ID=\"PublishBool\">\n            <input_port type=\"bool\" name=\"data\">Auto-generated field from std_msgs::Bool_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"bool\" default=\"0\" name=\"latch\">Latch messages?</input_port>\n            <input_port type=\"unsigned int\" default=\"1\" name=\"queue_size\">Internal publisher queue size</input_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to publish to</input_port>\n        </Action>\n        <Action ID=\"PublishStdString\">\n            <input_port type=\"std::string\" name=\"data\">Auto-generated field from std_msgs::String_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"bool\" default=\"0\" name=\"latch\">Latch messages?</input_port>\n            <input_port type=\"unsigned int\" default=\"1\" name=\"queue_size\">Internal publisher queue size</input_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to publish to</input_port>\n        </Action>\n        <Action ID=\"RandomFloat\">\n            <input_port type=\"double\" name=\"max\">Max range value</input_port>\n            <input_port type=\"double\" name=\"min\">Minimum range value</input_port>\n            <output_port type=\"double\" name=\"result\">Random result value</output_port>\n        </Action>\n        <Action ID=\"RandomInteger\">\n            <input_port type=\"int\" name=\"max\">Max range value</input_port>\n            <input_port type=\"int\" name=\"min\">Minimum range value</input_port>\n            <output_port type=\"int\" name=\"result\">Random result value</output_port>\n        </Action>\n        <Action ID=\"RandomSequenceValue\">\n            <input_port type=\"std::string\" default=\";\" name=\"delimiter\">Sequence entries delimiter</input_port>\n            <output_port type=\"std::string\" name=\"output\">Result random sequence entry</output_port>\n            <input_port type=\"std::string\" name=\"sequence\">Sequence to randomize</input_port>\n        </Action>\n        <Action ID=\"SubscribeUPOGoal\">\n            <input_port type=\"bool\" default=\"0\" name=\"consume_msgs\">Should messages be consumed?</input_port>\n            <output_port type=\"upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >\" name=\"output\">Received ROS message [upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port type=\"unsigned int\" default=\"1\" name=\"queue_size\">Subscriber callback queue size</input_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"UPOFireDetection3D\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"int\" name=\"duration\">Duration</input_port>\n            <output_port type=\"bool\" name=\"fire_found\">Fire Found</output_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n            <output_port type=\"double\" name=\"x\">Fire x</output_port>\n            <output_port type=\"double\" name=\"y\">Fire x</output_port>\n            <output_port type=\"double\" name=\"z\">Fire x</output_port>\n        </Action>\n        <Action ID=\"UPOFireExtinguish\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"bool\" name=\"detect_fire\">Detect Fire</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_feedback\">Serialized ROS message [upo_actions::FireExtinguishFeedback_&lt;std::allocator&lt;void> >]</output_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_result\">Serialized ROS message [upo_actions::FireExtinguishResult_&lt;std::allocator&lt;void> >]</output_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOGoToGoal\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"std::string\" name=\"global_goal.header.frame_id\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"unsigned int\" name=\"global_goal.header.seq\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.orientation.w\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.orientation.x\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.orientation.y\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.orientation.z\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.position.x\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.position.y\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.position.z\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOGoToGoalByName\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"std::string\" name=\"goal_name\">Name of goal</input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOLanding\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"bool\" name=\"land\">Auto-generated field from upo_actions::LandingGoal_&lt;std::allocator&lt;void> ></input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOTakeOff\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n            <input_port type=\"float\" name=\"takeoff_height.data\">Auto-generated field from upo_actions::TakeOffGoal_&lt;std::allocator&lt;void> ></input_port>\n        </Action>\n        <Action ID=\"UPOWindowDetection\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"int\" name=\"duration\">Duration</input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n            <output_port type=\"bool\" name=\"window_present\">Window Present</output_port>\n            <output_port type=\"double\" name=\"x\">Window x</output_port>\n            <output_port type=\"double\" name=\"y\">Window y</output_port>\n            <output_port type=\"double\" name=\"z\">Window z</output_port>\n        </Action>\n        <Action ID=\"WaitMilliseconds\">\n            <input_port type=\"unsigned int\" default=\"0\" name=\"duration\">Time to wait</input_port>\n        </Action>\n        <Action ID=\"WaitSeconds\">\n            <input_port type=\"unsigned int\" default=\"0\" name=\"duration\">Time to wait</input_port>\n        </Action>\n        <Action ID=\"WarnLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Decorator ID=\"WhileSuccess\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a drone's flight mission. It begins with the drone taking off to an altitude of 2.0 units, followed by executing a predefined sequence called \"Square\" from an external file. The shared blackboard is utilized for communication between different parts of the behavior tree. Once the \"Square\" sequence is completed, the drone is instructed to land.\n\nOverall, the behavior tree manages the liftoff, execution of a specific flight pattern (in this case, a square), and then safely landing the drone.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <include path=\"square.xml\"/>\n    <BehaviorTree ID=\"MainTree\">\n        <SequenceStar name=\"test\">\n            <ArmTakeoff altitude=\"2.0\"/>\n            <SubTree ID=\"Square\" __shared_blackboard=\"true\"/>\n            <Land/>\n        </SequenceStar>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate while continuously replanning its global path after every 1 meter of movement. It uses a PipelineSequence that consists of two steps: \n1. DistanceController: This component computes a new path to the goal pose using the \"GridBased\" planner whenever the robot has moved 1 meter from its current position.\n2. FollowPath: The robot follows the computed path using the \"FollowPath\" controller.\n\nThis behavior tree ensures that the robot dynamically adjusts its path to reach the goal, allowing it to adapt to changes in the environment and avoid obstacles in real-time.",
        "output": "<!--\n  This Behavior Tree replans the global path after every 1m.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <DistanceController distance=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </DistanceController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate or recharge when the battery level is low. It uses reactive sequences and recovery nodes to handle navigation tasks, such as computing paths through poses and following those paths. If the battery is low, it triggers a series of recovery actions including clearing costmaps, spinning, waiting, and backing up. If the battery is not low, the robot will continue navigating through the planned path. If the recovery sequence fails multiple times, the robot will spin in place. Finally, if all else fails, the robot will perform a full spin before attempting to navigate again.\n\nThis behavior tree ensures that the robot can effectively manage its energy levels by either continuing with its navigation tasks or initiating a series of recovery actions to conserve power until it can reach a charging dock.",
        "output": "<!--\n  This Behavior Tree enables a robot to return to the \n  charging dock when the battery is low.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Fallback name=\"NavigateOrRecharge\">\n      <ReactiveSequence name=\"Navigate\">\n        <IsBatteryLow min_battery=\"0.25\" battery_topic=\"/battery_status\" is_voltage=\"false\"/>          \n        <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n          <PipelineSequence name=\"NavigateWithReplanning\">\n            <RateController hz=\"0.333\">\n              <RecoveryNode number_of_retries=\"1\" name=\"ComputePathThroughPoses\">\n                <ReactiveSequence>\n                  <RemovePassedGoals input_goals=\"{goals}\" output_goals=\"{goals}\" radius=\"0.7\"/>\n                  <ComputePathThroughPoses goals=\"{goals}\" path=\"{path}\" planner_id=\"GridBased\"/>\n                </ReactiveSequence>\n                <ReactiveFallback name=\"ComputePathThroughPosesRecoveryFallback\">\n                  <GoalUpdated/>\n                  <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n                </ReactiveFallback>\n              </RecoveryNode>\n            </RateController>\n            <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n              <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n              <ReactiveFallback name=\"FollowPathRecoveryFallback\">\n                <GoalUpdated/>\n                <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n              </ReactiveFallback>\n            </RecoveryNode>\n          </PipelineSequence>\n          <ReactiveFallback name=\"RecoveryFallback\">\n            <GoalUpdated/>\n            <RoundRobin name=\"RecoveryActions\">\n              <Sequence name=\"ClearingActions\">\n                <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n                <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n              </Sequence>\n              <Spin spin_dist=\"1.57\"/>\n              <Wait wait_duration=\"5\"/>\n              <BackUp backup_dist=\"0.15\" backup_speed=\"0.025\"/>\n            </RoundRobin>\n          </ReactiveFallback>\n        </RecoveryNode> \n      </ReactiveSequence> \n      <Spin spin_dist=\"-3.14\"/>\n    </Fallback>  \n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the actions of a robot in an environment. The robot is programmed to perform various tasks based on conditions and fallback options. \n\nFirst, it checks if the room is known; if so, it decides whether to go to the room or follow a human. If a bottle is found, it will attempt to locate and grasp it. After grasping the bottle, it computes the inverse pose and moves to that position. If the bottle is located, it proceeds to grasp it. If the content is poured, the task is considered complete. If any of these tasks fail, the robot is instructed to ask for help.\n\nOverall, the behavior tree orchestrates the robot's autonomous decision-making process, encompassing activities such as navigation, object manipulation, and interaction with its surroundings. It also includes error handling by asking for assistance when needed.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback name=\"Main\">\n            <Sequence name=\"Autonomus\">\n                <Fallback name=\"ReachRoom\">\n                    <Sequence name=\"ShouldFollow\">\n                        <Condition ID=\"RoomKnown\"/>\n                        <Fallback name=\"GoToRoom_Fal\">\n                            <Condition ID=\"RobotInRoom\"/>\n                            <Action ID=\"GoToRoom\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Action ID=\"FollowHuman\"/>\n                </Fallback>\n                <Fallback name=\"BottleFound\">\n                    <Condition ID=\"BottleFound\"/>\n                    <Action ID=\"FindBottle\"/>\n                </Fallback>\n                <Fallback name=\"Fetch\">\n                    <Condition ID=\"BottleGrasped\"/>\n                    <Sequence name=\"Grasp\">\n                        <Fallback name=\"InvPoseCompute\">\n                            <Sequence name=\"SeqInvPose\">\n                                <Condition ID=\"InvPoseComputed\"/>\n                                <Condition ID=\"InvPoseValid\"/>\n                            </Sequence>\n                            <Action ID=\"ComputeInvPose\"/>\n                        </Fallback>\n                        <Fallback name=\"GoInvPose\">\n                            <Condition ID=\"RobotAtInvPose\"/>\n                            <Sequence name=\"prepare\">\n                                <Action ID=\"KeepArmsForGrasp\"/>\n                                <Action ID=\"GoToInvPose\"/>\n                            </Sequence>\n                        </Fallback>\n                        <Fallback name=\"Locate\">\n                            <Condition ID=\"BottleLocated\"/>\n                            <Action ID=\"LocateBottle\"/>\n                        </Fallback>\n                        <Action ID=\"GraspBottle\"/>\n                    </Sequence>\n                    <Action ID=\"SetInvPoseInvaild\"/>\n                </Fallback>\n\t\t<Fallback name=\"Pour\">\n\t\t<Condition ID=\"ContentPoured\"/>\t\n\t\t<Sequence name=\"PourSequence\">\n                       <Fallback name=\"LocateFall\">\n                            <Condition ID=\"GlassLocated\"/>\n                            <Action ID=\"LocateGlass\"/>\n                        </Fallback>\n                        <Action ID=\"PourDrink\"/>\n\t\t</Sequence>\n\t\t</Fallback>\n            </Sequence>\n            <Action ID=\"AskForHelp\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AskForHelp\"/>\n        <Condition ID=\"BottleFound\"/>\n        <Condition ID=\"BottleGrasped\"/>\n        <Condition ID=\"BottleLocated\"/>\n        <Action ID=\"ComputeInvPose\"/>\n        <Action ID=\"FindBottle\"/>\n        <Action ID=\"FollowHuman\"/>\n        <Action ID=\"GoToInvPose\"/>\n        <Action ID=\"GoToRoom\"/>\n        <Action ID=\"GraspBottle\"/>\n        <Condition ID=\"InvPoseComputed\"/>\n        <Condition ID=\"InvPoseValid\"/>\n        <Action ID=\"KeepArmsForGrasp\"/>\n        <Action ID=\"KeepRunning\"/>\n        <Action ID=\"LocateBottle\"/>\n        <Condition ID=\"RobotAtInvPose\"/>\n        <Condition ID=\"RobotInRoom\"/>\n        <Condition ID=\"RoomKnown\"/>\n        <Action ID=\"SetInvPoseInvaild\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's recharging process. The robot is programmed to follow a sequence of actions: first, it moves to the charging station location (-6, 7.5). Then, it pairs with the charging station using pairing mode 1 and device type 4, indicating a specific type of device for charging. After that, the robot initiates the battery charging process until it reaches a goal percentage of 100%. Subsequently, it unpairs from the charging station using pairing mode 2 and device type 4. Finally, the robot moves to a waiting area at coordinates (0, 0).\n\nIn summary, the behavior tree orchestrates the robot's movement to the charging station, pairing for charging, actual charging, unpairing, and then relocating to a designated waiting area.",
        "output": " <root main_tree_to_execute = \"Recharge\" >\n    <BehaviorTree ID=\"Recharge\">\n        <Sequence>\n            <!--charging_station = (-6,7.5)-->\n            <BaseMovement x=\"-6\" y=\"7.5\"/>\n            <!--mode 1 = pair, type 4 = chargingstation-->\n            <DevicePairing pairing_mode=\"1\" device_type=\"4\"/>\n            <BatteryCharging goal_percentage=\"1\"/>\n            <!--mode 2 = unpair, type 4 = chargingstation-->\n            <DevicePairing pairing_mode=\"2\" device_type=\"4\"/>\n            <!--waiting_area = (0,0)-->\n            <BaseMovement x=\"0\" y=\"0\"/>\n        </Sequence>\n    </BehaviorTree>\n </root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a task for a robot to move towards a specified waypoint. It first retrieves the pose of the waypoint using the GetPoseFromWp action and then proceeds to approach the object at that pose using the ApproachObject action. This sequence ensures that the robot successfully navigates to the designated waypoint and approaches the object located there.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n   <BehaviorTree ID=\"MainTree\">\n      <Sequence name=\"move\">\n        <GetPoseFromWp  name=\"get_pose_from_wp\" wp_id=\"{arg0}\" wp_pose=\"{pose}\"/>\n        <ApproachObject name=\"approach_object\" goal=\"{pose}\"/>\n      </Sequence>\n   </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of an object-moving robot. It follows a fallback pattern, attempting to execute sequences in order but falling back to alternative sequences if necessary. \n\nIn the first sequence, it attempts to move the object and then waits for 3 seconds. If successful, it continues with its next task. Otherwise, it moves on to the second sequence, where it returns the object to a specific location and then waits again. If both sequences fail, it resorts to putting the object in standby mode.\n\nThe tree relies on various actions such as moving the object, returning the object, waiting, and putting the object in standby. Each action has specific input and output ports that facilitate communication between the tree nodes and the robot's control system.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback>\n            <Sequence>\n                <Action ID=\"MoveObject\" action=\"{action}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\" pose_queue_size=\"{pose_queue_size}\"/>\n                <Action ID=\"WaitObject\" action=\"{action}\" wait_duration=\"3\"/>\n            </Sequence>\n            <Sequence>\n                <Action ID=\"ReturnObject\" action=\"{action}\" home_pose_far=\"{home_pose_far}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                <Action ID=\"WaitObject\" action=\"{action}\" wait_duration=\"3\"/>\n            </Sequence>\n            <Action ID=\"StandbyObject\" action=\"{action}\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"MoveObject\">\n            <output_port name=\"action\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n            <input_port name=\"pose_queue_size\"/>\n        </Action>\n        <Action ID=\"ReturnObject\">\n            <output_port name=\"action\"/>\n            <input_port name=\"home_pose_far\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"StandbyObject\">\n            <output_port name=\"action\"/>\n        </Action>\n        <Action ID=\"WaitObject\">\n            <output_port name=\"action\"/>\n            <input_port default=\"1\" name=\"wait_duration\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for an animal, possibly a farm animal or wildlife creature. The tree outlines various behaviors and conditions for the animal to follow in different scenarios. \n\nThe \"ShedTree\" within the main tree defines the decision-making process for the animal. It considers factors such as time of day, location (shed or pasture), and specific actions like grazing, moving, finding shelter, and reproduction. The tree allows the animal to adapt its behavior based on these conditions. For instance, it will leave the shed during the day if not already outside, find a random pasture field, and graze. At night, it will search for the shed and enter it if not already inside.\n\nThe tree also includes a range of conditions and actions that the animal can perform, including eating prey, laying eggs, giving birth, and attempting to reproduce. Additionally, there are conditions related to the animal's age, gender, hunger, and reproductive status. This behavior tree provides a comprehensive set of rules for",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <ForceSuccess/>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"ShedTree\">\n        <FallbackStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsDay\"/>\n                <Condition ID=\"IsInShed\"/>\n                <Action ID=\"LeaveShed\"/>\n                <Action ID=\"FindRandomPastureField\"/>\n                <Action ID=\"Move\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsNight\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"FindShed\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"EnterShed\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsDay\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"RandomMove\"/>\n                <Action ID=\"Graze\"/>\n            </SequenceStar>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Condition ID=\"CanHaveSex\"/>\n        <Action ID=\"EatPrey\"/>\n        <Action ID=\"EnterShed\"/>\n        <Action ID=\"FindPrey\"/>\n        <Action ID=\"FindRandomPastureField\"/>\n        <Action ID=\"FindRetreat\"/>\n        <Action ID=\"FindShed\"/>\n        <Action ID=\"GiveBirth\"/>\n        <Action ID=\"Graze\"/>\n        <Condition ID=\"IsAdult\"/>\n        <Condition ID=\"IsCarnivore\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsEgg\"/>\n        <Condition ID=\"IsEggLayer\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHerbivore\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInShed\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Condition ID=\"IsOnPasture\"/>\n        <Condition ID=\"IsPregnant\"/>\n        <Condition ID=\"IsProducer\"/>\n        <Condition ID=\"IsReadyToGiveBirth\"/>\n        <Condition ID=\"IsWoodVermin\"/>\n        <Condition ID=\"IsYoung\"/>\n        <Action ID=\"KillPrey\"/>\n        <Action ID=\"LayEgg\"/>\n        <Action ID=\"LeaveShed\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"Produce\"/>\n        <Action ID=\"RandomMove\"/>\n        <SubTree ID=\"ShedTree\"/>\n        <Action ID=\"Sleep\"/>\n        <Action ID=\"TryHaveSex\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the decision-making process for a character, likely in a game or simulation. The character is programmed to perform various actions based on certain conditions and events. \n\nInitially, it attempts to execute a sequence of actions: \"GetTarget\", \"Move\", and then checks if the target is adjacent. If the target is adjacent, it will proceed to \"AttackTarget\". If any of these steps fail, it will resort to \"RandomMove\". Additionally, there are specific conditions such as \"IsDay\", \"IsFemale\", \"IsHungry\", \"IsMale\", and \"IsNight\" that likely influence the character's decisions.\n\nIn summary, the behavior tree orchestrates the character's behavior by prioritizing specific actions based on the current context and conditions. It aims to make the character responsive and adaptable to different situations, ensuring dynamic and engaging interactions within the environment.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback>\n            <SequenceStar name=\"Main\">\n                <Action ID=\"GetTarget\"/>\n                <Action ID=\"Move\"/>\n                <Sequence>\n                    <Condition ID=\"TargetAdjacent\"/>\n                    <Action ID=\"AttackTarget\"/>\n                </Sequence>\n            </SequenceStar>\n            <Action ID=\"RandomMove\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AttackTarget\"/>\n        <Action ID=\"GetTarget\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"Sleep\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree simply consists of a single node, \"SnapshotClient,\" within a Sequence. This indicates that the main task to be executed is taking a snapshot using the SnapshotClient.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SnapshotClient/>\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "Overall Summary:\nThe behavior tree is designed for a robot to perform a reactive sequence of actions. It first checks a condition (FlipFlopCondition) and then executes an action (YARPAction) using the YARP framework, specifically by sending a \"GoTo\" command through a specified port.\n\nThe behavior tree starts with a ReactiveSequence node, which means it will execute its children in order until one of them fails. The first child is a Condition node that likely determines whether the robot should proceed with the action. The second child is an Action node that utilizes the YARP framework to send a \"GoTo\" command through a specific port, presumably instructing the robot to move to a designated location.\n\nThis behavior tree seems to be a part of a larger system that controls the robot's navigation and actions based on certain conditions and external commands.",
        "output": "<?xml version=\"1.0\"?>\n<!--\n Copyright (C) 2020 Fondazione Istituto Italiano di Tecnologia (IIT)\n All Rights Reserved.\n-->\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <ReactiveSequence>\n            <Condition ID=\"FlipFlopCondition\"/>\n            <Action ID=\"YARPAction\" name=\"GoTo\" port_name=\"goTo\"/>\n        </ReactiveSequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Condition ID=\"FlipFlopCondition\"/>\n        <Action ID=\"YARPAction\">\n            <input_port name=\"port_name\" type=\"std::string\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a self-localization process for a robot. Upon receiving the initial pose, the robot attempts to localize itself using a global localization service request. If unsuccessful, it retries the request up to 5 times. Following this, it makes 10 attempts to achieve localization by executing a sequence of actions. This includes spinning, backing up, and then spinning again in case of failure, until successful localization is achieved. The \"IsLocalized\" condition is checked at various points to determine if the robot has successfully localized itself. Overall, the behavior tree outlines a robust self-localization strategy for the robot, ensuring that it can accurately determine its position within its environment.",
        "output": "<!--AutoLocalization-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <FallbackStar name=\"root_AutoLocalization\">\n      <initialPoseReceived/>\n      <SequenceStar name=\"doSelfLocalization\">\n        <RetryUntilSuccesful num_attempts=\"5\" name=\"retry_client_request\">\n          <globalLocalizationServiceRequest/>\n        </RetryUntilSuccesful>\n        <RetryUntilSuccesful num_attempts=\"10\" name=\"retry_localization\">\n          <Sequence>\n            <Fallback>\n              <IsLocalized/>\n              <SequenceStar>\n               <Spin/>\n               <BackUp/>\n               <Spin/>\n             </SequenceStar>\n            </Fallback>\n            <IsLocalized/>\n          </Sequence> \n        </RetryUntilSuccesful>\n      </SequenceStar>\n    </FallbackStar>\n  </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot's navigation and recovery system. It first checks if the robot is stuck, and if so, it attempts to recover by stopping, backing up, and spinning. If the robot is not stuck, it proceeds with the navigation branch. The navigation branch involves computing a path to a specific pose using parallel processing. The robot simultaneously follows the computed path and updates the path at a specified rate to ensure efficient navigation.\n\nOverall, the behavior tree ensures that the robot can navigate to its intended destination while also having mechanisms in place to recover from being stuck.",
        "output": "<!--\n  This Behavior Tree first goes into a branch where it will check if the robot is stuck.\n  If that is the case, it will attempt to recover. Otherwise it will continue with\n  the navigation branch. In this case the navigation branch is based on `parallel.xml`.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"root\">\n      <FallbackStar name=\"check_motion\">\n        <Inverter name=\"is_not_stuck\">\n          <IsStuck/>\n        </Inverter>\n        <SequenceStar name=\"stuck_recovery\">\n          <Stop/>\n          <BackUp/>\n          <Spin/>\n        </SequenceStar>\n      </FallbackStar>\n      <SequenceStar name=\"navigate\">\n        <ComputePathToPose endpoints=\"${endpoints}\" path=\"${path}\"/>\n        <ParallelNode threshold=\"1\">\n          <FollowPath path=\"${path}\"/>\n          <Sequence>\n            <RateController hz=\"2\">\n              <ComputePathToPose endpoints=\"${endpoints}\" path=\"${path}\"/>\n            </RateController>\n            <UpdatePath/>\n          </Sequence>\n        </ParallelNode>\n      </SequenceStar>\n    </Sequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "This behavior tree represents the decision-making process for an autonomous vehicle. The vehicle's actions are determined by a series of conditions and reactive sequences. \n\nThe main tree consists of multiple reactive sequences, each containing conditions and actions related to different driving maneuvers such as pulling over, pulling out, lane changes, and lane following. These sequences allow the vehicle to reactively plan and execute various driving tasks based on environmental inputs and system readiness.\n\nAdditionally, there are two separate behavior trees labeled \"a\" and \"b\", each containing their own reactive fallback structures with specific conditions and actions related to lane change approval and avoidance maneuvers.\n\nOverall, the behavior tree orchestrates the vehicle's decision-making process for safe and efficient navigation, encompassing a range of driving behaviors including lane changes, lane following, and maneuvering in response to potential obstacles or hazards.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback>\n            <ReactiveSequence>\n                <Condition ID=\"PullOver_Request\"/>\n                <Condition ID=\"PullOver_Ready\"/>\n                <Action ID=\"PullOver_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"PullOut_Request\"/>\n                <Condition ID=\"PullOut_Ready\"/>\n                <Action ID=\"PullOut_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <ReactiveSequence>\n                <Condition ID=\"LaneChange_Request\"/>\n                <Fallback>\n                    <Condition ID=\"LaneChange_Ready\"/>\n                    <Condition ID=\"ForceLaneChange_ForceApproval\"/>\n                </Fallback>\n                <Action ID=\"LaneChange_Plan\" output=\"{output}\"/>\n            </ReactiveSequence>\n            <Action ID=\"LaneFollowing_Plan\" output=\"{output}\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"a\">\n        <ReactiveFallback>\n            <Condition ID=\"LaneChange_CheckApproval\"/>\n            <KeepRunningUntilFailure>\n                <Action ID=\"LaneChange_PlanCandidate\" output=\"{output}\"/>\n            </KeepRunningUntilFailure>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"b\">\n        <ReactiveFallback>\n            <Condition ID=\"Avoidance_CheckApproval\"/>\n            <KeepRunningUntilFailure>\n                <Action ID=\"Avoidance_PlanCandidate\" output=\"{output}\"/>\n            </KeepRunningUntilFailure>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Condition ID=\"Avoidance_CheckApproval\"/>\n        <Action ID=\"Avoidance_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"Avoidance_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"Avoidance_Ready\"/>\n        <Condition ID=\"Avoidance_Request\"/>\n        <Condition ID=\"ExternalApproval\"/>\n        <Condition ID=\"ForceApproval\"/>\n        <Condition ID=\"ForceLaneChange_ForceApproval\"/>\n        <Condition ID=\"LaneChange_CheckApproval\"/>\n        <Action ID=\"LaneChange_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"LaneChange_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"LaneChange_Ready\"/>\n        <Condition ID=\"LaneChange_Request\"/>\n        <Action ID=\"LaneFollowing_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"LaneFollowing_PlanCandidate\">\n            <output_port name=\"output_candidate\" type=\"boost::optional&lt;autoware_planning_msgs::PathWithLaneId_&lt;std::allocator&lt;void&gt; &gt; &gt;\">desc</output_port>\n        </Action>\n        <Condition ID=\"LaneFollowing_Ready\"/>\n        <Condition ID=\"LaneFollowing_Request\"/>\n        <Action ID=\"PullOut_Plan\">\n            <output_port name=\"output\"/>\n        </Action>\n        <Condition ID=\"PullOut_Ready\"/>\n        <Condition ID=\"PullOut_Request\"/>\n        <Action ID=\"PullOver_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"PullOver_Ready\"/>\n        <Condition ID=\"PullOver_Request\"/>\n        <Condition ID=\"SideShift_CheckApproval\"/>\n        <Action ID=\"SideShift_Plan\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Action ID=\"SideShift_PlanCandidate\">\n            <output_port name=\"output\" type=\"behavior_path_planner::BehaviorModuleOutput\">desc</output_port>\n        </Action>\n        <Condition ID=\"SideShift_Ready\"/>\n        <Condition ID=\"SideShift_Request\"/>\n        <SubTree ID=\"SubTree\"/>\n        <SubTree ID=\"a\"/>\n        <SubTree ID=\"b\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the charging process for a robot. Initially, it triggers a sub-tree \"ChargeST\" to manage the charging sequence. Within \"ChargeST\", the robot first speaks a message in Portuguese, then moves to a specific location while attempting multiple times if necessary. Subsequently, it either charges or repeats speaking a phrase five times in parallel. After a brief wait, the robot speaks another message and stops charging.\n\nAdditionally, the behavior tree defines various actions and conditions that can be utilized within the tree, such as moving the robot's base, speaking messages, waiting for a specified duration, checking battery status, detecting faces, and more.\n\nOverall, the behavior tree outlines a comprehensive charging routine for the robot, incorporating speech interactions, movement, and monitoring of the charging process.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <SubTree ID=\"ChargeST\"/>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"ChargeST\">\n        <SequenceStar>\n            <Action ID=\"Speak\" action_name=\"/gcloud_tts\" language=\"pt_PT\" utterance=\"Tenho fome\" voice=\"pt-PT-Wavenet-D\"/>\n            <Action ID=\"WaitForXSeconds\" name=\"Wait2Seconds\" result=\"SUCCESS\" seconds=\"2\"/>\n            <Fallback>\n                <SequenceStar>\n                    <RetryUntilSuccesful num_attempts=\"3\">\n                        <Action ID=\"MoveBase\" action_name=\"move_base\" frame_id=\"map\" goal_pose=\"-1.7971;-5.5118;0.0;0;0;0.72703;0.68659\" name=\"Go to first point\"/>\n                    </RetryUntilSuccesful>\n                    <Parallel failure_threshold=\"1\" success_threshold=\"2\">\n                        <Action ID=\"Charge\" action=\"CHARGE\" action_name=\"charging_action\"/>\n                        <Repeat num_cycles=\"5\">\n                            <Action ID=\"Speak\" action_name=\"/gcloud_tts\" language=\"pt_PT\" utterance=\"bip bip\" voice=\"pt-PT-Wavenet-D\"/>\n                        </Repeat>\n                    </Parallel>\n                </SequenceStar>\n            </Fallback>\n            <Action ID=\"WaitForXSeconds\" result=\"SUCCESS\" seconds=\"10\"/>\n            <Action ID=\"Speak\" action_name=\"/gcloud_tts\" language=\"pt_PT\" utterance=\"Estou cheio, vou sair da estação\" voice=\"pt-PT-Wavenet-D\"/>\n            <Action ID=\"Charge\" action=\"STOP_CHARGE\" action_name=\"charging_action\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\" type=\"std::string\"/>\n            <input_port name=\"action_name\" type=\"std::string\"/>\n        </Action>\n        <SubTree ID=\"ChargeST\"/>\n        <Action ID=\"CheckBattery\">\n            <output_port name=\"battery_state\" type=\"int\"/>\n            <output_port name=\"percentage\" type=\"double\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port name=\"charging_state\" type=\"int\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\" type=\"int\"/>\n            <input_port name=\"B\" type=\"int\"/>\n            <input_port name=\"Condition\" type=\"std::string\"/>\n        </Condition>\n        <Action ID=\"DetectBlocks\">\n            <output_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <input_port name=\"block_topic\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\" type=\"std::string\"/>\n            <input_port name=\"frame_id\" type=\"std::string\"/>\n            <input_port name=\"goal_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;\"/>\n        </Action>\n        <Action ID=\"SelectBlock\">\n            <input_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <output_port name=\"block_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <input_port name=\"position_in_list\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"action_name\" type=\"std::string\"/>\n            <input_port name=\"language\" type=\"std::string\"/>\n            <input_port name=\"utterance\" type=\"std::string\"/>\n            <input_port name=\"voice\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port name=\"result\" type=\"std::string\"/>\n            <input_port name=\"seconds\" type=\"std::string\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's decision-making process based on its battery and charging status. The robot has three main reactive sequences:\n1. If the battery level is low (less than 3) and it is not charging, it will initiate a charging sequence.\n2. If the robot is charging and the battery level is full (100%), it will stop charging and speak a message before continuing with its tasks.\n3. If the battery level is low and it is not charging for an extended period, it will seek assistance by speaking a message, clearing cost maps, and waiting for a specified duration.\n\nAdditionally, there is a separate behavior tree for the charging sequence, which involves speaking a message, attempting to move to a specific location multiple times, and running a parallel action of charging and speaking a message repeatedly.\n\nOverall, the behavior tree enables the robot to manage its energy levels effectively, prioritize charging when necessary, communicate its status, and seek help if needed.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <ReactiveFallback>\n            <Sequence>\n                <Action ID=\"CheckBattery\" battery_state=\"k_bat_state\" percentage=\"k_bat_perc\" service_name=\"/vizzy_batteries_state\"/>\n                <Condition A=\"{k_bat_state}\" B=\"3\" Condition=\"==\" ID=\"CompareInt\"/>\n                <Action ID=\"CheckCharging\" charging_state=\"charge_state\" service_name=\"battery_charging_state\"/>\n                <Condition A=\"{charge_state}\" B=\"0\" Condition=\"==\" ID=\"CompareInt\"/>\n                <SubTree ID=\"ChargeST\"/>\n            </Sequence>\n            <Sequence>\n                <Action ID=\"CheckCharging\" charging_state=\"charge_state\" service_name=\"battery_charging_state\"/>\n                <Condition A=\"{charge_state}\" B=\"1\" Condition=\"==\" ID=\"CompareInt\"/>\n                <Action ID=\"CheckBattery\" battery_state=\"k_bat_state\" percentage=\"k_bat_perc\" service_name=\"/vizzy_batteries_state\"/>\n                <Condition A=\"{k_bat_state}\" B=\"0\" Condition=\"==\" ID=\"CompareInt\"/>\n                <Action ID=\"Speak\" action_name=\"/gcloud_tts\" language=\"pt_PT\" utterance=\"Estou cheio, vou sair da estação\" voice=\"pt-PT-Wavenet-D\"/>\n                <Action ID=\"Charge\" action=\"STOP_CHARGE\" action_name=\"charging_action\"/>\n            </Sequence>\n            <Sequence>\n                <Action ID=\"CheckBattery\" battery_state=\"k_bat_state\" percentage=\"k_bat_perc\" service_name=\"/vizzy_batteries_state\"/>\n                <Condition A=\"{k_bat_state}\" B=\"3\" Condition=\"==\" ID=\"CompareInt\"/>\n                <Action ID=\"CheckCharging\" charging_state=\"charge_state\" service_name=\"battery_charging_state\"/>\n                <Condition A=\"{charge_state}\" B=\"0\" Condition=\"==\" ID=\"CompareInt\"/>\n                <Action ID=\"Speak\" action_name=\"/gcloud_tts\" language=\"pt_PT\" utterance=\"Ajudem-me, tenho fome e não consigo carregar\" voice=\"pt-PT-Wavenet-D\"/>\n                <Action ID=\"CallEmptySrv\" service_name=\"/move_base/clear_costmaps\"/>\n                <Action ID=\"WaitForXSeconds\" result=\"SUCCESS\" seconds=\"10\"/>\n            </Sequence>\n            <Action ID=\"DebugAction\" string=\"Ok\"/>\n        </ReactiveFallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"ChargeST\">\n        <SequenceStar>\n            <Action ID=\"Speak\" action_name=\"/gcloud_tts\" language=\"pt_PT\" utterance=\"Tenho fome\" voice=\"pt-PT-Wavenet-D\"/>\n            <Action ID=\"WaitForXSeconds\" name=\"Wait2Seconds\" result=\"SUCCESS\" seconds=\"2\"/>\n            <RetryUntilSuccesful num_attempts=\"3\">\n                <Action ID=\"MoveBase\" action_name=\"move_base\" frame_id=\"map\" goal_pose=\"-4.88723403052;-6.0285904746;0.0;0.0;0.0;0.997843662386;0.0503172395835\" name=\"Go to first point\"/>\n            </RetryUntilSuccesful>\n            <Parallel failure_threshold=\"1\" success_threshold=\"2\">\n                <Action ID=\"Charge\" action=\"CHARGE\" action_name=\"charging_action\"/>\n                <Repeat num_cycles=\"10\">\n                    <Action ID=\"Speak\" action_name=\"/gcloud_tts\" language=\"pt_PT\" utterance=\"bip bip\" voice=\"pt-PT-Wavenet-D\"/>\n                </Repeat>\n            </Parallel>\n        </SequenceStar>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"CallEmptySrv\">\n            <input_port name=\"service_name\"/>\n        </Action>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\" type=\"std::string\"/>\n            <input_port name=\"action_name\" type=\"std::string\"/>\n        </Action>\n        <SubTree ID=\"ChargeST\"/>\n        <Action ID=\"CheckBattery\">\n            <output_port name=\"battery_state\" type=\"int\"/>\n            <output_port name=\"percentage\" type=\"double\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\" type=\"std::string\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port name=\"charging_state\" type=\"int\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\" type=\"int\"/>\n            <input_port name=\"B\" type=\"int\"/>\n            <input_port name=\"Condition\" type=\"std::string\"/>\n        </Condition>\n        <Action ID=\"DebugAction\">\n            <input_port name=\"string\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"Destroy\"/>\n        <Action ID=\"DetectBlocks\">\n            <output_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <input_port name=\"block_topic\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"GeneralActionlib\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"constants\">A coma separated list of constants.</input_port>\n            <output_port name=\"result\">This is a string</output_port>\n            <input_port name=\"variables\">A coma separated list of variables.</input_port>\n        </Action>\n        <Action ID=\"GetFloat64\">\n            <output_port name=\"number\" type=\"double\"/>\n            <input_port name=\"topic\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"GetInt16\">\n            <output_port name=\"number\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GetPoseArray\">\n            <input_port name=\"pose_array\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GiveFeedback\">\n            <input_port default=\"850\" name=\"almost_thr\"/>\n            <input_port name=\"correct_blocks\"/>\n            <input_port name=\"incorrect_blocks\"/>\n            <input_port default=\"0\" name=\"personality\"/>\n            <input_port name=\"score\"/>\n        </Action>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\" type=\"std::string\"/>\n            <input_port name=\"frame_id\" type=\"std::string\"/>\n            <input_port name=\"goal_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;\"/>\n        </Action>\n        <Action ID=\"MoveTorso\">\n            <input_port name=\"angle\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"ResetVars\"/>\n        <Action ID=\"SelectBlock\">\n            <input_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <output_port name=\"block_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <input_port name=\"position_in_list\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"SelectFieldFromPoseStamped\">\n            <input_port name=\"field\"/>\n            <output_port name=\"output_val\"/>\n            <input_port name=\"pose_stamped\"/>\n        </Action>\n        <Action ID=\"SelectPose\">\n            <input_port name=\"pose_array\"/>\n            <input_port name=\"pose_stamped\"/>\n            <input_port name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"SenseScore\">\n            <output_port name=\"score\"/>\n            <input_port name=\"score_topic\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"action_name\" type=\"std::string\"/>\n            <input_port name=\"language\" type=\"std::string\"/>\n            <input_port name=\"utterance\" type=\"std::string\"/>\n            <input_port name=\"voice\" type=\"std::string\"/>\n        </Action>\n        <SubTree ID=\"SubTree\"/>\n        <Action ID=\"TimerAction\">\n            <input_port name=\"s_between_success\">Time (s) before this node returns SUCCESS. It will return FAILURE in the meanwhile</input_port>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port name=\"result\" type=\"std::string\"/>\n            <input_port name=\"seconds\" type=\"std::string\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control the actions of a robotic system based on various conditions and inputs. The tree consists of a repeating sequence that includes multiple sub-tasks such as checking preconditions, reactive actions based on current state, and updating the overall task sequence.\n\nThe robot's actions are determined by the input parameters and the current state, with options for moving, staying in place, picking up objects, or dropping them. The tree also handles recovery and replanning requests at different levels based on the current state and executed sequences.\n\nOverall, the behavior tree orchestrates the robot's behavior by continuously executing a sequence of actions while considering the current state, desired sequences, and specific action types. It provides a structured approach to managing the robot's tasks and responses to dynamic environmental changes.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Condition ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <Condition ID=\"ReactiveLTLStateCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Switch4 case_1=\"move\" case_2=\"stay\" case_3=\"pick\" case_4=\"drop\" variable=\"{bt_action_type}\">\n                            <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                            <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"PickAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"DropAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <AlwaysFailure/>\n                        </Switch4>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"DropAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"GuideAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Condition>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Condition ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Condition>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"PickAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"ReactiveLTLStateCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Condition>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel1\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robotic system to execute a sequence of actions in a repeatable manner, with the number of cycles specified by an input parameter. The sequence involves several fallbacks and actions that are conditionally executed based on the state of the system.\n\nThe main sequence includes:\n1. LTLPreCheck action followed by ReplanningRequestLevel2 action within a fallback.\n2. Another fallback containing a Switch3 node which selects an action based on the value of bt_action_type, with MoveAction, StayAction, or SynchronizedTransitionAction being potential actions, and then ReplanningRequestLevel3 action.\n3. UpdateLTL action at the end of the sequence.\n\nEach action has specific input and output ports through which it interacts with the system. The behavior tree allows for handling locomotion status, executing different types of actions, checking and updating the system's state, and requesting replanning if necessary.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Action ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <Fallback>\n                    <Switch3 case_1=\"move\" case_2=\"stay\" case_3=\"synchronized_transition\" variable=\"{bt_action_type}\">\n                        <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                        <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                        <Action ID=\"SynchronizedTransitionAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                        <AlwaysFailure/>\n                    </Switch3>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Action>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a system that involves repetitive actions based on certain conditions. It includes a sequence of actions to be repeated a specified number of times. The actions involve checking a current state against a desired sequence, performing a move action based on certain conditions, and updating a sequence of actions and the desired state.\n\nThe \"LTLPreCheck\" action checks the current state against the desired sequence, while the \"MoveAction\" performs a move based on specific conditions and updates the state accordingly. The \"UpdateLTL\" action updates the sequence of actions and the desired state based on the outcome of the move action.\n\nOverall, the behavior tree represents a system that iterates through a sequence of actions, including state checks, movement, and state updates, for a specified number of cycles.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Action ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                <Action ID=\"MoveAction\" action=\"{action}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\" nav_goal=\"{nav_goal}\"/>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" nav_goal=\"{nav_goal}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n        <Action ID=\"MoveAction\">\n            <output_port name=\"action\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n            <input_port name=\"nav_goal\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n            <output_port name=\"nav_goal\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robotic system to execute a series of actions in a repeatable sequence. The robot will perform a set of actions, including checking the current state and desired sequence, handling locomotion status, moving to a specific goal, updating the action sequence, and performing recovery and replanning if necessary. \n\nThe tree structure ensures that the robot repeats this sequence a specified number of times. It also incorporates reactive sequences to handle failures and timeouts during locomotion, ensuring robustness in navigation and task execution.\n\nOverall, the behavior tree orchestrates the robot's behavior by defining a structured sequence of actions, error handling, and recovery strategies to achieve its objectives while adapting to dynamic environmental conditions.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Action ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"Replanning2\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <Action ID=\"LocomotionStatusCheck\"/>\n                        <Timeout msec=\"\">\n                            <Sequence>\n                                <Action ID=\"RecoveryStand\"/>\n                                <Action ID=\"LocomotionStart\"/>\n                            </Sequence>\n                        </Timeout>\n                        <ForceFailure>\n                            <Action ID=\"Replanning3\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Action ID=\"MoveAction\" action=\"{action}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\" nav_goal=\"{nav_goal}\"/>\n                        <ForceFailure>\n                            <Action ID=\"Replanning3\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" nav_goal=\"{nav_goal}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n        <Action ID=\"LocomotionStart\"/>\n        <Action ID=\"LocomotionStatusCheck\"/>\n        <Action ID=\"MoveAction\">\n            <output_port name=\"action\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n            <input_port name=\"nav_goal\"/>\n        </Action>\n        <Action ID=\"RecoveryStand\"/>\n        <Action ID=\"Replanning2\"/>\n        <Action ID=\"Replanning3\"/>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n            <output_port name=\"nav_goal\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's navigation system with periodic global path replanning at 1 Hz and recovery actions. It uses a hierarchical structure to handle navigation and recovery. The \"NavigateWithReplanning\" sequence includes a rate controller for the path planning process, which contains a recovery node for computing the path to a specific pose using a grid-based planner. If this fails, it triggers recovery actions such as clearing the global costmap and waiting. Additionally, there is a separate recovery node for following the computed path, with its own set of recovery actions like clearing the local costmap and spinning. If both navigation and path following fail, the overall recovery node triggers a wait action before retrying. This behavior tree ensures robust navigation by incorporating periodic replanning and recovery strategies in case of failures.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"2\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"4\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ReactiveFallback name=\"PathToPoseFallback\">\n              <GoalUpdated/>\n              <RoundRobin name=\"GlobalPlannerRecoveryActions\">\n                <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n                <Wait wait_duration=\"2\"/>\n              </RoundRobin>\n            </ReactiveFallback>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"4\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ReactiveFallback name=\"FollowPathFallback\">\n            <GoalUpdated/>\n            <RoundRobin name=\"PlannerRecoveryActions\">\n              <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n              <Spin spin_dist=\"1.57\"/>\n            </RoundRobin>\n          </ReactiveFallback>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <Wait wait_duration=\"5\"/>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's task of fetching and pouring a drink. The robot first attempts to go to a known room, following a human if necessary. If the room is known, it proceeds to find a bottle, fetch it, find a glass, fetch it, and then pour the drink. If any of these actions fail or the room is unknown, the robot will ask for help. This behavior tree allows the robot to autonomously perform a series of tasks related to serving a drink, with the ability to seek assistance when needed.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!--------------------------------------->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Root>\n            <Fallback name=\"FB1\">\n                <Sequence name=\"S1\">\n                    <Fallback name=\"FB2\">\n                        <Sequence name=\"S6\">\n                            <Condition ID=\"Room_known\"/>\n                            <Action ID=\"Go_to_room\"/>\n                        </Sequence>\n                        <Action ID=\"Follow_human\"/>\n                    </Fallback>\n                    <Action ID=\"Find_bottle\"/>\n                    <Action ID=\"Fetch_bottle\"/>\n                    <Action ID=\"Find_glass\"/>\n                    <Action ID=\"Fetch_glass\"/>\n                    <Action ID=\"Pour_drink\"/>\n                </Sequence>\n                <Action ID=\"Ask_for_help\"/>\n            </Fallback>\n        </Root>\n    </BehaviorTree>\n    <!--------------------------------------->\n    <TreeNodesModel>\n        <Action ID=\"Ask_for_help\"/>\n        <Action ID=\"Fetch_bottle\"/>\n        <Action ID=\"Fetch_glass\"/>\n        <Action ID=\"Find_bottle\"/>\n        <Action ID=\"Find_glass\"/>\n        <Action ID=\"Follow_human\"/>\n        <Action ID=\"Go_to_kitchen\"/>\n        <Action ID=\"Go_to_room\"/>\n        <Action ID=\"Pour_drink\"/>\n        <Condition ID=\"Room_known\"/>\n    </TreeNodesModel>\n    <!--------------------------------------->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the control logic for a robot's movement in response to different visual stimuli. The robot is programmed to continuously execute a sequence of movements based on the detection of specific objects using an OpenVINOEvent. When the \"cat\" is detected, the robot will move forward, stop, move backward, and then stop again. If the \"dog\" is detected, the robot will move backward, stop, move forward, and then stop. Finally, if the \"cow\" is detected, the robot will move left, stop, move right, and then stop.\n\nThis sequence of movements is repeated indefinitely unless interrupted. Additionally, the robot has predefined movements such as forward, stop, backward, right, and left, each associated with specific velocity values. These movements are executed by calling the \"MoveRobot\" behavior tree, which sends corresponding movement commands to the robot.\n\nIn summary, the behavior tree orchestrates the robot's responses to visual stimuli, guiding its movements based on the objects detected",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SetBlackboard output_key=\"Foward\" value=\"i;0.5\" />\n            <SetBlackboard output_key=\"Stop\"   value=\"k;0.25\"/>\n            <SetBlackboard output_key=\"Backward\" value=\"<;0.5\" /> \n            <SetBlackboard output_key=\"Right\" value=\"l;2\" /> \n            <SetBlackboard output_key=\"Left\" value=\"j;2\" /> \n            <Repeat num_cycles=\"-1\">\n                <ForceSuccess>\n                    <Fallback>\n                        <Sequence>\n                            <OpenVINOEvent object=\"cat\"/>\n                            <Sequence>\n                                <SubTree ID=\"MoveRobot\" target=\"Foward\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Stop\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Backward\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Stop\" />\n                            </Sequence>\n                        </Sequence>\n                        <Sequence>\n                            <OpenVINOEvent object=\"dog\"/>\n                            <Sequence>\n                                <SubTree ID=\"MoveRobot\" target=\"Backward\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Stop\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Foward\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Stop\" />\n                            </Sequence>\n                        </Sequence>\n                        <Sequence>\n                            <OpenVINOEvent object=\"cow\"/>\n                            <Sequence>\n                                <SubTree ID=\"MoveRobot\" target=\"Left\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Stop\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Right\" />\n                                <SubTree ID=\"MoveRobot\" target=\"Stop\" />\n                            </Sequence>\n                        </Sequence>\n                    </Fallback>\n                </ForceSuccess>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <SendCommandVel movement=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement by first instructing it to move to a predefined point and then adjust its orientation. This sequence is defined in the \"MainTree\" behavior, where the robot is directed to execute the \"MoveToPredefinedPoint\" subtree followed by the \"SubtreeOne\" subtree. The \"MoveToPredefinedPoint\" subtree involves a linear movement action, while the \"SubtreeOne\" subtree includes an action for adjusting the robot's orientation. Therefore, the overall task of the behavior tree is to guide the robot through a specific sequence of movements and orientation adjustments.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"SubtreeOne\">\n            <Action ID = \"AdjustOrientation\"/>\n    </BehaviorTree>\n    <BehaviorTree ID=\"MoveToPredefinedPoint\">\n            <Action ID = \"LinearMove\"/>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"main_sequence\">\n            <SubTree ID = \"MoveToPredefinedPoint\"/>\n            <SubTree ID = \"SubtreeOne\"/>\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of actions for a robotic arm. It begins by retrieving the joint positions for a specific pose called \"UPTRAY\" and then simultaneously sets the joints of the left and right arms to these positions. This is followed by similar sequences for poses labeled \"EXTENDED\", \"GRIPPING\", and \"REST\". Each pose's joint positions are retrieved and then set for both arms in parallel.\n\nThe use of parallel nodes ensures that the arm joints are set concurrently, with a success threshold of 2 and a failure threshold of 2. This means that at least 2 of the parallel tasks must succeed for the overall sequence to continue, providing redundancy and fault tolerance.\n\nIn summary, the behavior tree orchestrates the movement of a robotic arm through a predefined sequence of poses, ensuring that the arm joints are correctly positioned in parallel for each pose before proceeding to the next one.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <GetArmJointsForPose pose=\"UPTRAY\" joints_pose=\"{joints_pose}\" />\n            <Parallel success_threshold=\"2\" failure_threshold=\"2\">\n                <SetArmJointsLeft joints_pose=\"{joints_pose}\" />\n                <SetArmJointsRight joints_pose=\"{joints_pose}\" />\n            </Parallel>\n            <GetArmJointsForPose pose=\"EXTENDED\" joints_pose=\"{joints_pose}\" />\n            <Parallel success_threshold=\"2\" failure_threshold=\"2\">\n                <SetArmJointsLeft joints_pose=\"{joints_pose}\" />\n                <SetArmJointsRight joints_pose=\"{joints_pose}\" />\n            </Parallel>\n            <GetArmJointsForPose pose=\"GRIPPING\" joints_pose=\"{joints_pose}\" />\n            <Parallel success_threshold=\"2\" failure_threshold=\"2\">\n                <SetArmJointsLeft joints_pose=\"{joints_pose}\" />\n                <SetArmJointsRight joints_pose=\"{joints_pose}\" />\n            </Parallel>\n            <GetArmJointsForPose pose=\"REST\" joints_pose=\"{joints_pose}\" />\n            <Parallel success_threshold=\"2\" failure_threshold=\"2\">\n                <SetArmJointsLeft joints_pose=\"{joints_pose}\" />\n                <SetArmJointsRight joints_pose=\"{joints_pose}\" />\n            </Parallel>\n        </Sequence>\n    </BehaviorTree>\n\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree controls a robotic system with two grippers. The system is designed to perform a sequence of actions in parallel. Initially, it attempts to control both grippers simultaneously, with the requirement that at least two out of the four actions (two for each gripper) must succeed for the overall sequence to be considered successful. If this condition is not met, the sequence fails.\n\nFollowing this, the system performs another set of parallel actions where both grippers are controlled again. Similar to the previous step, the success threshold is set to two out of four actions. If this condition is met, the sequence succeeds; otherwise, it fails.\n\nIn summary, the behavior tree orchestrates the coordinated control of the robot's grippers, ensuring that specific combinations of actions are executed successfully in parallel.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Parallel success_threshold=\"2\" failure_threshold=\"2\">\n                <GripperControlRight relative_gripper_gap=\"1.0\" />\n                <GripperControlLeft relative_gripper_gap=\"1.0\" />\n            </Parallel>\n            <Parallel success_threshold=\"2\" failure_threshold=\"2\">\n                <GripperControlRight relative_gripper_gap=\"0.0\" />\n                <GripperControlLeft relative_gripper_gap=\"0.0\" />\n            </Parallel>\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a series of actions for a robot. It begins by checking the status, then proceeds to open and close the gripper in sequence. Finally, it initiates a verbal communication by saying something.\n\nAdditionally, the behavior tree includes external XML files \"Check.xml\" and \"Talk.xml\", suggesting that these files contain specific functionalities or subroutines such as checking status and talking, which are utilized within the main behavior tree.\n\nOverall, the behavior tree represents a high-level control flow for the robot's actions, ensuring that it follows a specific sequence of operations involving status checks, gripper manipulation, and verbal communication.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\t\n    <include path=\"Check.xml\" />\n    <include path=\"subtrees/Talk.xml\" />\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <CheckStatus/>\n            <OpenGripper/>\n            <CloseGripper/>\n            <SayStuff/>\n        </Sequence>\n    </BehaviorTree>\n\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a recovery system for a robot's navigation. The robot is programmed to recover from navigation failures using a series of recovery behaviors. If the robot encounters navigation issues, it will attempt recovery actions up to 6 times before giving up.\n\nThe recovery process consists of navigating with replanning, which involves computing a new path to the goal and following that path. If these actions fail, the recovery fallback behavior is triggered. This includes clearing the local and global costmaps, spinning the robot, and waiting for a specified duration.\n\nOverall, the behavior tree ensures that the robot can recover from navigation failures by attempting replanning and executing specific recovery actions when necessary.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree instructs an entity to perform two actions in sequence. First, it is directed to say \"Hello World,\" and then to execute the action \"SayHello.\" This implies that the entity will first vocalize the phrase \"Hello World\" and subsequently carry out the action associated with \"SayHello.\"",
        "output": "<root main_tree_to_execute=\"SayStuff\">\n\n    <BehaviorTree ID=\"SayStuff\">\n        <SequenceStar>\n            <Action ID=\"SaySomething\" message=\"Hello World\"/>\n            <Action ID=\"SayHello\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    \n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single sequence that contains a \"Motor_Wrapper_Node\". This suggests that the main task of the behavior tree is to execute the motor-related functionality encapsulated within the \"Motor_Wrapper_Node\". The specific details of what the motor node does are not provided in the given XML, but it can be inferred that this behavior tree is designed to control or interact with motors in some way. It's likely that the \"Motor_Wrapper_Node\" is responsible for coordinating and controlling the actions of motors, possibly for a robotic system or any other machinery involving motorized components.",
        "output": " <root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <Motor_Wrapper_Node name=\"Motor_Wrapper_Node\"/>\n        </Sequence>\n     </BehaviorTree>\n </root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a sequence of tasks for a robot. The robot is instructed to perform a series of actions in the specified order: pick, move, place, and repeat. This sequence involves multiple instances of picking up objects, moving to different locations, and placing the objects at those locations.\n\nThe tree follows a strict order where each action must be successfully completed before proceeding to the next one. This indicates a structured and sequential workflow for the robot's operations.\n\nOverall, the behavior tree represents a detailed plan for the robot's task execution, focusing on efficient manipulation and transportation of items to specific locations.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute ='TaskPlanTree'>\n\t<BehaviourTree ID = 'TaskPlanTree'>\n\t\t<Sequence name = 'root_sequence'>\n\t\t\t<SubTree ID='PICK1'/>\n\t\t\t<SubTree ID='MOVE2'/>\n\t\t\t<SubTree ID='PLACE3'/>\n\t\t\t<SubTree ID='MOVE4'/>\n\t\t\t<SubTree ID='PICK5'/>\n\t\t\t<SubTree ID='MOVE6'/>\n\t\t\t<SubTree ID='MOVE7'/>\n\t\t\t<SubTree ID='PLACE8'/>\n\t\t\t<SubTree ID='MOVE9'/>\n\t\t\t<SubTree ID='PICK10'/>\n\t\t\t<SubTree ID='MOVE11'/>\n\t\t\t<SubTree ID='PLACE12'/>\n\t\t</Sequence>\n\t</BehaviourTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a sequence of actions, where \"go1\" is executed first, followed by setting a blackboard value and then executing \"go2\". The specific values for the blackboard are not provided in the given XML.\n\nAdditionally, there are several other actions (go3 to go9) listed in the TreeNodesModel, but they are not utilized in the main BehaviorTree. Therefore, their purpose or execution is not defined within this behavior tree.\n\nIn summary, the behavior tree represents a sequence of actions that need to be performed in a specific order, with the potential for interaction with blackboard data. However, without the actual values for the blackboard, the exact nature of the tasks being performed remains unspecified.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"go1\"/>\n            <SetBlackboard output_key=\"${valueA}\" value=\"${valueB}\"/>\n            <Action ID=\"go2\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"go4\"/>\n        <Action ID=\"go5\"/>\n        <Action ID=\"go6\"/>\n        <Action ID=\"go7\"/>\n        <Action ID=\"go8\"/>\n        <Action ID=\"go9\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for the auto-localization task of a robot. It first checks if the initial pose has been received. If so, it attempts to perform self-localization. The self-localization process involves making a global localization service request and retrying up to 5 times if unsuccessful. Then, it retries the localization process up to 10 times, where it checks if the robot is localized. If not, it performs a sequence of spinning, backing up, and spinning again before checking for localization once more. This process continues until successful localization is achieved.",
        "output": "<!--AutoLocalization-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <FallbackStar name=\"root_AutoLocalization\">\n      <initialPoseReceived/>\n      <SequenceStar name=\"doSelfLocalization\">\n        <RetryUntilSuccesful num_attempts=\"5\" name=\"retry_client_request\">\n          <globalLocalizationServiceRequest/>\n        </RetryUntilSuccesful>\n        <RetryUntilSuccesful num_attempts=\"10\" name=\"retry_localization\">\n          <Sequence>\n            <Fallback>\n              <IsLocalized/>\n              <SequenceStar>\n               <Spin/>\n               <BackUp/>\n               <Spin/>\n             </SequenceStar>\n            </Fallback>\n            <IsLocalized/>\n          </Sequence> \n        </RetryUntilSuccesful>\n      </SequenceStar>\n    </FallbackStar>\n  </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for an animal in a simulated environment. The \"ShedTree\" defines the actions and conditions for the animal's behavior. \n\nThe animal will prioritize its activities based on various conditions such as time of day, location, hunger, and reproductive state. It will attempt to find shelter in the shed during the night, graze during the day if not in the shed, and perform random movements when hungry and outside the shed. Additionally, it will seek prey, give birth, and attempt reproduction under specific conditions.\n\nThe tree is designed to simulate natural behaviors such as seeking shelter, foraging, and reproduction in an ecosystem. It provides a framework for the animal's decision-making process based on its current state and environmental factors.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <AlwaysSuccess/>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"ShedTree\">\n        <FallbackStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsDay\"/>\n                <Condition ID=\"IsInShed\"/>\n                <Action ID=\"LeaveShed\"/>\n                <Action ID=\"FindRandomPastureField\"/>\n                <Action ID=\"Move\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsNight\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"FindShed\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"EnterShed\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsDay\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"RandomMove\"/>\n                <Action ID=\"Graze\"/>\n            </SequenceStar>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Condition ID=\"CanHaveSex\"/>\n        <Action ID=\"EatPrey\"/>\n        <Action ID=\"EnterShed\"/>\n        <Action ID=\"FindPrey\"/>\n        <Action ID=\"FindRandomPastureField\"/>\n        <Action ID=\"FindRetreat\"/>\n        <Action ID=\"FindShed\"/>\n        <Action ID=\"GiveBirth\"/>\n        <Action ID=\"Graze\"/>\n        <Condition ID=\"IsAdult\"/>\n        <Condition ID=\"IsCarnivore\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsEgg\"/>\n        <Condition ID=\"IsEggLayer\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHerbivore\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInShed\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Condition ID=\"IsOnPasture\"/>\n        <Condition ID=\"IsPregnant\"/>\n        <Condition ID=\"IsProducer\"/>\n        <Condition ID=\"IsReadyToGiveBirth\"/>\n        <Condition ID=\"IsWoodVermin\"/>\n        <Condition ID=\"IsYoung\"/>\n        <Action ID=\"KillPrey\"/>\n        <Action ID=\"LayEgg\"/>\n        <Action ID=\"LeaveShed\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"Produce\"/>\n        <Action ID=\"RandomMove\"/>\n        <SubTree ID=\"ShedTree\"/>\n        <Action ID=\"Sleep\"/>\n        <Action ID=\"TryHaveSex\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a decision-making process for an autonomous vehicle. The vehicle's actions are determined by various conditions and actions defined in the tree nodes model. \n\nThe main behavior tree, \"BehaviorTree,\" consists of a fallback node named \"Core_seq\" which contains sequences and conditions to manage the vehicle's navigation and mission state. It includes checking mission wait, stopping the vehicle, initializing path generation, handling lane keeping and lane change scenarios, traffic light checks, and managing mission states such as arrival at the goal.\n\nThe tree utilizes a range of conditions like checking collision, lane change feasibility, proximity to objects, irregularities, and specific states such as lane change left or right. Additionally, it employs actions including path generation, setting vehicle state, publishing data, and stopping at traffic lights.\n\nIn summary, the behavior tree orchestrates the decision-making process for the autonomous vehicle, ensuring safe and efficient navigation while adhering to mission objectives and traffic regulations.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback name=\"Core_seq\">\n            <Sequence name=\"\">\n                <Condition ID=\"checkMissionWait\"/>\n                <Action ID=\"stop\"/>\n            </Sequence>\n            <Sequence>\n                <Sequence name=\"init\">\n                    <Condition ID=\"checkExistPathGlobal\"/>\n                    <Fallback name=\"\">\n                        <Sequence name=\"\">\n                            <Condition ID=\"checkStateLaneKeeping\"/>\n                            <Condition ID=\"checkFailLaneChange\"/>\n                            <Action ID=\"callPathGlobal\"/>\n                        </Sequence>\n                        <AlwaysSuccess/>\n                    </Fallback>\n                    <Action ID=\"init\"/>\n                    <Sequence name=\"gen path\">\n                        <Fallback name=\"StateSelect\">\n                            <Sequence name=\"LaneKeeping\">\n                                <Condition ID=\"checkStateLaneKeeping\"/>\n                                <Action ID=\"genPathLaneKeeping\"/>\n                                <Sequence name=\"LaneKeeping\">\n                                    <Fallback name=\"\">\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkGlobalLaneChange\"/>\n                                            <Fallback name=\"\">\n                                                <Sequence name=\"\">\n                                                    <Condition ID=\"checkLeftChange\"/>\n                                                    <Fallback name=\"\">\n                                                        <Sequence name=\"\">\n                                                            <Condition ID=\"checkLaneChangeableLeft\"/>\n                                                            <Action ID=\"genPathLaneChangeLeft\"/>\n                                                            <Fallback name=\"\">\n                                                                <Sequence name=\"\">\n                                                                    <Fallback name=\"\">\n                                                                        <Condition ID=\"checkObjectStaticLeftLane\"/>\n                                                                        <Condition ID=\"checkCollisionBehindLeft\"/>\n                                                                    </Fallback>\n                                                                    <Action ID=\"setStateLaneKeeping\"/>\n                                                                </Sequence>\n                                                                <Action ID=\"setStateLaneChangeLeft\"/>\n                                                            </Fallback>\n                                                        </Sequence>\n                                                        <Action ID=\"setStateLaneKeeping\"/>\n                                                    </Fallback>\n                                                </Sequence>\n                                                <Sequence name=\"\">\n                                                    <Condition ID=\"checkLaneChangeableRight\"/>\n                                                    <Action ID=\"genPathLaneChangeRight\"/>\n                                                    <Fallback name=\"\">\n                                                        <Sequence name=\"\">\n                                                            <Fallback name=\"\">\n                                                                <Condition ID=\"checkObjectStaticRightLane\"/>\n                                                                <Condition ID=\"checkCollisionBehindRight\"/>\n                                                            </Fallback>\n                                                            <Action ID=\"setStateLaneKeeping\"/>\n                                                        </Sequence>\n                                                        <Action ID=\"setStateLaneChangeRight\"/>\n                                                    </Fallback>\n                                                </Sequence>\n                                                <Action ID=\"setStateLaneKeeping\"/>\n                                            </Fallback>\n                                        </Sequence>\n                                        <Sequence name=\"check Collision\">\n                                            <Condition ID=\"checkFrontObject\"/>\n                                            <Fallback name=\"\">\n                                                <Sequence name=\"lane_keeping\">\n                                                    <Inverter>\n                                                        <Condition ID=\"checkIrregularFront\"/>\n                                                    </Inverter>\n                                                    <Fallback name=\"lane_keeping\">\n                                                        <Condition ID=\"checkNearCorner\"/>\n                                                        <Condition ID=\"checkObjectNearGoal\"/>\n                                                        <Condition ID=\"checkMeNearGoal\"/>\n                                                    </Fallback>\n                                                    <Action ID=\"setStateLaneKeeping\"/>\n                                                </Sequence>\n                                                <Fallback name=\"lane_change\">\n                                                    <Sequence>\n                                                        <Condition ID=\"checkProfitLaneChangeLeft\"/>\n                                                        <Fallback>\n                                                            <Sequence name=\"\">\n                                                                <Fallback>\n                                                                    <Condition ID=\"checkObjectStaticLeftLane\"/>\n                                                                    <Condition ID=\"checkIrregularLeft\"/>\n                                                                </Fallback>\n                                                                <Action ID=\"setStateLaneKeeping\"/>\n                                                            </Sequence>\n                                                            <Sequence name=\"\">\n                                                                <Condition ID=\"checkLaneChangeableLeft\"/>\n                                                                <Action ID=\"genPathLaneChangeLeft\"/>\n                                                                <Fallback name=\"\">\n                                                                    <Sequence name=\"\">\n                                                                        <Fallback name=\"\">\n                                                                            <Condition ID=\"checkObjectStaticLeftLane\"/>\n                                                                            <Condition ID=\"checkCollisionBehindLeft\"/>\n                                                                        </Fallback>\n                                                                        <Action ID=\"setStateLaneKeeping\"/>\n                                                                    </Sequence>\n                                                                    <Action ID=\"setStateLaneChangeLeft\"/>\n                                                                </Fallback>\n                                                            </Sequence>\n                                                            <Action ID=\"setStateLaneKeeping\"/>\n                                                        </Fallback>\n                                                    </Sequence>\n                                                    <Sequence>\n                                                        <Condition ID=\"checkProfitLaneChangeRight\"/>\n                                                        <Fallback>\n                                                            <Sequence>\n                                                                <Fallback>\n                                                                    <Condition ID=\"checkObjectStaticRightLane\" name=\"checkObjectStaticRigtLane\"/>\n                                                                    <Condition ID=\"checkIrregularRight\"/>\n                                                                </Fallback>\n                                                                <Action ID=\"setStateLaneKeeping\"/>\n                                                            </Sequence>\n                                                            <Sequence>\n                                                                <Condition ID=\"checkLaneChangeableRight\"/>\n                                                                <Action ID=\"genPathLaneChangeRight\"/>\n                                                                <Fallback name=\"\">\n                                                                    <Sequence name=\"\">\n                                                                        <Fallback name=\"\">\n                                                                            <Condition ID=\"checkObjectStaticRightLane\"/>\n                                                                            <Condition ID=\"checkCollisionBehindRight\"/>\n                                                                        </Fallback>\n                                                                        <Action ID=\"setStateLaneKeeping\"/>\n                                                                    </Sequence>\n                                                                    <Action ID=\"setStateLaneChangeRight\"/>\n                                                                </Fallback>\n                                                            </Sequence>\n                                                            <Action ID=\"setStateLaneKeeping\"/>\n                                                        </Fallback>\n                                                    </Sequence>\n                                                </Fallback>\n                                            </Fallback>\n                                        </Sequence>\n                                        <Action ID=\"setStateLaneKeeping\"/>\n                                    </Fallback>\n                                    <Fallback name=\"\">\n                                        <Condition ID=\"checkMustLaneChange\"/>\n                                        <AlwaysSuccess/>\n                                    </Fallback>\n                                </Sequence>\n                            </Sequence>\n                            <Sequence name=\"LaneChangeLeft\">\n                                <Condition ID=\"checkStateLaneChangeLeft\"/>\n                                <Fallback name=\"\">\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkEndLaneChange\"/>\n                                        <Action ID=\"setStateLaneKeeping\"/>\n                                        <Action ID=\"callPathGlobal\"/>\n                                    </Sequence>\n                                    <Action ID=\"speedProfileLaneChange\"/>\n                                </Fallback>\n                            </Sequence>\n                            <Sequence name=\"LaneChangeRigth\">\n                                <Condition ID=\"checkStateLaneChangeRight\"/>\n                                <Fallback name=\"\">\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkEndLaneChange\"/>\n                                        <Action ID=\"setStateLaneKeeping\"/>\n                                        <Action ID=\"callPathGlobal\"/>\n                                    </Sequence>\n                                    <Action ID=\"speedProfileLaneChange\"/>\n                                </Fallback>\n                            </Sequence>\n                            <Sequence name=\"Recovery\">\n                                <Action ID=\"setStateLaneKeeping\"/>\n                            </Sequence>\n                        </Fallback>\n                        <Fallback name=\"traffic check\">\n                            <Condition ID=\"checkPassAbleTrafficLight\"/>\n                            <Action ID=\"stopTrafficLight\"/>\n                        </Fallback>\n                        <Fallback name=\"unprotectedTurn\">\n                            <Sequence>\n                                <Condition ID=\"checkUnprotected\"/>\n                                <Condition ID=\"checkImpassalbeUnprotected\"/>\n                                <Action ID=\"stop\"/>\n                            </Sequence>\n                            <AlwaysSuccess/>\n                        </Fallback>\n                    </Sequence>\n                </Sequence>\n                <Action ID=\"setPath\"/>\n                <Action ID=\"publishData\"/>\n                <Fallback name=\"mission state\">\n                    <Sequence>\n                        <Condition ID=\"checkArriveGoal\"/>\n                        <Action ID=\"setStateMissionArrive\"/>\n                        <Action ID=\"publishStateMission\"/>\n                    </Sequence>\n                    <Sequence>\n                        <Action ID=\"setStateMissionGoing\"/>\n                    </Sequence>\n                </Fallback>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"acc\"/>\n        <Action ID=\"callPathGlobal\"/>\n        <Action ID=\"callPathGlobalLeft\"/>\n        <Action ID=\"callPathGlobalRight\"/>\n        <Condition ID=\"checkAbleAstar\"/>\n        <Condition ID=\"checkArriveGoal\"/>\n        <Condition ID=\"checkCollision\"/>\n        <Condition ID=\"checkCollisionBehindLeft\"/>\n        <Condition ID=\"checkCollisionBehindRight\"/>\n        <Condition ID=\"checkEndLaneChange\"/>\n        <Condition ID=\"checkExistPathGlobal\"/>\n        <Condition ID=\"checkFailLaneChange\"/>\n        <Condition ID=\"checkFrontObject\"/>\n        <Condition ID=\"checkGlobalLaneChange\"/>\n        <Condition ID=\"checkImpassalbeUnprotected\"/>\n        <Condition ID=\"checkIrregularFront\"/>\n        <Condition ID=\"checkIrregularLeft\"/>\n        <Condition ID=\"checkIrregularRight\"/>\n        <Condition ID=\"checkLaneChange\"/>\n        <Condition ID=\"checkLaneChangeableLeft\"/>\n        <Condition ID=\"checkLaneChangeableRight\"/>\n        <Condition ID=\"checkLeftChange\"/>\n        <Condition ID=\"checkMeNearGoal\"/>\n        <Condition ID=\"checkMissionWait\"/>\n        <Condition ID=\"checkMustLaneChange\"/>\n        <Condition ID=\"checkNearCorner\"/>\n        <Condition ID=\"checkNearStopline\"/>\n        <Condition ID=\"checkObjectNearGoal\"/>\n        <Condition ID=\"checkObjectStaticLeftLane\"/>\n        <Condition ID=\"checkObjectStaticRightLane\"/>\n        <Condition ID=\"checkPassAbleTrafficLight\"/>\n        <Condition ID=\"checkProfitLaneChangeLeft\"/>\n        <Condition ID=\"checkProfitLaneChangeRight\"/>\n        <Condition ID=\"checkStateLaneChangeLeft\"/>\n        <Condition ID=\"checkStateLaneChangeRight\"/>\n        <Condition ID=\"checkStateLaneKeeping\"/>\n        <Condition ID=\"checkUnprotected\"/>\n        <Action ID=\"genPathLaneChangeLeft\"/>\n        <Action ID=\"genPathLaneChangeRight\"/>\n        <Action ID=\"genPathLaneKeeping\"/>\n        <Action ID=\"init\"/>\n        <Action ID=\"laneChangeLeft\"/>\n        <Action ID=\"laneChangeRight\"/>\n        <Action ID=\"publishData\"/>\n        <Action ID=\"publishStateMission\"/>\n        <Action ID=\"setPath\"/>\n        <Action ID=\"setStateLaneChangeLeft\"/>\n        <Action ID=\"setStateLaneChangeRight\"/>\n        <Action ID=\"setStateLaneKeeping\"/>\n        <Action ID=\"setStateMissionArrive\"/>\n        <Action ID=\"setStateMissionGoing\"/>\n        <Action ID=\"speedProfileLaneChange\"/>\n        <Action ID=\"stop\"/>\n        <Action ID=\"stopTrafficLight\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for a character in a game or simulation. The character has various actions and conditions that determine its behavior. \n\nThe main tree consists of a fallback node, which contains two branches. The first branch includes a sequence of actions: getting a target, moving, and then checking if the target is adjacent. If the target is adjacent, the character will attack the target. The second branch involves the character making a random move. \n\nThe character has several conditions such as IsDay, IsFemale, IsHungry, IsMale, and IsNight, along with actions like AttackTarget, GetTarget, Move, RandomMove, and Sleep.\n\nIn summary, the behavior tree dictates that the character will prioritize attacking a target if it is adjacent, otherwise it will perform a random move. This decision-making process is influenced by various conditions such as time of day, gender, and hunger level.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback>\n            <SequenceStar name=\"Main\">\n                <Action ID=\"GetTarget\"/>\n                <Action ID=\"Move\"/>\n                <Sequence>\n                    <Condition ID=\"TargetAdjacent\"/>\n                    <Action ID=\"AttackTarget\"/>\n                </Sequence>\n            </SequenceStar>\n            <Action ID=\"RandomMove\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AttackTarget\"/>\n        <Action ID=\"GetTarget\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"Sleep\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robotic system to perform tasks in a sequential manner. The robot first attempts to recognize a specific color (specified by \"{color}\") and moves towards the identified color point (\"{color_point}\"). If unsuccessful, it retries until successful. Following this, the robot waits for a specified time (\"{wait_time}\"), and then proceeds to recognize a hole at a certain location (\"{hole_point}\"). It calculates the launcher angle based on the recognized hole and launches an object using the calculated angle.\n\nThe tree utilizes various actions such as recognizing color and holes, path planning, calculating launcher angles, and launching objects. Additionally, it incorporates retry mechanisms to handle potential recognition failures. The behavior tree is designed to coordinate these actions to achieve a specific task, likely related to robotic manipulation or automation.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Sequence>\n                <RetryUntilSuccesful num_attempts=\"\">\n                    <Action Color=\"{color}\" ID=\"RecColor\" Point=\"{color_point}\"/>\n                </RetryUntilSuccesful>\n                <Action ID=\"MoveGoal\" TargetPoint=\"{target_point}\"/>\n                <ForceSuccess>\n                    <Action ID=\"Wait\" WaitTime=\"{wait_time}\"/>\n                </ForceSuccess>\n            </Sequence>\n            <Sequence>\n                <RetryUntilSuccesful num_attempts=\"\">\n                    <Action Hole=\"{hole_point}\" ID=\"RecHole\"/>\n                </RetryUntilSuccesful>\n                <Action ID=\"CalcLuncherAngle\" LuncherAng=\"{lnchr_ang}\"/>\n                <Action ID=\"Launch\" LauncherAng=\"{lnchr_ang}\"/>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CalcLuncherAngle\">\n            <output_port default=\"{lnchr_ang}\" name=\"LuncherAng\"/>\n        </Action>\n        <Action ID=\"Launch\">\n            <input_port default=\"{lnchr_ang}\" name=\"LauncherAng\"/>\n        </Action>\n        <Action ID=\"MoveGoal\">\n            <inout_port default=\"{target_point}\" name=\"TargetPoint\"/>\n        </Action>\n        <Action ID=\"PathPlan\">\n            <input_port default=\"{map}\" name=\"Map\"/>\n            <output_port default=\"{path}\" name=\"Path\"/>\n            <input_port default=\"{color_point}\" name=\"Point\"/>\n            <output_port default=\"{target_point}\" name=\"TargetPoint\"/>\n        </Action>\n        <Action ID=\"RecColor\">\n            <input_port default=\"{color}\" name=\"Color\"/>\n            <output_port default=\"{point}\" name=\"Point\"/>\n        </Action>\n        <Action ID=\"RecHole\">\n            <output_port default=\"{Hole}\" name=\"Hole\"/>\n        </Action>\n        <Action ID=\"Wait\">\n            <input_port default=\"{wait_time}\" name=\"WaitTime\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the decision-making process for a robot. The robot is programmed to perform various tasks based on different conditions and actions. \n\nIt follows a hierarchical structure where it first attempts to autonomously navigate and accomplish tasks. If it encounters obstacles or failures, it resorts to seeking human assistance.\n\nThe main sequence \"Autonomous\" encompasses several sub-sequences and actions:\n1. It checks if the room is known and decides whether to follow a predefined path or follow a human.\n2. If a bottle is found, it proceeds to locate and grasp it. \n3. If the bottle is successfully grasped, it performs a series of actions related to positioning and grasping.\n\nIf any of these tasks fail, the robot will ask for help as a last resort.\n\nOverall, the behavior tree outlines the robot's decision-making process in performing autonomous tasks and seeking assistance when necessary.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback name=\"Main\">\n            <Sequence name=\"Autonomus\">\n                <Fallback name=\"ReachRoom\">\n                    <Sequence name=\"ShouldFollow\">\n                        <Condition ID=\"RoomKnown\"/>\n                        <Fallback name=\"GoToRoom_Fal\">\n                            <Condition ID=\"RobotInRoom\"/>\n                            <Action ID=\"GoToRoom\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Action ID=\"FollowHuman\"/>\n                </Fallback>\n                <Fallback name=\"BottleFound\">\n                    <Condition ID=\"BottleFound\"/>\n                    <Action ID=\"FindBottle\"/>\n                </Fallback>\n                <Fallback name=\"Fetch\">\n                    <Condition ID=\"BottleGrasped\"/>\n                    <Sequence name=\"Grasp\">\n                        <Fallback name=\"InvPoseCompute\">\n                            <Sequence name=\"SeqInvPose\">\n                                <Condition ID=\"InvPoseComputed\"/>\n                                <Condition ID=\"InvPoseValid\"/>\n                            </Sequence>\n                            <Action ID=\"ComputeInvPose\"/>\n                        </Fallback>\n                        <Fallback name=\"GoInvPose\">\n                            <Condition ID=\"RobotAtInvPose\"/>\n                            <Sequence name=\"prepare\">\n                                <Action ID=\"KeepArmsForGrasp\"/>\n                                <Action ID=\"GoToInvPose\"/>\n                            </Sequence>\n                        </Fallback>\n                        <Fallback name=\"Locate\">\n                            <Condition ID=\"BottleLocated\"/>\n                            <Action ID=\"LocateBottle\"/>\n                        </Fallback>\n                        <Action ID=\"GraspBottle\"/>\n                    </Sequence>\n                    <Action ID=\"SetInvPoseInvaild\"/>\n                </Fallback>\n            </Sequence>\n            <Action ID=\"AskForHelp\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AskForHelp\"/>\n        <Condition ID=\"BottleFound\"/>\n        <Condition ID=\"BottleGrasped\"/>\n        <Condition ID=\"BottleLocated\"/>\n        <Action ID=\"ComputeInvPose\"/>\n        <Action ID=\"FindBottle\"/>\n        <Action ID=\"FollowHuman\"/>\n        <Action ID=\"GoToInvPose\"/>\n        <Action ID=\"GoToRoom\"/>\n        <Action ID=\"GraspBottle\"/>\n        <Condition ID=\"InvPoseComputed\"/>\n        <Condition ID=\"InvPoseValid\"/>\n        <Action ID=\"KeepArmsForGrasp\"/>\n        <Action ID=\"KeepRunning\"/>\n        <Action ID=\"LocateBottle\"/>\n        <Condition ID=\"RobotAtInvPose\"/>\n        <Condition ID=\"RobotInRoom\"/>\n        <Condition ID=\"RoomKnown\"/>\n        <Action ID=\"SetInvPoseInvaild\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot's navigation and path planning. It periodically replans the global path at 1 Hz and includes recovery actions in case of failures. The main sequence initializes the blackboard, adjusts parameters related to costmaps and footprints, and then enters the main loop for navigation with replanning.\n\nWithin the main loop, it checks people's status frequently, avoids obstacles based on their walking speed and direction, and computes paths accordingly. If someone needs to be avoided, it informs the costmap about who should be removed or not. It also handles scenarios where the robot needs to avoid people while navigating.\n\nIn case of any failure during path following, it triggers recovery actions such as clearing the costmap around the robot and reattempting path computation. The tree ensures that the robot can navigate safely, avoid obstacles, and recover from potential failures during its navigation tasks.",
        "output": "<!--\n Copyright (c) 2020  Carnegie Mellon University\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n-->\n\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RestoreConfig name=\"Restore_footprint_publisher\" node_name=\"/footprint_publisher\">\n    <RestoreConfig name=\"Restore_global_costmap\" node_name=\"/global_costmap/global_costmap\">\n      <Sequence>\n\t<!-- initialize blackboard -->\n\t<SetBlackboard output_key=\"current_side\" value=\"center\"/>\n\t<SetBlackboard output_key=\"config_changed\" value=\"false\"/>\n\n\t<!-- use center for normal, 0.5 makes transition sudden, but small number cause issue\n             passing close to obstacles -->\n\t<ChangeParam node_name=\"/global_costmap/global_costmap\"\n\t\t     param_name=\"navcog_path_layer.walk_weight\"\n\t\t     param_value=\"[0.1, 0.0, 0.1]\"  name=\"ChangeParamToCenter\"/>\n\n\t<ChangeParam node_name=\"/global_costmap/global_costmap\"\n\t\t     param_name=\"navcog_path_layer.path_adjusted_center\"\n\t\t     param_value=\"-0.5\"  name=\"ChangeParamPathAdjustedCenter1\"/>\n\t\n\t<ChangeParam node_name=\"/planner_server\"\n\t\t     param_name=\"NavCog.path_adjusted_center\"\n\t\t     param_value=\"-0.5\"  name=\"ChangeParamPathAdjustedCenter2\"/>\n\t\n\t<!-- default footprint is smallest, so change the footprint to normal -->\n\t<ChangeParam node_name=\"/footprint_publisher\"\n\t\t     param_name=\"footprint_mode\"\n\t\t     param_value=\"0\"  name=\"ChangeParamToNormal\"/>\n\n\t<!-- compute a path -->\n\t<RecoveryNode number_of_retries=\"999999999\" name=\"InitialComputePathRepeat\">\n\t  <Sequence name=\"ComputePathSequence\">\n\t    <!-- clear costmap -->\n\t    <ClearEntireCostmap name=\"ClearGlobalCostmap-context\" server_timeout=\"5000\"\n\t\t\t\tservice_name=\"/global_costmap/clear_entirely_global_costmap\"/>\n\t    \n\t    <WaitFloat wait_duration_float=\"0.5\"/>\n\t    <CurrentPose global_frame=\"map\" robot_base_frame=\"base_footprint\" pose=\"{current_pose}\" />\n\t    <ComputePathToPose start=\"{current_pose}\" goal=\"{goal}\" path=\"{navcog_path}\" planner_id=\"NavCog\"/>\n\t    <PathToPoses path=\"{navcog_path}\" goals=\"{navcog_goals}\" />\n\t    <PublishTopicPath topic=\"path_out\" value=\"{navcog_path}\"/> <!-- for debug -->\n\t    <!-- wait long enough to include neighbor obstacles -->\n\t    <WaitFloat wait_duration_float=\"0.5\"/>\n\t    <ComputePathThroughPoses goals=\"{navcog_goals}\" path=\"{path}\" planner_id=\"GridBased\"/>\n\t    <!-- do not remove this plan topic, this is used by ROS1 node -->\n\t    <PublishTopicPath topic=\"plan\" value=\"{path}\"/>\n\t    <!-- front vibration -->\n\t    <PublishTopic topic=\"/cabot/event\" value=\"navigation;event;navigation_start\" />\n\t  </Sequence>\n\t  <ForceSuccess>\n\t    <WaitFloat wait_duration_float=\"0.5\"/>\n\t  </ForceSuccess>\n\t</RecoveryNode>\n\n\t<!-- main loop -->\n\t<RecoveryNode number_of_retries=\"999999999\" name=\"NavigateRecovery\">\n\t  <!-- navigation -->\n\t  <PipelineSequence name=\"NavigateWithReplanning\">\n\n\t    <!-- Check people status frequently -->\n\t    <RateController hz=\"2\" name=\"AvoidPeople\">\n              <Fallback name=\"AvoidPersonFallback\">\n\t\t<Sequence>\n\t\t  <!-- check if there is someone detecgted -->\n\t\t  <PeopleExist people_topic=\"people\" people_out=\"{people}\" />\n\t\t  <PeopleStops people=\"{people}\" threshold=\"0.2\" duration=\"2.0\"/>\n\t\t  <!-- find people needs to be avoided based on there walking speed and walking direction -->\n\t\t  <NeedToAvoid people=\"{people}\" robot_frame=\"base_footprint\" path=\"{path}\" avoid=\"{avoid}\" avoid_count=\"{avoid_count}\"/>\n\n\t\t  <!-- replaced with NeedToAvoid\n\t\t       <SomeoneOnPath path=\"{path}\" people=\"{people}\" person_out=\"{person}\" range=\"0.5\"/>\n\t\t      <FarEnough odom_topic=\"odom\" max_acc=\"0.3\" delay=\"0.2\" min_threshold=\"0\" max_threshold=\"7.0\"\n\t\t      global_frame=\"map_global\" robot_frame=\"base_footprint\" person=\"{person}\"/>\n\t\t  -->\n\n\t\t  <!-- let the costmap know who should be removed, who should not be removed -->\n\t\t  <IgnorePeople people=\"{avoid}\" ignore_topic=\"ignore\" wait_duration=\"0.5\"/>\n\n\t\t  <CurrentPose global_frame=\"map\" robot_base_frame=\"base_footprint\" pose=\"{current_pose}\" />\n\t\t  <ComputePathToPose start=\"{current_pose}\" goal=\"{goal}\" path=\"{navcog_path}\" planner_id=\"NavCog\"/>\n\t\t  <PathToPoses path=\"{navcog_path}\" goals=\"{navcog_goals}\" />\n\t\t  <PublishTopicPath topic=\"path_out\" value=\"{navcog_path}\"/> <!-- debug -->\n\t\t  <ComputePathThroughPoses goals=\"{navcog_goals}\" path=\"{path}\" planner_id=\"GridBased\"/>\n\t\t  <!-- do not remove this plan topic, this is used by ROS1 node -->\n\t\t  <PublishTopicPath topic=\"plan\" value=\"{path}\"/>\n\n\t\t  <IfThenElse>\n\t\t    <BlackboardCheckInt value_A=\"{avoid_count}\" value_B=\"1\" return_on_mismatch=\"FAILURE\">\n\t\t      <AlwaysSuccess/>\n\t\t    </BlackboardCheckInt>\n\t\t    <PublishTopic topic=\"/cabot/event\" value=\"navigation;event;bt_navigator_avoid_person\" />\n\t\t    <PublishTopic topic=\"/cabot/event\" value=\"navigation;event;bt_navigator_avoid_people\" />\n\t\t  </IfThenElse>\n\t\t  \n\t\t  <Wait wait_duration=\"5.0\"/>\n\t\t  <!-- replaced with CanPassPerson, which publish path for navigation\n\t\t      <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n\t\t  -->\n\t\t</Sequence>\n\t\t<AlwaysSuccess/>\n\t      </Fallback>\n\t    </RateController>>\n\n\t    <!-- follow path -->\n\t    <ReactiveFallback>\n\t      <!-- if the goal is updated, abort following first, this will be recorvered by RecoveryComputePathRepeat -->\n\t      <GoalUpdated/>\n\t      <FollowPath path=\"{path}\" controller_id=\"FollowPath\" goal_checker_id=\"cabot_goal_checker\"/>\n\t    </ReactiveFallback>\n\t  </PipelineSequence>\n\n\t  <!-- if follow path is aborted, compute path and try again -->\n\t  <RecoveryNode number_of_retries=\"999999999\" name=\"RecoveryComputePathRepeat\">\n\t    <Sequence name=\"ComputePathSequence\">\n\t      <!-- clear costmap -->\n\t      <ClearCostmapAroundRobot name=\"ClearGlobalCostmapAroundRobot2\" server_timeout=\"5000\"\n\t\t\t\t       service_name=\"global_costmap/clear_around_global_costmap\"\n\t\t\t\t       reset_distance=\"20\" />\n\t      <ClearCostmapAroundRobot name=\"ClearLocalCostmapAroundRobot\" server_timeout=\"5000\"\n\t\t\t\t       service_name=\"local_costmap/clear_around_local_costmap\"\n\t\t\t\t       reset_distance=\"20\" />\n\t      \n\t      <!-- wait long enough to include neighbor obstacles -->\n\t      <Wait wait_duration=\"1.0\"/>\n\t      <!-- do not reroute \n\t      <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n\t      <CheckPath  path=\"{path_temp}\" path_topic=\"/path\" plan_topic=\"/plan\" path_out=\"{path}\" />\n\t      -->\n\t    </Sequence>\n\t    <AlwaysSuccess/>\n\t  </RecoveryNode>\n\t</RecoveryNode>\n      </Sequence>\n    </RestoreConfig>\n    </RestoreConfig>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a task for a robot. It involves setting three goals (Goal_a, Goal_b, Goal_c) and waiting for 2 seconds between movements. The robot is programmed to move towards each goal sequentially, repeating the sequence indefinitely until interrupted by the \"gohome\" event. If interrupted, it will immediately proceed to the Goal_c location.\n\nAdditionally, the MoveRobot behavior tree specifies that the robot should move to the given target using the MoveBase action.\n\nIn summary, the robot's main task is to navigate to Goal_a, then Goal_b while incorporating waiting periods, and finally to Goal_c if not interrupted by the \"gohome\" event.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SetBlackboard output_key=\"Goal_a\" value=\"1.17;-1.65;30\" />\n            <SetBlackboard output_key=\"Goal_b\" value=\"1.1;1.51;90\" />\n            <SetBlackboard output_key=\"Goal_c\" value=\"-1.25;0.324;0\" />\n            <SetBlackboard output_key=\"Waiting_time\" value=\"2\"/>\n            <Fallback>\n                <ReactiveSequence>\n                    <InterruptEvent event=\"gohome\"/>\n                    <Repeat num_cycles=\"-1\">\n                        <Sequence>\n                            <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                            <WaitingEvent name=\"waiting_event\" waiting_time=\"{Waiting_time}\"/>\n                            <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                            <WaitingEvent name=\"waiting_event\" waiting_time=\"{Waiting_time}\"/>\n                        </Sequence>\n                    </Repeat>\n                </ReactiveSequence>\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                </Sequence>\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <MoveBase goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an environment with periodic global path replanning at 1 Hz and includes recovery actions. The robot will attempt to navigate to a specified goal, using the \"GridBased\" planner for computing the path. If the navigation encounters issues, it will clear the global costmap context and retry once. Then, it will follow the computed path using the \"FollowPath\" controller and clear the local costmap context if needed.\n\nIn case of further failures or updates in the goal, the recovery fallback mechanism is triggered. This includes clearing both the local and global costmaps, performing a spin movement, and waiting for a duration before attempting navigation again. The recovery node allows for a maximum of 6 retries, providing robustness in navigating complex environments.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through an environment with periodic global path replanning and recovery actions. The main components of the behavior tree include setting various parameters for the robot's navigation system, handling path computation and following, and implementing recovery actions in case of failures.\n\nThe sequence starts by configuring specific parameters related to the robot's footprint, speed, goal tolerance, costmap weights, and inflation radius. It then enters the main loop, where it periodically computes a new path to the goal while checking for obstacles or people to avoid. If necessary, it updates the global costmap and recalculates the path. Once the path is determined, the robot follows it using a specified controller.\n\nIn case of any issues during navigation, the recovery actions are triggered, including clearing the global and local costmaps and waiting before resuming navigation.\n\nOverall, the behavior tree ensures that the robot can navigate effectively, adapt to dynamic environments, and recover from potential navigation challenges.",
        "output": "<!--\n Copyright (c) 2020  Carnegie Mellon University\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n-->\n\n<!--\n    This Behavior Tree replans the global path periodically at 1 Hz and it also has\n    recovery actions.\n-->\n\n<root main_tree_to_execute=\"QueueTree\">\n  <BehaviorTree ID=\"QueueTree\">\n    <RestoreConfig node_name=\"/footprint_publisher\">\n      <RestoreConfig node_name=\"/controller_server\">\n\t<RestoreConfig node_name=\"/global_costmap/global_costmap\">\n\t  <Sequence>\n\t    <!-- set the footprint as small -->\n\t    <ChangeParam node_name=\"/footprint_publisher\"\n\t\t\t param_name=\"footprint_mode\"\n\t\t\t param_value=\"3\"  name=\"ChangeParamFootprintToSmall\"/>\n\t    \n\t    <ChangeParam node_name=\"/controller_server\"\n\t\t\t param_name=\"FollowPath.max_vel_x\"\n\t\t\t param_value=\"0.5\"  name=\"ChangeParamSpeedDown\"/>\n\t    \n\t    <ChangeParam node_name=\"/controller_server\"\n\t\t\t param_name=\"cabot_goal_checker.xy_goal_tolerance\"\n\t\t\t param_value=\"0.20\"  name=\"ChangeParamFollowPathXyGoalTolerance\"/>\n\t    <ChangeParam node_name=\"/controller_server\"\n\t\t\t param_name=\"cabot_goal_checker.yaw_goal_tolerance\"\n\t\t\t param_value=\"0.20\"  name=\"ChangeParamFollowPathYawGoalTolerance\"/>\n\t    \n\t    <ChangeParam node_name=\"/global_costmap/global_costmap\"\n\t\t\t param_name=\"navcog_path_layer.walk_weight\"\n\t\t\t param_value=\"[0.3, 0.0, 0.3] \"  name=\"ChangeParamWalkWeightToCenter\"/>\n\t    <!-- 1: use adjust mode to use actual center of the corridor based on costmap\n\t\t 0: use navcog path as the ceter of the corridor -->\n\t    <ChangeParam node_name=\"/global_costmap/global_costmap\"\n\t\t\t param_name=\"navcog_path_layer.path_mode\"\n\t\t\t param_value=\"0\"  name=\"ChangeParamToAdjust\"/>\n\t    <ChangeParam node_name=\"/global_costmap/global_costmap\"\n\t\t\t param_name=\"navcog_path_layer.path_adjusted_center\"\n\t\t\t param_value=\"0.0\"  name=\"ChangeParamPathAdjustedCenter\"/>\n\t    \n\t    <ChangeParam node_name=\"/global_costmap/global_costmap\"\n\t\t\t param_name=\"inflation_layer.inflation_radius\"\n\t\t\t param_value=\"0.2\"  name=\"ChangeParamInflationRadius\"/>\n\t    \n\t    <!-- compute a path -->\n\t    <RecoveryNode number_of_retries=\"999999999\" name=\"InitialComputePathRepeat\">\n\t      <Sequence name=\"ComputePathSequence\">\n\t\t<!-- clear costmap -->\n\t\t<!--\n\t\t<ClearCostmapAroundRobot name=\"ClearCostmapAroundRobot\" server_timeout=\"5000\"\n\t\t\t\t\t service_name=\"global_costmap/clear_around_global_costmap\"\n\t\t\t\t\t window_size_x=\"20\" window_size_y=\"20\"/>\n\t\t-->\n\t\t<ClearEntireCostmap name=\"ClearGlobalCostmap-context\" server_timeout=\"5000\"\n\t\t\t\t    service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n\t\t\n\t\t<!-- wait long enough to include neighbor obstacles -->\n\t\t<WaitFloat wait_duration_float=\"0.5\"/>\n\t\t<ComputePathToPose goal=\"{goal}\" path=\"{path_temp}\" planner_id=\"GridBased\"/>\n\t\t<CheckPath  path=\"{path_temp}\" path_topic=\"/path\" plan_topic=\"/plan\" path_out=\"{path}\" />\n\t\t<!-- front vibration -->\n\t\t<!--\n\t\t<PublishTopicInt8 topic=\"/cabot/notification\" value=\"5\" />\n\t\t-->\n\t      </Sequence>\n\t      <ForceSuccess>\n\t\t<WaitFloat wait_duration_float=\"0.5\"/>\n\t      </ForceSuccess>\n\t    </RecoveryNode>\n\t    \n\t    <!-- main loop -->\n\t    <RecoveryNode number_of_retries=\"999999999\" name=\"NavigateRecovery\">\n\t      <!-- navigation -->\n\t      <PipelineSequence name=\"NavigateWithReplanning\">\n\t\t<!-- Check people status frequently -->\n\t\t<!-- find people needs to be avoided not in queue -->\n\t\t<!--\n\t\t<RateController hz=\"2\" name=\"AvoidPeople\">\n\t\t  <Fallback name=\"AvoidPersonFallback\">\n\t\t    <Sequence name=\"AvoidPerson\">\n\t\t      <PeopleExist people_topic=\"people\" people_out=\"{people}\"/>\n\t\t      <NeedToAvoid people=\"{people}\" robot_frame=\"base_footprint\" path=\"{path}\" avoid=\"{people_avoid}\"/>\n\t\t      <SomeoneNotInQueue queue_topic=\"queue_people_py/queue\" people=\"{people_avoid}\" people_out_not_queue=\"{people_avoid_not_queue}\"/>\n\t\t      <IgnorePeople people=\"{people_avoid_not_queue}\" ignore_topic=\"ignore\" wait_duration=\"0.5\"/>\n\t\t      <ComputePathToPose goal=\"{goal}\" path=\"{path_temp}\" planner_id=\"GridBased\"/>\n\t\t      <CheckPath current=\"{path}\" path=\"{path_temp}\" path_topic=\"/path\" plan_topic=\"/plan\" path_out=\"{path}\" />\n\t\t      <Wait wait_duration=\"5\"/>\n\t\t    </Sequence>\n\t\t    <AlwaysSuccess/>\n\t\t  </Fallback>\n\t\t</RateController>\n\t\t-->\n\t\t<RateController hz=\"2.0\" name=\"UpdatePath\">\n\t\t  <RecoveryNode number_of_retries=\"1\" name=\"UpdatePathRecovery\">\n\t\t    <Sequence>\n\t\t      <ClearEntireCostmap name=\"UpdatePathClearGlobalCostmap-context\" server_timeout=\"5000\"\n\t\t\t\t\t  service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n\t\t      <WaitFloat wait_duration_float=\"0.5\"/>\n\t\t      <ComputePathToPose goal=\"{goal}\" path=\"{path_temp}\" planner_id=\"GridBased\"/>\n\t\t      <CheckPath  path=\"{path_temp}\" path_topic=\"/path\" plan_topic=\"/plan\" path_out=\"{path}\" />\n\t\t    </Sequence>\n\t\t    <ForceSuccess>\n\t\t      <WaitFloat wait_duration_float=\"0.5\"/>\n\t\t    </ForceSuccess>\n\t\t  </RecoveryNode>\n\t\t</RateController>\n\t\t\n\t\t<!-- follow path -->\n\t\t<RecoveryNode number_of_retries=\"1\" name=\"FollowPathRecovery\">\n\t\t  <FollowPath path=\"{path}\" controller_id=\"FollowPath\" />\n\t\t  <AlwaysSuccess/>\n\t\t</RecoveryNode>\n\t      </PipelineSequence>\n\t      \n\t      <!-- recovery -->\n\t      <SequenceStar name=\"RecoveryActions\">\n\t\t<ClearEntireCostmap name=\"Recovery-ClearGlobalCostmap-context\" server_timeout=\"5000\"\n                                    service_name=\"/global_costmap/clear_entirely_global_costmap\"/>\n\t\t<ClearEntireCostmap name=\"Recovery-ClearLocalCostmap-Context\" server_timeout=\"5000\"\n\t\t\t\t    service_name=\"/local_costmap/clear_entirely_local_costmap\"/>\n\t\t<Wait wait_duration=\"1.0\"/>\n\t      </SequenceStar>\n\t    </RecoveryNode>\n\t  </Sequence>\n\t</RestoreConfig>\n      </RestoreConfig>\n    </RestoreConfig>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's task of interacting with humans to play a game. The robot goes through a sequence of actions, including detecting poses, speaking and listening, finding objects, and moving towards specific locations. It repeats this sequence 10 times.\n\nIf the \"needs_init\" condition is met, the robot guides the human through setting up the game by giving instructions, waiting for the human to perform specific poses, and ensuring the correct positioning of objects. Once the setup is complete, the robot initiates the game by guiding the human to different locations, providing feedback on their performance, and concluding the game.\n\nThroughout the process, the robot uses various sensors and actuators to interact with the environment and communicate with the human. The behavior tree demonstrates a complex interaction involving speech recognition, object detection, human pose recognition, and navigation.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Repeat num_cycles=\"10\">\n\t\t\t<Sequence>\n\t\t\t\t<Delay delay_msec=\"1000\">\n\t\t\t\t\t<PoseDetectionControlAction enable=\"true\" />\n\t\t\t\t</Delay>\n\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\n\t\t\t\t<!-- Spin a bit to get localized in the case the initial pose was just set -->\n\t\t\t\t<RobotSpin angle=\"-180\" velocity=\"0.4\" />\n\t\t\t\t<RobotSpin angle=\"180\" velocity=\"0.4\" />\n\n\t\t\t\t<RobotFindInitAction game_file=\"robot_find.json\" object_type=\"shapes\" random_order=\"0\" needs_init=\"{needs_init}\" robot_pose=\"{robot_pose}\" />\n\n\t\t\t\t<!--\n\t\t\t\t<ForceSuccess>\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{needs_init}\" value_B=\"0\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Do you want to setup the game?\" />\n\t\t\t\t\t\t\t\t<SpeechToTextActionClient text=\"{said}\" />\n\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*(yes|yeah|okay|ok|sure|yep).*\" />\n\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"needs_init\" value=\"1\" />\n\t\t\t\t\t\t\t</Sequence>\n  \t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t</Sequence>\n\t\t\t\t</ForceSuccess>\n        -->\n\n\t\t\t\t<Fallback>\n\t\t\t\t\t<BlackboardCheckInt value_A=\"{needs_init}\" value_B=\"1\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"1\" />\n\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Game setup. I will ask you to stand at each of the locations.  Put both hands on your hips when you arrive at each location to continue.\" />\n\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Please send in the middle of the game. After the robot aligns to you, put both hands on your hips.\" />\n\t\t\t\t\t\t\t\t\t<RetryUntilSuccesful num_attempts=\"20\">\n\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2000\">\n\t\t\t\t\t\t\t\t\t\t\t<HumanPoseDetect expected_pose_left=\"OnHip\" expected_pose_right=\"OnHip\" pose_lr_check=\"both\" detected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\" pose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t</RetryUntilSuccesful>\n\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</ForceSuccess>\n\n\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t<RobotFindNextStepAction item_name=\"{item_name}\" />\n\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Please stand on \" msg2=\"{item_name}\" />\n\t\t\t\t\t\t\t\t\t\t<RetryUntilSuccesful num_attempts=\"20\">\n\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2000\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<HumanPoseDetect expected_pose_left=\"OnHip\" expected_pose_right=\"OnHip\" pose_lr_check=\"both\" detected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\" pose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ObjectLocationStatusAction x=\"{x}\" y=\"{y}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<RobotFindSetPositionAction x=\"{x}\" y=\"{y}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t</RetryUntilSuccesful>\n\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t</KeepRunningUntilFailure>\n\t\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Finished setting up\" />\n\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t</BlackboardCheckInt>\n\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<Nav2Client goal=\"{robot_pose}\" />\n\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Let's play the game!\" />\n\n\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<RobotFindNextStepAction item_name=\"{item_name}\" />\n\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Please stand on \" msg2=\"{item_name}\" />\n\t\t\t\t\t\t\t\t\t<RetryUntilSuccesful num_attempts=\"200\">\n\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"1000\">\n\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t<ObjectLocationStatusAction x=\"{x}\" y=\"{y}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<RobotFindCheckStepAction x=\"{x}\" y=\"{y}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Good job\" />\n\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t</RetryUntilSuccesful>\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</KeepRunningUntilFailure>\n\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Finished playing the game\" />\n\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t</Sequence>\n\t\t\t\t</Fallback>\n\t\t\t</Sequence>\n\t\t</Repeat>\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single node, \"Drop\", within a sequence named \"root_sequence\". The purpose of this behavior tree is to execute the \"Drop\" action. However, without further context or details about the \"Drop\" action, it's challenging to provide a more specific summary.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <Drop   name=\"drop\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single sequence where the robot is instructed to approach an object. This means that the robot will perform a series of actions in a sequential order to approach the specified object. The details of the \"ApproachObject\" task are not provided in the given XML, but it can be inferred that the robot will execute a set of behaviors or actions to achieve the goal of approaching the object. This could involve tasks such as navigating towards the object, adjusting its position, or performing any necessary interactions with the object.\n\nOverall, the behavior tree directs the robot to carry out a specific action, which is to approach an object, and the details of how this action is accomplished would be defined within the \"ApproachObject\" behavior.",
        "output": " <root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <ApproachObject name=\"approach_object\"/>\n        </Sequence>\n     </BehaviorTree>\n </root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's task of patrolling and recharging. The robot is programmed to repeat the sequence 100 times, where it alternates between patrolling waypoints (wp_1 to wp_7) and recharging at a designated station. During patrolling, the robot navigates to each waypoint in sequence. If the battery runs low, it interrupts the patrolling sequence, navigates to the recharge station, and initiates the recharge process before resuming the patrolling sequence. This cycle continues until the specified number of repetitions is completed. Overall, the behavior tree orchestrates the robot's autonomous operation of patrolling an area while ensuring periodic recharging to maintain its functionality.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <Repeat num_cycles=\"100\">\n                <Fallback>\n                    <Sequence name=\"patrolling\">\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_1\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_2\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_3\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_4\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_5\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_6\"/>\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"wp_7\"/>\n                    </Sequence>\n                    <Sequence name=\"recharging\">\n                        <NavigateToWp   name=\"navigate_to_wp\" goal=\"recharge_station\"/>\n                        <Recharge/>\n                    </Sequence>\n                </Fallback>\n            </Repeat>\n        </Sequence>\n     </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents the actions of a robot or virtual agent. It begins by speaking a phrase in Portuguese, then waits for 2 seconds. If it fails to reach a specific point after three attempts, it proceeds to charge itself. The charging process involves setting a \"charged\" flag to 0, initiating the charging action, and then setting the \"charged\" flag to 1 upon completion. Following this, it waits for 45 seconds. If the \"charged\" flag is still 1, it emits a sound and waits for 2 seconds, repeating this process up to 100 times if necessary.\n\nIn summary, the behavior tree simulates a scenario where a robot communicates, navigates, charges itself, and responds to its charging status. This sequence of actions demonstrates a basic decision-making process and adaptive behavior based on environmental conditions.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <SequenceStar>\n            <Action ID=\"Speak\" action_name=\"/gcloud_tts\" language=\"pt_PT\" utterance=\"Tenho fome\" voice=\"pt-PT-Wavenet-D\"/>\n            <Action ID=\"WaitForXSeconds\" name=\"Wait2Seconds\" result=\"SUCCESS\" seconds=\"2\"/>\n            <Fallback>\n                <SequenceStar>\n                    <RetryUntilSuccesful num_attempts=\"3\">\n                        <Action ID=\"MoveBase\" action_name=\"move_base\" frame_id=\"map\" goal_pose=\"-1.7971;-5.5118;0.0;0;0;-0.72703;0.68659\" name=\"Go to first point\"/>\n                    </RetryUntilSuccesful>\n                    <Parallel failure_threshold=\"1\" success_threshold=\"2\">\n                        <SequenceStar>\n                            <SetBlackboard output_key=\"charged\" value=\"0\"/>\n                            <Action ID=\"Charge\" action=\"CHARGE\" action_name=\"charging_action\"/>\n                            <SetBlackboard output_key=\"charged\" value=\"1\"/>\n                        </SequenceStar>\n                        <SequenceStar>\n                            <Action ID=\"WaitForXSeconds\" result=\"SUCCESS\" seconds=\"45\"/>\n                            <ReactiveFallback>\n                                <Condition A=\"{charged}\" B=\"1\" Condition=\"==\" ID=\"CompareInt\"/>\n                                <RetryUntilSuccesful num_attempts=\"100\">\n                                    <ForceFailure>\n                                        <Sequence>\n                                            <Action ID=\"Speak\" action_name=\"/gcloud_tts\" language=\"pt_PT\" utterance=\"bip bip\" voice=\"pt-PT-Wavenet-D\"/>\n                                            <Action ID=\"WaitForXSeconds\" result=\"SUCCESS\" seconds=\"2\"/>\n                                        </Sequence>\n                                    </ForceFailure>\n                                </RetryUntilSuccesful>\n                            </ReactiveFallback>\n                        </SequenceStar>\n                    </Parallel>\n                </SequenceStar>\n            </Fallback>\n        </SequenceStar>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\" type=\"std::string\"/>\n            <input_port name=\"action_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\" type=\"int\"/>\n            <input_port name=\"B\" type=\"int\"/>\n            <input_port name=\"Condition\" type=\"std::string\"/>\n        </Condition>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\" type=\"std::string\"/>\n            <input_port name=\"frame_id\" type=\"std::string\"/>\n            <input_port name=\"goal_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"action_name\" type=\"std::string\"/>\n            <input_port name=\"language\" type=\"std::string\"/>\n            <input_port name=\"utterance\" type=\"std::string\"/>\n            <input_port name=\"voice\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port name=\"result\" type=\"std::string\"/>\n            <input_port name=\"seconds\" type=\"std::string\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's actions to interact with faces. It starts by obtaining a list of faces, selects the first face from the list, and then directs the robot to gaze at the selected face. The tree utilizes various predefined actions such as getting pose arrays, selecting poses, and gazing at targets.\n\nAdditionally, it includes a set of defined actions and conditions that can be used within the behavior tree, including tasks like detecting blocks, speaking, moving the base, and waiting for a specified duration. These actions are designed to enable the robot to perform diverse tasks related to interacting with its environment and communicating with humans.\n\nOverall, the behavior tree represents a sequence of actions for the robot to identify and interact with faces, showcasing a structured approach to social interaction and task execution in a robotic context.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action topic=\"faces\" ID=\"GetPoseArray\" name=\"GetFaceList\" pose_array=\"face_array\"/>\n            <Action pose_stamped=\"face\" position_in_list=\"0\" ID=\"SelectPose\" pose_array=\"{face_array}\"/>\n            <Action frame_id=\"base_footprint\" fixation_pose=\"{face}\" action_name=\"gaze\" ID=\"GazeAtTarget\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Condition ID=\"BiggerThan\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n        </Condition>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\"/>\n            <input_port name=\"action_name\"/>\n        </Action>\n        <SubTree ID=\"ChargeST\"/>\n        <Action ID=\"CheckBattery\">\n            <output_port name=\"battery_state\" type=\"int\"/>\n            <output_port name=\"percentage\" type=\"double\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port name=\"charging_state\" type=\"int\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <SubTree ID=\"Congratulate\"/>\n        <Action ID=\"DetectBlocks\">\n            <output_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void> >\"/>\n            <input_port name=\"block_topic\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <SubTree ID=\"ErrorGameState\"/>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <SubTree ID=\"GazeAtFace\"/>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"GetInt16\">\n            <output_port name=\"number\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GetPoseArray\">\n            <output_port name=\"pose_array\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <SubTree ID=\"HelpPrepare\"/>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"goal_pose\"/>\n        </Action>\n        <SubTree ID=\"ResetVariables\"/>\n        <SubTree ID=\"SayHello\"/>\n        <Action ID=\"SelectBlock\">\n            <input_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void> >\"/>\n            <output_port name=\"block_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void> >\"/>\n            <input_port name=\"position_in_list\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"SelectPose\">\n            <input_port name=\"pose_array\"/>\n            <output_port name=\"pose_stamped\"/>\n            <input_port name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"action_name\" type=\"std::string\"/>\n            <input_port name=\"language\" type=\"std::string\"/>\n            <input_port name=\"utterance\" type=\"std::string\"/>\n            <input_port name=\"voice\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port name=\"result\" default=\"SUCCESS\">Result after specified time: SUCCESS or FAILURE</input_port>\n            <input_port name=\"seconds\" default=\"5\">Time in seconds</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robotic system to execute a sequence of actions based on certain conditions and inputs. The tree contains a main loop that repeats a sequence of actions a specified number of times. Within the sequence, it first checks for specific conditions using fallbacks and reactive sequences, and then performs various actions based on the results.\n\nThe actions include moving, staying in place, picking up an item, dropping an item, updating the state, requesting replanning at different levels, and handling locomotion status. These actions are governed by input ports and conditional checks, ensuring that the robot responds appropriately to its environment and internal states.\n\nOverall, the behavior tree orchestrates the robot's decision-making process, enabling it to navigate, manipulate objects, update its state, and request replanning as necessary while adhering to a predefined sequence and reacting to dynamic conditions.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Condition ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <Condition ID=\"ReactiveLTLStateCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Switch4 case_1=\"move\" case_2=\"stay\" case_3=\"pick\" case_4=\"drop\" variable=\"{bt_action_type}\">\n                            <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                            <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"PickAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"DropAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <AlwaysFailure/>\n                        </Switch4>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"DropAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"GuideAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Condition>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Condition ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Condition>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"PickAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"ReactiveLTLStateCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Condition>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel1\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robotic system's actions and decision-making process. It consists of multiple nodes that handle various tasks such as checking the current state against desired sequences, requesting replanning at different levels, detecting fake inputs, performing different types of actions (move, stay, pick, drop), updating the action sequence, and managing locomotion status.\n\nThe tree structure includes repeating a sequence for a specified number of cycles, where within each cycle, it performs a series of actions based on reactive sequences, conditions, and fallbacks. The robot's behavior is influenced by the input parameters such as the current state, desired sequences, action type, and execution status.\n\nOverall, the behavior tree orchestrates the robot's decision-making process, handling both normal actions and recovery processes in case of failures or unexpected inputs. It aims to ensure that the robot follows the desired sequences while adapting to changing conditions and executing appropriate actions based on its environment.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Condition ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <Action ID=\"FakeDetectionLevel1\" replanning_fake_input=\"{replanning_fake_input}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel1\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Condition ID=\"ReactiveLTLStateCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Action ID=\"FakeDetectionLevel3\" replanning_fake_input=\"{replanning_fake_input}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Switch4 case_1=\"move\" case_2=\"stay\" case_3=\"pick\" case_4=\"drop\" variable=\"{bt_action_type}\">\n                            <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                            <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"PickAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"DropAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <AlwaysFailure/>\n                        </Switch4>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"BackNormalAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"DropAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel1\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel2\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel3\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"GuideAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Condition>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Condition ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Condition>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"PickAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"ReactiveLTLStateCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Condition>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel1\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate a global path with periodic replanning at 1 Hz and includes recovery actions. The robot will attempt the navigation sequence, and if it encounters failures, it will retry a specified number of times before moving on to the next step. \n\nThe \"NavigateWithReplanning\" sequence involves computing a path to a specific goal using a grid-based planner, following the computed path, and handling recovery actions in case of failures during navigation. If the robot encounters issues during path planning or following, it will execute recovery actions such as clearing the costmaps and waiting for a specific duration.\n\nOverall, the behavior tree ensures that the robot can continuously navigate towards its goal while handling potential failures and dynamically replanning its path to ensure successful navigation.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"2\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"4\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ReactiveFallback name=\"PathToPoseFallback\">\n              <GoalUpdated/>\n              <RoundRobin name=\"GlobalPlannerRecoveryActions\">\n                <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n                <Wait wait_duration=\"2\"/>\n              </RoundRobin>\n            </ReactiveFallback>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"4\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ReactiveFallback name=\"FollowPathFallback\">\n            <GoalUpdated/>\n            <RoundRobin name=\"PlannerRecoveryActions\">\n              <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n              <Spin spin_dist=\"1.57\"/>\n            </RoundRobin>\n          </ReactiveFallback>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <Wait wait_duration=\"5\"/>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate while continuously replanning its global path after every 1 meter of movement. It uses a pipeline sequence that consists of a distance controller and a follow path action. The distance controller triggers the computation of a new path to the goal pose using a \"GridBased\" planner whenever the robot has moved 1 meter, and then the robot follows this newly computed path using the follow path action. This setup ensures that the robot dynamically adjusts its path as it progresses towards its goal, allowing for efficient and adaptive navigation in changing environments.",
        "output": "<!--\n  This Behavior Tree replans the global path after every 1m.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <DistanceController distance=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </DistanceController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic system that performs various tasks based on different scenarios. The robot is capable of executing actions such as picking, delivering, charging, and navigating to specific coordinates.\n\nThe main behavior tree consists of two parallel branches. The first branch continuously repeats an action (VariantAction) based on a specified variant. The second branch selects a sub-behavior tree based on the value of the variant and executes the corresponding sequence of actions for pick, deliver, or charge operations.\n\nEach specific task, such as charging, delivering, or navigation, is represented by its own behavior tree with sequences of actions. For example, the \"Charge\" behavior tree includes a sequence to move the robot to a specific location for charging.\n\nAdditionally, there are reusable sub-behavior trees like \"PickDeliverCharge\" and \"pick_subtree\" which encapsulate sequences of actions for common tasks like picking objects and delivering them.\n\nOverall, the behavior tree enables the robot to perform complex tasks involving navigation, object",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Parallel failure_threshold=\"1\" success_threshold=\"1\">\n            <Repeat num_cycles=\"-1\">\n                <Action ID=\"VariantAction\" value=\"{variant}\"/>\n            </Repeat>\n            <Switch3 case_1=\"pick\" case_2=\"deliver\" case_3=\"dock\" variable=\"{variant}\">\n                <SubTreePlus ID=\"PickDeliverCharge\"/>\n                <SubTreePlus ID=\"DeliverCharge\"/>\n                <SubTreePlus ID=\"Charge\"/>\n                <SubTreePlus ID=\"PickDeliverCharge\"/>\n            </Switch3>\n        </Parallel>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Charge\">\n        <Sequence name=\"Charge\">\n            <SubTreePlus ID=\"GoTo\" __shared_blackboard=\"false\" x_input=\"-9.33\" y_input=\"2.17\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Deliver\">\n        <Sequence name=\"deliver\">\n            <SubTreePlus ID=\"GoTo\" __shared_blackboard=\"false\" x_input=\"-8.08\" y_input=\"4.11\"/>\n            <Action ID=\"objectdrop\" obj_index=\"-1\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"DeliverCharge\">\n        <Sequence name=\"Deliver/Charge\">\n            <SubTreePlus ID=\"Deliver\"/>\n            <SubTreePlus ID=\"GoTo\" __shared_blackboard=\"false\" x_input=\"-9.33\" y_input=\"8\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"GoTo\">\n        <Sequence name=\"GoTo\">\n            <Action ID=\"pathPlanner\" number_of_waypoints=\"{number_of_waypoints_}\" waypoints=\"{waypoints_}\" x=\"{x_input}\" y=\"{y_input}\"/>\n            <Condition ID=\"CheckPositiveCondition\" value=\"{number_of_waypoints_}\"/>\n            <Repeat num_cycles=\"{number_of_waypoints_}\">\n                <Sequence>\n                    <Action ID=\"ExecutePathAction\" w_x=\"{_w_x}\" w_y=\"{_w_y}\" waypoints=\"{waypoints_}\"/>\n                    <Action ID=\"moveRoboterPosition\" approachRadius=\"150\" x=\"{_w_x}\" y=\"{_w_y}\"/>\n                </Sequence>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"PickDeliverCharge\">\n        <Sequence name=\"Pick/Deliver/Charge\">\n            <SubTreePlus ID=\"pick_subtree\"/>\n            <SubTreePlus ID=\"Deliver\"/>\n            <SubTreePlus ID=\"GoTo\" __shared_blackboard=\"false\" x_input=\"-9.33\" y_input=\"2.17\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"pick_subtree\">\n        <Sequence>\n            <Action ID=\"objectplacement\" query=\"WOODENBOX_0.1_0.3_0.3_0.3\"/>\n            <Repeat num_cycles=\"4\">\n                <ForceSuccess>\n                    <Sequence name=\"pick\">\n                        <Action ID=\"TxtToWaypointsAction\" goal_path=\"boxes\" x=\"{x}\" y=\"{y}\"/>\n                        <SubTreePlus ID=\"GoTo\" __shared_blackboard=\"false\" x_input=\"{x}\" y_input=\"{y}\"/>\n                        <Action ID=\"objectplacement\" query=\"MOCK_0.5_0.3_0.3_0.3\"/>\n                    </Sequence>\n                </ForceSuccess>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <SubTreePlus ID=\"Charge\"/>\n        <Condition ID=\"CheckPositiveCondition\">\n            <input_port default=\"{number_of_waypoints}\" name=\"value\"/>\n        </Condition>\n        <SubTreePlus ID=\"Deliver\"/>\n        <SubTreePlus ID=\"DeliverCharge\"/>\n        <Action ID=\"ExecutePathAction\">\n            <output_port default=\"{_w_x}\" name=\"w_x\"/>\n            <output_port default=\"{_w_y}\" name=\"w_y\"/>\n            <input_port default=\"{waypoints_}\" name=\"waypoints\"/>\n        </Action>\n        <SubTreePlus ID=\"GoTo\">\n            <input_port default=\"false\" name=\"__shared_blackboard\">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>\n            <input_port default=\"1.61\" name=\"x_input\"/>\n            <input_port default=\"7.76\" name=\"y_input\"/>\n        </SubTreePlus>\n        <SubTreePlus ID=\"PickDeliverCharge\"/>\n        <Action ID=\"TxtToWaypointsAction\">\n            <input_port default=\"boxes\" name=\"goal_path\"/>\n            <output_port default=\"{x}\" name=\"x\"/>\n            <output_port default=\"{y}\" name=\"y\"/>\n        </Action>\n        <Action ID=\"VariantAction\">\n            <output_port default=\"{variant}\" name=\"value\"/>\n        </Action>\n        <Action ID=\"activateLocalization\"/>\n        <Action ID=\"approachLocation\">\n            <input_port default=\"1\" name=\"locationId\"/>\n        </Action>\n        <Action ID=\"approachWall\"/>\n        <Action ID=\"deactivateLocalization\"/>\n        <Action ID=\"getBaseCharging\">\n            <output_port default=\"{charging}\" name=\"charging\"/>\n        </Action>\n        <Action ID=\"getPersonPose\">\n            <input_port default=\"MARIA\" name=\"personname\"/>\n            <output_port default=\"{x_}\" name=\"x\"/>\n            <output_port default=\"{y_}\" name=\"y\"/>\n            <output_port default=\"{z_}\" name=\"z\"/>\n        </Action>\n        <Action ID=\"initNavigation\"/>\n        <Action ID=\"loadMap\"/>\n        <Action ID=\"loadNavigationMap\">\n            <input_port default=\"navigation-map\" name=\"mapname\"/>\n        </Action>\n        <Action ID=\"moveRoboterBackwardsLocation\"/>\n        <Action ID=\"moveRoboterBackwardsRelative\"/>\n        <Action ID=\"moveRoboterOrientateRobotAbs\"/>\n        <Action ID=\"moveRoboterOrientateRobotRel\"/>\n        <Action ID=\"moveRoboterPosition\">\n            <input_port default=\"50\" name=\"approachRadius\"/>\n            <input_port default=\"0\" name=\"x\"/>\n            <input_port default=\"0\" name=\"y\"/>\n        </Action>\n        <Action ID=\"objectdrop\">\n            <input_port name=\"obj_index\"/>\n        </Action>\n        <Action ID=\"objectplacement\">\n            <input_port name=\"query\"/>\n        </Action>\n        <Action ID=\"pathPlanner\">\n            <output_port default=\"{number_of_waypoints_}\" name=\"number_of_waypoints\"/>\n            <output_port default=\"{waypoints_}\" name=\"waypoints\"/>\n            <input_port default=\"0\" name=\"x\"/>\n            <input_port default=\"0\" name=\"y\"/>\n        </Action>\n        <Action ID=\"peoplerecognition\"/>\n        <SubTreePlus ID=\"pick_subtree\"/>\n        <Action ID=\"setRobotPose\">\n            <input_port default=\"0\" name=\"x\"/>\n            <input_port default=\"0\" name=\"y\"/>\n            <input_port default=\"0\" name=\"yaw\"/>\n        </Action>\n        <Action ID=\"startJoystickNavigation\"/>\n        <Action ID=\"startReactiveNavigation\"/>\n        <Action ID=\"stopJoystickNavigation\"/>\n        <Action ID=\"stopReactiveNavigation\"/>\n        <Action ID=\"triggerGlobalLocalization\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to make a system say \"hello\" and then \"world\" using a sub-tree. The main behavior tree first sets the blackboard with the value \"hello\" and passes it to the sub-tree \"MySubtree\" which says the message. Then, it sets the blackboard with the value \"world\" and again passes it to the same sub-tree \"MySubtree\" for saying.\n\nThe \"MySubtree\" defines an action to say the received message. It takes the input message and uses it to perform the action \"SaySomething\".\n\nIn summary, the behavior tree orchestrates the process of setting messages in the blackboard and then utilizing a sub-tree to say these messages. This allows for a modular and reusable way of performing actions based on the provided messages.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <SetBlackboard value=\"hello\" output_key=\"myMsg\"/>\n            <SubTree ID=\"MySubtree\" message=\"myMsg\"/>\n            <SetBlackboard value=\"world\" output_key=\"myMsg\"/>\n            <SubTree ID=\"MySubtree\" message=\"myMsg\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MySubtree\">\n        <Action msg=\"{message}\" ID=\"SaySomething\"/>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <SubTree ID=\"MySubtree\">\n            <input_port name=\"message\"/>\n        </SubTree>\n        <Action ID=\"SaySomething\">\n            <input_port name=\"msg\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robot. It operates in parallel, continuously repeating a variant action while also performing people recognition. If the recognition fails, it attempts to locate a person named THOMAS and move the robot towards their position. Additionally, it contains various sub-trees and individual actions for tasks such as recharging, navigation, localization, and movement.\n\nThe tree is designed to handle complex scenarios by concurrently executing multiple tasks, ensuring continuous operation through repeated cycles. It integrates both reactive behaviors, triggered by immediate events like people recognition, and planned actions, represented by the variant action and sequential movements towards specific locations.\n\nOverall, the behavior tree enables the robot to autonomously manage its energy levels, navigate to designated areas, recognize individuals, and respond to dynamic environmental changes, showcasing a comprehensive set of capabilities for autonomous robotic operations.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Parallel threshold=\"1\">\n            <Repeat num_cycles=\"-1\">\n                <Action ID=\"VariantAction\" value=\"{variant}\"/>\n            </Repeat>\n            <Sequence>\n                <Action ID=\"peoplerecognition\"/>\n                <Fallback>\n                    <Action ID=\"getPersonPose\" personname=\"THOMAS\" x=\"{x_}\" y=\"{y_}\" z=\"{z_}\"/>\n                    <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" x=\"3000\" y=\"-12000\"/>\n                </Fallback>\n            </Sequence>\n        </Parallel>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <SubTree ID=\"Recharge\"/>\n        <SubTree ID=\"SearchThomasRoom2\"/>\n        <SubTree ID=\"SearchThomasRoom4\"/>\n        <Action ID=\"VariantAction\">\n            <output_port default=\"{variant}\" name=\"value\"/>\n        </Action>\n        <Action ID=\"activateLocalization\"/>\n        <Action ID=\"approachLocation\">\n            <input_port default=\"1\" name=\"locationId\"/>\n        </Action>\n        <Action ID=\"approachWall\"/>\n        <Action ID=\"deactivateLocalization\"/>\n        <Action ID=\"getBaseCharging\">\n            <output_port default=\"{charging}\" name=\"charging\"/>\n        </Action>\n        <Action ID=\"getPersonPose\">\n            <input_port default=\"MARIA\" name=\"personname\"/>\n            <output_port default=\"{x_}\" name=\"x\"/>\n            <output_port default=\"{y_}\" name=\"y\"/>\n            <output_port default=\"{z_}\" name=\"z\"/>\n        </Action>\n        <Action ID=\"initNavigation\"/>\n        <Action ID=\"loadMap\"/>\n        <Action ID=\"loadNavigationMap\">\n            <input_port default=\"navigation-map\" name=\"mapname\"/>\n        </Action>\n        <Action ID=\"moveRoboterBackwardsLocation\"/>\n        <Action ID=\"moveRoboterBackwardsRelative\"/>\n        <Action ID=\"moveRoboterOrientateRobotAbs\"/>\n        <Action ID=\"moveRoboterOrientateRobotRel\"/>\n        <Action ID=\"moveRoboterPosition\">\n            <input_port default=\"50\" name=\"approachRadius\"/>\n            <input_port default=\"0\" name=\"x\"/>\n            <input_port default=\"0\" name=\"y\"/>\n        </Action>\n        <Action ID=\"peoplerecognition\"/>\n        <Action ID=\"setRobotPose\">\n            <input_port default=\"0\" name=\"x\"/>\n            <input_port default=\"0\" name=\"y\"/>\n            <input_port default=\"0\" name=\"yaw\"/>\n        </Action>\n        <Action ID=\"startJoystickNavigation\"/>\n        <Action ID=\"startReactiveNavigation\"/>\n        <Action ID=\"stopJoystickNavigation\"/>\n        <Action ID=\"stopReactiveNavigation\"/>\n        <Action ID=\"triggerGlobalLocalization\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "This behavior tree orchestrates the decision-making and actions of a character in a simulated environment. The character is programmed to perform various tasks based on its needs, job assignments, and environmental conditions.\n\nThe main behavior tree \"MainTree\" encompasses several sub-trees for handling different scenarios:\n1. AlarmTree: Manages the response to an alarm, including seeking safety or aborting the current task.\n2. Combat: Handles combat situations, including engaging targets and aborting the current task if necessary.\n3. Mission: Coordinates actions related to mission execution, such as leaving for and returning from a mission.\n4. Needs: Addresses the character's basic needs like hunger, thirst, and sleep, ensuring they are fulfilled.\n5. GnomeStandard: Covers standard activities like obtaining uniforms, bandages, training, and performing regular jobs.\n6. Jobs: Orchestrates various job-related tasks, including butchering animals, dyeing animals, leading animals to pasture, harvesting animals, hauling multiple items,",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"AlarmTree\">\n        <SequenceStar>\n            <Condition ID=\"Alarm\"/>\n            <Condition ID=\"IsCivilian\"/>\n            <Action ID=\"AbortJob\"/>\n            <Fallback>\n                <SequenceStar>\n                    <Condition ID=\"IsInSafeRoom\"/>\n                    <Action ID=\"RandomMove\"/>\n                </SequenceStar>\n                <SequenceStar>\n                    <Action ID=\"GetSafeRoomPosition\"/>\n                    <Action ID=\"Move\"/>\n                </SequenceStar>\n            </Fallback>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Combat\">\n        <SequenceStar>\n            <Fallback>\n                <Condition ID=\"IsInCombat\"/>\n                <Condition ID=\"HasHuntTarget\"/>\n            </Fallback>\n            <Action ID=\"AbortJob\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"GetTarget\"/>\n                    <Action ID=\"Move\"/>\n                    <Sequence>\n                        <Condition ID=\"TargetAdjacent\"/>\n                        <Action ID=\"AttackTarget\"/>\n                    </Sequence>\n                </SequenceStar>\n            </ForceSuccess>\n            <Condition ID=\"IsInCombat\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"GetUniform\">\n        <SequenceStar name=\"GetUniform\">\n            <Action ID=\"CheckUniform\"/>\n            <Fallback>\n                <Action ID=\"Move\"/>\n                <Action ID=\"UniformCleanUp\"/>\n            </Fallback>\n            <Action ID=\"EquipUniform\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Hunger\">\n        <SequenceStar>\n            <Condition ID=\"IsHungry\"/>\n            <Sequence>\n                <SequenceStar name=\"Hunger\">\n                    <Action ID=\"FindFood\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"PickUpItem\"/>\n                    <ForceSuccess>\n                        <SequenceStar>\n                            <Action ID=\"FindDining\"/>\n                            <Action ID=\"Move\"/>\n                        </SequenceStar>\n                    </ForceSuccess>\n                    <Action ID=\"Eat\"/>\n                </SequenceStar>\n                <Condition ID=\"IsFull\"/>\n            </Sequence>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobButcherAnimal\">\n        <BB_Precondition expected=\"ButcherAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ButcherAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobDyeAnimal\">\n        <BB_Precondition expected=\"DyeAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitJob\"/>\n                    <Action ID=\"ClaimItems\"/>\n                    <SubTree ID=\"MoveAllItemsToJob\"/>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"DyeAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobHarvestAnimal\">\n        <BB_Precondition expected=\"HarvestAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"HarvestAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobHaulMultiple\">\n        <BB_Precondition expected=\"HauleMultipleItems\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitJob\"/>\n                    <Action ID=\"FindTool\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"EquipTool\"/>\n                    <Inverter>\n                        <Sequence>\n                            <Inverter>\n                                <Condition ID=\"AllPickedUp\"/>\n                            </Inverter>\n                            <Sequence>\n                                <Action ID=\"Move\"/>\n                                <Action ID=\"PickUpItem\"/>\n                            </Sequence>\n                            <Action ID=\"ReturnAlwaysRunning\"/>\n                        </Sequence>\n                    </Inverter>\n                    <Condition ID=\"AllPickedUp\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"DropAllItems\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobLeadAnimalToPasture\">\n        <BB_Precondition expected=\"LeadAnimalToPasture\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobStandard\">\n        <Fallback>\n            <SequenceStar name=\"StandardJobs\">\n                <Action ID=\"InitJob\"/>\n                <Action ID=\"ClaimItems\"/>\n                <Action ID=\"FindTool\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"EquipTool\"/>\n                <SubTree ID=\"MoveAllItemsToJob\"/>\n                <Action ID=\"GetWorkPosition\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"Work\"/>\n                <Action ID=\"FinishJob\"/>\n            </SequenceStar>\n            <Action ID=\"AbortJob\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobTameAnimal\">\n        <BB_Precondition expected=\"TameAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"TameAnimal\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Jobs\">\n        <SequenceStar>\n            <Action ID=\"GetJob\"/>\n            <FallbackStar>\n                <SubTree ID=\"JobButcherAnimal\"/>\n                <SubTree ID=\"JobDyeAnimal\"/>\n                <SubTree ID=\"JobLeadAnimalToPasture\"/>\n                <SubTree ID=\"JobHarvestAnimal\"/>\n                <SubTree ID=\"JobTameAnimal\"/>\n                <SubTree ID=\"JobHaulMultiple\"/>\n                <SubTree ID=\"JobStandard\"/>\n            </FallbackStar>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback>\n            <SubTree ID=\"AlarmTree\"/>\n            <SubTree ID=\"Combat\"/>\n            <SubTree ID=\"Mission\"/>\n            <FallbackStar name=\"Needs\">\n                <SubTree ID=\"Hunger\"/>\n                <SubTree ID=\"Thirst\"/>\n                <SubTree ID=\"Sleepy\"/>\n            </FallbackStar>\n            <FallbackStar name=\"GnomeStandard\">\n                <FallbackStar>\n                    <SubTree ID=\"GetUniform\"/>\n                    <SubTree ID=\"PickUpBandages\"/>\n                    <SubTree ID=\"Training\"/>\n                    <SubTree ID=\"Trainer\"/>\n                </FallbackStar>\n                <SubTree ID=\"Jobs\"/>\n                <Action ID=\"RandomMove\"/>\n            </FallbackStar>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Mission\">\n        <SequenceStar>\n            <Condition ID=\"IsOnMission\"/>\n            <Action ID=\"AbortJob\"/>\n            <Action ID=\"GetExitPosition\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"LeaveForMission\"/>\n            <Action ID=\"DoMission\"/>\n            <Action ID=\"ReturnFromMission\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MoveAllItemsToJob\">\n        <Sequence>\n            <Inverter>\n                <Sequence>\n                    <Inverter>\n                        <Condition ID=\"AllItemsInPlaceForJob\"/>\n                    </Inverter>\n                    <SequenceStar>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"PickUpItem\"/>\n                        <Action ID=\"GetItemDropPosition\"/>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"DropItem\"/>\n                    </SequenceStar>\n                    <Action ID=\"ReturnAlwaysRunning\"/>\n                </Sequence>\n            </Inverter>\n            <Condition ID=\"AllItemsInPlaceForJob\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"OldMoveAllItemsToJob\">\n        <FallbackStar>\n            <Condition ID=\"AllItemsInPlaceForJob\"/>\n            <RetryUntilSuccesful num_attempts=\"20\">\n                <Sequence>\n                    <SequenceStar>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"PickUpItem\"/>\n                        <Fallback>\n                            <Action ID=\"GetItemDropPosition\"/>\n                            <Action ID=\"DropItem\"/>\n                        </Fallback>\n                        <Fallback>\n                            <Action ID=\"Move\"/>\n                            <Action ID=\"DropItem\"/>\n                        </Fallback>\n                        <Action ID=\"DropItem\"/>\n                    </SequenceStar>\n                    <Condition ID=\"AllItemsInPlaceForJob\"/>\n                </Sequence>\n            </RetryUntilSuccesful>\n            <ForceFailure>\n                <Action ID=\"AbortJob\"/>\n            </ForceFailure>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"PickUpBandages\">\n        <SequenceStar>\n            <Action ID=\"CheckBandages\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"PickUpItem\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Sleepy\">\n        <SequenceStar name=\"Sleep\">\n            <Condition ID=\"IsSleepy\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"FindBed\"/>\n                    <Action ID=\"Move\"/>\n                </SequenceStar>\n            </ForceSuccess>\n            <Action ID=\"Sleep\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Thirst\">\n        <SequenceStar>\n            <Condition ID=\"IsThirsty\"/>\n            <Sequence>\n                <SequenceStar name=\"Thirst\">\n                    <Action ID=\"FindDrink\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"PickUpItem\"/>\n                    <ForceSuccess>\n                        <SequenceStar>\n                            <Action ID=\"FindDining\"/>\n                            <Action ID=\"Move\"/>\n                        </SequenceStar>\n                    </ForceSuccess>\n                    <Action ID=\"Drink\"/>\n                </SequenceStar>\n                <Condition ID=\"IsDrinkFull\"/>\n            </Sequence>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Trainer\">\n        <SequenceStar name=\"Trainer\">\n            <Condition ID=\"IsTrainer\"/>\n            <Action ID=\"FindTrainerPosition\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"SuperviseTraining\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Training\">\n        <SequenceStar name=\"Training\">\n            <Condition ID=\"IsTrainingTime\"/>\n            <Action ID=\"FindTrainingGround\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"Train\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AbortJob\"/>\n        <Condition ID=\"Alarm\"/>\n        <SubTree ID=\"AlarmTree\"/>\n        <Condition ID=\"AllItemsInPlaceForJob\"/>\n        <Condition ID=\"AllPickedUp\"/>\n        <Action ID=\"AttackTarget\"/>\n        <Action ID=\"ButcherAnimal\"/>\n        <Action ID=\"CheckBandages\"/>\n        <Action ID=\"CheckUniform\"/>\n        <Action ID=\"ClaimItems\"/>\n        <SubTree ID=\"Combat\"/>\n        <Action ID=\"DoMission\"/>\n        <Action ID=\"Drink\"/>\n        <Action ID=\"DropAllItems\"/>\n        <Action ID=\"DropItem\"/>\n        <Action ID=\"DyeAnimal\"/>\n        <Action ID=\"Eat\"/>\n        <Action ID=\"EnterMap\"/>\n        <Action ID=\"EquipTool\"/>\n        <Action ID=\"EquipUniform\"/>\n        <Action ID=\"FinalMoveAnimal\"/>\n        <Action ID=\"FindBed\"/>\n        <Action ID=\"FindDining\"/>\n        <Action ID=\"FindDrink\"/>\n        <Action ID=\"FindFood\"/>\n        <Action ID=\"FindTool\"/>\n        <Action ID=\"FindTrainerPosition\"/>\n        <Action ID=\"FindTrainingGround\"/>\n        <Action ID=\"FinishJob\"/>\n        <Action ID=\"GetExitPosition\"/>\n        <Action ID=\"GetItemDropPosition\"/>\n        <Action ID=\"GetJob\"/>\n        <Action ID=\"GetSafeRoomPosition\"/>\n        <Action ID=\"GetTarget\"/>\n        <SubTree ID=\"GetUniform\"/>\n        <Action ID=\"GetWorkPosition\"/>\n        <Action ID=\"GrabAnimal\"/>\n        <Action ID=\"HarvestAnimal\"/>\n        <Condition ID=\"HasHuntTarget\"/>\n        <SubTree ID=\"Hunger\"/>\n        <Action ID=\"InitAnimalJob\"/>\n        <Action ID=\"InitButcherJob\"/>\n        <Action ID=\"InitJob\"/>\n        <Condition ID=\"IsButcherJob\"/>\n        <Condition ID=\"IsCivilian\"/>\n        <Condition ID=\"IsDrinkFull\"/>\n        <Condition ID=\"IsFull\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInCombat\"/>\n        <Condition ID=\"IsInSafeRoom\"/>\n        <Condition ID=\"IsOnMission\"/>\n        <Condition ID=\"IsSleepy\"/>\n        <Condition ID=\"IsThirsty\"/>\n        <Condition ID=\"IsTrainer\"/>\n        <Condition ID=\"IsTrainingTime\"/>\n        <Condition ID=\"IsVeryHungry\"/>\n        <Condition ID=\"IsVeryThirsty\"/>\n        <SubTree ID=\"JobButcherAnimal\"/>\n        <SubTree ID=\"JobDyeAnimal\"/>\n        <SubTree ID=\"JobHarvestAnimal\"/>\n        <SubTree ID=\"JobHaulMultiple\"/>\n        <SubTree ID=\"JobLeadAnimalToPasture\"/>\n        <SubTree ID=\"JobStandard\"/>\n        <SubTree ID=\"JobTameAnimal\"/>\n        <SubTree ID=\"Jobs\"/>\n        <Action ID=\"LeaveForMission\"/>\n        <Action ID=\"LeaveMap\"/>\n        <SubTree ID=\"Mission\"/>\n        <Action ID=\"Move\"/>\n        <SubTree ID=\"MoveAllItemsToJob\"/>\n        <SubTree ID=\"OldMoveAllItemsToJob\"/>\n        <SubTree ID=\"PickUpBandages\"/>\n        <Action ID=\"PickUpItem\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"ReleaseAnimal\"/>\n        <Action ID=\"ReturnAlwaysRunning\"/>\n        <Action ID=\"ReturnFromMission\"/>\n        <Action ID=\"Sleep\"/>\n        <SubTree ID=\"Sleepy\"/>\n        <Action ID=\"SuperviseTraining\"/>\n        <Action ID=\"TameAnimal\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n        <SubTree ID=\"Thirst\"/>\n        <Action ID=\"Train\"/>\n        <SubTree ID=\"Trainer\"/>\n        <SubTree ID=\"Training\"/>\n        <Action ID=\"UniformCleanUp\"/>\n        <Action ID=\"Work\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions to be executed. The actions involve input and output parameters, with some using default values. However, the specific functionality or purpose of these actions is not explicitly mentioned in the provided XML.\n\nIt seems that the behavior tree is designed to carry out a series of operations involving input and output parameters, possibly related to processing data or performing specific tasks based on the provided inputs. The actions are structured within a sequence, indicating a specific order of execution.\n\nOverall, the behavior tree appears to define a workflow for handling input and output parameters within a sequence of actions, but without additional context or details about the specific functionalities of each action, it is challenging to provide a more detailed summary.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Action ID=\"inOnlyA\" in0=\"\"/>\n            <Action ID=\"inOnlyB\" in0=\"ice\"/>\n            <Action ID=\"inOnlyB\" in0=\"\"/>\n            <Action ID=\"inOnlyA\" in0=\"  ${foo.baz}\"/>\n            <Action ID=\"outOnlyA\" out0=\"\"/>\n            <Action ID=\"outOnlyB\" out0=\"baz\"/>\n            <Action ID=\"outOnlyC\" out0=\"${baz}\"/>\n            <Action ID=\"outOnlyD\" out0=\"${foo.goo}\"/>\n            <Action ID=\"outOnlyE\" out0=\"${fan}\"/>\n            <Action ID=\"outOnlyF\" out0=\"${long.untraveled.path}\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"inOnlyB\">\n            <input_port default=\"foo\" name=\"in0\"/>\n        </Action>\n        <Action ID=\"outOnlyA\">\n            <output_port name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyB\">\n            <output_port default=\"${baz}\" name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyC\">\n            <output_port name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyD\">\n            <output_port name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyE\">\n            <output_port name=\"out0\"/>\n        </Action>\n        <Action ID=\"outOnlyF\">\n            <output_port name=\"out0\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the decision-making process for a robot navigating through obstacles. The robot is programmed to follow a sequence of actions: first, attempting to pass through a door; if that fails, it will then attempt to pass through a window. If both attempts fail, it will resort to closing the door.\n\nAdditionally, the tree includes specific actions that the robot can take, such as opening or closing a door, and passing through a door or window. It also checks whether the door is open before taking any action.\n\nIn summary, the behavior tree orchestrates the robot's navigation through obstacles by defining a series of actions and conditions, enabling it to make decisions based on its environment.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"SeqA\">\n            <Fallback name=\"root_Fallback\">\n                <Sequence name=\"SeqB\">\n                    <Action ID=\"PassThroughDoor\"/>\n                </Sequence>\n                <Sequence name=\"SeqE\">\n                    <Action ID=\"PassThroughWindow\"/>\n                    <Action ID=\"PassThroughWindow\"/>\n                </Sequence>\n            </Fallback>\n            <Action ID=\"CloseDoor\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CloseDoor\"/>\n        <Condition ID=\"IsDoorOpen\"/>\n        <Action ID=\"OpenDoor\"/>\n        <Action ID=\"PassThroughDoor\"/>\n        <Action ID=\"PassThroughWindow\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate while considering battery levels and implementing recovery actions. If the battery level falls below 70%, the robot will prioritize returning to a base location (0,0,0) at a rate of 1 Hz. In case of navigation failures, it will attempt recovery by replanning the path and clearing costmaps. Additionally, if the goal is updated during navigation, it will clear costmaps and execute recovery actions such as spinning and waiting. This ensures that the robot can effectively navigate its environment, replan paths when necessary, and recover from potential issues like map inconsistencies or goal updates.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions such as moving forward and spinning.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <ReactiveFallback name=\"BatteryFallback\">\n      <Sequence name=\"LowBatteryBehavior\">\n        <IsBatteryLow min_battery=\"70\" battery_topic=\"/battery_status\" is_voltage=\"true\"/>\n        <PipelineSequence name=\"GoBase\">\n            <RateController hz=\"1.0\">\n              <ComputePathToPose goal=\"0;0;0\" path=\"{path}\" planner_id=\"GridBased\"/>\n            </RateController>\n            <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          </PipelineSequence>\n      </Sequence>\n      <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n        <PipelineSequence name=\"NavigateWithReplanning\">\n          <RateController hz=\"1.0\">\n            <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n              <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n              <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n            </RecoveryNode>\n          </RateController>\n          <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n            <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n            <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          </RecoveryNode>\n        </PipelineSequence>\n        <ReactiveFallback name=\"RecoveryFallback\">\n          <GoalUpdated/>\n          <SequenceStar name=\"RecoveryActions\">\n            <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n            <Spin spin_dist=\"1.57\"/>\n            <Wait wait_duration=\"5\"/>\n          </SequenceStar>\n        </ReactiveFallback>\n      </RecoveryNode>\n    </ReactiveFallback>\n    \n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate with periodic global path replanning at a rate of 1 Hz. It consists of a sequence of actions within a pipeline, where the robot first computes a path to a specified goal using a \"GridBased\" planner at a frequency of 1 Hz. Once the path is computed, the robot follows this path using a specified controller (\"FollowPath\"). This setup ensures that the robot continuously updates its global path to adapt to changing environments and obstacles while navigating towards its goal.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </RateController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a sequence of actions to be executed by a robot or an autonomous agent. The sequence consists of three main actions: \"go1\", \"go2\", and \"go3\" which are performed in that order. \n\nAdditionally, the tree includes other potential actions such as \"dumpRun\", \"goClosestR\", \"isFull\", \"mineResources\", \"moveBaseToGoal\", and \"waitFrames\". These actions can be utilized in different scenarios based on specific conditions and requirements.\n\nOverall, the behavior tree outlines a structured plan for the robot's behavior, where it will execute the specified actions sequentially, potentially incorporating other actions based on certain conditions or events.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Sequence1\">\n            <Action ID=\"go1\"/>\n            <Action ID=\"go2\"/>\n            <Action ID=\"go3\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"goClosestR\"/>\n        <Condition ID=\"isFull\"/>\n        <Action ID=\"mineResources\"/>\n        <Action ID=\"moveBaseToGoal\">\n            <inout_port name=\"key_name\">goal</inout_port>\n        </Action>\n        <Action ID=\"waitFrames\">\n            <output_port name=\"barout\"/>\n            <inout_port name=\"baz\"/>\n            <input_port name=\"fooin\"/>\n            <input_port default=\"15\" name=\"frames\">frames</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the actions for a robot. Initially, it attempts to execute a sequence of actions. If the \"CheckLaser\" action fails, indicating an obstacle in the path, it then tries to perform a \"Backward\" action for 3 units of time followed by a \"Turn\" action for 4 units of time. If the \"CheckLaser\" action succeeds, the robot will simply execute a \"Forward\" action.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence>\n      <Fallback ID=\"Fallback\">\n        <CheckLaser name=\"check_laser\"/>\n        <Sequence>\n          <Backward name=\"backward\" duration=\"3\"/>\n          <Turn name=\"turn\" duration=\"4\"/>\n        </Sequence>\n      </Fallback>\n      <Forward name=\"forward\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robot. It first checks if the robot is holding an item, and if not, it attempts to place an item. If there is no item to pick up, it then looks for an item and picks it up. Regardless of these conditions, the \"AlwaysRunning\" action is continuously executed.\n\nAdditionally, there is an initialization behavior tree that simply prints \"Initialize\" when triggered.\n\nIn summary, the behavior tree controls the robot's decision-making process by prioritizing placing items, picking up items, and continuously running, while also including an initialization step.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <ReactiveSequence name=\"Pursue Goals\">\n            <Fallback name=\"No Item in gripper\">\n                <Inverter name=\"Not\">\n                    <Condition ID=\"HoldingItem\" name=\"Holding an Item\"/>\n                </Inverter>\n                <Action ID=\"Place\" name=\"Place it\"/>\n            </Fallback>\n            <Fallback name=\"No Item to pick\">\n                <Inverter name=\"Not\">\n                    <Condition ID=\"SeeItem\" name=\"See an Item\"/>\n                </Inverter>\n                <Action ID=\"Pick\" name=\"Pick it up\"/>\n            </Fallback>\n            <Action ID=\"AlwaysRunning\" name=\"Keep Running\"/>\n        </ReactiveSequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Init\">\n        <Action ID=\"Print\" message=\"Initialize\"/>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AlwaysRunning\"/>\n        <Action ID=\"GetItemPose\"/>\n        <Condition ID=\"HoldingItem\"/>\n        <SubTree ID=\"Init\"/>\n        <Action ID=\"Pick\"/>\n        <Action ID=\"Place\"/>\n        <Action ID=\"Print\">\n            <input_port name=\"message\"/>\n        </Action>\n        <Condition ID=\"SeeItem\"/>\n        <Action ID=\"Trigger\">\n            <input_port name=\"service_name\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a decision-making process for an autonomous vehicle. The vehicle's actions are determined by various conditions and sequences of actions. \n\nThe tree begins with a fallback node named \"Core_seq\" that contains multiple sequences and conditions. It includes checking mission status, stopping the vehicle, generating a path, handling lane keeping and lane changing scenarios, as well as dealing with traffic lights.\n\nEach sequence within \"Core_seq\" handles specific tasks such as lane keeping, lane changing (left and right), A* path planning, and recovery actions in case of failure.\n\nThe tree also involves checking various conditions related to collision, lane change feasibility, traffic light status, and the vehicle's current state. Additionally, it includes actions like acceleration, setting paths, initiating movement, stopping, and publishing data.\n\nOverall, the behavior tree orchestrates the vehicle's decision-making process, considering factors like path availability, traffic conditions, and vehicle state to navigate effectively and safely.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback name=\"Core_seq\">\n            <Sequence name=\"\">\n                <Condition ID=\"checkMissionWait\"/>\n                <Action ID=\"stop\"/>\n            </Sequence>\n            <Sequence name=\"\">\n                <Sequence name=\"gen_path\">\n                    <Condition ID=\"checkExistPathGlobal\"/>\n                    <Action ID=\"init\"/>\n                    <Fallback name=\"StateSelect\">\n                        <Sequence name=\"LaneKeeping\">\n                            <Condition ID=\"checkStateLaneKeeping\"/>\n                            <Action ID=\"genPathLaneKeeping\"/>\n                            <Action ID=\"setPath\"/>\n                            <Fallback name=\"\">\n                                <Sequence name=\"\">\n                                    <Condition ID=\"checkFrontObject\"/>\n                                    <Fallback name=\"\">\n                                        <Fallback name=\"lane_keeping\">\n                                            <Sequence name=\"\">\n                                                <Condition ID=\"checkNearCorner\"/>\n                                                <Action ID=\"acc\"/>\n                                            </Sequence>\n                                            <Sequence name=\"\">\n                                                <Condition ID=\"checkNearStopline\"/>\n                                                <Action ID=\"acc\"/>\n                                            </Sequence>\n                                            <Sequence name=\"\">\n                                                <Condition ID=\"checkProfitKeeplane\"/>\n                                                <Action ID=\"acc\"/>\n                                            </Sequence>\n                                        </Fallback>\n                                        <Fallback name=\"lane_change\">\n                                            <Sequence name=\"lane_change_left\">\n                                                <Action ID=\"genPathLaneChangeLeft\"/>\n                                                <Condition ID=\"checkLaneChangeableLeft\"/>\n                                                <Fallback name=\"\">\n                                                    <Sequence name=\"\">\n                                                        <Condition ID=\"checkCollision\"/>\n                                                        <Action ID=\"setStateLaneKeeping\"/>\n                                                        <Action ID=\"keepLane\"/>\n                                                    </Sequence>\n                                                    <Sequence name=\"\">\n                                                        <Action ID=\"setStateLaneChangeLeft\"/>\n                                                        <Action ID=\"laneChangeLeft\"/>\n                                                    </Sequence>\n                                                </Fallback>\n                                            </Sequence>\n                                            <Sequence name=\"lane_change_right\">\n                                                <Action ID=\"genPathLaneChangeRight\"/>\n                                                <Condition ID=\"checkLaneChangeableRight\"/>\n                                                <Fallback name=\"\">\n                                                    <Sequence name=\"\">\n                                                        <Condition ID=\"checkCollision\"/>\n                                                        <Action ID=\"setStateLaneKeeping\"/>\n                                                        <Action ID=\"keepLane\"/>\n                                                    </Sequence>\n                                                    <Sequence name=\"\">\n                                                        <Action ID=\"setStateLaneChangeRight\"/>\n                                                        <Action ID=\"laneChangeRight\"/>\n                                                    </Sequence>\n                                                </Fallback>\n                                            </Sequence>\n                                        </Fallback>\n                                    </Fallback>\n                                    <Fallback name=\"\">\n                                        <Sequence name=\"astar\">\n                                            <Condition ID=\"checkAbleAstar\"/>\n                                            <Sequence name=\"Gen_Local\">\n                                                <Action ID=\"stop\"/>\n                                                <Action ID=\"setStateAstar\"/>\n                                                <Action ID=\"genPathAstar\"/>\n                                            </Sequence>\n                                        </Sequence>\n                                        <AlwaysSuccess/>\n                                    </Fallback>\n                                </Sequence>\n                                <Sequence name=\"\">\n                                    <Condition ID=\"checkGlobalLaneChange\"/>\n                                    <Fallback name=\"\">\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkLeftChange\"/>\n                                            <Fallback name=\"\">\n                                                <Action ID=\"genPathLaneChangeLeft\"/>\n                                                <Condition ID=\"checkGenPathLaneChange\"/>\n                                            </Fallback>\n                                            <Fallback name=\"\">\n                                                <Sequence name=\"\">\n                                                    <Condition ID=\"checkCollision\"/>\n                                                    <Action ID=\"setStateLaneKeeping\"/>\n                                                    <Action ID=\"keepLane\"/>\n                                                </Sequence>\n                                                <Sequence name=\"\">\n                                                    <Action ID=\"setStateLaneChangeLeft\"/>\n                                                    <Action ID=\"laneChangeLeft\"/>\n                                                </Sequence>\n                                            </Fallback>\n                                        </Sequence>\n                                        <Sequence name=\"\">\n                                            <Fallback name=\"\">\n                                                <Action ID=\"genPathLaneChangeRight\"/>\n                                                <Condition ID=\"checkGenPathLaneChange\"/>\n                                            </Fallback>\n                                            <Fallback name=\"\">\n                                                <Sequence name=\"\">\n                                                    <Condition ID=\"checkCollision\"/>\n                                                    <Action ID=\"setStateLaneKeeping\"/>\n                                                    <Action ID=\"keepLane\"/>\n                                                </Sequence>\n                                                <Sequence name=\"\">\n                                                    <Action ID=\"setStateLaneChangeRight\"/>\n                                                    <Action ID=\"laneChangeRight\"/>\n                                                </Sequence>\n                                            </Fallback>\n                                        </Sequence>\n                                    </Fallback>\n                                </Sequence>\n                                <Action ID=\"setStateLaneKeeping\"/>\n                            </Fallback>\n                        </Sequence>\n                        <Sequence name=\"LaneChangeLeft\">\n                            <Condition ID=\"checkStateLaneChangeLeft\"/>\n                            <Action ID=\"setPath\"/>\n                            <Fallback name=\"\">\n                                <Sequence name=\"\">\n                                    <Condition ID=\"checkCollision\"/>\n                                    <Action ID=\"setStateLaneKeeping\"/>\n                                </Sequence>\n                                <Sequence name=\"\">\n                                    <Condition ID=\"checkEndLaneChange\"/>\n                                    <Action ID=\"setStateLaneKeeping\"/>\n                                </Sequence>\n                                <Action ID=\"setStateLaneChangeLeft\"/>\n                            </Fallback>\n                        </Sequence>\n                        <Sequence name=\"LaneChangeRigth\">\n                            <Condition ID=\"checkStateLaneChangeRight\"/>\n                            <Action ID=\"setPath\"/>\n                            <Fallback name=\"\">\n                                <Sequence name=\"\">\n                                    <Condition ID=\"checkCollision\"/>\n                                    <Action ID=\"setStateLaneKeeping\"/>\n                                </Sequence>\n                                <Sequence name=\"\">\n                                    <Condition ID=\"checkEndLaneChange\"/>\n                                    <Action ID=\"setStateLaneKeeping\"/>\n                                </Sequence>\n                                <Action ID=\"setStateLaneChangeRight\"/>\n                            </Fallback>\n                        </Sequence>\n                        <Sequence name=\"Astar\">\n                            <Condition ID=\"checkStateAstar\"/>\n                            <Action ID=\"setPath\"/>\n                            <Fallback name=\"local_check\">\n                                <Sequence name=\"\">\n                                    <Condition ID=\"checkCollision\"/>\n                                    <Action ID=\"stop\"/>\n                                    <Action ID=\"genPathAstar\"/>\n                                </Sequence>\n                                <Sequence name=\"\">\n                                    <Condition ID=\"checkFinishAstar\"/>\n                                    <Action ID=\"setFinishLocal\"/>\n                                    <Action ID=\"setStateLaneKeeping\"/>\n                                </Sequence>\n                                <Action ID=\"localPathfollow\"/>\n                            </Fallback>\n                        </Sequence>\n                        <Sequence name=\"Recovery\">\n                            <AlwaysFailure/>\n                        </Sequence>\n                    </Fallback>\n                </Sequence>\n                <Sequence name=\"traffic_check\">\n                    <Fallback name=\"\">\n                        <Fallback name=\"\">\n                            <Sequence name=\"\">\n                                <Condition ID=\"checkPassAbleTrafficLight\"/>\n                                <Fallback name=\"\">\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkCollision\"/>\n                                        <Action ID=\"stop\"/>\n                                    </Sequence>\n                                    <Action ID=\"drive\"/>\n                                </Fallback>\n                            </Sequence>\n                            <Action ID=\"stopTrafficLight\"/>\n                        </Fallback>\n                        <Action ID=\"drive\"/>\n                    </Fallback>\n                    <Action ID=\"setPath\"/>\n                </Sequence>\n                <Action ID=\"publishData\"/>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"acc\"/>\n        <Condition ID=\"checkAbleAstar\"/>\n        <Condition ID=\"checkCollision\"/>\n        <Condition ID=\"checkEmptyLocal\"/>\n        <Condition ID=\"checkEndLaneChange\"/>\n        <Condition ID=\"checkExistPathGlobal\"/>\n        <Condition ID=\"checkFinishAstar\"/>\n        <Condition ID=\"checkFinishLocal\"/>\n        <Condition ID=\"checkFrontObject\"/>\n        <Condition ID=\"checkGenPathLaneChange\"/>\n        <Condition ID=\"checkGlobalLaneChange\"/>\n        <Condition ID=\"checkInitPose\"/>\n        <Condition ID=\"checkIsGlobalFollow\"/>\n        <Condition ID=\"checkLaneChange\"/>\n        <Condition ID=\"checkLaneChangeableLeft\"/>\n        <Condition ID=\"checkLaneChangeableRight\"/>\n        <Condition ID=\"checkLeftChange\"/>\n        <Condition ID=\"checkMissionWait\"/>\n        <Condition ID=\"checkNearCorner\"/>\n        <Condition ID=\"checkNearStopline\"/>\n        <Condition ID=\"checkPassAbleTrafficLight\"/>\n        <Condition ID=\"checkProfitKeeplane\"/>\n        <Condition ID=\"checkStateAstar\"/>\n        <Condition ID=\"checkStateLaneChangeLeft\"/>\n        <Condition ID=\"checkStateLaneChangeRight\"/>\n        <Condition ID=\"checkStateLaneKeeping\"/>\n        <Condition ID=\"checkTrafficLight\"/>\n        <Action ID=\"drive\"/>\n        <Action ID=\"genGlobalFollowPath\"/>\n        <Action ID=\"genLocalPath\"/>\n        <Action ID=\"genPathAstar\"/>\n        <Action ID=\"genPathLaneChangeLeft\"/>\n        <Action ID=\"genPathLaneChangeRight\"/>\n        <Action ID=\"genPathLaneKeeping\"/>\n        <Action ID=\"init\"/>\n        <Action ID=\"keepLane\"/>\n        <Action ID=\"laneChangeLeft\"/>\n        <Action ID=\"laneChangeRight\"/>\n        <Action ID=\"localPathFollow\"/>\n        <Action ID=\"localPathfollow\"/>\n        <Action ID=\"publishData\"/>\n        <Action ID=\"setFinishLocal\"/>\n        <Action ID=\"setPath\"/>\n        <Action ID=\"setStartLocal\"/>\n        <Action ID=\"setStateAstar\"/>\n        <Action ID=\"setStateLaneChangeLeft\"/>\n        <Action ID=\"setStateLaneChangeRight\"/>\n        <Action ID=\"setStateLaneKeeping\"/>\n        <Action ID=\"stop\"/>\n        <Action ID=\"stopTrafficLight\"/>\n        <SubTree ID=\"treeGenGlobalFollowPath\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a navigation system for a robot to dynamically move to a specified position while continuously replanning its path. The process involves the following steps:\n\n1. The robot updates its goal pose and computes a path to the updated goal using a GridBased planner.\n2. The computed path is then truncated to a certain distance to ensure the robot follows a manageable segment of the path at a time.\n3. The robot continuously follows the truncated path using a specific controller until it reaches the goal, with the ability to replan if necessary.\n\nThis behavior tree ensures that the robot can navigate to a dynamic pose while adapting its path based on real-time changes in the environment, providing robust and adaptive navigation capabilities.",
        "output": "<!--\n  This Behavior Tree follows a dynamic pose to a certain distance\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n         <TruncatePath distance=\"1.0\" input_path=\"{path}\" output_path=\"{truncated_path}\"/>\n        </Sequence>\n      </RateController>\n      <KeepRunningUntilFailure>\n        <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\"/>\n      </KeepRunningUntilFailure>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robot in a complex environment. The robot is programmed to perform multiple tasks simultaneously and sequentially, such as recognizing people, navigating to specific locations, recharging, and searching for a person named Thomas.\n\nThe main sequence involves parallel execution of variant actions (with repetition) and a series of actions related to people recognition, robot movement, and decision-making based on the \"variant\" variable. If the \"variant\" is \"one\" or \"two\", the robot will either recharge or search for Thomas in different rooms. If neither of these conditions is met, it will continue with other variant actions.\n\nThe sub-trees handle specific tasks like recharging, searching for Thomas in two different rooms, and handling failure scenarios. These sub-trees encapsulate the detailed logic for each task, including movement, person recognition, and decision-making.\n\nOverall, the behavior tree coordinates the robot's activities, ensuring it performs various tasks efficiently within its environment while adapting its actions based on",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Parallel threshold=\"1\">\n            <Repeat num_cycles=\"-1\">\n                <Action ID=\"VariantAction\" value=\"{variant}\"/>\n            </Repeat>\n            <Sequence>\n                <Action ID=\"peoplerecognition\"/>\n                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" x=\"5630\" y=\"-12000\"/>\n                <Switch2 case_1=\"one\" case_2=\"two\" variable=\"{variant}\">\n                    <SubTree ID=\"Recharge\"/>\n                    <SubTree ID=\"Recharge\"/>\n                    <Fallback name=\"SearchThomas\">\n                        <SubTree ID=\"SearchThomasRoom1\"/>\n                        <SubTree ID=\"SearchThomasRoom2\"/>\n                        <SubTree ID=\"Recharge\"/>\n                    </Fallback>\n                </Switch2>\n            </Sequence>\n        </Parallel>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Recharge\">\n        <Sequence name=\"Recharge\">\n            <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" name=\"Door8\" x=\"23200\" y=\"-12000\"/>\n            <Action ID=\"moveRoboterPosition\" approachRadius=\"10\" name=\"GotoCharger\" x=\"23200\" y=\"-14800\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"SearchThomasRoom1\">\n        <Fallback name=\"Room1\">\n            <Sequence name=\"SearchRoom1\">\n                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" name=\"Door2\" x=\"7520\" y=\"-12000\"/>\n                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" x=\"7520\" y=\"-9040\"/>\n                <Action ID=\"getPersonPose\" personname=\"THOMAS\" x=\"{x_}\" y=\"{y_}\" z=\"{z_}\"/>\n                <Action ID=\"moveRoboterPosition\" approachRadius=\"500\" name=\"MoveToPerson\" x=\"{x_}\" y=\"{y_}\"/>\n                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" name=\"Door2\" x=\"7520\" y=\"-12000\"/>\n            </Sequence>\n            <ForceFailure>\n                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" name=\"Door2\" x=\"7520\" y=\"-12000\"/>\n            </ForceFailure>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"SearchThomasRoom2\">\n        <Fallback name=\"Room4\">\n            <Sequence name=\"SearchRoom4\">\n                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" name=\"Door4\" x=\"14500\" y=\"-12000\"/>\n                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" x=\"14400\" y=\"-9640\"/>\n                <Action ID=\"getPersonPose\" personname=\"THOMAS\" x=\"{x_}\" y=\"{y_}\" z=\"{z_}\"/>\n                <Action ID=\"moveRoboterPosition\" approachRadius=\"500\" name=\"MoveToPerson\" x=\"{x_}\" y=\"{y_}\"/>\n                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" name=\"Door4\" x=\"14500\" y=\"-12000\"/>\n            </Sequence>\n            <ForceFailure>\n                <Action ID=\"moveRoboterPosition\" approachRadius=\"200\" name=\"Door4\" x=\"14500\" y=\"-12000\"/>\n            </ForceFailure>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <SubTree ID=\"Recharge\"/>\n        <SubTree ID=\"SearchThomasRoom1\"/>\n        <SubTree ID=\"SearchThomasRoom2\"/>\n        <Action ID=\"VariantAction\">\n            <output_port default=\"{variant}\" name=\"value\"/>\n        </Action>\n        <Action ID=\"activateLocalization\"/>\n        <Action ID=\"approachLocation\">\n            <input_port default=\"1\" name=\"locationId\"/>\n        </Action>\n        <Action ID=\"approachWall\"/>\n        <Action ID=\"deactivateLocalization\"/>\n        <Action ID=\"getBaseCharging\">\n            <output_port default=\"{charging}\" name=\"charging\"/>\n        </Action>\n        <Action ID=\"getPersonPose\">\n            <input_port default=\"MARIA\" name=\"personname\"/>\n            <output_port default=\"{x_}\" name=\"x\"/>\n            <output_port default=\"{y_}\" name=\"y\"/>\n            <output_port default=\"{z_}\" name=\"z\"/>\n        </Action>\n        <Action ID=\"initNavigation\"/>\n        <Action ID=\"loadMap\"/>\n        <Action ID=\"loadNavigationMap\">\n            <input_port default=\"navigation-map\" name=\"mapname\"/>\n        </Action>\n        <Action ID=\"moveRoboterBackwardsLocation\"/>\n        <Action ID=\"moveRoboterBackwardsRelative\"/>\n        <Action ID=\"moveRoboterOrientateRobotAbs\"/>\n        <Action ID=\"moveRoboterOrientateRobotRel\"/>\n        <Action ID=\"moveRoboterPosition\">\n            <input_port default=\"50\" name=\"approachRadius\"/>\n            <input_port default=\"0\" name=\"x\"/>\n            <input_port default=\"0\" name=\"y\"/>\n        </Action>\n        <Action ID=\"peoplerecognition\"/>\n        <Action ID=\"setRobotPose\">\n            <input_port default=\"0\" name=\"x\"/>\n            <input_port default=\"0\" name=\"y\"/>\n            <input_port default=\"0\" name=\"yaw\"/>\n        </Action>\n        <Action ID=\"startJoystickNavigation\"/>\n        <Action ID=\"startReactiveNavigation\"/>\n        <Action ID=\"stopJoystickNavigation\"/>\n        <Action ID=\"stopReactiveNavigation\"/>\n        <Action ID=\"triggerGlobalLocalization\"/>\n        <Action ID=\"objectplacement\">\n            <input_port default=\"0\" name=\"query\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement towards three goals (Goal_a, Goal_b, Goal_c) in a loop for three cycles. At each cycle, the robot checks for the presence of a human pose and if detected, it moves towards the respective goal. If no human pose is detected, the robot continues to the next goal in sequence. The \"MoveRobot\" behavior tree contains the logic for setting the goal and navigating the robot to the specified target location using the Nav2Client.\n\nOverall, the behavior tree enables the robot to repeatedly attempt to reach the specified goals while reacting to the presence or absence of a human pose. If a pose is detected, the robot will navigate towards the corresponding goal; otherwise, it will proceed to the next goal in the sequence.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Repeat num_cycles=\"3\">\n\t\t\t<Sequence>\n\t\t\t\t<SetBlackboard output_key=\"Goal_a\" value=\"-4.3,-4,180.0\" />\n\t\t\t\t<SetBlackboard output_key=\"Goal_b\" value=\"-4.7,-6.6,270.0\" />\n\t\t\t\t<SetBlackboard output_key=\"Goal_c\" value=\"-6.0,-4.2,206.0\" />\n\t\t\t\t<Sequence>\n\t\t\t\t\t<ReactiveSequence>\n\t\t\t\t\t\t<Inverter>\n\t\t\t\t\t\t\t<HumanPoseDetect pose_lr_check=\"presence\" expected_pose_left=\"\" expected_pose_right=\"\"\n\t\t\t\t\t\t\t\tdetected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\"\n\t\t\t\t\t\t\t\tpose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t</Inverter>\n\t\t\t\t\t\t<SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n\t\t\t\t\t</ReactiveSequence>\n\t\t\t\t\t<ReactiveSequence>\n\t\t\t\t\t\t<Inverter>\n\t\t\t\t\t\t\t<HumanPoseDetect pose_lr_check=\"presence\" expected_pose_left=\"\" expected_pose_right=\"\"\n\t\t\t\t\t\t\t\tdetected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\"\n\t\t\t\t\t\t\t\tpose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t</Inverter>\n\t\t\t\t\t\t<SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n\t\t\t\t\t</ReactiveSequence>\n\t\t\t\t\t<ReactiveSequence>\n\t\t\t\t\t\t<Inverter>\n\t\t\t\t\t\t\t<HumanPoseDetect pose_lr_check=\"presence\" expected_pose_left=\"\" expected_pose_right=\"\"\n\t\t\t\t\t\t\t\tdetected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\"\n\t\t\t\t\t\t\t\tpose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t</Inverter>\n\t\t\t\t\t\t<SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n\t\t\t\t\t</ReactiveSequence>\n\t\t\t\t</Sequence>\n\t\t\t</Sequence>\n\t\t</Repeat>\n\t</BehaviorTree>\n\n\t<BehaviorTree ID=\"MoveRobot\">\n\t\t<Sequence name=\"SetGoal\">\n\t\t\t<Nav2Client goal=\"{target}\" />\n\t\t</Sequence>\n\t</BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a system to dynamically navigate towards a specific pose while continuously replanning its path. The system updates the goal pose and computes a new path using a planner. It then truncates the computed path based on a specified distance. The robot or agent follows this truncated path using a specific controller, ensuring continuous movement until the goal is reached.\n\nThis behavior tree allows for dynamic navigation with continuous path planning and execution, ensuring that the system can adapt to changes in the environment or goal poses while maintaining smooth and efficient movement towards the target.",
        "output": "<!--\n  This Behavior Tree follows a dynamic pose to a certain distance\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n         <TruncatePath distance=\"1.0\" input_path=\"{path}\" output_path=\"{truncated_path}\"/>\n        </Sequence>\n      </RateController>\n      <KeepRunningUntilFailure>\n        <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\"/>\n      </KeepRunningUntilFailure>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to navigate a robot while replanning its global path after every 1 meter of movement. It utilizes a pipeline sequence consisting of two steps: \n1. DistanceController: This component computes a new path to the goal pose using the \"GridBased\" planner whenever the robot has moved 1 meter.\n2. FollowPath: The robot then follows the computed path using the specified controller.\n\nThis approach ensures that the robot continuously updates its path to adapt to the environment as it moves, allowing for more efficient and dynamic navigation.",
        "output": "<!--\n  This Behavior Tree replans the global path after every 1m.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <DistanceController distance=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </DistanceController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence of actions for a robot to perform. It involves executing a specific set of joint states for the robot's arm, with the option to repeat this sequence multiple times. The tree also includes various other actions such as connecting waypoints, adding and attaching objects, planning, removing objects, and sensing object poses.\n\nThe main focus appears to be on controlling the robot's movements and interactions with its environment. This could involve tasks such as picking up and placing objects, adjusting joint states, and performing specific motions. Additionally, there are actions related to sensing and storing information about detected objects.\n\nOverall, the behavior tree outlines a series of steps for the robot to follow in order to accomplish a variety of tasks involving manipulation, perception, and planning within its environment.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence name=\"Robot Minimal Demo\">\n            <Repeat num_cycles=\"1\">\n                <Sequence>\n                    <Action ID=\"ExecuteGroupLinearJointStates\" goal=\"0.9737, 1.4487, 2.0451, -0.3455, 0.0, 0.0\" group_name=\"arm\" name=\"pre middle left\" service_name=\"execute_group_joint_states\" tolerance=\"0.01\"/>\n                </Sequence>\n            </Repeat>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ConnectWaypoints\">\n            <output_port name=\"connected_waypoints\">PoseArray</output_port>\n            <input_port default=\"connect_waypoints\" name=\"service_name\"/>\n            <input_port name=\"waypoint1\">Pose</input_port>\n            <input_port name=\"waypoint2\">Pose</input_port>\n            <input_port name=\"waypoint3\">Pose</input_port>\n            <input_port name=\"waypoint4\">Pose</input_port>\n            <input_port name=\"waypoint5\">Pose</input_port>\n        </Action>\n        <Action ID=\"ExecuteAddBox\">\n            <input_port default=\"1\" name=\"auto_subfix\"/>\n            <input_port default=\"box\" name=\"box_name\"/>\n            <input_port default=\"{place_pose}\" name=\"box_pose\"/>\n            <input_port default=\"0.2 0.2 0.2\" name=\"box_size\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"1\" name=\"is_absolute\"/>\n            <input_port default=\"execute_add_box\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteAddPlane\">\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"ground\" name=\"plane_name\"/>\n            <input_port default=\"0 0 1\" name=\"plane_normal\"/>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"plane_pose\">Pose</input_port>\n            <input_port default=\"execute_add_plane\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteAttachBox\">\n            <input_port name=\"box_name\"/>\n            <input_port name=\"box_pose\"/>\n            <input_port name=\"box_size\"/>\n            <input_port default=\"gripper\" name=\"eef_group_name\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"execute_attach_box\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteDetachObject\">\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port name=\"obj_name\"/>\n            <input_port default=\"execute_detach_object\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupAngularJointStates\">\n            <input_port default=\"0 0 0 0 0 0 0\" name=\"goal\"/>\n            <input_port default=\"panda_arm\" name=\"group_name\"/>\n            <input_port default=\"execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupLinearJointStates\">\n            <input_port default=\"0.04 0.04\" name=\"goal\"/>\n            <input_port default=\"hand\" name=\"group_name\"/>\n            <input_port default=\"execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupManyPoses\">\n            <input_port name=\"constraint\">If 'r', 'p', or 'y' is given, the eef_frame should not rotate about itself along x-, y-, or z-axis. You can combine them like 'rp', 'ry', 'py', and 'rpy'. Default ''</input_port>\n            <input_port default=\"0.1\" name=\"eef_step\"/>\n            <input_port default=\"0\" name=\"goal_type\">0: Pose wrt the global base frame (robot base); 1: Pose wrt the base frame transferred to current eef base position; 2: pose wrt the eef frame</input_port>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goals\">Goals for each waypoint to reach, seperate with ; </input_port>\n            <input_port default=\"arm\" name=\"group_name\">The group providing the reference frame</input_port>\n            <input_port default=\"execute_group_many_poses\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupPose\">\n            <input_port name=\"constraint\">If 'r', 'p', or 'y' is given, the eef_frame should not rotate about itself along x-, y-, or z-axis. You can combine them like 'rp', 'ry', 'py', and 'rpy'. Default ''</input_port>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goal\"/>\n            <input_port default=\"0\" name=\"goal_type\">0: Pose wrt the global base frame (robot base); 1: Pose wrt the base frame transferred to current eef base position; 2: pose wrt the eef frame</input_port>\n            <input_port default=\"arm\" name=\"group_name\">The group providing the reference frame</input_port>\n            <input_port default=\"execute_group_pose\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupShift\">\n            <input_port default=\"z\" name=\"axis\">Could be x y z roll pitch yaw</input_port>\n            <input_port default=\"0\" name=\"goal\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"execute_group_shift\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecutePlanning\">\n            <input_port default=\"0\" name=\"category\">0 for large box, 1 for small box</input_port>\n            <output_port name=\"pick_pose\">Pose</output_port>\n            <output_port name=\"place_obj_pose\">Pose</output_port>\n            <output_port name=\"place_pose\">Pose</output_port>\n            <input_port name=\"pose\">Pose</input_port>\n            <output_port name=\"pre_pick_pose\">Pose</output_port>\n            <output_port name=\"pre_place_pose\">Pose</output_port>\n            <input_port default=\"execute_planning\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteRemoveObject\">\n            <input_port default=\"1\" name=\"is_exact\"/>\n            <input_port name=\"obj_name\"/>\n            <input_port default=\"execute_remove_object\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteSuction\">\n            <input_port default=\"0\" name=\"enable\"/>\n            <input_port default=\"execute_suction\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"FetchDetectedInfo\">\n            <output_port name=\"category\">String, 0 for large box, 1 for small box</output_port>\n            <output_port name=\"pose\">Pose</output_port>\n            <input_port default=\"fetch_detected_info\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"SenseObjectPose\">\n            <output_port name=\"category\">String, 0 for large box, 1 for small box</output_port>\n            <output_port name=\"pose\">Pose</output_port>\n            <input_port default=\"sense_object_pose\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"StoreDetectedInfo\">\n            <input_port name=\"category\">String, 0 for large box, 1 for small box</input_port>\n            <input_port name=\"pose\">Pose</input_port>\n            <input_port default=\"store_detected_info\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"TypeInPose\">\n            <output_port name=\"pose_on_blackboard\">Pose on blackboard</output_port>\n            <input_port default=\"type_in_pose\" name=\"service_name\"/>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"type_in_pose\">Pose to be typed in</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's navigation recovery process. The robot is programmed to recover from navigation failures using a series of recovery actions. If the initial navigation attempt fails, the RecoveryNode will retry the navigation up to 6 times.\n\nThe recovery process includes several stages:\n1. NavigateWithReplanning: This stage involves resetting the navigation goal and checking progress. It also includes computing a new path to the goal, smoothing the path, and following the path while handling any feedback received during navigation.\n\n2. RecoveryFallback: If the navigation still fails after multiple retries, the robot will perform recovery actions such as clearing the local and global costmaps, waiting for a specified duration, and backing up a short distance.\n\nOverall, the behavior tree ensures that the robot can recover from navigation failures by attempting to replan the path, handle feedback, and execute specific recovery actions when necessary.",
        "output": "\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <ResetterNode>\n        <GoalUpdated/>\n        <ProgressCheckerPipeline name=\"NavigateWithReplanning\">\n          <RateController hz=\"0.02\">\n            <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n              <ComputePathToPose goal=\"{goal}\" path=\"{path_coarse}\" planner_id=\"GridBased\" server_timeout=\"60.0\"/>\n              <ReactiveFallback name=\"ComputePathToPoseRecoveryFallback\">\n                <GoalUpdated/>\n                <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n              </ReactiveFallback>\n            </RecoveryNode>\n          </RateController>\n          <DistanceController distance=\"2.0\">\n            <RecoveryNode number_of_retries=\"1\" name=\"SmoothPath\">\n              <SmoothPath path_in=\"{path_coarse}\" path_out=\"{path}\" smoother_id=\"SmoothPath\"/>\n              <ReactiveFallback name=\"SmoothPathRecoveryFallback\">\n                <GoalUpdated/>\n                <Sequence>\n                  <ClearEntireCostmap name=\"ClearGlobalCostmapSmoother-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n                  <ComputePathToPose goal=\"{goal}\" path=\"{path_coarse}\" planner_id=\"GridBased\" server_timeout=\"60.0\"/>\n                </Sequence>\n              </ReactiveFallback>\n            </RecoveryNode>\n          </DistanceController>\n          <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n            <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n            <ReactiveFallback name=\"FollowPathRecoveryFallback\">\n              <GoalUpdated/>\n              <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n            </ReactiveFallback>\n          </RecoveryNode>\n          <HadFeedback name=\"HadFeedback_FollowPath\"/>\n        </ProgressCheckerPipeline>\n      </ResetterNode>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <RoundRobin name=\"RecoveryActions\">\n          <Sequence name=\"ClearingActions\">\n            <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </Sequence>\n          <!-- <Spin spin_dist=\"1.57\"/> -->\n          <Wait wait_duration=\"5\"/>\n          <BackUp backup_dist=\"0.15\" backup_speed=\"0.025\"/>\n        </RoundRobin>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a task for a robot to fetch a bottle from the kitchen. The robot is programmed to first go to the kitchen, then find the bottle, and finally fetch it. These actions are organized in a sequence within a fallback structure, ensuring that if any action fails, the robot will resort to asking for help as an alternative. This indicates a robust decision-making process where the robot attempts to autonomously perform the tasks but has a backup plan in case of failure.\n\nOverall, the behavior tree represents a clear and structured approach for the robot to accomplish its goal, with built-in resilience through the fallback mechanism.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!--------------------------------------->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Root>\n            <Fallback name=\"FB\">\n                <Sequence name=\"S1\">\n                    <Action ID=\"Go_to_kitchen\"/>\n                    <Action ID=\"Find_bottle\"/>\n                    <Action ID=\"Fetch_bottle\"/>\n                </Sequence>\n                <Action ID=\"Ask_for_help\"/>\n            </Fallback>\n        </Root>\n    </BehaviorTree>\n    <!--------------------------------------->\n    <TreeNodesModel>\n        <Action ID=\"Ask_for_help\"/>\n        <Action ID=\"Fetch_bottle\"/>\n        <Action ID=\"Find_bottle\"/>\n        <Action ID=\"Go_to_kitchen\"/>\n    </TreeNodesModel>\n    <!--------------------------------------->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the actions and decisions for a robot's task execution. The robot is programmed to perform a series of tasks in a kitchen environment, primarily centered around finding and grasping a bottle.\n\nInitially, the robot attempts to go to the kitchen. If unsuccessful, it will ask for help. Once in the kitchen, it searches for the bottle. If the bottle is found, it proceeds to grasp it. If not, it goes through a sequence of steps to compute and validate an inverse pose, then locates the bottle with confidence. If successful, it grasps the bottle; otherwise, it marks the inverse pose as not valid.\n\nThroughout this process, the robot continuously checks various conditions such as its location, the presence of the bottle, and the validity of computed poses. It also has the option to keep running if needed.\n\nIn summary, the behavior tree orchestrates the robot's actions in a dynamic and adaptive manner, allowing it to navigate, search, and manipulate objects within the kitchen",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Root>\n            <Fallback name=\"FB1\">\n                <Sequence name=\"S1\">\n                    <Fallback name=\"FB2\">\n                        <Condition ID=\"Robot_in_kitchen\"/>\n                        <Action ID=\"Go_to_kitchen\"/>\n                    </Fallback>\n                    <Sequence name=\"S2\">\n                        <Fallback name=\"FB3\">\n                            <Condition ID=\"Bottle_found\"/>\n                            <Action ID=\"Find_bottle\"/>\n                        </Fallback>\n                        <Fallback name=\"FB4\">\n                            <Condition ID=\"Bottle_grasped\"/>\n                            <Fallback name=\"FB5\">\n                                <Sequence name=\"S3\">\n                                    <Fallback name=\"FB7\">\n                                        <Sequence name=\"S6\">\n                                            <Condition ID=\"Inv_pose_computed\"/>\n                                            <Condition ID=\"Inv_pose_valid\"/>\n                                        </Sequence>\n                                        <Action ID=\"Compute_inv_pose\"/>\n                                    </Fallback>\n                                    <Sequence name=\"S4\">\n                                        <Fallback name=\"FB8\">\n                                            <Condition ID=\"Robot_at_inv_pose\"/>\n                                            <Action ID=\"Go_to_inv_pose\"/>\n                                        </Fallback>\n                                        <Sequence name=\"S5\">\n                                            <Fallback name=\"FB9\">\n                                                <Condition ID=\"Bottle_located_with_confidence_x\"/>\n                                                <Action ID=\"Locate_bottle\"/>\n                                            </Fallback>\n                                            <Action ID=\"Grasp_bottle\"/>\n                                        </Sequence>\n                                    </Sequence>\n                                </Sequence>\n                                <Action ID=\"Set_inv_pose_not_valid\"/>\n                            </Fallback>\n                        </Fallback>\n                    </Sequence>\n                </Sequence>\n                <Action ID=\"Ask_for_help\"/>\n            </Fallback>\n        </Root>\n    </BehaviorTree>\n    <TreeNodesModel>\n        <Action ID=\"Ask_for_help\"/>\n        <Condition ID=\"Bottle_found\"/>\n        <Condition ID=\"Bottle_grasped\"/>\n        <Condition ID=\"Bottle_located_with_confidence_x\"/>\n        <Action ID=\"Compute_inv_pose\"/>\n        <Action ID=\"Find_bottle\"/>\n        <Action ID=\"Go_to_inv_pose\"/>\n        <Action ID=\"Go_to_kitchen\"/>\n        <Action ID=\"Grasp_bottle\"/>\n        <Condition ID=\"Inv_pose_computed\"/>\n        <Condition ID=\"Inv_pose_valid\"/>\n        <Action ID=\"Keep_running\"/>\n        <Action ID=\"Locate_bottle\"/>\n        <Condition ID=\"Robot_at_inv_pose\"/>\n        <Condition ID=\"Robot_in_kitchen\"/>\n        <Action ID=\"Set_inv_pose_not_valid\"/>\n    </TreeNodesModel>\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's interaction with humans in a game scenario. The robot is programmed to perform the following sequence of actions:\n1. Initially, it waits for 1 second and then enables pose detection control.\n2. It tracks an object or person using specific parameters.\n3. The robot spins to get localized if necessary.\n4. It finds and initializes the game based on certain conditions.\n5. If the game needs setup, it prompts the user through speech and verifies their response before setting up the game.\n6. If the game is already set up, it proceeds to guide the user through the game by providing instructions and tracking their movements.\n7. After completing the game or if the game does not need setup, the robot guides the user through the game, provides feedback, and concludes the game.\n\nOverall, the behavior tree outlines the robot's interactions during the game, including setup, guiding the user, and providing feedback. It incorporates various sensory inputs, speech interactions, and movement",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Repeat num_cycles=\"10\">\n\t\t\t<Sequence>\n\t\t\t\t<Delay delay_msec=\"1000\">\n\t\t\t\t\t<PoseDetectionControlAction enable=\"true\" />\n\t\t\t\t</Delay>\n\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\n\t\t\t\t<!-- Spin a bit to get localized in the case the initial pose was just set -->\n\t\t\t\t<RobotSpin angle=\"-180\" velocity=\"0.4\" />\n\t\t\t\t<RobotSpin angle=\"180\" velocity=\"0.4\" />\n\n\t\t\t\t<RobotFindInitAction game_file=\"robot_find_numbers.json\" random_order=\"0\" needs_init=\"{needs_init}\" robot_pose=\"{robot_pose}\" />\n\n\t\t\t\t<ForceSuccess>\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<!-- Prompt for game setup if already setup -->\n\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{needs_init}\" value_B=\"0\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Do you want to setup the game?\" />\n\t\t\t\t\t\t\t\t<SpeechToTextActionClient text=\"{said}\" />\n\t\t\t\t\t\t\t\t<TextCompareAction text=\"{said}\" ck_for=\".*(yes|yeah|okay|ok|sure|yep).*\" />\n\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"needs_init\" value=\"1\" />\n\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t</Sequence>\n\t\t\t\t</ForceSuccess>\n\n\t\t\t\t<Fallback>\n\t\t\t\t\t<BlackboardCheckInt value_A=\"{needs_init}\" value_B=\"1\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"1\" />\n\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Game setup. I will ask you to stand at each of the locations.  Put both hands on your hips when you arrive at each location to continue.\" />\n\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Please send in the middle of the game. After the robot aligns to you, put both hands on your hips.\" />\n\t\t\t\t\t\t\t\t\t<RetryUntilSuccesful num_attempts=\"20\">\n\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2000\">\n\t\t\t\t\t\t\t\t\t\t\t<HumanPoseDetect expected_pose_left=\"OnHip\" expected_pose_right=\"OnHip\" pose_lr_check=\"both\" detected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\" pose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t</RetryUntilSuccesful>\n\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</ForceSuccess>\n\n\t\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t<RobotFindNextStepAction item_name=\"{item_name}\" />\n\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Please stand on \" msg2=\"{item_name}\" />\n\t\t\t\t\t\t\t\t\t\t<RetryUntilSuccesful num_attempts=\"20\">\n\t\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"2000\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<HumanPoseDetect expected_pose_left=\"OnHip\" expected_pose_right=\"OnHip\" pose_lr_check=\"both\" detected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\" pose_right_speech=\"{pose_right_speech}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ObjectLocationStatusAction x=\"{x}\" y=\"{y}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<RobotFindSetPositionAction x=\"{x}\" y=\"{y}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t\t</RetryUntilSuccesful>\n\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t</KeepRunningUntilFailure>\n\t\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Finished setting up\" />\n\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t</BlackboardCheckInt>\n\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<Nav2Client goal=\"{robot_pose}\" />\n\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Let's play the game!\" />\n\n\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t\t<ForceSuccess>\n\t\t\t\t\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t<RobotFindNextStepAction item_name=\"{item_name}\" />\n\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Please stand on \" msg2=\"{item_name}\" />\n\t\t\t\t\t\t\t\t\t<RetryUntilSuccesful num_attempts=\"200\">\n\t\t\t\t\t\t\t\t\t\t<Delay delay_msec=\"1000\">\n\t\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t\t<ObjectLocationStatusAction x=\"{x}\" y=\"{y}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<RobotFindCheckStepAction x=\"{x}\" y=\"{y}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Good job\" />\n\t\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t\t</RetryUntilSuccesful>\n\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t</KeepRunningUntilFailure>\n\t\t\t\t\t\t</ForceSuccess>\n\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Finished playing the game\" />\n\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" detect_voice=\"0\" turn_base=\"0\" />\n\t\t\t\t\t</Sequence>\n\t\t\t\t</Fallback>\n\t\t\t</Sequence>\n\t\t</Repeat>\n\t</BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a system where a robot repeatedly performs a sequence of actions. The robot will continuously check if it is holding an item, and if not, it will look for an item and pick it up. If the robot is holding an item, it will place it down. This entire sequence will repeat indefinitely.\n\nAdditionally, there is an initialization behavior represented by the \"Init\" tree, which simply prints \"Initialize\" when executed.\n\nIn summary, the behavior tree orchestrates the robot's continuous task of picking up items if they are seen, placing them down if already held, and repeating this process without a set limit.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"-1\">\n            <Sequence name=\"\">\n                <Fallback name=\"\">\n                    <Condition ID=\"HoldingItem\" name=\"Holding an Item\"/>\n                    <Sequence name=\"\">\n                        <Condition ID=\"SeeItem\" name=\"See an Item\"/>\n                        <Action ID=\"Pick\" name=\"Pick it up\"/>\n                    </Sequence>\n                </Fallback>\n                <Action ID=\"Place\" name=\"Place it\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Init\">\n        <Action ID=\"Print\" message=\"Initialize\"/>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AlwaysRunning\"/>\n        <Condition ID=\"HoldingItem\"/>\n        <SubTree ID=\"Init\"/>\n        <Action ID=\"Pick\"/>\n        <Action ID=\"Place\"/>\n        <Action ID=\"Print\">\n            <input_port name=\"message\"/>\n        </Action>\n        <Condition ID=\"SeeItem\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the movement of three robots, each with their own set of goals. The robots are labeled as robot1, robot2, and robot3, and they are assigned specific sets of goals. Each robot operates independently and attempts to reach its designated goals in a sequence. If a robot fails to reach a goal, it retries the sequence for a specified number of attempts.\n\nThe behavior tree employs parallel processing to control all three robots simultaneously. It ensures that if one robot fails to reach its goal, it will retry the sequence before moving on to the next goal. Additionally, if a robot repeatedly fails to reach a goal, it will be redirected to a backup goal.\n\nOverall, the behavior tree manages the navigation of multiple robots towards their respective goals, allowing for robust and autonomous operation while handling failures and ensuring task completion.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence>\n      <!-- Set goal -->\n      <SetBlackboard output_key=\"Goal_a\" value=\"1.298;2.056;0.000\" />\n      <SetBlackboard output_key=\"Goal_b\" value=\"5.253;1.184;0.0\" />\n      <SetBlackboard output_key=\"Goal_c\" value=\"1.557;0.364;0.00\" />\n      <SetBlackboard output_key=\"Goal_backup\" value=\"0.163;0.332;0.00\" />\n\n      <SetBlackboard output_key=\"nb2_1_Goal_a\" value=\"2.250;6.140;0.000\" />\n      <SetBlackboard output_key=\"nb2_1_Goal_b\" value=\"5.335;5.169;0.0\" />\n      <SetBlackboard output_key=\"nb2_1_Goal_c\" value=\"2.624;4.787;0.00\" />\n      <SetBlackboard output_key=\"nb2_1_Goal_backup\" value=\"0.309;4.153;0.00\" />\n\n      <SetBlackboard output_key=\"nb2_2_Goal_a\" value=\"2.537;-1.663;0.000\" />\n      <SetBlackboard output_key=\"nb2_2_Goal_b\" value=\"5.253;-2.699;0.0\" />\n      <SetBlackboard output_key=\"nb2_2_Goal_c\" value=\"2.220;-3.666;0.00\" />\n      <SetBlackboard output_key=\"nb2_2_Goal_backup\" value=\"0.456;-3.630;0.00\" />\n\n      <!-- Set joined robot name -->\n      <SetBlackboard output_key=\"robot1\" value=\"\" />\n      <SetBlackboard output_key=\"robot2\" value=\"nb2_1\" />\n      <SetBlackboard output_key=\"robot3\" value=\"nb2_2\" />\n\n      <RetryUntilSuccesful num_attempts=\"3\">  <!-- Retry once fail -->\n        <Parallel threshold=\"3\">    <!-- threshold = number of robot -->\n          \n          <!-- robot1 -->\n          <Repeat num_cycles=\"-1\">    <!-- repeat infinitely -->\n            <RetryUntilSuccesful num_attempts=\"3\">\n              <Fallback>    <!-- set goal to Goal_backup once the Sequence below fails -->\n                <Sequence>\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot1\" target=\"Goal_a\" />\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot1\" target=\"Goal_b\" />\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot1\" target=\"Goal_c\" />\n                </Sequence>\n                <SubTree ID=\"MoveRobot\" robot_num=\"robot1\" target=\"Goal_backup\" />\n              </Fallback>\n            </RetryUntilSuccesful>\n          </Repeat>\n          \n          <!-- robot2 -->\n          <Repeat num_cycles=\"-1\">\n            <RetryUntilSuccesful num_attempts=\"3\">\n              <Fallback>\n                <Sequence>\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot2\" target=\"nb2_1_Goal_b\" />\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot2\" target=\"nb2_1_Goal_c\" />\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot2\" target=\"nb2_1_Goal_a\" />\n                </Sequence>\n                <SubTree ID=\"MoveRobot\" robot_num=\"robot2\" target=\"nb2_1_Goal_backup\" />\n              </Fallback>\n            </RetryUntilSuccesful>\n          </Repeat>\n          \n          <!-- robot3 -->\n          <Repeat num_cycles=\"-1\">\n            <RetryUntilSuccesful num_attempts=\"3\">\n              <Fallback>\n                <Sequence>\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot3\" target=\"nb2_2_Goal_c\" />\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot3\" target=\"nb2_2_Goal_a\" />\n                  <SubTree ID=\"MoveRobot\" robot_num=\"robot3\" target=\"nb2_2_Goal_b\" />\n                </Sequence>\n                <SubTree ID=\"MoveRobot\" robot_num=\"robot3\" target=\"nb2_2_Goal_backup\" />\n              </Fallback>\n            </RetryUntilSuccesful>\n          </Repeat>\n\n        </Parallel>\n      </RetryUntilSuccesful>\n    </Sequence>\n  </BehaviorTree>\n\n\n  <BehaviorTree ID=\"MoveRobot\">\n    <Sequence name=\"SetGoal\">\n      <MoveBase robot=\"{robot_num}\" goal=\"{target}\" />\n    </Sequence>\n  </BehaviorTree>\n\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the task for a robot. It begins by setting its initial pose and three goals (Goal_a, Goal_b, Goal_c). The robot then follows a sequence of actions: moving to the initial pose, then sequentially moving towards Goal_a, Goal_c, and finally Goal_b. During this sequence, it periodically checks the battery status and reacts accordingly. If the battery is low, it will execute an alarm event and return to the initial pose. \n\nThis behavior tree emphasizes the robot's ability to navigate to specific locations while managing its power resources. If the battery level becomes critical, the robot prioritizes returning to its initial position over completing its set goals.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SetBlackboard output_key=\"Initial_pose\" value=\"-6.615;-7.224;-0.245\" />\n            <SetBlackboard output_key=\"Goal_a\" value=\"-4.550;0.0;-0.405\" />\n            <SetBlackboard output_key=\"Goal_b\" value=\"-0.107;-0.281;2.989\" />\n            <SetBlackboard output_key=\"Goal_c\" value=\"-1.5;1.8;0.0\" />\n            <Fallback>\n                <ReactiveSequence>\n                    <CheckBattery wait_tick=\"125\" />\n                    <Sequence>\n                        <SubTree ID=\"MoveRobot\" target=\"Initial_pose\" />\n                        <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                        <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                        <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                    </Sequence>\n                </ReactiveSequence>\n                <Sequence>\n                    <AlarmEventLED />\n                    <SubTree ID=\"MoveRobot\" target=\"Initial_pose\" />\n                </Sequence>\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <MoveBase goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic system that performs a sequence of actions. Initially, it waits for 5 seconds and then publishes a message \"Makankosappoooo!\" to the topic \"special_beam_canon\". The tree is designed with various nodes representing different actions such as arm control, battery checking, face detection, movement, speech generation, and more.\n\nThe WaitForXSeconds action introduces a delay before proceeding to the next action, while the StringPublisher action sends a specific message to a designated topic. Additionally, there are numerous other actions available in the system, including those related to arm control, battery status checking, face detection, movement control, speech generation, and more.\n\nOverall, the behavior tree orchestrates a series of actions for the robot, enabling it to perform tasks such as waiting, communicating messages, controlling its arms and torso, detecting faces, moving, and interacting through speech.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"WaitForXSeconds\" result=\"SUCCESS\" seconds=\"5\"/>\n            <Action ID=\"StringPublisher\" message=\"Makankosappoooo!\" topic=\"special_beam_canon\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\"/>\n            <input_port name=\"action_name\"/>\n        </Action>\n        <Action ID=\"CheckBattery\">\n            <output_port name=\"battery_state\" type=\"int\"/>\n            <output_port name=\"percentage\" type=\"double\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port name=\"charging_state\" type=\"int\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Action ID=\"DebugAction\">\n            <input_port name=\"string\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"Destroy\"/>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"GeneralActionlib\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"constants\">A coma separated list of constants.</input_port>\n            <output_port name=\"result\">This is a string</output_port>\n            <input_port name=\"variables\">A coma separated list of variables.</input_port>\n        </Action>\n        <Action ID=\"GetFloat64\">\n            <output_port name=\"number\" type=\"double\"/>\n            <input_port name=\"topic\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"GetInt16\">\n            <output_port name=\"number\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GetPoseArray\">\n            <input_port name=\"pose_array\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GiveFeedback\">\n            <input_port default=\"850\" name=\"almost_thr\"/>\n            <input_port name=\"correct_blocks\"/>\n            <input_port name=\"incorrect_blocks\"/>\n            <input_port default=\"0\" name=\"personality\"/>\n            <input_port name=\"score\"/>\n        </Action>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"goal_pose\"/>\n        </Action>\n        <Action ID=\"MoveTorso\">\n            <input_port name=\"angle\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"ResetVars\"/>\n        <Action ID=\"SelectBlock\">\n            <input_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <output_port name=\"block_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <input_port name=\"position_in_list\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"SelectFieldFromPoseStamped\">\n            <input_port name=\"field\"/>\n            <output_port name=\"output_val\"/>\n            <input_port name=\"pose_stamped\"/>\n        </Action>\n        <Action ID=\"SelectPose\">\n            <input_port name=\"pose_array\"/>\n            <input_port name=\"pose_stamped\"/>\n            <input_port name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"SenseScore\">\n            <output_port name=\"score\"/>\n            <input_port name=\"score_topic\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"language\"/>\n            <input_port name=\"utterance\"/>\n            <input_port name=\"voice\"/>\n        </Action>\n        <Action ID=\"StringPublisher\">\n            <input_port name=\"message\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"TimerAction\">\n            <input_port name=\"s_between_success\">Time (s) before this node returns SUCCESS. It will return FAILURE in the meanwhile</input_port>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port default=\"SUCCESS\" name=\"result\">Result after specified time: SUCCESS or FAILURE</input_port>\n            <input_port default=\"5\" name=\"seconds\">Time in seconds</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a system that involves repeated sequences of actions, with the ability to handle failures and initiate replanning. The system follows a structured approach where it checks the current state against the desired sequence, performs locomotion status checks, and initiates recovery if needed. It also includes actions related to moving towards specific goals and updating the desired sequence based on the performed action.\n\nThe tree structure consists of a main loop (Repeat) that encapsulates a Sequence containing multiple actions. These actions include LTL pre-checks, force failure handling, locomotion status checks, movement actions, and updating the desired sequence. The system is designed to handle potential failures by using fallback mechanisms and retrying certain actions for a specified number of attempts.\n\nOverall, the behavior tree represents a robust decision-making process for a system that involves complex sequences of actions, error handling, and adaptive planning based on the environment's response.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Action ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <RetryUntilSuccesful num_attempts=\"3\">\n                            <Fallback>\n                                <Action ID=\"LocomotionStatusCheck\" locomotion_status=\"{locomotion_status}\"/>\n                                <Sequence>\n                                    <Action ID=\"RecoveryStand\" locomotion_status=\"{locomotion_status}\"/>\n                                    <Delay delay_msec=\"5000\">\n                                        <Action ID=\"LocomotionStart\" locomotion_status=\"{locomotion_status}\"/>\n                                    </Delay>\n                                </Sequence>\n                            </Fallback>\n                        </RetryUntilSuccesful>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Action ID=\"MoveAction\" action=\"{action}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\" nav_goal=\"{nav_goal}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" nav_goal=\"{nav_goal}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"MoveAction\">\n            <output_port name=\"action\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n            <input_port name=\"nav_goal\"/>\n        </Action>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n            <output_port name=\"nav_goal\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree instructs an entity to perform two actions in sequence. First, it is commanded to say \"Hello World,\" and then to execute the action \"SayHello.\" The SequenceStar node ensures that the second action will be executed repeatedly until it is successful, allowing for multiple attempts if needed.",
        "output": "<root main_tree_to_execute=\"SayStuff\">\n\n    <BehaviorTree ID=\"SayStuff\">\n        <SequenceStar>\n            <Action ID=\"SaySomething\" message=\"Hello World\"/>\n            <Action ID=\"SayHello\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    \n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree depicts a series of actions for a system to execute in a specific order. The system will attempt to perform the actions \"go2\" and \"go3\" together, but if either fails, it will move on to the next set of actions. If \"go4\" fails, the system will proceed to \"go5\". Similarly, if \"go8\" fails, it will continue to \"go9\". However, if any action other than \"go1\" fails, the entire sequence will be considered a failure. This structure ensures that the system attempts each action in a predefined order and handles failures gracefully by moving on to the next action in the sequence.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback>\n            <ForceFailure>\n                <Action ID=\"go1\"/>\n            </ForceFailure>\n            <ForceFailure>\n                <Sequence>\n                    <Action ID=\"go2\"/>\n                    <Action ID=\"go3\"/>\n                </Sequence>\n            </ForceFailure>\n            <ForceFailure>\n                <Sequence>\n                    <ForceFailure>\n                        <ForceFailure>\n                            <Action ID=\"go4\"/>\n                        </ForceFailure>\n                    </ForceFailure>\n                    <Action ID=\"go5\"/>\n                </Sequence>\n            </ForceFailure>\n            <ForceFailure>\n                <Sequence>\n                    <Sequence>\n                        <Action ID=\"go6\"/>\n                        <Action ID=\"go7\"/>\n                        <ForceFailure>\n                            <Action ID=\"go8\"/>\n                        </ForceFailure>\n                    </Sequence>\n                    <Action ID=\"go9\"/>\n                </Sequence>\n            </ForceFailure>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"go4\"/>\n        <Action ID=\"go5\"/>\n        <Action ID=\"go6\"/>\n        <Action ID=\"go7\"/>\n        <Action ID=\"go8\"/>\n        <Action ID=\"go9\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to execute a sequence of actions for a task. It begins by attempting to perform two actions, \"go1\" and \"go2\", repeatedly until successful. The number of attempts is determined by the value of \"${valueQ}\". Upon successful completion of these actions, it proceeds to execute \"go3\".\n\nIn summary, the behavior tree orchestrates a series of actions, ensuring that \"go1\" and \"go2\" are executed successfully before moving on to \"go3\". If any action fails, it will be retried based on the specified number of attempts.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <RetryUntilSuccesful num_attempts=\"${valueQ}\">\n                <Sequence>\n                    <Action ID=\"go1\"/>\n                    <Action ID=\"go2\"/>\n                </Sequence>\n            </RetryUntilSuccesful>\n            <Action ID=\"go3\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement towards four different goals (Goal_a, Goal_b, Goal_c, Goal_d). The robot is programmed to first move towards Goal_a and then Goal_b in a repeated sequence for 10 cycles. This sequence can be interrupted if the \"goC\" or \"goD\" events are triggered. If interrupted, the robot will proceed to move towards Goal_c. After completing or being interrupted from the previous sequence, the robot will then move towards Goal_d.\n\nIn summary, the behavior tree outlines the robot's sequential movement towards multiple goals, with the ability to interrupt its current sequence based on specific events, ensuring adaptability in its navigation strategy.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SetBlackboard output_key=\"Goal_a\" value=\"0.00;0.00;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_b\" value=\"1.00;1.533;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_c\" value=\"1.588;2;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_d\" value=\"1.4;0.000;0.0;1.0\" />\n            <Fallback>\n                <ReactiveSequence>\n                    <InterruptEvent event=\"goC\"/>\n                    <InterruptEvent event=\"goD\"/>\n                    <Repeat num_cycles=\"10\">\n                        <Sequence>\n                            <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />            \n                            <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                        </Sequence>\n                    </Repeat>\n                </ReactiveSequence>\n                \n                <ReactiveSequence> \n                    <InterruptEvent event=\"goD\"/>         \n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                </ReactiveSequence>\n                       \n                <SubTree ID=\"MoveRobot\" target=\"Goal_d\" />\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robot. The \"MainTree\" repeatedly executes a sequence of tasks, including generating random displacement and then invoking the \"MoveAndShoot\" behavior tree to move and take a photo while handling potential failures. The \"MoveAndShoot\" behavior tree utilizes a reactive sequence to ensure the robot moves and takes a photo in a coordinated manner, with the possibility of random failure.\n\nOverall, the behavior tree controls the robot's movement and photography activities, ensuring that it continues to execute these tasks even in the face of potential failures. It demonstrates resilience by retrying failed actions and managing delays between cycles.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\n    <BehaviorTree ID=\"MoveAndShoot\">\n        <ReactiveSequence name=\"move_and_shoot_sequence\">\n            <!-- Non-uniform failure probability, good for test halting behavior of action/service -->\n            <!-- Pinged at around 10Hz -->\n            <RandomFailure probability=\"0.01\"/>\n            <!-- Test the service node -->\n            <SnapPhotoNode server_name=\"/snap_photo\" server_timeout=\"0\" topic=\"test_topic\"/>\n            <!-- Test the action node -->\n            <MoveDistanceNode server_name=\"/move_distance\" server_timeout=\"100\" cancel_timeout=\"0\" distances=\"{distances}\"/>\n        </ReactiveSequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MainTree\">\n        <Delay delay_msec=\"5\">\n            <Repeat num_cycles=\"5\">\n                <Sequence>\n                    <!-- Test remapping ports between trees -->\n                    <RandomDisplacement displacement=\"{displacement}\"/>\n                    <!-- Keep this going in case of random failure -->\n                    <RetryUntilSuccesful num_attempts=\"3\">\n                        <SubTree ID=\"MoveAndShoot\" distances=\"displacement\" node=\"node\"/>\n                    </RetryUntilSuccesful>\n                </Sequence>\n            </Repeat>\n        </Delay>\n    </BehaviorTree>\n\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robotic system. It consists of multiple actions and decorators that orchestrate the robot's behavior. The main sequence involves the robot performing a series of tasks in a loop, with each task involving movement towards specific goals. These movements are repeated 10 times for each goal.\n\nAdditionally, there are various utility actions such as waiting for a specified duration, logging messages, performing mathematical operations, subscribing to topics, publishing messages, and interacting with ROS services.\n\nFurthermore, the tree includes specialized actions for robot-specific tasks such as fire detection, extinguishing fires, window detection, takeoff, landing, and navigation to specific goals using Actionlib action servers.\n\nOverall, the behavior tree encapsulates the logic required for the robot to perform a predefined set of tasks, handle interruptions, and interact with its environment through ROS messages and services.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action name=\"WaitSeconds1\" ID=\"WaitSeconds\" duration=\"2\"/>\n            <ForceSuccess name=\"ForceSuccess1\">\n                <Repeat num_cycles=\"10\">\n                    <Action goal_name=\"stage_3_pos_final_1\" name=\"GoToGoal1\" action=\"/Make_Plan\" ID=\"UPOGoToGoalByName\" state=\"gpf1\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action name=\"WaitSeconds2\" ID=\"WaitSeconds\" duration=\"2\"/>\n            <ForceSuccess name=\"ForceSuccess2\">\n                <Repeat num_cycles=\"10\">\n                    <Action goal_name=\"stage_3_pos_final_2\" name=\"GoToGoal2\" action=\"/Make_Plan\" ID=\"UPOGoToGoalByName\" state=\"gpf2\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action name=\"WaitSeconds3\" ID=\"WaitSeconds\" duration=\"2\"/>\n            <ForceSuccess name=\"ForceSuccess3\">\n                <Repeat num_cycles=\"10\">\n                    <Action goal_name=\"stage_3_pos_final_3\" name=\"GoToGoal3\" action=\"/Make_Plan\" ID=\"UPOGoToGoalByName\" state=\"gpf3\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action name=\"WaitSecondsEnd\" ID=\"WaitSeconds\" duration=\"2\"/>\n            <ForceSuccess name=\"ForceSuccess4\">\n                <Repeat num_cycles=\"10\">\n                    <Action goal_name=\"stage_3_pos_final_4\" name=\"GoToGoal4\" action=\"/Make_Plan\" ID=\"UPOGoToGoalByName\" state=\"gpf4\"/>\n                </Repeat>\n            </ForceSuccess>\n            <Action name=\"WaitSecondsEnd\" ID=\"WaitSeconds\" duration=\"1\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CallEmptyService\">\n            <input_port type=\"std::string\" name=\"service\">ROS service name</input_port>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port type=\"bool\" name=\"input\">Input boolean value</input_port>\n        </Condition>\n        <Action ID=\"CheckKey\">\n            <input_port type=\"std::string\" name=\"no_key\">Key to determine if key to say 'no' has benn pressed</input_port>\n            <input_port type=\"std::string\" name=\"yes_key\">Key to determine if key to say 'yes' has been pressed</input_port>\n        </Action>\n        <Condition ID=\"CompareNumbers\">\n            <input_port type=\"std::string\" name=\"comparison_op\">Comparison operator. Valid operators are &lt;, >, &lt;=, >=, == and !=</input_port>\n            <input_port type=\"double\" name=\"first\">First operand</input_port>\n            <input_port type=\"double\" name=\"second\">Second operand</input_port>\n        </Condition>\n        <Condition ID=\"CompareStrings\">\n            <input_port type=\"std::string\" name=\"comparison_op\">Comparison operator. Valid operators are &lt;, >, &lt;=, >=, == and !=</input_port>\n            <input_port type=\"std::string\" name=\"first\">First operand</input_port>\n            <input_port type=\"std::string\" name=\"second\">Second operand</input_port>\n        </Condition>\n        <Action ID=\"ConcatenateStrings\">\n            <input_port type=\"std::string\" name=\"first\">First string</input_port>\n            <output_port type=\"std::string\" name=\"output\">Concatenated result string</output_port>\n            <input_port type=\"std::string\" name=\"second\">Second string</input_port>\n        </Action>\n        <Action ID=\"ConvertJsonToDouble\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"double\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToInt64\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"long\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToString\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"std::string\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertJsonToUint64\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"unsigned long\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertMessageField\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"void\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"ConvertRandomMessageField\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"void\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Decorator ID=\"CooldownMilliseconds\">\n            <input_port type=\"unsigned int\" name=\"cooldown\" default=\"0\">Cooldown time</input_port>\n        </Decorator>\n        <Decorator ID=\"CooldownSeconds\">\n            <input_port type=\"unsigned int\" name=\"cooldown\" default=\"0\">Cooldown time</input_port>\n        </Decorator>\n        <Action ID=\"CopyJson\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Input variable</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output\">Output variable to copy to</output_port>\n        </Action>\n        <Action ID=\"DebugLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Action ID=\"ErrorLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Action ID=\"FatalLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Action ID=\"FindByFieldValue\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"void\" name=\"output\">Output variable</output_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"value\">Value to search for</input_port>\n        </Action>\n        <Action ID=\"FindSubstrings\">\n            <input_port type=\"std::string\" name=\"input\">String to look into</input_port>\n            <input_port type=\"std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> > > >\" name=\"substrings\">Substrings to look for</input_port>\n        </Action>\n        <Decorator ID=\"ForEachLoop\">\n            <input_port type=\"bool\" name=\"break_on_child_failure\">Break loop on child failure?</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Input sequence</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output_element\">Output element variable</output_port>\n            <output_port type=\"unsigned long\" name=\"output_index\">Output index variable</output_port>\n        </Decorator>\n        <Action ID=\"GetJsonSize\">\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Input sequence</input_port>\n            <output_port type=\"unsigned long\" name=\"output\">Sequence size output</output_port>\n        </Action>\n        <Action ID=\"GetKeyboard\">\n            <output_port type=\"std::string\" name=\"output\">String received from keyboard</output_port>\n        </Action>\n        <Action ID=\"GetMessageField\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"GetRandomMessageField\">\n            <input_port type=\"std::string\" name=\"field\">Field to fetch</input_port>\n            <input_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"input\">Serialized ROS message</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output\">Output variable</output_port>\n        </Action>\n        <Action ID=\"GetTransformDistance\">\n            <input_port type=\"tf::StampedTransform\" name=\"input\">TF transform</input_port>\n            <output_port type=\"double\" name=\"output\">Distance form transform origin</output_port>\n        </Action>\n        <Action ID=\"GetTransformHorizontalDistance\">\n            <input_port type=\"tf::StampedTransform\" name=\"input\">TF transform</input_port>\n            <output_port type=\"double\" name=\"output\">2D distance from TF transform origin</output_port>\n        </Action>\n        <Action ID=\"GetTransformOrigin\">\n            <input_port type=\"tf::StampedTransform\" name=\"input\">TF transform</input_port>\n            <output_port type=\"double\" name=\"x\">Origin x coordinate</output_port>\n            <output_port type=\"double\" name=\"y\">Origin y coordinate</output_port>\n            <output_port type=\"double\" name=\"z\">Origin z coordinate</output_port>\n        </Action>\n        <Action ID=\"InfoLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Action ID=\"InitializeJson\">\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"output\">Output variable to initialize</output_port>\n        </Action>\n        <Action ID=\"InterpolateFloat\">\n            <input_port type=\"std::vector&lt;double, std::allocator&lt;double> >\" name=\"input_range\">Input value range.</input_port>\n            <input_port type=\"double\" name=\"input_value\">Value to interpolate.</input_port>\n            <input_port type=\"std::vector&lt;double, std::allocator&lt;double> >\" name=\"output_range\">Output value range.</input_port>\n            <output_port type=\"double\" name=\"output_value\">Interpolated value.</output_port>\n        </Action>\n        <Control ID=\"Interruptible\"/>\n        <Action ID=\"LookupTransform\">\n            <output_port type=\"tf::StampedTransform\" name=\"output\">Result transform</output_port>\n            <input_port type=\"std::string\" name=\"source_frame\">Origin TF frame</input_port>\n            <input_port type=\"std::string\" name=\"target_frame\">Target TF frame</input_port>\n            <input_port type=\"bool\" name=\"use_last_available\" default=\"0\">Use last available transform?</input_port>\n        </Action>\n        <Decorator ID=\"Loop\"/>\n        <Action ID=\"MathOperationFloat\">\n            <input_port type=\"double\" name=\"first\">First operand</input_port>\n            <input_port type=\"std::string\" name=\"operator\">Math operation. Valid operatores are: +, -, / and *</input_port>\n            <output_port type=\"double\" name=\"output\">Operation result</output_port>\n            <input_port type=\"double\" name=\"second\">Second operand</input_port>\n        </Action>\n        <Action ID=\"MathOperationInt\">\n            <input_port type=\"int\" name=\"first\">First operand</input_port>\n            <input_port type=\"std::string\" name=\"operator\">Math operation. Valid operatores are: +, -, / and *</input_port>\n            <output_port type=\"int\" name=\"output\">Operation result</output_port>\n            <input_port type=\"int\" name=\"second\">Second operand</input_port>\n        </Action>\n        <Action ID=\"MonitorStdBool\">\n            <input_port type=\"bool\" name=\"consume_msgs\" default=\"0\">Should messages be consumed?</input_port>\n            <input_port type=\"unsigned int\" name=\"queue_size\" default=\"1\">Subscriber callback queue size</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_output\">Serialized ROS message [std_msgs::Bool_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"MonitorStdFloat64\">\n            <input_port type=\"bool\" name=\"consume_msgs\" default=\"0\">Should messages be consumed?</input_port>\n            <input_port type=\"unsigned int\" name=\"queue_size\" default=\"1\">Subscriber callback queue size</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_output\">Serialized ROS message [std_msgs::Float64_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"MonitorStdInt32\">\n            <input_port type=\"bool\" name=\"consume_msgs\" default=\"0\">Should messages be consumed?</input_port>\n            <input_port type=\"unsigned int\" name=\"queue_size\" default=\"1\">Subscriber callback queue size</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_output\">Serialized ROS message [std_msgs::Int32_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"OStreamNode\">\n            <input_port type=\"std::string\" name=\"message\">String to print</input_port>\n        </Action>\n        <Decorator ID=\"OnlyOnce\"/>\n        <Action ID=\"PublishBool\">\n            <input_port type=\"bool\" name=\"data\">Auto-generated field from std_msgs::Bool_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"bool\" name=\"latch\" default=\"0\">Latch messages?</input_port>\n            <input_port type=\"unsigned int\" name=\"queue_size\" default=\"1\">Internal publisher queue size</input_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to publish to</input_port>\n        </Action>\n        <Action ID=\"PublishStdString\">\n            <input_port type=\"std::string\" name=\"data\">Auto-generated field from std_msgs::String_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"bool\" name=\"latch\" default=\"0\">Latch messages?</input_port>\n            <input_port type=\"unsigned int\" name=\"queue_size\" default=\"1\">Internal publisher queue size</input_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to publish to</input_port>\n        </Action>\n        <Action ID=\"RandomFloat\">\n            <input_port type=\"double\" name=\"max\">Max range value</input_port>\n            <input_port type=\"double\" name=\"min\">Minimum range value</input_port>\n            <output_port type=\"double\" name=\"result\">Random result value</output_port>\n        </Action>\n        <Action ID=\"RandomInteger\">\n            <input_port type=\"int\" name=\"max\">Max range value</input_port>\n            <input_port type=\"int\" name=\"min\">Minimum range value</input_port>\n            <output_port type=\"int\" name=\"result\">Random result value</output_port>\n        </Action>\n        <Action ID=\"RandomSequenceValue\">\n            <input_port type=\"std::string\" name=\"delimiter\" default=\";\">Sequence entries delimiter</input_port>\n            <output_port type=\"std::string\" name=\"output\">Result random sequence entry</output_port>\n            <input_port type=\"std::string\" name=\"sequence\">Sequence to randomize</input_port>\n        </Action>\n        <Action ID=\"SubscribeUPOGoal\">\n            <input_port type=\"bool\" name=\"consume_msgs\" default=\"0\">Should messages be consumed?</input_port>\n            <output_port type=\"upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >\" name=\"output\">Received ROS message [upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >]</output_port>\n            <input_port type=\"unsigned int\" name=\"queue_size\" default=\"1\">Subscriber callback queue size</input_port>\n            <input_port type=\"std::string\" name=\"topic\">Topic to subscribe</input_port>\n        </Action>\n        <Action ID=\"UPOFireDetection3D\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"int\" name=\"duration\">Duration</input_port>\n            <output_port type=\"bool\" name=\"fire_found\">Fire Found</output_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n            <output_port type=\"double\" name=\"x\">Fire x</output_port>\n            <output_port type=\"double\" name=\"y\">Fire x</output_port>\n            <output_port type=\"double\" name=\"z\">Fire x</output_port>\n        </Action>\n        <Action ID=\"UPOFireExtinguish\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"bool\" name=\"detect_fire\">Detect Fire</input_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_feedback\">Serialized ROS message [upo_actions::FireExtinguishFeedback_&lt;std::allocator&lt;void> >]</output_port>\n            <output_port type=\"nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>\" name=\"serialized_result\">Serialized ROS message [upo_actions::FireExtinguishResult_&lt;std::allocator&lt;void> >]</output_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOGoToGoal\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"std::string\" name=\"global_goal.header.frame_id\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"unsigned int\" name=\"global_goal.header.seq\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.orientation.w\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.orientation.x\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.orientation.y\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.orientation.z\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.position.x\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.position.y\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <input_port type=\"double\" name=\"global_goal.pose.position.z\">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOGoToGoalByName\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"std::string\" name=\"goal_name\">Name of goal</input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOLanding\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"bool\" name=\"land\">Auto-generated field from upo_actions::LandingGoal_&lt;std::allocator&lt;void> ></input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n        </Action>\n        <Action ID=\"UPOTakeOff\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n            <input_port type=\"float\" name=\"takeoff_height.data\">Auto-generated field from upo_actions::TakeOffGoal_&lt;std::allocator&lt;void> ></input_port>\n        </Action>\n        <Action ID=\"UPOWindowDetection\">\n            <input_port type=\"std::string\" name=\"action\">Actionlib action server name</input_port>\n            <input_port type=\"int\" name=\"duration\">Duration</input_port>\n            <output_port type=\"actionlib::SimpleClientGoalState\" name=\"state\">Actionlib reported state</output_port>\n            <output_port type=\"bool\" name=\"window_present\">Window Present</output_port>\n            <output_port type=\"double\" name=\"x\">Window x</output_port>\n            <output_port type=\"double\" name=\"y\">Window y</output_port>\n            <output_port type=\"double\" name=\"z\">Window z</output_port>\n        </Action>\n        <Action ID=\"WaitMilliseconds\">\n            <input_port type=\"unsigned int\" name=\"duration\" default=\"0\">Time to wait</input_port>\n        </Action>\n        <Action ID=\"WaitSeconds\">\n            <input_port type=\"unsigned int\" name=\"duration\" default=\"0\">Time to wait</input_port>\n        </Action>\n        <Action ID=\"WarnLog\">\n            <input_port type=\"std::string\" name=\"message\">Message to log</input_port>\n        </Action>\n        <Decorator ID=\"WhileSuccess\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is quite simple. It consists of two main components: \"BehaviorTree\" and \"collectTree\". The \"BehaviorTree\" contains a single action \"go1\", while the \"collectTree\" includes a sequence of actions \"go1\" followed by \"go2\". Additionally, there is a \"TreeNodesModel\" which references the \"collectTree\", \"go1\", and \"go2\".\n\nIn summary, this behavior tree defines two sets of actions - one with a single action and another with a sequence of two actions. The \"TreeNodesModel\" serves as a reference to these actions and sequences.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"go1\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"collectTree\">\n        <Sequence>\n            <Action ID=\"go1\"/>\n            <Action ID=\"go2\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <SubTree ID=\"collectTree\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree instructs an entity to perform two actions in sequence. First, it is directed to say \"Hello World\", and then to execute the action \"SayHello\". This indicates a simple task where the entity is expected to communicate a greeting message followed by another action related to saying hello.",
        "output": "<root main_tree_to_execute=\"SayStuff\">\n\n    <BehaviorTree ID=\"SayStuff\">\n        <SequenceStar>\n            <Action ID=\"SaySomething\" message=\"Hello World\"/>\n            <Action ID=\"SayHello\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    \n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines the actions and conditions for controlling a robot. The main behavior tree, \"BehaviorTree\", consists of two main sequences. The first sequence uses reactive nodes to handle the robot's gripper based on the state of three different suction cups. If the left suction cup is not active, the robot waits for 3000 milliseconds; otherwise, it activates the left valve of the gripper.\n\nThe second sequence checks the states of the suction cups and activates the corresponding valves in the gripper accordingly: left, middle, or right. \n\nAdditionally, there is another behavior tree called \"TestSensors\" that contains a sequence of conditions related to various sensors and actuators. These conditions are used to check the status of different components such as emergency stop, presence of objects, and the state of suction cups.\n\nOverall, the behavior tree controls the robot's gripper based on the state of its suction cups and includes a separate tree for testing sensors and actuators.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <ReactiveFallback>\n                <ReactiveSequence>\n                    <Inverter>\n                        <Condition ID=\"IsVentouseGauche\"/>\n                    </Inverter>\n                    <Action ID=\"Attendre\" ms=\"3000\"/>\n                </ReactiveSequence>\n                <Action ID=\"Pince\" middle_valve=\"false\" right_valve=\"false\" left_valve=\"true\"/>\n            </ReactiveFallback>\n            <Sequence>\n                <Condition ID=\"IsVentouseGauche\"/>\n                <Action ID=\"Pince\" middle_valve=\"false\" right_valve=\"false\" left_valve=\"true\"/>\n                <Condition ID=\"IsVentouseCentre\"/>\n                <Action ID=\"Pince\" middle_valve=\"true\" right_valve=\"false\" left_valve=\"false\"/>\n                <Condition ID=\"IsVentouseDroite\"/>\n                <Action ID=\"Pince\" middle_valve=\"false\" right_valve=\"true\" left_valve=\"false\"/>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"TestSensors\">\n        <Sequence>\n            <Inverter>\n                <Condition ID=\"MinuterieNonEcoulee\"/>\n            </Inverter>\n            <ForceSuccess>\n                <Condition ID=\"IsCampViolet\"/>\n            </ForceSuccess>\n            <ForceSuccess>\n                <Condition ID=\"IsArretUrgence\"/>\n            </ForceSuccess>\n            <ForceSuccess>\n                <Condition ID=\"IsTirettePresente\"/>\n            </ForceSuccess>\n            <ForceSuccess>\n                <Condition ID=\"IsPaletCentre\"/>\n            </ForceSuccess>\n            <ForceSuccess>\n                <Condition ID=\"IsPaletDroit\"/>\n            </ForceSuccess>\n            <ForceSuccess>\n                <Condition ID=\"IsPaletGauche\"/>\n            </ForceSuccess>\n            <ForceSuccess>\n                <Condition ID=\"IsVentouseCentre\"/>\n            </ForceSuccess>\n            <ForceSuccess>\n                <Condition ID=\"IsVentouseDroite\"/>\n            </ForceSuccess>\n            <ForceSuccess>\n                <Condition ID=\"IsVentouseGauche\"/>\n            </ForceSuccess>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AfficherLeScore\"/>\n        <Action ID=\"AjouterAuScore\">\n            <input_port default=\"1\" name=\"score\">Valeur à ajouter au score</input_port>\n        </Action>\n        <Action ID=\"Aller\">\n            <input_port default=\"0\" name=\"theta\">Angle du robot (en degree)</input_port>\n            <input_port default=\"0\" name=\"x\">Position absolue en X (en metre)</input_port>\n            <input_port default=\"0\" name=\"y\">Position absolue en Y (en metre)</input_port>\n        </Action>\n        <Action ID=\"Attendre\">\n            <input_port default=\"1000\" name=\"ms\">Temps en millisecondes</input_port>\n        </Action>\n        <Action ID=\"Bras\">\n            <input_port default=\"0\" name=\"angle_base\">Angle moteur au plus pres de la base</input_port>\n            <input_port default=\"0\" name=\"angle_pince\">Angle moteur au plus pres de la pince</input_port>\n        </Action>\n        <Action ID=\"DefinirLeScore\">\n            <input_port default=\"0\" name=\"score\">Valeur du score</input_port>\n        </Action>\n        <Action ID=\"DefinirTempsMinuterie\">\n            <input_port default=\"1398\" name=\"seconds\">Temps de la minuterie en secondes</input_port>\n        </Action>\n        <Action ID=\"InitialiserPosition\"/>\n        <Condition ID=\"IsArretUrgence\"/>\n        <Condition ID=\"IsCampViolet\"/>\n        <Condition ID=\"IsPaletCentre\"/>\n        <Condition ID=\"IsPaletDroit\"/>\n        <Condition ID=\"IsPaletGauche\"/>\n        <Condition ID=\"IsRobotEnMouvement\"/>\n        <Condition ID=\"IsTirettePresente\"/>\n        <Condition ID=\"IsVentouseCentre\"/>\n        <Condition ID=\"IsVentouseDroite\"/>\n        <Condition ID=\"IsVentouseGauche\"/>\n        <Action ID=\"LancerLaMinuterie\">\n            <input_port name=\"seconds\"/>\n        </Action>\n        <Condition ID=\"MinuterieNonEcoulee\"/>\n        <Action ID=\"Pince\">\n            <input_port default=\"false\" name=\"left_valve\"/>\n            <input_port default=\"false\" name=\"middle_valve\"/>\n            <input_port default=\"false\" name=\"right_valve\"/>\n        </Action>\n        <Condition ID=\"ScoreInferieurA\">\n            <input_port default=\"1\" name=\"score\">Score</input_port>\n        </Condition>\n        <Condition ID=\"ScoreSuperieurA\">\n            <input_port default=\"0\" name=\"score\">Score</input_port>\n        </Condition>\n        <SubTree ID=\"TestSensors\"/>\n        <Action ID=\"VitesseConstante\">\n            <input_port default=\"0\" name=\"angular_z\">Vitesse de rotation en rad/s</input_port>\n            <input_port default=\"0\" name=\"linear_x\">Vitesse dans le sens avant/arriere en m/s</input_port>\n            <input_port default=\"0\" name=\"linear_y\">Vitesse dans le sens droite/gauche en m/s</input_port>\n        </Action>\n        <SubTree ID=\"campJaune\"/>\n        <SubTree ID=\"campViolet\"/>\n        <SubTree ID=\"initRobot\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robotic system for executing various actions related to motion planning and manipulation. The main task involves executing a sequence of actions, starting with the \"ExecuteGroupPose\" action that specifies a goal for the robot's arm. This action is part of a Sequence node, indicating that it should be performed in a sequential manner.\n\nThe TreeNodesModel section defines several specific actions that can be executed by the robot, such as adding collision boxes or planes, planning and executing trajectories, setting joint states, shifting positions, attaching and detaching objects, and removing collisions.\n\nOverall, the behavior tree orchestrates the robot's movements and interactions with its environment, allowing it to perform complex tasks involving motion planning, manipulation, and collision handling. The \"ExecuteGroupPose\" action serves as the initial step in this process, followed by potential subsequent actions based on the robot's environment and task requirements.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action ID=\"ExecuteGroupPose\" goal=\"0 0 0 0 0 0 1\" group_name=\"arm\" is_absolute=\"0\" service_name=\"execute_group_pose\" tolerance=\"0.01\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ExecuteAddCollisionBox\">\n            <input_port default=\"1\" name=\"auto_suffix\"/>\n            <input_port default=\"box\" name=\"box_name\"/>\n            <input_port default=\"{place_pose}\" name=\"box_pose\"/>\n            <input_port default=\"0.2 0.2 0.2\" name=\"box_size\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"1\" name=\"is_absolute\">if true, the ref is the base_frame of group, otherwise the eef_frame</input_port>\n            <input_port default=\"execute_add_box\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteAddCollisionPlane\">\n            <input_port default=\"0\" name=\"auto_suffix\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"ground\" name=\"plane_name\"/>\n            <input_port default=\"0 0 1\" name=\"plane_normal\"/>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"plane_pose\">Pose</input_port>\n            <input_port default=\"execute_add_plane\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteAllPlans\">\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"all_poses\">Poses for each group to visit, seperate with | for different groups</input_port>\n            <input_port default=\"0\" name=\"allow_collision\"/>\n            <input_port default=\"panda_arm\" name=\"group_names\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"execute_all_plans\" name=\"service_name\"/>\n            <input_port default=\"1\" name=\"stamps\"/>\n        </Action>\n        <Action ID=\"ExecuteAllPoses\">\n            <input_port default=\"0\" name=\"allow_collision\"/>\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goals\">Goals for each group to reach, seperate with ;</input_port>\n            <input_port default=\"panda_arm\" name=\"group_names\">Names of groups to control, seperate with space</input_port>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"execute_all_poses\" name=\"service_name\"/>\n            <input_port default=\"1\" name=\"stamps\">Time stamps for each group reaching the goal, seperate with space</input_port>\n        </Action>\n        <Action ID=\"ExecuteAttachCollisionBox\">\n            <input_port name=\"box_name\"/>\n            <input_port name=\"box_pose\"/>\n            <input_port name=\"box_size\"/>\n            <input_port default=\"gripper\" name=\"eef_group_name\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"execute_attach_box\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteDetachCollision\">\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port name=\"obj_name\"/>\n            <input_port default=\"execute_detach_object\" name=\"service_name\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupAngularJointStates\">\n            <input_port default=\"0 0 0 0 0 0 0\" name=\"goal\"/>\n            <input_port default=\"panda_arm\" name=\"group_name\"/>\n            <input_port default=\"execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupLinearJointStates\">\n            <input_port default=\"0.04 0.04\" name=\"goal\"/>\n            <input_port default=\"hand\" name=\"group_name\"/>\n            <input_port default=\"execute_group_joint_states\" name=\"service_name\"/>\n            <input_port default=\"0.001\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupPlan\">\n            <input_port default=\"0\" name=\"allow_collision\"/>\n            <input_port default=\"panda_arm\" name=\"group_name\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"0 0 0.1 0 0 0 1;0 0 -0.1 0 0 0 1\" name=\"poses\">Trajectory poses in plan. Each pose is relevant to the last pose.</input_port>\n            <input_port default=\"execute_group_plan\" name=\"service_name\"/>\n            <input_port default=\"2\" name=\"stamp\">Time stamp of the last pose in plan</input_port>\n        </Action>\n        <Action ID=\"ExecuteGroupPose\">\n            <input_port default=\"0 0 0 0 0 0 1\" name=\"goal\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"execute_group_pose\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupPosition\">\n            <input_port default=\"0 0 0\" name=\"goal\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"execute_group_position\" name=\"service_name\"/>\n            <input_port default=\"0.005\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteGroupShift\">\n            <input_port default=\"z\" name=\"axis\">Could be x y z roll pitch yaw</input_port>\n            <input_port default=\"0\" name=\"goal\"/>\n            <input_port default=\"arm\" name=\"group_name\"/>\n            <input_port default=\"0\" name=\"is_absolute\"/>\n            <input_port default=\"execute_group_shift\" name=\"service_name\"/>\n            <input_port default=\"0.01\" name=\"tolerance\"/>\n        </Action>\n        <Action ID=\"ExecuteRemoveCollision\">\n            <input_port default=\"1\" name=\"is_exact\"/>\n            <input_port name=\"obj_name\"/>\n            <input_port default=\"execute_remove_object\" name=\"service_name\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the navigation of a robot by continuously replanning its global path through an array of poses at a rate of 1 Hz. It includes recovery actions specific to planning, control, and general system issues. The \"NavigateRecovery\" node manages the recovery process with a maximum of 6 retries. Within this, the \"NavigateWithReplanning\" sequence uses a rate controller to limit the frequency of path computation and execution. It contains recovery nodes for computing paths through poses and following the computed path. These recovery nodes handle scenarios such as goal updates and clearing costmaps.\n\nAdditionally, the \"RecoveryFallback\" handles general recovery actions including clearing both local and global costmaps, spinning the robot, waiting, and backing up in a round-robin fashion. This ensures that the robot can recover from various issues it may encounter during navigation, ultimately enhancing its robustness and reliability.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz through an array of poses continuously\n   and it also has recovery actions specific to planning / control as well as general system issues.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"0.333\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathThroughPoses\">\n            <ReactiveSequence>\n              <RemovePassedGoals input_goals=\"{goals}\" output_goals=\"{goals}\" radius=\"0.5\"/>\n              <ComputePathThroughPoses goals=\"{goals}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            </ReactiveSequence>\n            <ReactiveFallback name=\"ComputePathThroughPosesRecoveryFallback\">\n              <GoalUpdated/>\n              <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n            </ReactiveFallback>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ReactiveFallback name=\"FollowPathRecoveryFallback\">\n            <GoalUpdated/>\n            <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          </ReactiveFallback>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <RoundRobin name=\"RecoveryActions\">\n          <Sequence name=\"ClearingActions\">\n            <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </Sequence>\n          <Spin spin_dist=\"1.57\"/>\n          <Wait wait_duration=\"5\"/>\n          <BackUp backup_dist=\"0.15\" backup_speed=\"0.025\"/>\n        </RoundRobin>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot's navigation system that periodically replans its global path at 1 Hz and includes recovery actions. It consists of multiple recovery nodes to handle potential failures during navigation.\n\nThe \"NavigateWithReplanning\" sequence utilizes a rate controller to ensure the frequency of path planning, with a subsequence for computing the path to the goal using a grid-based planner. If this fails, it triggers recovery actions such as clearing the global costmap and waiting before retrying.\n\nAnother subsequence involves following the planned path using a specific controller, with recovery actions like clearing the local costmap and spinning if necessary.\n\nIf any of these sequences fail, the overall recovery node handles the situation by waiting for a duration before attempting navigation again.\n\nOverall, the behavior tree ensures robust navigation by incorporating periodic replanning and recovery mechanisms to address potential obstacles or failures in the robot's path.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"2\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"4\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ReactiveFallback name=\"PathToPoseFallback\">\n              <GoalUpdated/>\n              <RoundRobin name=\"GlobalPlannerRecoveryActions\">\n                <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n                <Wait wait_duration=\"2\"/>\n              </RoundRobin>\n            </ReactiveFallback>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"4\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ReactiveFallback name=\"FollowPathFallback\">\n            <GoalUpdated/>\n            <RoundRobin name=\"PlannerRecoveryActions\">\n              <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n              <Spin spin_dist=\"1.57\"/>\n            </RoundRobin>\n          </ReactiveFallback>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <Wait wait_duration=\"5\"/>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a series of tasks for a robot. It repeatedly executes a sequence of actions, including updating the planning scene, moving to specific locations, adjusting torso and head positions, scanning shelves, setting tray loci, updating the planning scene again, and pausing for 5 seconds. This process continues indefinitely as indicated by the num_cycles=\"-1\" attribute in the Repeat node.\n\nOverall, the robot is performing a looped set of operations that involve navigation, perception, manipulation, and coordination with its environment. The tasks seem to be related to inventory management or object manipulation within a defined space, possibly in a warehouse or similar setting.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"-1\">\n            <Sequence>\n                <TrayUpdatePlanningScene />\n                <MoveBase goal=\"2.1;-2.0;0.0\" />\n                <MoveBase goal=\"2.1;-0.0;1.57\" />\n                <Sequence>\n                    <TorsoControl relative_height=\"0.1\" />\n                    <HeadControl pitch=\"0.0\" yaw=\"90.0\" />\n                    <ScanShelves tomato_can_stocking_target_poses=\"{tomato_can_stocking_target_poses}\" />\n                    <TraySetLoci tray_name=\"shelf\" locus_poses=\"{tomato_can_stocking_target_poses}\" occupied=\"false\" />\n                    <TrayUpdatePlanningScene />\n                </Sequence>\n                <Pause time_limit_sec=\"5\" />\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robotic system to perform repetitive tasks in an indoor environment. The robot is programmed to continuously execute a sequence of actions, including moving to a specific location, adjusting its torso and head position, scanning a table for objects, processing the scan results, updating the planning scene, and pausing for specified durations between actions.\n\nSpecifically, the robot will repeatedly move to a designated location, adjust its torso and head, scan a table for objects, process the scan results to identify tomato cans, place the detected tomato cans on a tray named \"table,\" update the planning scene with the new information, and then pause before repeating the entire sequence. This behavior is designed to automate the process of identifying and handling objects on a table within the robot's operational environment.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"-1\">\n            <Sequence>\n                <!-- <MoveBase goal=\"1.4;0;0\"/> -->\n                <MoveBase goal=\"2.3;-0.1;0\"/>\n                <Sequence>\n                    <TorsoControl relative_height=\"0.95\" />\n                    <HeadControl pitch=\"0.0\" yaw=\"140.0\" />\n                    <ScanTableStartScanning />\n                    <Pause time_limit_sec=\"2\"/>\n                    <ScanTableGetResults detected_tomato_cans=\"{detected_tomato_cans}\" />\n                    <TraySetLoci tray_name=\"table\" locus_poses=\"{detected_tomato_cans}\" occupied=\"true\" />\n                    <TrayUpdatePlanningScene />\n                    <Pause time_limit_sec=\"3\"/>\n                </Sequence>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot's navigation system. It periodically replans the global path at 1 Hz and includes recovery actions in case of failures. The main sequence involves navigating with replanning, which consists of computing a path to a specific pose, following that path, and handling recovery if needed.\n\nIf there are issues with computing the path to the pose, it retries a certain number of times and performs recovery actions such as clearing the global costmap and waiting. Similarly, if there are problems with following the path, it retries and executes recovery actions like clearing the local costmap and spinning.\n\nIn case of overall failure or if the goal is updated, it enters a recovery fallback state where it waits for a specified duration before attempting navigation again. This behavior tree ensures robust navigation by incorporating periodic replanning and recovery strategies to handle unexpected obstacles or changes in the environment.",
        "output": "\n<!--\n  This Behavior Tree replans the global path periodically at 1 Hz and it also has\n  recovery actions.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"2\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"4\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ReactiveFallback name=\"PathToPoseFallback\">\n              <GoalUpdated/>\n              <RoundRobin name=\"GlobalPlannerRecoveryActions\">\n                <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n                <Wait wait_duration=\"2\"/>\n              </RoundRobin>\n            </ReactiveFallback>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"4\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ReactiveFallback name=\"FollowPathFallback\">\n            <GoalUpdated/>\n            <RoundRobin name=\"PlannerRecoveryActions\">\n              <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n              <Spin spin_dist=\"1.57\"/>\n            </RoundRobin>\n          </ReactiveFallback>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <Wait wait_duration=\"5\"/>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a robotic task of moving from bin A to bin B and picking an item. It consists of three main components: MainTree, MoveToPredefinedPoint, and PickingItem. \n\nIn the MainTree, the robot is programmed to first execute the MoveToPredefinedPoint behavior followed by the PickingItem behavior in sequence.\n\nThe MoveToPredefinedPoint behavior involves the robot performing the \"go1\" action to move from bin A to bin B.\n\nThe PickingItem behavior entails the robot executing the \"AdjustTCPOrientation\" action to adjust its tool center point orientation for picking up an item.\n\nOverall, the behavior tree orchestrates the sequential execution of moving from one location to another and then performing a specific action at the destination.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"move from bin A to bin B\">\n            <SubTree ID=\"MoveToPredefinedPoint\"/>\n            <SubTree ID=\"PickingItem\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MoveToPredefinedPoint\">\n        <Sequence name=\"move from bin A to bin B\">\n           <Action ID=\"go1\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"PickingItem\">\n        <Action ID=\"AdjustTCPOrientation\"/>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AdjustTCPOrientation\"/>\n        <Action ID=\"LinearMove\"/>\n        <Action ID=\"go1\"/>\n        <SubTree ID=\"MoveToPredefinedPoint\"/>\n        <SubTree ID=\"PickingItem\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to perform a simple task. It first checks if 5 seconds have passed, and if the condition is met, it then proceeds to turn on an LED. This suggests that the behavior tree is likely part of a system where an action needs to be performed after a certain time interval has elapsed.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Condition ID=\"Have5sPassed\"/>\n            <Action ID=\"TurnLedOn\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Condition ID=\"Have5sPassed\"/>\n        <Action ID=\"TurnLedOn\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree encompasses a complex set of tasks for an AI-controlled entity. It includes various sub-trees for different activities such as handling alarms, combat, fulfilling needs like hunger, thirst, and sleep, performing specific jobs like butchering animals, dyeing animals, harvesting, hauling multiple items, leading animals to pasture, standard jobs, and taming animals. Additionally, it involves mission-related tasks, picking up bandages, training, and supervising training.\n\nThe main tree orchestrates these activities by prioritizing alarm response, combat, mission-related actions, fulfilling basic needs, executing standard jobs, and other miscellaneous tasks. The behavior tree is designed to provide the AI with a comprehensive set of behaviors to handle diverse scenarios and requirements within its environment, ensuring it can effectively respond to changing conditions and perform a wide range of tasks autonomously.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"AlarmTree\">\n        <SequenceStar>\n            <Condition ID=\"Alarm\"/>\n            <Condition ID=\"IsCivilian\"/>\n            <Action ID=\"AbortJob\"/>\n            <Fallback>\n                <SequenceStar>\n                    <Condition ID=\"IsInSafeRoom\"/>\n                    <Action ID=\"RandomMove\"/>\n                </SequenceStar>\n                <SequenceStar>\n                    <Action ID=\"GetSafeRoomPosition\"/>\n                    <Action ID=\"Move\"/>\n                </SequenceStar>\n            </Fallback>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Combat\">\n        <SequenceStar>\n            <Fallback>\n                <Condition ID=\"IsInCombat\"/>\n                <Condition ID=\"HasHuntTarget\"/>\n            </Fallback>\n            <Action ID=\"AbortJob\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"GetTarget\"/>\n                    <Action ID=\"Move\"/>\n                    <Sequence>\n                        <Condition ID=\"TargetAdjacent\"/>\n                        <Action ID=\"AttackTarget\"/>\n                    </Sequence>\n                </SequenceStar>\n            </ForceSuccess>\n            <Condition ID=\"IsInCombat\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"GetUniform\">\n        <SequenceStar name=\"GetUniform\">\n            <Action ID=\"CheckUniform\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Hunger\">\n        <SequenceStar>\n            <Condition ID=\"IsHungry\"/>\n            <Sequence>\n                <SequenceStar name=\"Hunger\">\n                    <Action ID=\"FindFood\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"PickUpItem\"/>\n                    <ForceSuccess>\n                        <SequenceStar>\n                            <Action ID=\"FindDining\"/>\n                            <Action ID=\"Move\"/>\n                        </SequenceStar>\n                    </ForceSuccess>\n                    <Action ID=\"Eat\"/>\n                </SequenceStar>\n                <Condition ID=\"IsFull\"/>\n            </Sequence>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobButcherAnimal\">\n        <BB_Precondition expected=\"ButcherAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ButcherAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobDyeAnimal\">\n        <BB_Precondition expected=\"DyeAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitJob\"/>\n                    <Action ID=\"ClaimItems\"/>\n                    <SubTree ID=\"MoveAllItemsToJob\"/>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"DyeAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobHarvestAnimal\">\n        <BB_Precondition expected=\"HarvestAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"HarvestAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobHaulMultiple\">\n        <BB_Precondition expected=\"HauleMultipleItems\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitJob\"/>\n                    <Action ID=\"FindTool\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"EquipTool\"/>\n                    <Inverter>\n                        <Sequence>\n                            <Inverter>\n                                <Condition ID=\"AllPickedUp\"/>\n                            </Inverter>\n                            <Sequence>\n                                <Action ID=\"Move\"/>\n                                <Action ID=\"PickUpItem\"/>\n                            </Sequence>\n                            <Action ID=\"ReturnAlwaysRunning\"/>\n                        </Sequence>\n                    </Inverter>\n                    <Condition ID=\"AllPickedUp\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"DropAllItems\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobLeadAnimalToPasture\">\n        <BB_Precondition expected=\"LeadAnimalToPasture\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobStandard\">\n        <Fallback>\n            <SequenceStar name=\"StandardJobs\">\n                <Action ID=\"InitJob\"/>\n                <Action ID=\"ClaimItems\"/>\n                <Action ID=\"FindTool\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"EquipTool\"/>\n                <SubTree ID=\"MoveAllItemsToJob\"/>\n                <Action ID=\"GetWorkPosition\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"Work\"/>\n                <Action ID=\"FinishJob\"/>\n            </SequenceStar>\n            <Action ID=\"AbortJob\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobTameAnimal\">\n        <BB_Precondition expected=\"TameAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"TameAnimal\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Jobs\">\n        <SequenceStar>\n            <Fallback>\n                <Action ID=\"CheckUniform\"/>\n                <Action ID=\"GetJob\"/>\n            </Fallback>\n            <FallbackStar>\n                <SubTree ID=\"JobButcherAnimal\"/>\n                <SubTree ID=\"JobDyeAnimal\"/>\n                <SubTree ID=\"JobLeadAnimalToPasture\"/>\n                <SubTree ID=\"JobHarvestAnimal\"/>\n                <SubTree ID=\"JobTameAnimal\"/>\n                <SubTree ID=\"JobHaulMultiple\"/>\n                <SubTree ID=\"JobStandard\"/>\n            </FallbackStar>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback>\n            <SubTree ID=\"AlarmTree\"/>\n            <SubTree ID=\"Combat\"/>\n            <SubTree ID=\"Mission\"/>\n            <FallbackStar name=\"Needs\">\n                <SubTree ID=\"Hunger\"/>\n                <SubTree ID=\"Thirst\"/>\n                <SubTree ID=\"Sleepy\"/>\n            </FallbackStar>\n            <FallbackStar name=\"GnomeStandard\">\n                <FallbackStar>\n                    <SubTree ID=\"PickUpBandages\"/>\n                    <SubTree ID=\"Training\"/>\n                    <SubTree ID=\"Trainer\"/>\n                </FallbackStar>\n                <SubTree ID=\"Jobs\"/>\n                <Action ID=\"RandomMove\"/>\n            </FallbackStar>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Mission\">\n        <SequenceStar>\n            <Condition ID=\"IsOnMission\"/>\n            <Action ID=\"AbortJob\"/>\n            <Action ID=\"GetExitPosition\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"LeaveForMission\"/>\n            <Action ID=\"DoMission\"/>\n            <Action ID=\"ReturnFromMission\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MoveAllItemsToJob\">\n        <Sequence>\n            <Inverter>\n                <Sequence>\n                    <Inverter>\n                        <Condition ID=\"AllItemsInPlaceForJob\"/>\n                    </Inverter>\n                    <SequenceStar>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"PickUpItem\"/>\n                        <Action ID=\"GetItemDropPosition\"/>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"DropItem\"/>\n                    </SequenceStar>\n                    <Action ID=\"ReturnAlwaysRunning\"/>\n                </Sequence>\n            </Inverter>\n            <Condition ID=\"AllItemsInPlaceForJob\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"OldMoveAllItemsToJob\">\n        <FallbackStar>\n            <Condition ID=\"AllItemsInPlaceForJob\"/>\n            <RetryUntilSuccesful num_attempts=\"20\">\n                <Sequence>\n                    <SequenceStar>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"PickUpItem\"/>\n                        <Fallback>\n                            <Action ID=\"GetItemDropPosition\"/>\n                            <Action ID=\"DropItem\"/>\n                        </Fallback>\n                        <Fallback>\n                            <Action ID=\"Move\"/>\n                            <Action ID=\"DropItem\"/>\n                        </Fallback>\n                        <Action ID=\"DropItem\"/>\n                    </SequenceStar>\n                    <Condition ID=\"AllItemsInPlaceForJob\"/>\n                </Sequence>\n            </RetryUntilSuccesful>\n            <ForceFailure>\n                <Action ID=\"AbortJob\"/>\n            </ForceFailure>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"PickUpBandages\">\n        <SequenceStar>\n            <Action ID=\"CheckBandages\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"PickUpItem\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Sleepy\">\n        <SequenceStar name=\"Sleep\">\n            <Condition ID=\"IsSleepy\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"FindBed\"/>\n                    <Action ID=\"Move\"/>\n                </SequenceStar>\n            </ForceSuccess>\n            <Action ID=\"Sleep\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Thirst\">\n        <SequenceStar>\n            <Condition ID=\"IsThirsty\"/>\n            <Sequence>\n                <SequenceStar name=\"Thirst\">\n                    <Action ID=\"FindDrink\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"PickUpItem\"/>\n                    <ForceSuccess>\n                        <SequenceStar>\n                            <Action ID=\"FindDining\"/>\n                            <Action ID=\"Move\"/>\n                        </SequenceStar>\n                    </ForceSuccess>\n                    <Action ID=\"Drink\"/>\n                </SequenceStar>\n                <Condition ID=\"IsDrinkFull\"/>\n            </Sequence>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Trainer\">\n        <SequenceStar name=\"Trainer\">\n            <Condition ID=\"IsTrainer\"/>\n            <Action ID=\"FindTrainerPosition\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"SuperviseTraining\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Training\">\n        <SequenceStar name=\"Training\">\n            <Condition ID=\"IsTrainingTime\"/>\n            <Action ID=\"FindTrainingGround\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"Train\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AbortJob\"/>\n        <Condition ID=\"Alarm\"/>\n        <SubTree ID=\"AlarmTree\"/>\n        <Condition ID=\"AllItemsInPlaceForJob\"/>\n        <Condition ID=\"AllPickedUp\"/>\n        <Action ID=\"AttackTarget\"/>\n        <Action ID=\"ButcherAnimal\"/>\n        <Action ID=\"CheckBandages\"/>\n        <Action ID=\"CheckUniform\"/>\n        <Action ID=\"ClaimItems\"/>\n        <SubTree ID=\"Combat\"/>\n        <Action ID=\"DoMission\"/>\n        <Action ID=\"Drink\"/>\n        <Action ID=\"DropAllItems\"/>\n        <Action ID=\"DropItem\"/>\n        <Action ID=\"DyeAnimal\"/>\n        <Action ID=\"Eat\"/>\n        <Action ID=\"EnterMap\"/>\n        <Action ID=\"EquipTool\"/>\n        <Action ID=\"EquipUniform\"/>\n        <Action ID=\"FinalMoveAnimal\"/>\n        <Action ID=\"FindBed\"/>\n        <Action ID=\"FindDining\"/>\n        <Action ID=\"FindDrink\"/>\n        <Action ID=\"FindFood\"/>\n        <Action ID=\"FindTool\"/>\n        <Action ID=\"FindTrainerPosition\"/>\n        <Action ID=\"FindTrainingGround\"/>\n        <Action ID=\"FinishJob\"/>\n        <Action ID=\"GetExitPosition\"/>\n        <Action ID=\"GetItemDropPosition\"/>\n        <Action ID=\"GetJob\"/>\n        <Action ID=\"GetSafeRoomPosition\"/>\n        <Action ID=\"GetTarget\"/>\n        <SubTree ID=\"GetUniform\"/>\n        <Action ID=\"GetWorkPosition\"/>\n        <Action ID=\"GrabAnimal\"/>\n        <Action ID=\"HarvestAnimal\"/>\n        <Condition ID=\"HasHuntTarget\"/>\n        <SubTree ID=\"Hunger\"/>\n        <Action ID=\"InitAnimalJob\"/>\n        <Action ID=\"InitButcherJob\"/>\n        <Action ID=\"InitJob\"/>\n        <Condition ID=\"IsButcherJob\"/>\n        <Condition ID=\"IsCivilian\"/>\n        <Condition ID=\"IsDrinkFull\"/>\n        <Condition ID=\"IsFull\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInCombat\"/>\n        <Condition ID=\"IsInSafeRoom\"/>\n        <Condition ID=\"IsOnMission\"/>\n        <Condition ID=\"IsSleepy\"/>\n        <Condition ID=\"IsThirsty\"/>\n        <Condition ID=\"IsTrainer\"/>\n        <Condition ID=\"IsTrainingTime\"/>\n        <Condition ID=\"IsVeryHungry\"/>\n        <Condition ID=\"IsVeryThirsty\"/>\n        <SubTree ID=\"JobButcherAnimal\"/>\n        <SubTree ID=\"JobDyeAnimal\"/>\n        <SubTree ID=\"JobHarvestAnimal\"/>\n        <SubTree ID=\"JobHaulMultiple\"/>\n        <SubTree ID=\"JobLeadAnimalToPasture\"/>\n        <SubTree ID=\"JobStandard\"/>\n        <SubTree ID=\"JobTameAnimal\"/>\n        <SubTree ID=\"Jobs\"/>\n        <Action ID=\"LeaveForMission\"/>\n        <Action ID=\"LeaveMap\"/>\n        <SubTree ID=\"Mission\"/>\n        <Action ID=\"Move\"/>\n        <SubTree ID=\"MoveAllItemsToJob\"/>\n        <SubTree ID=\"OldMoveAllItemsToJob\"/>\n        <SubTree ID=\"PickUpBandages\"/>\n        <Action ID=\"PickUpItem\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"ReleaseAnimal\"/>\n        <Action ID=\"ReturnAlwaysRunning\"/>\n        <Action ID=\"ReturnFromMission\"/>\n        <Action ID=\"Sleep\"/>\n        <SubTree ID=\"Sleepy\"/>\n        <Action ID=\"SuperviseTraining\"/>\n        <Action ID=\"TameAnimal\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n        <SubTree ID=\"Thirst\"/>\n        <Action ID=\"Train\"/>\n        <SubTree ID=\"Trainer\"/>\n        <SubTree ID=\"Training\"/>\n        <Action ID=\"UniformCleanUp\"/>\n        <Action ID=\"Work\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic task sequence. The robot is programmed to perform a series of actions in a specific order. First, it checks its battery level, then opens its gripper, approaches an object, and finally closes its gripper. This indicates a simple pick-and-place operation where the robot ensures it has enough battery, prepares to grasp an object by opening the gripper, moves towards the object, and once in position, closes the gripper to secure the object.",
        "output": " <root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <CheckBattery   name=\"check_battery\"/>\n            <OpenGripper    name=\"open_gripper\"/>\n            <ApproachObject name=\"approach_object\"/>\n            <CloseGripper   name=\"close_gripper\"/>\n        </Sequence>\n     </BehaviorTree>\n </root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement and spinning actions. Initially, the robot is given three goals (Goal_a, Goal_b, Goal_c) to reach sequentially. If it receives the \"gohome\" event, it interrupts its current sequence. The robot then repeats a sequence of moving towards Goal_a, spinning, moving towards Goal_b, and spinning, for 10 cycles. After completing or interrupting this repetition, the robot moves towards Goal_c.\n\nThe \"MoveRobot\" behavior tree defines the sequence for setting the goal and using the navigation client to move towards the specified target location. The \"SpinRobot\" behavior tree specifies the sequence for the robot to perform a spinning action with a spin distance of 10 units.\n\nIn summary, the behavior tree controls the robot's movements, including reaching specific goals, performing spinning actions, and handling interruptions, ultimately ensuring the robot completes its tasks efficiently.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SetBlackboard output_key=\"Goal_a\" value=\"0.00;0.00;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_b\" value=\"1.00;1.533;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_c\" value=\"1.588;2;0.0;1.0\" />\n            <Fallback>\n                <ReactiveSequence>\n                    <InterruptEvent event=\"gohome\"/>\n                    <Repeat num_cycles=\"10\">\n                        <Sequence>\n                            <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                            <SubTree ID=\"SpinRobot\"/>\n                            \n                            <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                                                        <SubTree ID=\"SpinRobot\"/>\n                        </Sequence>\n                    </Repeat>\n                </ReactiveSequence>\n                <Sequence>          \n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                </Sequence>\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n    \n    <BehaviorTree ID=\"SpinRobot\">\n        <Sequence name=\"SetSpin\">\n            <Spinbot spin_dis= \"10\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a game of hide and seek for a robot. The robot is programmed to count to 10, then search for a person hiding. It will continuously scan its surroundings while looking for the hidden person. If it detects the person, it will announce that it has found them. If not, it will continue searching and encouraging the person to come out. The robot's actions include speaking aloud, spinning, tracking movements, and using object detection to find the hidden person.\n\nThe main sequence involves the robot counting, searching, and reacting based on whether it finds the hidden person or not. This sequence is repeated 10 times, indicating the robot will play multiple rounds of the game. Additionally, there is a sub-tree named \"MoveRobot\" which handles the navigation towards specific goals during the search process. Overall, the behavior tree outlines the steps for the robot to engage in an interactive game of hide and seek.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Repeat num_cycles=\"10\">\n\t\t\t<Sequence>\n\t\t\t\t<Delay delay_msec=\"1000\">\n\t\t\t\t\t<PoseDetectionControlAction enable=\"true\" />\n\t\t\t\t</Delay>\n\t\t\t\t<Nav2ClearGlobalCostMap />\n\t\t\t\t<RobotSeekInitAction game_file=\"robot_seek_1.json\" />\n\t\t\t\t<TrackAction mode=\"None\" rate=\"2\" />\n\t\t\t\t<TextToSpeechActionClient msg=\"Let's play hide and seek!\" />\n\t\t\t\t<TextToSpeechActionClient msg=\"I'll count to 10 while you go and hide.\" />\n\t\t\t\t<RobotSpin angle=\"180\" velocity=\"0.8\" />\n\t\t\t\t<TrackAction mode=\"LookDown\" rate=\"2\" />\n\t\t\t\t<TextToSpeechActionClient msg=\"1,2,3,4,5,6,7,8,9,10! Ready or not here I come!\" />\n\t\t\t\t<TrackAction mode=\"Scan\" rate=\"2\" />\n\t\t\t\t<RobotSpin angle=\"-180\" velocity=\"0.8\" />\n\n\t\t\t\t<SetBlackboard output_key=\"found\" value=\"0\" />\n\t\t\t\t<Fallback>\n\t\t\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t\t\t<ReactiveSequence>\n\t\t\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t\t<Inverter>\n\t\t\t\t\t\t\t\t\t<Fallback ID=\"Detection\">\n\t\t\t\t\t\t\t\t\t\t<ObjectDetectionAction class=\"person\" pose=\"detected_Pose\" min_confidence=\"0.85\"\n\t\t\t\t\t\t\t\t\t\t\tmin_detect_count=\"4\" />\n\t\t\t\t\t\t\t\t\t\t<!--   -->HumanPoseDetect pose_lr_check=\"presence\" expected_pose_left=\"\" expected_pose_right=\"\"\n\t\t\t\t\t\t\t\t\t\t\tdetected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\"\n\t\t\t\t\t\t\t\t\t\t\tpose_right_speech=\"{pose_right_speech}\" / -->\n\t\t\t\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t\t\t</Inverter>\n\t\t\t\t\t\t\t\t<ForceFailure>\n\t\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"found\" value=\"1\" />\n\t\t\t\t\t\t\t\t</ForceFailure>\n\t\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t<RobotSeekNextSearchPose next_goal=\"{next_goal}\" goal_speech=\"{goal_speech}\"\n\t\t\t\t\t\t\t\t\tspin_at_goal=\"{spin_at_goal}\" scan_at_goal=\"{scan_at_goal}\" />\n\t\t\t\t\t\t\t\t<TrackAction mode=\"Scan\" rate=\"1\" />\n\t\t\t\t\t\t\t\t<SubTree ID=\"MoveRobot\" target=\"next_goal\" />\n\t\t\t\t\t\t\t\t<!-- TextToSpeechActionClient msg=\"{goal_speech}\" / -->\n\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Are you over here?\" />\n\t\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{spin_at_goal}\" value_B=\"1\" return_on_mismatch=\"SUCCESS\">\n\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Off\" rate=\"0\" />\n\t\t\t\t\t\t\t\t\t\t<RobotSpin angle=\"359\" velocity=\"0.5\" />\n\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{scan_at_goal}\" value_B=\"1\" return_on_mismatch=\"SUCCESS\">\n\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t<TrackAction mode=\"Scan\" rate=\"2\" />\n\t\t\t\t\t\t\t\t\t\t<ScanWaitAction />\n\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"I don't see you.\" />\n\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t</ReactiveSequence>\n\t\t\t\t\t</KeepRunningUntilFailure>\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<BlackboardCheckInt value_A=\"{found}\" value_B=\"1\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t<TrackAction mode=\"Track\" rate=\"3\" />\n\t\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Yay, I found you!\" />\n\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t\t</Sequence>\n\t\t\t\t</Fallback>\n\t\t\t\t<BlackboardCheckInt value_A=\"{found}\" value_B=\"0\" return_on_mismatch=\"SUCCESS\">\n\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t<TextToSpeechActionClient msg=\"Come out come out where ever you are!\" />\n\t\t\t\t\t</Sequence>\n\t\t\t\t</BlackboardCheckInt>\n\t\t\t</Sequence>\n\t\t</Repeat>\n\t</BehaviorTree>\n\n\t<BehaviorTree ID=\"MoveRobot\">\n\t\t<Sequence name=\"SetGoal\">\n\t\t\t<Nav2Client goal=\"{target}\" />\n\t\t</Sequence>\n\t</BehaviorTree>\n</root>\n\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a sequence for a robot to move to a specific waypoint. It first retrieves the pose of the specified waypoint using the GetPoseFromWp action, and then uses the Move action to navigate to that pose. This behavior tree essentially orchestrates the process of moving the robot to a designated location based on the given waypoint.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n   <BehaviorTree ID=\"MainTree\">\n      <Sequence name=\"move\">\n        <GetPoseFromWp  name=\"get_pose_from_wp\" wp_id=\"{arg0}\" wp_pose=\"{pose}\"/>\n        <Move name=\"move\" goal=\"{pose}\"/>\n      </Sequence>\n   </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the task for a robot to search for an object on a shelf. Initially, the robot is directed to a predefined location near the shelves. While moving towards the shelves, it simultaneously attempts to identify the target object and navigate to the designated position. Once at the shelves, the robot conducts a parallel operation of scanning for the specified object while also checking if the object is perceived. The overall goal is to efficiently locate the demanded object on the shelves by combining movement, perception, and scanning tasks in a coordinated manner.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n   <BehaviorTree ID=\"MainTree\">\n      <Sequence name=\"shelf_search\">\n        <!-- We know where to search from the beginning -->\n        <GetSearchPose  name=\"get_search_pose\" location=\"shelf\" wp_pose=\"{pose}\"/>\n        <!-- Move to the shelves while finding out what to search -->\n        <Parallel success_threshold=\"2\" failure_threshold=\"1\">\n          <!-- Target object was already published in a topic -->\n          <GetSearchObject name=\"get_search_object\" object_id=\"{object}\"/> \n          <Move name=\"move\" goal=\"{pose}\"/>\n        </Parallel>\n        <!-- Scanning until demanded object is found -->\n        <Parallel success_threshold=\"1\" failure_threshold=\"1\">\n          <isObjectPerceived name=\"is_object_perceived\" target=\"{object}\"/> \n          <Scan name=\"scan\" mode=\"shelving\"/>\n        </Parallel>\n      </Sequence>\n   </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robotic system's path planning and execution. It begins by computing a path using the global planner (ComputePathToPose) and then runs two sub-branches in parallel. The first sub-branch involves following the computed path using the local planner, while the second sub-branch controls the rate at which new paths are computed and updates the path.\n\nThe goal for the global planner and the resulting path are stored and communicated through the blackboard. The rate at which the path is recomputed can be adjusted using the hz parameter in the RateController node.\n\nOverall, this behavior tree manages the coordination of path planning and execution for a robotic system, ensuring that it continuously computes and follows an optimal path while allowing for dynamic updates to the path based on environmental changes.",
        "output": "<!--\n  This Behavior Tree first computes a path using the global planner (ComputePathToPose).\n  Then, it runs two sub-branches in parallel. The first sub-branch is a FollowPath\n  operation (the local planner). In parallel, there is a rate controlled execution of\n  FollowPath (the global planner). Each time a new path is computed, the path update\n  is sent to the local planner. The right branch, which is the rate controlled\n  ComputePathToPose, always returns RUNNING. Because the Parallel node uses a\n  threshold of 1, whenever the FollowPath returns SUCCESS or FAILURE, the parallel\n  node will return this result.\n\n  The goal (input to the global planner) and the resulting path (output of the global\n  planner and input to the local planner) are passed on the blackboard.\n\n  The rate at which the ComputePathToPose operation is invoked can be controlled with\n  the hz parameter to the RateController node.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <SequenceStar name=\"root\">\n      <ComputePathToPose goal=\"${goal}\" path=\"${path}\"/>\n      <ParallelNode threshold=\"1\">\n        <FollowPath path=\"${path}\"/>\n        <Sequence>\n          <RateController hz=\"1.0\">\n            <ComputePathToPose goal=\"${goal}\" path=\"${path}\"/>\n          </RateController>\n          <UpdatePath/>\n        </Sequence>\n      </ParallelNode>\n    </SequenceStar>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through a series of waypoints. It uses the NavigateToPose action to move towards each waypoint, and if the navigation fails, it skips to the next waypoint. The process continues until all the goals (waypoints) are achieved.\n\nThe behavior tree starts by checking if all the goals have been achieved. If not, it enters a loop where it retrieves the next goal, attempts to navigate to that goal using NavigateToPose, and marks the current goal as achieved upon successful navigation. If the navigation fails, it moves on to the next goal without marking the current one as achieved.\n\nOverall, this behavior tree orchestrates the robot's movement through multiple waypoints, ensuring that it attempts to reach each waypoint and progresses to the next one if navigation to the current waypoint fails.",
        "output": "\n<!--\n  This Behavior Tree processes each of the given waypoints with NavigateToPose and skip to next waypoint if NavigateToPose is failed.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <ReactiveFallback name=\"FollowWaypoints\">\n      <AllGoalsAchieved goal_achieved=\"{goal_achieved}\"/>\n      <KeepRunningUntilFailure>\n        <ReactiveSequence>\n          <GetNextGoal goals=\"{goals}\" goal=\"{goal}\" goal_achieved=\"{goal_achieved}\"/>\n          <ForceSuccess>\n            <NavigateToPose goal=\"{goal}\"/>\n          </ForceSuccess>\n          <SetBlackboard output_key=\"goal_achieved\" value=\"true\"/>\n        </ReactiveSequence>\n      </KeepRunningUntilFailure>\n    </ReactiveFallback>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree describes a recovery system for a robot navigation task. The robot is programmed to navigate towards a goal while handling potential failures and recovering from them. \n\nThe RecoveryNode specifies the number of retries allowed for recovery actions. Within this, the Sequence \"NavigateWithReplanning\" uses a RateController to manage the frequency of execution and incorporates fallback behaviors such as checking if the goal is reached, computing a new path to the goal, and clearing the costmap. After this, the robot follows the computed path.\n\nIn case of failure, the RecoveryActions sequence is triggered, which includes clearing the local and global costmaps to ensure accurate localization and planning. This recovery mechanism allows the robot to handle unexpected situations and continue its navigation task effectively.\n\nOverall, the behavior tree ensures robust navigation by incorporating recovery strategies to address issues that may arise during the navigation process.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\">\n      <Sequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <Fallback>\n            <GoalReached/>\n            <ComputePathToPose goal=\"${goal}\" path=\"${path}\"/>\n            <ClearEntireCostmap service_name=\"/global_costmap/clear_entirely_global_costmap\"/>\n          </Fallback>\n        </RateController>\n        <FollowPath path=\"${path}\"/>\n      </Sequence>\n      <SequenceStar name=\"RecoveryActions\">\n        <ClearEntireCostmap service_name=\"/local_costmap/clear_entirely_local_costmap\"/>\n        <ClearEntireCostmap service_name=\"/global_costmap/clear_entirely_global_costmap\"/>\n      </SequenceStar>\n    </RecoveryNode>\n  </BehaviorTree>\n</root>\n\n<!-- <root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n      <PipelineSequence name=\"NavigateWithReplanning\">\n        <RateController hz=\"1.0\">\n          <RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n            <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n            <ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          </RecoveryNode>\n        </RateController>\n        <RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n          <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n        </RecoveryNode>\n      </PipelineSequence>\n      <ReactiveFallback name=\"RecoveryFallback\">\n        <GoalUpdated/>\n        <SequenceStar name=\"RecoveryActions\">\n          <ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\"/>\n          <ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\"/>\n          <Wait wait_duration=\"5\"/>\n        </SequenceStar>\n      </ReactiveFallback>\n    </RecoveryNode>\n  </BehaviorTree>\n</root> -->"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a complex sequence of actions for a robotic system. It involves multiple levels of error handling and recovery mechanisms. The main sequence is repeated for a specified number of cycles. Within each cycle, several actions are performed in a specific order.\n\nThe actions include checking the current state against a desired sequence, requesting replanning at different levels, checking and starting locomotion, moving the robot to a specified navigation goal, and updating the action sequence based on the current state and desired sequence.\n\nThe tree also incorporates various fallback and retry mechanisms to handle potential failures during the execution of actions. These mechanisms ensure that the robot can recover from errors and continue executing its tasks effectively.\n\nOverall, the behavior tree orchestrates a robust decision-making process for the robot, encompassing error detection, recovery, and task execution within a repetitive framework.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Action ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <RetryUntilSuccesful num_attempts=\"3\">\n                            <Fallback>\n                                <Action ID=\"LocomotionStatusCheck\" locomotion_status=\"{locomotion_status}\"/>\n                                <Sequence>\n                                    <Action ID=\"RecoveryStand\" locomotion_status=\"{locomotion_status}\"/>\n                                    <Delay delay_msec=\"5000\">\n                                        <Action ID=\"LocomotionStart\" locomotion_status=\"{locomotion_status}\"/>\n                                    </Delay>\n                                </Sequence>\n                            </Fallback>\n                        </RetryUntilSuccesful>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Action ID=\"MoveAction\" action=\"{action}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\" nav_goal=\"{nav_goal}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" nav_goal=\"{nav_goal}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"MoveAction\">\n            <output_port name=\"action\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n            <input_port name=\"nav_goal\"/>\n        </Action>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n            <output_port name=\"nav_goal\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree defines a complex sequence of actions for a robotic system. The system will repeat the sequence a specified number of times and perform various reactive and fallback behaviors based on input conditions and events.\n\nThe sequence involves multiple levels of decision-making and action execution, including checking and updating the state of a Linear Temporal Logic (LTL) system, handling fake detection inputs, requesting replanning at different levels, switching between different types of actions (move, stay, start training, terminate training), and updating the LTL state and action sequences.\n\nThe tree also includes a variety of actions such as moving, guiding, staying, recovering, picking, and transitioning, each with specific input and output ports.\n\nOverall, the behavior tree orchestrates a sophisticated decision-making process for the robotic system, ensuring it responds appropriately to its environment and executes a series of actions in line with the defined logic and conditions.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Condition ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <Action ID=\"FakeDetectionLevel1\" replanning_fake_input=\"{replanning_fake_input}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel1\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Condition ID=\"ReactiveLTLStateCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Action ID=\"FakeDetectionLevel3\" replanning_fake_input=\"{replanning_fake_input}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Switch4 case_1=\"move\" case_2=\"stay\" case_3=\"start_training\" case_4=\"terminate_training\" variable=\"{bt_action_type}\">\n                            <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                            <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"GuideAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"BackNormalAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <AlwaysFailure/>\n                        </Switch4>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"BackNormalAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"DropAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel1\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel2\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel3\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"GuideAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Condition>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Condition ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Condition>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"PickAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"ReactiveLTLStateCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Condition>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel1\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a complex decision-making process for controlling a robotic system. The tree consists of multiple actions and sequences that are repeated for a specified number of cycles. \n\nThe robot goes through a series of checks, including LTL (Linear Temporal Logic) state verification, locomotion status checks, and recovery procedures. It also handles replanning requests at different levels based on the current state and executed sequence.\n\nFurthermore, the robot performs various actions based on the type of behavior it needs to exhibit, such as moving, staying in place, or transitioning synchronously. These actions involve updating the LTL state, sending goals for movement, and managing the execution of action sequences.\n\nOverall, the behavior tree orchestrates the decision-making and control logic for the robot, ensuring it follows a predefined sequence of actions while handling contingencies and adapting to changing conditions.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Action ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <RetryUntilSuccesful num_attempts=\"3\">\n                            <Fallback>\n                                <Action ID=\"LocomotionStatusCheck\" locomotion_status=\"{locomotion_status}\"/>\n                                <Sequence>\n                                    <Action ID=\"RecoveryStand\" locomotion_status=\"{locomotion_status}\"/>\n                                    <Delay delay_msec=\"2000\">\n                                        <Action ID=\"LocomotionStart\" locomotion_status=\"{locomotion_status}\"/>\n                                    </Delay>\n                                </Sequence>\n                            </Fallback>\n                        </RetryUntilSuccesful>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel1\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Switch3 case_1=\"move\" case_2=\"stay\" case_3=\"synchronized_transition\" variable=\"{bt_action_type}\">\n                            <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                            <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"SynchronizedTransitionAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <AlwaysFailure/>\n                        </Switch3>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Action>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel1\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robotic system's actions and decision-making processes. It utilizes a complex sequence of actions and conditions to manage the robot's behavior. The tree structure includes multiple levels of fallbacks, reactive sequences, and repeating cycles.\n\nAt its core, the behavior tree orchestrates the execution of various actions such as moving, picking, dropping, and resetting based on input parameters and current states. It also incorporates condition checks, failure handling, and replanning requests at different levels.\n\nThe tree aims to ensure that the robot adheres to a desired sequence of states (ltl_state_desired_sequence) while reacting to environmental changes and fake inputs. Additionally, it manages locomotion status, updates the logical transition language (LTL) state, and handles synchronization of actions.\n\nOverall, the behavior tree serves as a comprehensive decision-making framework for the robotic system, enabling it to navigate through dynamic environments and perform tasks in accordance with specified logical sequences and reactive responses.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Condition ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <Action ID=\"FakeDetectionLevel1\" replanning_fake_input=\"{replanning_fake_input}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel1\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Condition ID=\"ReactiveLTLStateCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Action ID=\"FakeDetectionLevel3\" replanning_fake_input=\"{replanning_fake_input}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Switch5 case_1=\"move\" case_2=\"stay\" case_3=\"pick\" case_4=\"drop\" case_5=\"reset\" variable=\"{bt_action_type}\">\n                            <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                            <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"PickAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"DropActionNew\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"ResetAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <AlwaysFailure/>\n                        </Switch5>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"BackNormalAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"DropAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"DropActionNew\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel1\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel2\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"FakeDetectionLevel3\">\n            <input_port name=\"replanning_fake_input\"/>\n        </Action>\n        <Action ID=\"GuideAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Condition>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Condition ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Condition>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"PickAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"ReactiveLTLStateCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Condition>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel1\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ResetAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate with periodic global path replanning at a frequency of 1 Hz. It utilizes a PipelineSequence consisting of a SpeedController and FollowPath nodes. The SpeedController manages the robot's speed and rate of path replanning, while also computing the path to the goal using a GridBased planner. The FollowPath node ensures that the robot follows the computed path accurately. This setup allows the robot to continuously update its path while navigating towards the goal, ensuring adaptability to changing environments or obstacles.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically at 1 Hz.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <SpeedController min_rate=\"0.1\" max_rate=\"1.0\" min_speed=\"0.0\" max_speed=\"0.26\" filter_duration=\"0.3\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </SpeedController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to dynamically navigate to a specific pose while continuously replanning its path. The robot updates its goal pose and computes a path using the \"GridBased\" planner. The path is then truncated to a certain distance, ensuring that the robot only considers a portion of the path ahead. The robot follows this truncated path using a controller identified as \"FollowPath\" until it reaches the goal pose or encounters a failure.\n\nOverall, the behavior tree orchestrates the process of updating the goal pose, planning a path, truncating the path, and following the truncated path in a continuous loop at a rate of 1 Hz. This allows the robot to adapt to dynamic changes in the environment while navigating towards its goal pose.",
        "output": "<!--\n  This Behavior Tree follows a dynamic pose to a certain distance\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"1.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n         <TruncatePath distance=\"1.0\" input_path=\"{path}\" output_path=\"{truncated_path}\"/>\n        </Sequence>\n      </RateController>\n      <KeepRunningUntilFailure>\n        <FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\"/>\n      </KeepRunningUntilFailure>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a sequence of actions for a system to speak out a message. It begins by saying \"start thinking...\" and then proceeds to think about what to say, using the value of \"{the_answer}\". Subsequently, it vocalizes the thought by saying \"{the_answer}\". Additionally, it utilizes another action, \"SaySomething2\", to deliver the message \"SaySomething2 works too...\" before reiterating the previously thought answer using \"{the_answer}\".",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <SaySomething     message=\"start thinking...\" />\n           <ThinkWhatToSay   text=\"{the_answer}\"/>\n           <SaySomething     message=\"{the_answer}\" />\n           <SaySomething2    message=\"SaySomething2 works too...\" />\n           <SaySomething2    message=\"{the_answer}\" />\n       </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot's navigation and recovery process. It begins by checking if the initial pose of the robot is received, and if not, it attempts to automatically localize the robot using 'AutoLocalization.xml'. Once the initial pose is obtained, it proceeds with the recovery and navigation branch.\n\nIn the recovery branch, it checks if the robot is stuck, and if so, it initiates a sequence of actions to recover from being stuck, including stopping, backing up, and spinning.\n\nIn the navigation branch, it computes a path to the specified endpoints and then executes parallel navigation tasks - following the computed path and updating the path at a specific frequency. This allows the robot to navigate while continuously updating its path based on the environment.\n\nOverall, the behavior tree orchestrates the robot's localization, recovery from being stuck, and navigation towards specified endpoints, ensuring robust and adaptive movement in its environment.",
        "output": "<!--\n  This Behavior Tree first goes into a branch where it will check to see if the robot's initial\n  pose is given. If the initial pose is not given it trys to automatically localize the robot.\n  After finding the initial pose it will continue with the recovery and navigation branch.  The\n  AutoLocalization branch is based on 'AutoLocalization.xml' and the navigation branch is based on\n  `parallel_w_recovery.xml`.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"root\">\n      <FallbackStar name=\"AutoLocalization\">\n        <initialPoseReceived/>\n        <SequenceStar name=\"doSelfLocalization\">\n          <RetryUntilSuccesful num_attempts=\"5\" name=\"retry_client_request\">\n            <globalLocalizationServiceRequest/>\n         </RetryUntilSuccesful>\n         <RetryUntilSuccesful num_attempts=\"10\" name=\"retry_localization\">\n            <Sequence>\n              <Fallback>\n                <IsLocalized/>\n                <SequenceStar>\n                 <Spin/>\n                <BackUp/>\n                 <Spin/>\n              </SequenceStar>\n             </Fallback>\n             <IsLocalized/>\n            </Sequence> \n          </RetryUntilSuccesful>\n        </SequenceStar>\n      </FallbackStar>\n      <FallbackStar name=\"check_motion\">\n        <Inverter name=\"is_not_stuck\">\n          <IsStuck/>\n        </Inverter>\n        <SequenceStar name=\"stuck_recovery\">\n          <Stop/>\n          <BackUp/>\n          <Spin/>\n        </SequenceStar>\n      </FallbackStar>\n      <SequenceStar name=\"navigate\">\n        <ComputePathToPose endpoints=\"${endpoints}\" path=\"${path}\"/>\n        <ParallelNode threshold=\"1\">\n          <FollowPath path=\"${path}\"/>\n          <Sequence>\n            <RateController hz=\"2\">\n              <ComputePathToPose endpoints=\"${endpoints}\" path=\"${path}\"/>\n            </RateController>\n            <UpdatePath/>\n          </Sequence>\n        </ParallelNode>\n      </SequenceStar>\n    </Sequence>\n  </BehaviorTree>\n</root>\n\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to navigate through a series of waypoints using the NavigateToPose function. It follows a reactive fallback approach, where it continuously attempts to reach the next goal until all goals are achieved. If the navigation fails, it retries once and waits for 5 seconds before marking the goal as achieved and moving on to the next waypoint. The \"goal_achieved\" status is constantly monitored, and the robot proceeds to the next waypoint only when the current one is successfully reached. This behavior tree ensures that the robot persistently attempts to navigate through the given waypoints while handling recovery from navigation failures.",
        "output": "\n<!--\n  This Behavior Tree processes each of the given waypoints with NavigateToPose and wait if NavigateToPose is failed.\n-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <ReactiveFallback name=\"FollowWaypoints\">\n      <AllGoalsAchieved goal_achieved=\"{goal_achieved}\"/>\n      <KeepRunningUntilFailure>\n        <ReactiveSequence>\n          <GetNextGoal goals=\"{goals}\" goal=\"{goal}\" goal_achieved=\"{goal_achieved}\"/>\n          <RecoveryNode number_of_retries=\"1\">\n            <NavigateToPose goal=\"{goal}\"/>\n            <Wait wait_duration=\"5\"/>\n          </RecoveryNode>\n          <SetBlackboard output_key=\"goal_achieved\" value=\"true\"/>\n        </ReactiveSequence>\n      </KeepRunningUntilFailure>\n    </ReactiveFallback>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree instructs the robot to execute a sequence of spinning movements. The robot will spin at various angles (180, -180, -90, 90, and 360 degrees) with a velocity of 0.5. This sequence of spins is set to repeat once. In summary, the task involves the robot performing a series of predefined spinning movements in a specific order and then repeating this sequence once.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"1\">\n            <Sequence>\n                <RobotSpin angle=\"180\" velocity=\"0.5\"/>\n                <RobotSpin angle=\"-180\" velocity=\"0.5\"/>\n                <RobotSpin angle=\"-90\" velocity=\"0.5\"/>\n                <RobotSpin angle=\"90\" velocity=\"0.5\"/>\n                <RobotSpin angle=\"360\" velocity=\"0.5\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single sequence named \"root_sequence\" that contains a pick task. The pick task is likely responsible for making a choice between multiple options or actions based on certain conditions or criteria. However, without further details about the pick task and its parameters, it's challenging to provide a more specific summary.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <Pick  name=\"pick\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a series of actions for a robot. It begins by checking the status, then proceeds to open and close the gripper in sequence. After this, it initiates a verbal communication by saying something. The \"Check.xml\" and \"Talk.xml\" files are included in the main behavior tree.\n\nIn summary, the behavior tree controls the robot's actions, ensuring that it checks its status, manipulates the gripper, and engages in verbal communication.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\t\n    <include path=\"Check.xml\" />\n    <include path=\"subtrees/Talk.xml\" />\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <CheckStatus/>\n            <OpenGripper/>\n            <CloseGripper/>\n            <SayStuff/>\n        </Sequence>\n    </BehaviorTree>\n\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a task for controlling a turtle robot. The robot is programmed to repeat a sequence of movements indefinitely. In each cycle, it will move forward and then left, followed by backward and then right, each with a distance of 2 units. The \"ForceSuccess\" node ensures that the sequence is considered successful regardless of individual movement outcomes.\n\nThe \"Action\" node specifies the parameters for the turtle's movement, including direction (1 for forward/left, 0 for backward/right), distance, enable/disable movement, and velocity components.\n\nIn summary, the behavior tree orchestrates the continuous execution of a specific movement pattern for the turtle robot, providing the necessary control inputs to achieve the desired motion behavior.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"-1\">\n            <ForceSuccess>\n                <Sequence>\n                    <Action ID=\"Turtle\" direction=\"1\" distance=\"2\" enable=\"1\" vel_x=\"2\" vel_y=\"0\"/>\n                    <Action ID=\"Turtle\" direction=\"1\" distance=\"2\" enable=\"1\" vel_x=\"0\" vel_y=\"2\"/>\n                    <Action ID=\"Turtle\" direction=\"0\" distance=\"2\" enable=\"1\" vel_x=\"2\" vel_y=\"0\"/>\n                    <Action ID=\"Turtle\" direction=\"0\" distance=\"2\" enable=\"1\" vel_x=\"0\" vel_y=\"2\"/>\n                </Sequence>\n            </ForceSuccess>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"Turtle\">\n            <input_port default=\"1\" name=\"direction\">1 = forward / left 0; = backward / right</input_port>\n            <input_port default=\"0\" name=\"distance\"/>\n            <input_port default=\"1\" name=\"enable\">Enables Movement</input_port>\n            <input_port default=\"0\" name=\"vel_x\"/>\n            <input_port default=\"0\" name=\"vel_y\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a task for a robot to repeatedly move between two specified goals, Goal_a and Goal_b, for a total of three cycles. In each cycle, the robot first sets its goal to Goal_a and moves towards it using the Nav2Client. Then, it takes a snapshot using SnapshotClient. After that, it sets its goal to Goal_b and moves towards it again, followed by another snapshot.\n\nThis behavior is designed to simulate a scenario where the robot needs to perform a specific sequence of actions at different locations. The use of snapshots suggests that the robot may be capturing data or performing certain tasks at each location before moving on to the next one. The repetition of this sequence over three cycles indicates that these actions are meant to be performed multiple times, possibly as part of a larger operation or experiment.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"3\">\n            <Sequence>\n                <SetBlackboard output_key=\"Goal_a\" value=\"-0.579;-1.341;0.0;1.0\" />\n                <SetBlackboard output_key=\"Goal_b\" value=\"5.214;-1.533;0.0;1.0\" />\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                    <SnapshotClient/>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                    <SnapshotClient/>\n                </Sequence>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robot navigation system that utilizes a pipeline sequence to navigate with replanning. The robot is programmed to follow a specific distance and compute a path to a designated goal using the \"GridBased\" planner. Once the path is computed, the robot will then follow the generated path using the \"FollowPath\" controller. This behavior tree essentially orchestrates the process of robot navigation by breaking it down into sequential steps, ensuring smooth and efficient movement towards the specified goal while allowing for replanning as necessary.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <DistanceController distance=\"0.1\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </DistanceController>\n      <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to perform a specific set of movements. It starts by setting three different goals (Goal_a, Goal_b, Goal_c) and then repeats a sequence of moving the PTU (Pan-Tilt Unit) towards each goal twice. During each repetition, the robot will first move the PTU to Goal_a, then to Goal_b, and finally to Goal_c.\n\nThis behavior tree indicates that the robot is programmed to execute precise movements using the PTU to point towards specific coordinates. The repetitions suggest that the robot may be performing some form of scanning or surveillance activity, as it systematically points the PTU towards multiple predefined locations in a repeated manner.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <!-- <Sequence>\n            <SetBlackboard output_key=\"Goal_a\" value=\"1.6830;-0.1947;0.0\" />\n            <SetBlackboard output_key=\"Goal_b\" value=\"-0.4924;0.8746;-3.14\" />\n            <SetBlackboard output_key=\"Goal_c\" value=\"0.0;0.0;0.0\" />\n            <Repeat num_cycles=\"10\">\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                </Sequence>\n            </Repeat>                \n        </Sequence> -->\n        <Sequence>\n            <SetBlackboard output_key=\"Goal_a\" value=\"0.5;-0.2\" />\n            <SetBlackboard output_key=\"Goal_b\" value=\"-0.5;0.5\" />\n            <SetBlackboard output_key=\"Goal_c\" value=\"0.0;0.0\" />\n            \n            <Repeat num_cycles=\"2\">\n                <Sequence>\n                    <SubTree ID=\"Move_PTU\" target=\"Goal_a\" />\n                    <SubTree ID=\"Move_PTU\" target=\"Goal_b\" />\n                    <SubTree ID=\"Move_PTU\" target=\"Goal_c\" />\n                </Sequence>\n            </Repeat>                \n        </Sequence>\n    </BehaviorTree>\n\n    <!-- <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <MoveBase goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree> -->\n    <BehaviorTree ID=\"Move_PTU\">\n        <Sequence name=\"PointPTU\">\n            <MovePTU ptu_goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n    \n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates the actions of a robot, specifically for its arm movement. It begins by obtaining an array of poses and then selects a specific pose from the array. After selecting the pose, it commands the robot's arm to move to that position using Cartesian control.\n\nThe tree is designed to handle various tasks such as detecting blocks and faces, speaking, waiting for a specified duration, and moving the base. However, in this specific instance, it focuses on arm manipulation.\n\nOverall, the behavior tree aims to guide the robot through a sequence of actions related to arm movement, utilizing the provided poses to perform specific tasks. This could be part of a larger system where the robot interacts with its environment or performs designated actions based on received instructions.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Action pose_array=\"poses\" topic=\"poses\" ID=\"GetPoseArray\"/>\n            <Action pose_array=\"{poses}\" pose_stamped=\"pose\" position_in_list=\"0\" ID=\"SelectPose\"/>\n            <Action type=\"CARTESIAN\" action_name=\"/vizzy/right_arm_cartesian_controller/cartesian_action\" frame_id=\"base_footprint\" pose=\"{pose}\" ID=\"ArmCartesian\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\"/>\n            <input_port name=\"action_name\"/>\n        </Action>\n        <SubTree ID=\"ChargeST\"/>\n        <Action ID=\"CheckBattery\">\n            <output_port type=\"int\" name=\"battery_state\"/>\n            <output_port type=\"double\" name=\"percentage\"/>\n            <input_port type=\"std::string\" name=\"service_name\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port type=\"int\" name=\"charging_state\"/>\n            <input_port type=\"std::string\" name=\"service_name\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Action ID=\"DetectBlocks\">\n            <output_port type=\"social_cues::BlockList_&lt;std::allocator&lt;void> >\" name=\"block_list\"/>\n            <input_port type=\"std::string\" name=\"block_topic\"/>\n        </Action>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <SubTree ID=\"ErrorGameState\"/>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"GetInt16\">\n            <output_port name=\"number\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GetPoseArray\">\n            <output_port name=\"pose_array\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"goal_pose\"/>\n        </Action>\n        <Action ID=\"SelectBlock\">\n            <input_port type=\"social_cues::BlockList_&lt;std::allocator&lt;void> >\" name=\"block_list\"/>\n            <output_port type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void> >\" name=\"block_pose\"/>\n            <input_port type=\"std::string\" name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"SelectPose\">\n            <input_port name=\"pose_array\"/>\n            <output_port name=\"pose_stamped\"/>\n            <input_port name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port type=\"std::string\" name=\"action_name\"/>\n            <input_port type=\"std::string\" name=\"language\"/>\n            <input_port type=\"std::string\" name=\"utterance\"/>\n            <input_port type=\"std::string\" name=\"voice\"/>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port name=\"result\" default=\"SUCCESS\">Result after specified time: SUCCESS or FAILURE</input_port>\n            <input_port name=\"seconds\" default=\"5\">Time in seconds</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's movement towards three specified goals (Goal_a, Goal_b, and Goal_c). Initially, the robot is directed to move towards Goal_a, followed by Goal_b, and this sequence is repeated 10 times. However, if the robot receives the \"gohome\" event during this sequence, it will interrupt its current task. After completing or interrupting the sequence, the robot is then instructed to move towards Goal_c.\n\nTo achieve these movements, the behavior tree utilizes the \"MoveRobot\" subtree, which contains instructions for setting the goal location and initiating the robot's movement using the MoveBase function.\n\nOverall, the behavior tree outlines a sequential and repetitive task for the robot, with the ability to interrupt the sequence based on an external event, and ultimately guiding the robot to different specified locations.",
        "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SetBlackboard output_key=\"Goal_a\" value=\"-0.579;-1.341;0.0\" />\n            <SetBlackboard output_key=\"Goal_b\" value=\"5.214;-1.533;0.0\" />\n            <SetBlackboard output_key=\"Goal_c\" value=\"-1.588;1.253;0.0\" />\n            <Fallback>\n                <ReactiveSequence>\n                    <InterruptEvent event=\"gohome\"/>\n                    <Repeat num_cycles=\"10\">\n                        <Sequence>\n                            <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                            <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                        </Sequence>\n                    </Repeat>\n                </ReactiveSequence>\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                </Sequence>\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <MoveBase goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed for a robot to dynamically navigate to a specific location while continuously updating its path. The robot's movement is controlled by a pipeline sequence that includes a rate controller and a path following mechanism.\n\nFirst, the goal updater updates the robot's goal pose based on input and outputs an updated goal. Then, it computes a path to this updated goal using a grid-based planner. The rate controller ensures that this process occurs at a specified frequency.\n\nOnce the path is computed, the robot follows this path using a path-following controller. This process continues until the robot reaches its destination or encounters a failure.\n\nOverall, the behavior tree orchestrates the dynamic navigation of the robot by constantly updating its path towards the specified goal pose.",
        "output": "<!--\n  This Behavior Tree follows a dynamic pose to a certain distance\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <RateController hz=\"2.0\">\n        <Sequence>\n          <GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n            <ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n          </GoalUpdater>\n        </Sequence>\n      </RateController>\n      <KeepRunningUntilFailure>\n        <FollowPath path=\"{path}\" controller_id=\"FollowPath\"/>\n      </KeepRunningUntilFailure>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single sequence where the robot is instructed to move towards a specified goal. The goal is provided as an argument, allowing flexibility in directing the robot to different locations based on external input.",
        "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n       <Sequence name=\"root_sequence\">\n           <Move name=\"move\" goal=\"${arg2}\"/>\n       </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree is designed to control a robot's navigation while periodically replanning its global path based on its speed. The robot's speed is controlled within the range of 0.0 to 0.26, and the path planning frequency is adjusted proportionally to the robot's speed. The \"NavigateWithReplanning\" sequence includes a \"SpeedController\" that computes the path to the goal using a planner called \"GridBased\" and then follows the computed path using a \"FollowPath\" controller. This approach ensures that the robot can dynamically adjust its path planning frequency and follow the updated paths to reach its destination efficiently while considering its speed.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically proprortional to speed.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <SpeedController min_rate=\"0.1\" max_rate=\"1.0\" min_speed=\"0.0\" max_speed=\"0.26\" filter_duration=\"0.3\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </SpeedController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the task for a robot. Initially, it disables pose detection control and clears the global cost map for navigation. The robot is then directed to seek specific poses in a defined sequence. If the robot detects a person with high confidence, it sets a flag indicating success. Otherwise, it continues seeking the next pose, moving towards it, and performing various actions such as speaking and spinning. If the robot fails to find a person after all poses have been sought, it checks the flag and speaks accordingly. Finally, there is a sub-behavior tree \"MoveRobot\" that handles the navigation to specific targets.\n\nIn summary, the behavior tree orchestrates the robot's search for specific poses, interaction upon detecting a person, and appropriate responses if no person is found. It also manages the robot's movement using the \"MoveRobot\" sub-tree.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n      <PoseDetectionControlAction enable=\"false\" />\n\t\t\t<Nav2ClearGlobalCostMap />\n\t\t\t<RobotSeekInitAction search_poses=\"-4.3,-4,180.0;-4.7,-6.6,270.0;-6.0,-4.2,206.0\" />\n\t\t\t<!-- RobotSeekInitAction search_poses=\"-4.3,-4,180.0;0.75,-3.7,206.0;0.71,-6.0,206.0;-4.7,-6.6,270.0;-6.0,-4.2,206.0;-6.4,-1.9,0.0;-8.0,1.5,90.0;-4.4,0.95,218.0\"\n\t\t\t\t/ -->\n\t\t\t<!-- RobotSeekInitAction\n\t\t\t\tsearch_poses=\"-4.3,-4,180.0;-4.7,-6.6,270.0;-6.0,-4.2,206.0;-6.4,-1.9,0.0;-8.0,1.5,90.0;-4.4,0.95,218.0\" />\n\t\t\t<SetBlackboard output_key=\"found\" value=\"0\" / -->\n\t\t\t<Fallback>\n\t\t\t\t<KeepRunningUntilFailure>\n\t\t\t\t\t<ReactiveSequence>\n  \t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t<Inverter>\n\t\t\t\t\t\t\t  <ObjectDetectionAction class=\"person\" pose=\"detected_Pose\" min_confidence=\"0.95\" />\n\t\t\t\t\t\t\t\t<!-- HumanPoseDetect pose_lr_check=\"presence\" expected_pose_left=\"\" expected_pose_right=\"\"\n\t\t\t\t\t\t\t\t\tdetected_person=\"{detected_person}\" pose_left_speech=\"{pose_left_speech}\"\n\t\t\t\t\t\t\t\t\tpose_right_speech=\"{pose_right_speech}\" / -->\n\t\t\t\t\t\t\t</Inverter>\n\t\t\t\t\t\t\t<ForceFailure>\n\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"found\" value=\"1\" />\n\t\t\t\t\t\t\t</ForceFailure>\n\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t<RobotSeekNextSearchPose next_goal=\"{next_goal}\" goal_speech=\"{goal_speech}\" />\n\t\t\t\t\t\t\t<SubTree ID=\"MoveRobot\" target=\"next_goal\" />\n\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"{goal_speech}\" />\n\t\t\t\t\t\t\t<RobotSpin angle=\"359\" velocity=\"0.5\" />\n\t\t\t\t\t\t\t<TextToSpeechActionClient msg=\"I didn't see anyone.\" />\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t</ReactiveSequence>\n\t\t\t\t</KeepRunningUntilFailure>\n\t\t\t\t<Sequence>\n\t\t\t\t\t<BlackboardCheckInt value_A=\"{found}\" value_B=\"1\" return_on_mismatch=\"FAILURE\">\n\t\t\t\t\t\t<TextToSpeechActionClient msg=\"I found you!\" />\n\t\t\t\t\t</BlackboardCheckInt>\n\t\t\t\t</Sequence>\n\t\t\t</Fallback>\n\t\t</Sequence>\n\t</BehaviorTree>\n\n\t<BehaviorTree ID=\"MoveRobot\">\n\t\t<Sequence name=\"SetGoal\">\n\t\t\t<Nav2Client goal=\"{target}\" />\n\t\t</Sequence>\n\t</BehaviorTree>\n</root>\n\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree consists of a single action where the robot is instructed to move to a specific location. The \"SequenceStar\" node indicates that this action can be repeated multiple times in a non-linear order, allowing for flexibility in the robot's movement.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n\n    <BehaviorTree ID=\"BehaviorTree\">\n        <SequenceStar>\n            <Action ID=\"moverobot\" location=\"1\"/>\n        </SequenceStar>\n    </BehaviorTree>\n\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robotic system designed to continuously search for and navigate towards humans. The robot is programmed to repeat this process indefinitely. \n\nUpon initialization, the robot sets a server timeout and checks if it's the first run. It then attempts to find a human using various strategies, including rate-controlled searches, path planning, and recovery sequences. If a human is found, the robot navigates towards them while handling potential navigation failures through recovery actions such as clearing costmaps, spinning, and waiting.\n\nIf the robot fails to move to the last position or encounters errors during navigation, it triggers recovery mechanisms, updates its state, and resets certain parameters before retrying the navigation process. Additionally, the robot will keep attempting to find a human until successful, with intermittent delays and spins, and reset its internal state if unsuccessful.\n\nOverall, the behavior tree governs the continuous operation of a robot searching for and navigating towards humans, employing robust error handling and recovery strategies to ensure reliable performance.",
        "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n\t<!-- ////////// -->\n\t<BehaviorTree ID=\"BehaviorTree\">\n\t\t<Repeat num_cycles=\"9999999\">\n\t\t\t<Fallback>\n\t\t\t\t<Sequence>\n\t\t\t\t\t<SetBlackboard output_key=\"server_timeout\" value=\"10000\" />\n\t\t\t\t\t<IsFirstRun name=\"isFirstRun\" current_id=\"{current_id}\" found=\"{found}\" moved_flag=\"{moved_flag}\" got_initial_goal_output=\"{got_initial_goal_output}\" got_initial_goal_input=\"{got_initial_goal_output}\" />\n\t\t\t\t\t<FindHuman name=\"findHuman1\" server_timeout=\"10000\" current_id=\"{current_id}\" target_id=\"{current_id}\" got_initial_goal_output=\"{got_initial_goal_output}\" found=\"{found}\" goal=\"{goal}\" />\n\t\t\t\t</Sequence>\n\t\t\t\t<Sequence>\n\t\t\t\t\t<IsHumanFound name=\"isHumanFound1\" found=\"{found}\" />\n\t\t\t\t\t<PipelineSequence>\n\t\t\t\t\t\t<RateController hz=\"1.0\">\n\t\t\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t\t\t<FindHuman name=\"findHuman2\" server_timeout=\"10000\" current_id=\"{current_id}\" target_id=\"{current_id}\" got_initial_goal_output=\"{got_initial_goal_output}\" found=\"{found}\" goal=\"{goal}\" />\n\t\t\t\t\t\t\t\t<Delay delay_msec=\"200\">\n\t\t\t\t\t\t\t\t\t<FindHuman name=\"findHuman3\" server_timeout=\"10000\" current_id=\"{current_id}\" target_id=\"{current_id}\" got_initial_goal_output=\"{got_initial_goal_output}\" found=\"{found}\" goal=\"{goal}\" />\n\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t</Fallback>\n\t\t\t\t\t\t</RateController>\n\t\t\t\t\t\t<RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n\t\t\t\t\t\t\t<PipelineSequence name=\"NavigateWithReplanning\">\n\t\t\t\t\t\t\t\t<RateController hz=\"1.0\">\n\t\t\t\t\t\t\t\t\t<RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n\t\t\t\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t\t\t\t<GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n\t\t\t\t\t\t\t\t\t\t\t\t<ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\" />\n\t\t\t\t\t\t\t\t\t\t\t</GoalUpdater>\n\t\t\t\t\t\t\t\t\t\t\t<TruncatePath distance=\"1.6\" input_path=\"{path}\" output_path=\"{truncated_path}\" />\n\t\t\t\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t\t\t\t\t<ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\" />\n\t\t\t\t\t\t\t\t\t</RecoveryNode>\n\t\t\t\t\t\t\t\t</RateController>\n\t\t\t\t\t\t\t\t<RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n\t\t\t\t\t\t\t\t\t<FollowPath path=\"{truncated_path}\" controller_id=\"FollowPath\" />\n\t\t\t\t\t\t\t\t\t<ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\" />\n\t\t\t\t\t\t\t\t</RecoveryNode>\n\t\t\t\t\t\t\t</PipelineSequence>\n\t\t\t\t\t\t\t<ReactiveFallback name=\"RecoveryFallback\">\n\t\t\t\t\t\t\t\t<GoalUpdated />\n\t\t\t\t\t\t\t\t<SequenceStar name=\"RecoveryActions\">\n\t\t\t\t\t\t\t\t\t<ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\" />\n\t\t\t\t\t\t\t\t\t<ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\" />\n\t\t\t\t\t\t\t\t\t<Spin spin_dist=\"3.14\" />\n\t\t\t\t\t\t\t\t\t<Wait wait_duration=\"5\" />\n\t\t\t\t\t\t\t\t</SequenceStar>\n\t\t\t\t\t\t\t</ReactiveFallback>\n\t\t\t\t\t\t</RecoveryNode>\n\t\t\t\t\t</PipelineSequence>\n\t\t\t\t</Sequence>\n\t\t\t\t<Sequence>\n\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t<HasMoved name=\"hasMovedToLastPosition\" moved_flag=\"{moved_flag}\" />\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t<RecoveryNode number_of_retries=\"6\" name=\"NavigateRecovery\">\n\t\t\t\t\t\t\t\t<PipelineSequence name=\"NavigateWithReplanning\">\n\t\t\t\t\t\t\t\t\t<RateController hz=\"1.0\">\n\t\t\t\t\t\t\t\t\t\t<RecoveryNode number_of_retries=\"1\" name=\"ComputePathToPose\">\n\t\t\t\t\t\t\t\t\t\t\t<GoalUpdater input_goal=\"{goal}\" output_goal=\"{updated_goal}\">\n\t\t\t\t\t\t\t\t\t\t\t\t<ComputePathToPose goal=\"{updated_goal}\" path=\"{path}\" planner_id=\"GridBased\" />\n\t\t\t\t\t\t\t\t\t\t\t</GoalUpdater>\n\t\t\t\t\t\t\t\t\t\t\t<ClearEntireCostmap name=\"ClearGlobalCostmap-Context\" service_name=\"global_costmap/clear_entirely_global_costmap\" />\n\t\t\t\t\t\t\t\t\t\t</RecoveryNode>\n\t\t\t\t\t\t\t\t\t</RateController>\n\t\t\t\t\t\t\t\t\t<RecoveryNode number_of_retries=\"1\" name=\"FollowPath\">\n\t\t\t\t\t\t\t\t\t\t<FollowPath path=\"{path}\" controller_id=\"FollowPath\" />\n\t\t\t\t\t\t\t\t\t\t<ClearEntireCostmap name=\"ClearLocalCostmap-Context\" service_name=\"local_costmap/clear_entirely_local_costmap\" />\n\t\t\t\t\t\t\t\t\t</RecoveryNode>\n\t\t\t\t\t\t\t\t</PipelineSequence>\n\t\t\t\t\t\t\t\t<ReactiveFallback name=\"RecoveryFallback\">\n\t\t\t\t\t\t\t\t\t<GoalUpdated />\n\t\t\t\t\t\t\t\t\t<SequenceStar name=\"RecoveryActions\">\n\t\t\t\t\t\t\t\t\t\t<ClearEntireCostmap name=\"ClearLocalCostmap-Subtree\" service_name=\"local_costmap/clear_entirely_local_costmap\" />\n\t\t\t\t\t\t\t\t\t\t<ClearEntireCostmap name=\"ClearGlobalCostmap-Subtree\" service_name=\"global_costmap/clear_entirely_global_costmap\" />\n\t\t\t\t\t\t\t\t\t\t<Spin spin_dist=\"3.14\" />\n\t\t\t\t\t\t\t\t\t\t<Wait wait_duration=\"5\" />\n\t\t\t\t\t\t\t\t\t</SequenceStar>\n\t\t\t\t\t\t\t\t</ReactiveFallback>\n\t\t\t\t\t\t\t</RecoveryNode>\n\t\t\t\t\t\t\t<SetBlackboard output_key=\"moved_flag\" value=\"true\" />\n\t\t\t\t\t\t\t<ResetKalman name=\"resetKalman\" server_timeout=\"10000\" />\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t</Fallback>\n\t\t\t\t\t<Fallback>\n\t\t\t\t\t\t<RetryUntilSuccesful num_attempts=\"20\">\n\t\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t\t<Delay delay_msec=\"300\">\n\t\t\t\t\t\t\t\t\t<Spin spin_dist=\"0.5\" />\n\t\t\t\t\t\t\t\t</Delay>\n\t\t\t\t\t\t\t\t<FindHuman name=\"findHuman4\" server_timeout=\"10000\" current_id=\"{current_id}\" target_id=\"{current_id}\" got_initial_goal_output=\"{got_initial_goal_output}\" found=\"{found}\" goal=\"{goal}\" />\n\t\t\t\t\t\t\t\t<SetBlackboard output_key=\"moved_flag\" value=\"false\" />\n\t\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t\t</RetryUntilSuccesful>\n\t\t\t\t\t\t<Sequence>\n\t\t\t\t\t\t\t<SetBlackboard output_key=\"got_initial_goal_output\" value=\"false\" />\n\t\t\t\t\t\t\t<SetBlackboard output_key=\"current_id\" value=\"-1\" />\n\t\t\t\t\t\t</Sequence>\n\t\t\t\t\t</Fallback>\n\t\t\t\t</Sequence>\n\t\t\t</Fallback>\n\t\t</Repeat>\n\t</BehaviorTree>\n\t<!-- ////////// -->\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree orchestrates a robot's navigation with periodic global path replanning based on its speed. It utilizes a pipeline sequence that involves a speed controller and a path following component. The speed controller adjusts the frequency of global path replanning in proportion to the robot's speed, ensuring smoother navigation at varying speeds. The ComputePathToPose task calculates the path to the specified goal using the GridBased planner, and the resulting path is then followed by the robot using the FollowPath task. This approach enables the robot to dynamically adjust its navigation strategy based on its current speed, enhancing its ability to navigate through the environment effectively while considering its velocity constraints.",
        "output": "<!--\n  This Behavior Tree replans the global path periodically proprortional to speed.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <SpeedController min_rate=\"0.1\" max_rate=\"1.0\" min_speed=\"0.0\" max_speed=\"0.26\" filter_duration=\"0.3\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </SpeedController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree represents a robotic system that continuously repeats the pursuit of goals. The robot is programmed to either place an item if it is holding one or pick up an item if it sees one. This process is repeated indefinitely. Additionally, there is an initialization step represented by the \"Init\" behavior tree, which involves printing \"Initialize\". The system also includes various actions and conditions such as AlwaysRunning, HoldingItem, SeeItem, Pick, Place, and Print.\n\nIn summary, the behavior tree outlines a continuous loop where the robot performs tasks based on certain conditions - placing an item if already holding one and picking up an item if it sees one. It also includes an initialization step.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"-1\">\n            <Fallback name=\"Pursue Goals\">\n                <Sequence name=\"Place Item\">\n                    <Condition ID=\"HoldingItem\" name=\"Holding an Item\"/>\n                    <Action ID=\"Place\" name=\"Place it\"/>\n                </Sequence>\n                <Sequence name=\"Remove Item\">\n                    <Condition ID=\"SeeItem\" name=\"See an Item\"/>\n                    <Action ID=\"Pick\" name=\"Pick it up\"/>\n                </Sequence>\n            </Fallback>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"Init\">\n        <Action ID=\"Print\" message=\"Initialize\"/>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"AlwaysRunning\"/>\n        <Condition ID=\"HoldingItem\"/>\n        <SubTree ID=\"Init\"/>\n        <Action ID=\"Pick\"/>\n        <Action ID=\"Place\"/>\n        <Action ID=\"Print\">\n            <input_port name=\"message\"/>\n        </Action>\n        <Condition ID=\"SeeItem\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines a series of tasks for a robotic system. The main task involves the robot executing a sequence of actions, including resetting its components, picking up purple atoms, emptying a left barrel, and taking chaos. Each of these tasks is further broken down into subtasks, such as moving to specific positions, adjusting orientations, picking up items, and performing U-turns. Additionally, there are global subtrees for common actions like resetting components and handling barrels on both the left and right sides.\n\nThe \"PickAllPurpleAtoms\" subtree involves a complex sequence of movements to pick up multiple atoms from different positions and then perform a U-turn before proceeding. Similarly, the \"EmptyBarrelLeft\" subtree details the process of emptying a barrel by pushing items out at various positions.\n\nOverall, the behavior tree orchestrates a series of intricate robotic actions, encompassing precise movements, object manipulation, and navigation to accomplish the specified tasks efficiently.",
        "output": "<root main_tree_to_execute=\"MainTree\">\n\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root\">\n            <SubTree ID=\"ResetAX12\"/>\n\n            <SubTree ID=\"PickAllPurpleAtoms\"/>\n            <SubTree ID=\"EmptyBarrelLeft\"/>\n            <SubTree ID=\"TakeChaos\"/>\n\n        </Sequence>\n    </BehaviorTree>\n\n    <!--    Global subtrees-->\n\n    <BehaviorTree ID=\"ResetAX12\">\n        <Sequence>\n            <MoveArmFront name=\"move arm to the back\"\n                          pos=\"950\"/>\n            <TurnArm name=\"turn arm to the center\"\n                     pos=\"510\"/>\n            <PushLeftAtom name=\"move arm to the back\"\n                          pos=\"1000\"/>\n            <PushRightAtom name=\"move arm to the back\"\n                           pos=\"580\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"PickAllPurpleAtoms\">\n        <Sequence>\n            <!-- Move to atoms and adjust-->\n            <MoveAhead name=\"move ahead\"\n                       distance=\"652\"/>\n            <Turn name=\"turn to the left (to be backwards)\"\n                  angle=\"-90\"/>\n            <MoveAhead name=\"move ahead\"\n                       distance=\"-145\"/>\n            <Turn name=\"adjust\"\n                  angle=\"-1\"/>\n\n            <!-- Pick up atoms-->\n\n            <!--<SubTree ID=\"PickAtomRight\"/> shitty pos -->\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"-100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"9535\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"-100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"19070\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"-100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"28605\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"-100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"38140\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"-100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"47675\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"720\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"57230\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <!-- Move forward to do a U-turn, then go back to drop the atoms -->\n\n            <Turn name=\"u turn\"\n                  angle=\"182\"/>\n            <MoveAhead name=\"move ahead\"\n                       distance=\"1020\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"PickAllYellowAtoms\">\n        <Sequence>\n            <!-- Move to atoms and adjust-->\n            <MoveAhead name=\"move ahead\"\n                       distance=\"634\"/>\n            <Turn name=\"turn to the left\"\n                  angle=\"-90\"/>\n            <MoveAhead name=\"move ahead\"\n                       distance=\"255\"/>\n            <Turn name=\"adjust\" angle=\"-1\"/>\n\n            <!-- Pick up atoms -->\n            <!--<SubTree ID=\"PickAtomRight\"/> shitty pos -->\n\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"9535\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"19070\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"28605\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"38140\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <MoveAhead name=\"move ahead\" distance=\"100\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"47675\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n\n            <SubTree ID=\"PickAtomRight\"/>\n            <Parallel threshold=\"2\">\n                <!-- Move to balance -->\n                <MoveAhead name=\"move ahead\" distance=\"200\"/>\n                <Sequence name=\"para\">\n                    <SetBlackboard output_key=\"barrelGoalPosition\" value=\"57210\"/>\n                    <SubTree ID=\"TurnBarrel\" barrelGoalPosition=\"barrelGoalPosition\"/>\n                </Sequence>\n            </Parallel>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"EmptyBarrelLeft\">\n        <Sequence>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"58360\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushLeft\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"67895\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushLeft\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"77480\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushLeft\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"87155\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushLeft\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"96690\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushLeft\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"106320\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushLeft\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"EmptyBarrelRight\">\n        <Sequence>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"65460\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushRight\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"74845\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushRight\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"84380\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushRight\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"93915\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushRight\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"103450\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushRight\"/>\n            <SetBlackboard output_key=\"barrelGoalPosition\" value=\"112985*\"/>\n            <SubTree ID=\"TurnBarrel\"\n                     barrelGoalPosition=\"barrelGoalPosition\"/>\n            <SubTree ID=\"PushRight\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <!--    Basic subtrees-->\n\n    <BehaviorTree ID=\"PickAtomLeft\">\n        <!--   NOT UP TO DATE   -->\n\n        <Sequence>\n            <Wait delay=\"1000\"/>\n            <!--            <MoveArmFront name=\"move arm to the back\"-->\n            <!--                          pos=\"800\"-->\n            <!--            />-->\n            <!--            <MoveArmSideJoint name=\"move arm to the center (joint mode)\"-->\n            <!--                              pos=\"1023\"-->\n            <!--            />-->\n            <!--            <TurnArm name=\"turn arm to the left\"-->\n            <!--                     pos=\"200\"-->\n            <!--            />-->\n\n            <!--            <MoveArmSideJoint name=\"move arm to the left (new joint mode)\"-->\n            <!--                              pos=\"250\"-->\n            <!--            />-->\n\n            <!--            <ActivatePump/>-->\n            <!--            <Wait name=\"wait for the atom to be stuck\"-->\n            <!--                  delay=\"1000\"/>-->\n\n            <!--            <MoveArmSideJoint name=\"move arm back to the center (joint mode)\"-->\n            <!--                              pos=\"1023\"-->\n            <!--            />-->\n\n            <!--            <TurnArm name=\"turn arm to the center\"-->\n            <!--                     pos=\"510\"-->\n            <!--            />-->\n            <!--            <MoveArmFront name=\"move arm to the front\"-->\n            <!--                          pos=\"200\"-->\n            <!--            />-->\n\n            <!--            <DeactivatePump/>-->\n            <!--            <Wait name=\"wait for the atom to fall\"-->\n            <!--                  delay=\"500\"/>-->\n\n            <!--            <MoveArmFront name=\"move arm to the back\"-->\n            <!--                          pos=\"500\"-->\n            <!--            />-->\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"PickAtomRight\">\n        <Sequence>\n            <MoveArmFront name=\"move arm to the back\" pos=\"950\"/>\n\n            <MoveArmSideJoint name=\"move arm to the center (joint mode)\" pos=\"235\"/>\n            <TurnArm name=\"turn arm to the right\" pos=\"820\"/>\n\n            <MoveArmSideJoint name=\"move arm to the right (joint mode)\" pos=\"1023\"/>\n\n            <!--<ActivatePump/>-->\n            <Wait name=\"wait for the atom to be stuck\" delay=\"1500\"/> <!-- 500 -->\n\n            <MoveArmSideJoint name=\"move arm back to the center (joint mode)\" pos=\"235\"/>\n\n            <TurnArm name=\"turn arm to the center\"\n                     pos=\"510\"/>\n            <MoveArmFront name=\"move arm to the front\" pos=\"460\"/>\n\n            <!--<DeactivatePump/>-->\n            <Wait name=\"wait for the atom to fall\" delay=\"1000\"/>\n\n            <MoveArmFront name=\"move arm to the back\" pos=\"950\"/>\n\n            <Wait name=\"wait for the atom to fall\" delay=\"500\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"TurnBarrel\">\n        <Sequence>\n            <ActivateBarrel name=\"start turning the barrel\"/>\n            <RetryUntilSuccesful num_attempts=\"10000000\">\n                <IsBarrelMoveFinished name=\"check if the barrel has turned enough\"\n                                      goalPosition=\"{barrelGoalPosition}\"/>\n            </RetryUntilSuccesful>\n            <DeactivateBarrel name=\"stop turning the barrel\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"PushLeft\">\n        <Sequence>\n            <PushLeftAtom name=\"push it\" pos=\"530\"/>\n            <!--<Wait name=\"visual\" delay=\"2000\"/>-->\n            <PushLeftAtom name=\"come back\" pos=\"1000\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"PushRight\">\n        <Sequence>\n            <!--<Wait name=\"visual\" delay=\"2000\"/>-->\n            <PushRightAtom name=\"push it\" pos=\"1023\"/>\n            <PushRightAtom name=\"come back\" pos=\"580\"/>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"TakeChaos\">\n        <Sequence>\n            <!--<MoveAhead name=\"move ahead\" distance=\"652\"/>\n            <Turn name=\"turn to the left (to be backwards)\" angle=\"-90\"/>\n            <MoveAhead name=\"move ahead\" distance=\"-145\"/>\n            <Turn name=\"adjust\" angle=\"-1\"/>\n            <MoveAhead name=\"move ahead\" distance=\"-500\"/>\n            <MoveAhead name=\"move ahead\" distance=\"720\"/>\n            <Turn name=\"u turn\" angle=\"182\"/>\n            <MoveAhead name=\"move ahead\" distance=\"1020\"/>-->\n\n            <Turn name=\"towards chaos\" angle=\"30\"/>\n            <MoveAhead name=\"move ahead\" distance=\"30\"/>\n            <Turn name=\"towards chaos\" angle=\"22\"/>\n            <MoveAhead name=\"move ahead\" distance=\"500\"/>\n            <Turn name=\"towards chaos\" angle=\"133\"/>\n            <MoveAhead name=\"move ahead\" distance=\"1200\"/>\n\n        </Sequence>\n    </BehaviorTree>\n</root>\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the actions for a robot's navigation and localization. The robot is programmed to perform a sequence of movements, including setting its initial pose, activating localization, and navigating to specific positions. It also includes actions such as triggering global localization, loading maps, approaching locations, orienting the robot, and joystick navigation.\n\nThe SequenceStar indicates that the robot will execute the specified movements in a sequential manner, but it allows for flexibility by not requiring all actions to be completed before moving on to the next one. This means that some actions can be skipped or interrupted based on certain conditions.\n\nOverall, the behavior tree orchestrates the robot's navigation and localization tasks, allowing it to move to predefined positions, interact with the environment, and manage its localization and mapping processes.",
        "output": "<root main_tree_to_execute=\"BehaviorTree\">\n  <BehaviorTree ID=\"BehaviorTree\">\n    <SequenceStar>\n      <!--\t    \n      <initNavigation />\n      <getBasePose x=\"{x_}\" y=\"{y_}\" yaw=\"{yaw_}\" />        \n      <triggerGlobalLocalization />\n      <setRobotPose x=\"0\" y=\"0\" yaw=\"0\" />\n      <activateLocalization />\n      <startReactiveNavigation />\n      <stopReactiveNavigation />\n      <moveRoboterPosition x=\"1000\" y=\"0\" approachRadius=\"50\"/>\n      <moveRoboterPosition x=\"1100\" y=\"0\" approachRadius=\"50\"/>\n      <moveRoboterPosition x=\"1200\" y=\"0\" approachRadius=\"50\"/>\n      !-->\n      <moveRoboterPosition x=\"-2100\" y=\"0\" approachRadius=\"50\"/>\n      <!--\t   \n      <getBaseCharging charging=\"{charging_}\"/> \n      <peoplerecognition />            \n      <moveRoboterPosition x=\"1000\" y=\"2000\" approachRadius=\"10\"/>            \n      <loadNavigationMap mapname=\"navigation-map\" />\n      <approachLocation locationId=\"1\"/>\n      <loadMap mapname=\"localization-map\" />                        \n      <moveRoboterBackwardsLocation locationID=\"1\"/>\n      <moveRoboterBackwardsRelative dist=\"500\"/>\n      <moveRoboterOrientateRobotAbs angleDeg=\"1\"/>\n      <moveRoboterOrientateRobotRel angleDeg=\"2\"/>\n      <approachLocation locationId=\"4\"/>\n      <approachLocation locationId=\"1\"/>\n      <approachWall />\n      <startJoystickNavigation />\n      <stopJoystickNavigation />\n      <deactivateLocalization />\n    !-->\n    </SequenceStar>\n  </BehaviorTree>\n\n  <TreeNodesModel>\n    <Action ID=\"initNavigation\"/>\n    <Action ID=\"loadNavigationMap\">\n      <input_port default=\"navigation-map\" name=\"mapname\"/>\n    </Action>\n    <Action ID=\"loadMap\"/>\n    <Action ID=\"triggerGlobalLocalization\"/>\n    <Action ID=\"setRobotPose\">\n      <input_port default=\"0\" name=\"x\"/>\n      <input_port default=\"0\" name=\"y\"/>\n      <input_port default=\"0\" name=\"yaw\"/>\n    </Action>\n    <Action ID=\"activateLocalization\"/>\n    <Action ID=\"startReactiveNavigation\"/>\n    <Action ID=\"stopReactiveNavigation\"/>\n    <Action ID=\"moveRoboterPosition\">\n      <input_port default=\"0\" name=\"x\"/>\n      <input_port default=\"0\" name=\"y\"/>\n      <input_port default=\"50\" name=\"approachRadius\"/>\n    </Action>\n    <Action ID=\"approachLocation\">\n      <input_port default=\"1\" name=\"locationId\"/>\n    </Action>\n    <Action ID=\"moveRoboterBackwardsLocation\"/>\n    <Action ID=\"moveRoboterBackwardsRelative\"/>\n    <Action ID=\"moveRoboterOrientateRobotAbs\"/>\n    <Action ID=\"moveRoboterOrientateRobotRel\"/>\n    <Action ID=\"approachWall\"/>\n    <Action ID=\"startJoystickNavigation\"/>\n    <Action ID=\"stopJoystickNavigation\"/>\n    <Action ID=\"deactivateLocalization\"/>\n    <Action ID=\"peoplerecognition\"/>\n    <Action ID=\"getPersonPose\">\n      <output_port default=\"{x_}\" name=\"x\"/>\n      <output_port default=\"{y_}\" name=\"y\"/>\n      <output_port default=\"{yaw_}\" name=\"yaw\"/>\n    </Action>\n    <Action ID=\"getBaseCharging\">\n      <output_port default=\"{charging}\" name=\"charging\"/>\n    </Action>\n    <Action ID=\"VariationAction\">\n      <input_port default=\"{value}\" name=\"value\"/>\n      <input_port default=\"{key}\" name=\"key\"/>\n    </Action>\n  </TreeNodesModel>\n\n</root>\n\n"
    },
    {
        "instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.",
        "input": "The behavior tree outlines the decision-making process for a character in a game when under attack. The character has various responses based on its current state.\n\nWhen under attack, the character first checks if it has ammo. If not, it will prioritize finding ammo before fighting back. If it has ammo, it will assess its health status. If the character's health is low, it will attempt to dodge and fight back. If not, it will proceed with tracking and attacking the enemy.\n\nIf the character is not under direct attack, it will focus on tracking and attacking any visible enemies. However, if the character's health is low, it will prioritize dodging and then engage in combat.\n\nOverall, the behavior tree ensures that the character responds appropriately to different scenarios, considering factors such as ammo availability, health status, and enemy visibility.",
        "output": " <root main_tree_to_execute = \"MainTree\" >\n     <BehaviorTree ID=\"MainTree\">\n        <Fallback name=\"root_sequence\">\n            \n            <Fallback name=\"when under attack\">\n                <Fallback name=\"when under attack\">\n                    \n                    <NoAmmo name=\"no_ammo\"/>\n\n                    <Sequence name=\"fight_back\">\n                        <LowHP name=\"low_hp\"/>\n                        <Dodge name=\"dodge\"/>\n                    </Sequence>\n                    \n                </Fallback>\n\n                    <UnderAttack name=\"under_attack\"/>\n                    <Dodge name=\"dodge\"/>\n            </Fallback>\n\n            <Sequence name=\"fight_back\">\n                <LowHP name=\"low_hp\"/>\n                <Dodge name=\"dodge\"/>\n                <Track name=\"track\"/>\n                <Attack name=\"attack\"/>\n            </Sequence>\n\n                <LowHP name=\"low_hp\"/>\n                <Track name=\"track\"/>\n                <Attack name=\"attack\"/>\n            \n\n            <Sequence name=\"fight_back\">\n                <LowHP name=\"low_hp\"/>\n                <EnamyVisable name=\"enamy_visable\"/>\n                <Track name=\"track\"/>\n                <Attack name=\"attack\"/>\n            </Sequence>\n\n            <Sequence name=\"fight\">\n                <EnamyVisable name=\"enamy_visable\"/>\n                <Track name=\"track\"/>\n                <Attack name=\"attack\"/>\n            </Sequence>\n\n        </Fallback>\n     </BehaviorTree>\n </root>\n "
    }
]